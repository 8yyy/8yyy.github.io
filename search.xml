<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于虚拟机获取静态ip和动态ip遇到的问题与暂时的解决方法</title>
      <link href="/2023/02/01/Centos-IP/"/>
      <url>/2023/02/01/Centos-IP/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>起因是linux中的ip每隔一定时间会更换一次（例如2小时），也就意味着远程操作，如FinalShell或者Datagrip连接的时候经常需要更换ip，是不是感觉会有些麻烦。</p><h2 id="DHCP-和-NAT"><a href="#DHCP-和-NAT" class="headerlink" title="DHCP 和 NAT"></a>DHCP 和 NAT</h2><p>转自：<a href="https://www.51cto.com/article/223440.html">https://www.51cto.com/article/223440.html</a></p><p>在网络协议中,DHCP和NAT的使用非常普遍。那么对于这两个协议你是否有所掌握呢？这里我们针对这两方面来进行一下具体的介绍。首先让我们看看什么是DHCP，什么是NAT，之后再来将两者进行一下对比。</p><p><strong>1. DHCP</strong></p><p>DHCP 是 Dynamic Host Configuration Protocol(动态主机分配协议)缩写, 它分为两个部份:一个是服务器端,而另一个是客户端｡所有的 IP 网络设定数据都由 DHCP 服务器集中管理,并负责处理客户端的 DHCP 要求;而客户端则会使用从服务器分配下来的IP环境数据｡</p><p>它有一个租用地址的时期.就相当于我有很多的地址.假入你需要的话.我就借给你用几天.在一定的时期之内(指租用期限已到)你就会把地址还我.DHCP服务器.他有一个IP地址池.如果哪个计算机先来申请的话.他就从IP 地址池中捞一个起来.借给你用.你用完了.就还给我.</p><p><strong>2. NAT</strong></p><p>NAT 是 网络地址转换(Network Address Translation) 的缩写｡ NAT 和 IP 伪装是完全一样的概念｡ 由 IPF 的 NAT 提供的一项功能是, 将防火墙后的本地局域网 (LAN) 共享一个 ISP 提供的 IP 地址来接入 Internet 公网｡NAT 会自动地将每一台 PC 在内网的 LAN IP 地址, 在离开防火墙时转换为公网的 IP 地址｡ 此外,当数据包返回时, 也将进行逆向的转换｡在 IP 地址空间中, 有一些特殊的范围是保留供经过 NAT 的内网 LAN IP 地址使用的｡ 根据 RFC 1918, 您可以使用下面这些IP 范围用于内网, 它们不会在 Internet 公网上路由:<br>起始 IP 10.0.0.0 - 结束 IP 10.255.255.255<br>起始 IP 172.16.0.0 - 结束 IP 172.31.255.255<br>起始 IP 192.168.0.0 - 结束 IP 192.168.255.255</p><p><strong>3. 比较</strong></p><p>DHCP.他只是动态的IP分配.没有将什么私有转换为公有地址.</p><p>一个形象的例子:</p><p>NAT用来将你的公司内部地址转换成internet可以识别的地址,这样你公司内部的计算机才可以浏览Internet. 通常你购买ISP提供的internet线路后,ISP会给你几个公网IP,但你的公司有上百,上千的计算机,那怎么办呢?</p><p>此时使用NAT进行地址转换,假设你设置73.12.36.81为你公司访问internet的公网地址,当你内部计算机要访问internet时,NAT会将他们的内部地址映射到73.12.36.81的某个端口上,例如:73.12.36.81:9999,这样就实现了N多计算机使用同一公网IP上网的功能｡如果你不设置NAT,那内网IP在公网是无法识别的,也就无法上网｡</p><p>DHCP是用来动态分配IP地址的,windows客户端默认使用DHCP获的内网IP地址,建立DHCP后它们就可以自动得到IP地址来进行网络访问了,如果不用DHCP,计算机多的话,一台一台设置,那是个没人愿意干的事｡DHCP让你的内部客户端可以快速的得到自己的IP地址,NAT可以让这些IP来访问internet.</p><h2 id="尝试解决，使用静态IP"><a href="#尝试解决，使用静态IP" class="headerlink" title="尝试解决，使用静态IP"></a>尝试解决，使用静态IP</h2><p>然后我就找到了这篇文章：</p><p><a href="https://blog.csdn.net/dengxw00/article/details/128551924">https://blog.csdn.net/dengxw00/article/details/128551924</a></p><p>成功修改成了静态IP，主机与虚拟机之间网络能够正常ping通，虚拟机防火墙也已经关了，虚拟机里的SSH服务也是正常开启的。</p><p>但是出现了如下问题：</p><p><img src="/images/Centos-IP/image-20230201160226191.png"></p><p>java.net.ConnectException: Connection refused: connect。</p><p>网上找了一堆资料，基本都是说SSH服务和防火墙的问题等等，都无法解决我的问题。</p><pre class="line-numbers language-none"><code class="language-none">systemctl status sshd.service #查看ssh服务状态systemctl restart sshd.service #重启ssh服务systemctl start sshd.service #开启ssh服务systemctl enable sshd.service #设置ssh服务开机自启<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>改好后保存退出，重启网卡：</p><pre class="line-numbers language-none"><code class="language-none">systemctl restart network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑ifcfgens33</p><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>centos7 开启ssh 服务</p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/Centos-IP/image-20230201160459905.png"></p><p>去掉之前的#</p><p>防火墙</p><pre class="line-numbers language-none"><code class="language-none">设置开机启用防火墙：systemctl enable firewalld.service设置开机禁用防火墙：systemctl disable firewalld.service启动防火墙：systemctl start firewalld关闭防火墙：systemctl stop firewalld检查防火墙状态：systemctl status firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总之搞了2天都没用，然后我尝试回到原来的动态IP，就又可以正常连接的。</p><h2 id="临时解决方法"><a href="#临时解决方法" class="headerlink" title="临时解决方法"></a>临时解决方法</h2><p>点击虚拟机左上角 编辑 –》虚拟网络编辑器 –》 VMnet8 –》DHCP 设置</p><p>将最长租用时间设置为63天。</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NAT </tag>
            
            <tag> DHCP - FianlShell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑马MySQL学习笔记(二)进阶篇</title>
      <link href="/2023/01/30/hmmysql2/"/>
      <url>/2023/01/30/hmmysql2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-存储引擎"><a href="#1-存储引擎" class="headerlink" title="1. 存储引擎"></a>1. 存储引擎</h2><h3 id="MySQL体系结构"><a href="#MySQL体系结构" class="headerlink" title="MySQL体系结构"></a>MySQL体系结构</h3><p><img src="/images/hmmysql2/image-20230130141747136.png" alt="MySQL体系结构"></p><p>MySQL体系结构主要分为四层，不同存储引擎索引结构不一样。</p><ul><li>连接层</li></ul><p>最上层是一些客户端和链接服务，主要完成一些类似于连接处理、授权认证、及相关的安全方案。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</p><ul><li>服务层</li></ul><p>第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SOL的分析和优化，部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如 过程、函数等。</p><ul><li>引擎层</li></ul><p>存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通信。不同的存储引擎具有不同的功能，这样我们可以根据自己的需要，来选取合适的存储引擎。</p><ul><li>存储层</li></ul><p>主要是将数据存储在文件系统之上，并完成与存储引擎的交互。</p><h3 id="存储引擎简介"><a href="#存储引擎简介" class="headerlink" title="存储引擎简介"></a>存储引擎简介</h3><p>存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。<strong>存储引擎是基于表而不是基于库的</strong>，所以存储引擎也可以被称为<strong>表引擎</strong>。</p><blockquote><p>MySQL 5.5之后默认存储引擎是InnoDB。</p></blockquote><p>相关操作：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询建表语句</span><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> account<span class="token punctuation">;</span><span class="token comment">-- 建表时指定存储引擎</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span><span class="token punctuation">;</span><span class="token comment">-- 查看当前数据库支持的存储引擎</span><span class="token keyword">show</span> engines<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h4><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。</p><p><strong>特点：</strong></p><ul><li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li><li><strong>行级锁</strong>，提高并发访问性能</li><li>支持<strong>外键 FOREIGN KEY</strong>约束，保证数据的完整性和正确性</li></ul><p><strong>文件：</strong></p><ul><li>xxx.ibd: xxx代表的是表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li></ul><p><img src="/images/hmmysql2/image-20230130173324623.png"></p><p>参数：innodb_file_per_table，决定多张表共享一个<strong>表空间</strong>还是每张表对应一个<strong>表空间</strong></p><p><strong>查看 Mysql 变量：</strong></p><p><code>show variables like &#39;innodb_file_per_table&#39;;</code></p><p><strong>从idb文件提取表结构数据：</strong></p><p>创建的MySQL数据库默认存放在：</p><pre class="line-numbers language-none"><code class="language-none">C:\ProgramData\MySQL\MySQL Server 8.0\Data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（打开表所在的数据库，然后在cmd运行）</p><p><code>ibd2sdi xxx.ibd</code></p><p><img src="/images/hmmysql2/image-20230130173433163.png"></p><p><strong>InnoDB 逻辑存储结构：</strong><br><img src="/images/hmmysql2/image-20230130143739205.png"></p><blockquote><p>ibd文件就是表空间文件。</p><p>在InnoDB的逻辑存储结构中，Page页是磁盘操作的最小逻辑存储单元，一个区Extent的大小是固定的（1MB），一个页Page大小也是固定的（16KB），也就意味着一个区可以包含64个页。</p></blockquote><h4 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h4><p>MyISAM 是 MySQL 早期的默认存储引擎。</p><p><strong>特点：</strong></p><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul><p><strong>文件：</strong></p><ul><li>xxx.sdi: 存储表结构信息，文本文件，可以json格式化查看。</li><li>xxx.MYD: 存储数据</li><li>xxx.MYI: 存储索引</li></ul><h4 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h4><p>Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。</p><p><strong>特点：</strong></p><ul><li>存放在内存中，速度快</li><li>hash索引（默认）</li></ul><p><strong>文件：</strong></p><ul><li>xxx.sdi: 存储表结构信息</li></ul><h3 id="存储引擎特点"><a href="#存储引擎特点" class="headerlink" title="存储引擎特点"></a>存储引擎特点</h3><table><thead><tr><th align="center">特点</th><th align="center">InnoDB</th><th align="center">MyISAM</th><th align="center">Memory</th></tr></thead><tbody><tr><td align="center">存储限制</td><td align="center">64TB</td><td align="center">有</td><td align="center">有</td></tr><tr><td align="center">事务安全</td><td align="center"><strong>支持</strong></td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">锁机制</td><td align="center"><strong>行锁</strong></td><td align="center">表锁</td><td align="center">表锁</td></tr><tr><td align="center">B+tree索引</td><td align="center">支持</td><td align="center">支持</td><td align="center">支持</td></tr><tr><td align="center">Hash索引</td><td align="center">-</td><td align="center">-</td><td align="center">支持</td></tr><tr><td align="center">全文索引</td><td align="center">支持（5.6版本之后）</td><td align="center">支持</td><td align="center">-</td></tr><tr><td align="center">空间使用</td><td align="center">高</td><td align="center">低</td><td align="center">N/A</td></tr><tr><td align="center">内存使用</td><td align="center">高</td><td align="center">低</td><td align="center">中等</td></tr><tr><td align="center">批量插入速度</td><td align="center">低</td><td align="center">高</td><td align="center">高</td></tr><tr><td align="center">支持外键</td><td align="center"><strong>支持</strong></td><td align="center">-</td><td align="center">-</td></tr></tbody></table><h3 id="存储引擎选择"><a href="#存储引擎选择" class="headerlink" title="存储引擎选择"></a>存储引擎选择</h3><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p><ul><li>InnoDB: 是MySQL的默认存储引擎，支持事务、外键。如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li><li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li><li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li></ul><p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。</p><p>实际上目前 Mongodb 代替了 MyISAM，Redis 代替了 Memory。</p><h2 id="2-在CentOS-7-中安装-MySQL，并用DataGrip远程连接"><a href="#2-在CentOS-7-中安装-MySQL，并用DataGrip远程连接" class="headerlink" title="2. 在CentOS 7 中安装 MySQL，并用DataGrip远程连接"></a>2. 在CentOS 7 中安装 MySQL，并用DataGrip远程连接</h2><p>可参考：<a href="https://blog.csdn.net/lyouhuan/article/details/124868523">Centos7下安装MySQL详细步骤</a></p><p>上述安装教程是MYSQL57版本的，所以我又参考这个教程重新卸载并安装了MYSQL8版本。</p><p>下载地址：<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><p><img src="/images/hmmysql2/image-20230131105924411.png"></p><p>下载完成后可通过FinalShell直接上传到虚拟机/服务器里。</p><p><img src="/images/hmmysql2/image-20230131111236331.png"></p><p>上传完成后</p><pre class="line-numbers language-none"><code class="language-none">创建mysql文件夹mkdir mysql 将上传的压缩包解压到mysql文件夹tar -xvf mysql-8.0.26-1.el7.x86_64.rpm-bundle.tar -C mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安装mysql的安装包</li></ul><pre class="line-numbers language-none"><code class="language-none">cd mysqlrpm -ivh mysgl-community-common-8.0.26-1.e17.x86_64.rpmrpm -ivh mysql-community-client-plugins-8.0.26-1.e17.x86_64.rpmrpm -ivh mysgl-community-libs-8.0.26-1.e17.x86_64.rpmrpm -ivh mysql-community-libs-compat-8.0.26-1.e17.x86_64.rpmrpm -ivh mysql-community-devel-8.0.26-1.e17.x86_64.rpmrpm -ivh mysgl-community-client-8.0.26-1.e17.x86_64.rpmrpm -ivh mysgl-community-server-8.0.26-1.e17.x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">cd mysqlyum -y install *这个安装方法更简单<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>授予root用户远程访问权限，并刷新权限使生效</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">grant all privileges on <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> to <span class="token char">'root'</span> @<span class="token char">'%'</span> identified by <span class="token char">'Mysql@123'</span><span class="token punctuation">;</span>     第一个<span class="token operator">*</span>是数据库，可以改成允许访问的数据库名称第二个 是数据库的表名称，代表允许访问任意的表root代表远程登录使用的用户名，可以自定义<span class="token operator">%</span>代表允许任意ip登录，如果你想指定特定的IP，可以把<span class="token operator">%</span>替换掉就可以了password代表远程登录时使用的密码，可以自定义让权限立即生效：flush privileges<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>FinalShell(远程连接软件)</p><p><strong>finalshell是远程服务连接工具，它能帮助用户快速的连接服务器。</strong></p></li></ul><p>可参考：<a href="https://www.cnblogs.com/xuexianqi/p/13398112.html">https://www.cnblogs.com/xuexianqi/p/13398112.html</a></p><p><a href="https://blog.csdn.net/weixin_47343544/article/details/126318042">https://blog.csdn.net/weixin_47343544/article/details/126318042</a></p><p><img src="/images/hmmysql2/image-20230131102004875.png" alt="获取虚拟机ip"></p><p>打开FinalShell进行连接</p><p><img src="/images/hmmysql2/image-20230131102108222.png"></p><p>连接成功就会出现如下内容，我的MySQL之前已经安装好了</p><p><img src="/images/hmmysql2/image-20230131102139490.png"></p><h3 id="启动并检查MySQL运行状态"><a href="#启动并检查MySQL运行状态" class="headerlink" title="启动并检查MySQL运行状态"></a>启动并检查MySQL运行状态</h3><pre class="line-numbers language-none"><code class="language-none">systemctl start mysqld  启动mysql服务systemctl status mysqld 检查状态systemctl stop mysqld   关闭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="获取MySQL默认登录密码，登录，并修改默认密码"><a href="#获取MySQL默认登录密码，登录，并修改默认密码" class="headerlink" title="获取MySQL默认登录密码，登录，并修改默认密码"></a>获取MySQL默认登录密码，登录，并修改默认密码</h3><pre class="line-numbers language-none"><code class="language-none">grep &#39;temporary password&#39; &#x2F;var&#x2F;log&#x2F;mysqld.log输入以下命令后，再输入默认登录密码，就能以 root 帐号登录 mysqlmysql -u root -p在创建数据库或数据表之前，要先用一下命令修改 root 用户的密码ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;新密码&#39;;PS：MySQL默认的密码复杂度为 MEDIUM，所以新密码至少为8位，并且必须包含大、小写字母、数字和特殊字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改root用户密码"><a href="#修改root用户密码" class="headerlink" title="修改root用户密码"></a>修改root用户密码</h3><p>登录到MySQL之后，需要将自动生成的不便记忆的密码修改了，修改成自己熟悉的便于记忆的密码。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">USER</span>  <span class="token string">'root'</span><span class="token variable">@'localhost'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'1234'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行上述的SQL会报错，原因是因为设置的密码大简单，感码复杂度不够、我们可以设置密码的复杂度为简单类型，密码长度为4.</p><ul><li>查看密码策略</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%validate_password.policy%'</span><span class="token punctuation">;</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%validate_password.length%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>修改密码策略</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 设置密码复杂度为最低</span><span class="token keyword">set</span> <span class="token keyword">global</span> validate_password<span class="token punctuation">.</span>policy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- 设置密码长度为4</span><span class="token keyword">set</span> <span class="token keyword">global</span> validate_password<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>降低密码的校验规则之后，再次执行上述修改密码的指令。</p><p><img src="/images/hmmysql2/image-20230131112158556.png" alt="成功修改密码"></p><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>默认的root用户只能当前节点localhost访问，是无法远程访问的，我们还需要创建一个root账户，用户远程访问</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'root'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">'1234'</span><span class="token punctuation">;</span><span class="token comment">-- %在所有主机均可访问</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="并给root用户分配权限"><a href="#并给root用户分配权限" class="headerlink" title="并给root用户分配权限"></a>并给root用户分配权限</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'root'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span><span class="token comment">-- 分配所有权限</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="通过DataGrip远程连接MySQL"><a href="#通过DataGrip远程连接MySQL" class="headerlink" title="通过DataGrip远程连接MySQL"></a>通过DataGrip远程连接MySQL</h3><p>打开DataGrip，添加一个服务器DataSource</p><p><img src="/images/hmmysql2/image-20230131113018855.png"></p><p>注意你可能会连接失败，解决方法就是在Linux中打开3306tcp端口或者直接关闭防火墙。</p><p><img src="/images/hmmysql2/image-20230131113403043.png"></p><p>连接成功如下</p><p><img src="/images/hmmysql2/image-20230131113419591.png"></p><h2 id="3-索引"><a href="#3-索引" class="headerlink" title="3. 索引"></a>3. 索引</h2><h3 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h3><p><strong>概念：</strong></p><p>索引（index）是帮助MySQL**高效获取数据的数据结构(有序)**。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。  </p><p><strong>演示如下：</strong></p><p><img src="/images/hmmysql2/image-20230131114434070.png"></p><ul><li>左边没有索引全表扫描，效率低下。</li><li>右边有索引（搜索二叉树数据结构），高效，注意这里提到的二叉树并不是真实MySQL数据结构。</li></ul><p><strong>优缺点：</strong></p><table><thead><tr><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>提高数据检索的效率，降低数据库 的IO成本</td><td>索引列也是要占用空间的。</td></tr><tr><td>通过索引列对数据进行排序，降低 数据排序的成本，降低CPU的消 耗。</td><td>索引大大提高了查询效率，同时却也降低更新表的速度， 如对表进行INSERT、UPDATE、DELETE时，效率降低。</td></tr></tbody></table><blockquote><p>其实劣势是几乎可以忽略的，原因是目前硬盘等存储设备非常便宜，同时数据库主要用的是查询。</p></blockquote><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><p>MySQL的索引是在<strong>存储引擎层</strong>实现的，不同的存储引擎有不同的索引结构，主要包含以下几种：</p><table><thead><tr><th>索引结构</th><th>描述</th></tr></thead><tbody><tr><td><font color="red">B+Tree索引 </font></td><td><font color="red">最常见的索引类型，大部分引擎都支持 B+ 树索引</font></td></tr><tr><td>Hash索引</td><td>底层数据结构是用哈希表实现的, 只有精确匹配索引列的查询才有效, 不 支持范围查询</td></tr><tr><td>R-tree(空间索引）</td><td>空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类 型，通常使用较少</td></tr><tr><td>Full-text(全文索引)</td><td>是一种通过建立倒排索引,快速匹配文档的方式。类似于 Lucene,Solr,ES</td></tr></tbody></table><p><strong>上述是MySQL中所支持的所有的索引结构，接下来，我们再来看看不同的存储引擎对于索引结构的支持<br>情况。</strong></p><table><thead><tr><th align="center">索引</th><th align="center">InnoDB</th><th align="center">MyISAM</th><th align="center">Memory</th></tr></thead><tbody><tr><td align="center">B+tree索引</td><td align="center">支持</td><td align="center">支持</td><td align="center">支持</td></tr><tr><td align="center">Hash 索引</td><td align="center">不支持</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="center">R-tree 索引</td><td align="center">不支持</td><td align="center">支持</td><td align="center">不支持</td></tr><tr><td align="center">Full-text</td><td align="center">5.6版本之后支持</td><td align="center">支持</td><td align="center">不支持</td></tr></tbody></table><blockquote><p>我们平常所说的索引，如果没有特别指明，都是指<strong>B+树</strong>结构组织的索引。</p></blockquote><h4 id="B-Tree（多路平衡查找树）"><a href="#B-Tree（多路平衡查找树）" class="headerlink" title="B-Tree（多路平衡查找树）"></a>B-Tree（<font color="red">多路</font>平衡查找树）</h4><p>插入 100 65 169 368 900 556 780 35 215 1200 23 888 158 90 1000 88 120 268 250 数据为例。</p><p>最大度数为 Max.Degree = 5</p><p>首先是 <code>100</code></p><p>插入65 <code>65,100</code></p><p>插入169 <code>65,100,169</code></p><p>插入368 <code>65,100,169,368</code></p><p>插入900，达到5个数，就会把中间的169提取出来</p><p><img src="/images/hmmysql2/image-20230131140824376.png"></p><p>插入556，比169大，所以会存放在右边</p><p><img src="/images/hmmysql2/image-20230131140920905.png"></p><p>插入780，比169大，所以会存放在右边</p><p><img src="/images/hmmysql2/image-20230131141005458.png"></p><p>插入35，比169小，所以会存放在左边</p><p><img src="/images/hmmysql2/image-20230131141029749.png"></p><p>插入215，比169大，所以会存放在右边，<code>215,368,556,780,900</code>达到5个，所以会把中间的556提取到上面</p><p><img src="/images/hmmysql2/image-20230131141353836.png"></p><p>插入1200，比556大，所以存放在556右边</p><p><img src="/images/hmmysql2/image-20230131141438258.png"></p><p>插入23，比169小，所以存放在169左边</p><p><img src="/images/hmmysql2/image-20230131141456648.png"></p><p>插入888，比556大，所以存放在556右边</p><p><img src="/images/hmmysql2/image-20230131141526456.png"></p><p>插入158，比169小，存放到169左边，<code>23,35,65,100,158</code>达到5个，提取中间的65到上面</p><p><img src="/images/hmmysql2/image-20230131141727596.png"></p><p>插入90，因为90在65和169中间，<code>90,100,158</code></p><p><img src="/images/hmmysql2/image-20230131141823806.png"></p><p>插入1000，比556大，所以存放在最右边，<code>780,888,900,1000,1200</code>达到5个，提取中间的900到上面</p><p><img src="/images/hmmysql2/image-20230131141952738.png"></p><p>88在65和169中间，<code>88,90,100,158</code></p><p><img src="/images/hmmysql2/image-20230131142026659.png"></p><p>插入120，在65和169中间，<code>88,90,100,120,158</code>达到5个提取100到上面，然后<code>65,100,169,556,900</code>达到5个，提取169到上面</p><p><img src="/images/hmmysql2/image-20230131142220855.png"></p><p>插入268，先和169比较，大于169所以往右找，和556比小于556，所以存放在556左边，<code>215,268,368</code></p><p><img src="/images/hmmysql2/image-20230131142341802.png"></p><p>插入250，先和169比较，大于169所以往右找，和556比小于556，所以存放在556左边，<code>215,250，268,368</code></p><p><img src="/images/hmmysql2/image-20230131142415210.png"></p><blockquote><ul><li>5阶的B树，每一个节点最多存储4个key，对应5个指针。</li><li>一旦节点存储的key数量到达5，就会裂变，中间元素向上分裂。</li><li>在B树中，非叶子节点和叶子节点都会存放数据。  </li></ul></blockquote><h4 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B+Tree"></a>B+Tree</h4><p>B+Tree是B-Tree的变种，我们以一颗最大度数（max-degree）为4（4阶）的b+tree为例，来看一<br>下其结构示意图：  </p><p><img src="/images/hmmysql2/image-20230131143044161.png"></p><p>我们可以看到，两部分：</p><ul><li><strong>绿色</strong>框框起来的部分，是<strong>索引部分</strong>，仅仅起到索引数据的作用，不存储数据。</li><li><strong>红色</strong>框框起来的部分，是<strong>数据存储部分</strong>，在其叶子节点中要存储具体的数据。  </li></ul><p>插入 100 65 169 368 900 556 780 35 215 1200 23 888 158 90 1000 88 120 268 250 数据为例。</p><p>最大度数为 Max.Degree = 5</p><p><img src="/images/hmmysql2/image-20230131143337665.png"></p><p>最终我们看到，B+Tree 与 B-Tree相比，主要有以下三点区别：</p><ul><li>所有的数据都会出现在叶子节点。</li><li>叶子节点形成一个单向链表。</li><li>非叶子节点仅仅起到索引数据作用，具体的数据都是在叶子节点存放的。  </li></ul><p>上述我们所看到的结构是标准的B+Tree的数据结构，接下来，我们再来看看<font color="red">MySQL中优化之后的<br>B+Tree。</font></p><p>MySQL索引数据结构对经典的B+Tree进行了优化。<strong>在原B+Tree的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的B+Tree</strong>，提高区间访问的性能，利于排序。  （叶子节点形成一个双向循环链表）</p><p><img src="/images/hmmysql2/image-20230131143659468.png"></p><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p>MySQL中除了支持B+Tree索引，还支持Hash索引。</p><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。  </p><p><img src="/images/hmmysql2/image-20230131145024552.png"></p><p>如果两个(或多个)键值，映射到一个相同的槽位上，他们就产生了<strong>hash冲突（也称为hash碰撞）</strong>，可以<strong>通过链表来解决</strong>。</p><p><img src="/images/hmmysql2/image-20230131145111115.png"></p><p><strong>特点：</strong></p><p>A. Hash索引只能用于对等比较(=，in)，不支持范围查询（between，&gt;，&lt; ，…）</p><p>B. 无法利用索引完成排序操作</p><p>C. 查询效率高，通常(不存在hash冲突的情况)只需要一次检索就可以了，效率通常要高于B+tree索引</p><p><strong>存储引擎支持：</strong></p><p>在MySQL中，支持hash索引的是Memory存储引擎。 而InnoDB中具有自适应hash功能，hash索引是<br>InnoDB存储引擎根据B+Tree索引在指定条件下自动构建的 。</p><blockquote><p>思考题： 为什么InnoDB存储引擎选择使用B+tree索引结构?</p><p>A. 相对于二叉树，层级更少，搜索效率高；</p><p>B. 对于B-tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低；</p><p>C. 相对Hash索引，B+tree支持范围匹配及排序操作；</p></blockquote><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><p>在MySQL数据库，将索引的具体类型主要分为以下几类：主键索引、唯一索引、常规索引、全文索引。</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建，只能有一个</td><td>PRIMARY</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>UNIQUE</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td>FULLTEXT</td></tr></tbody></table><p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引(Clustered Index)</td><td>将数据存储与索引放一块，索引结构的叶子节点保存了行数据</td><td>必须有，而且只有一个</td></tr><tr><td>二级索引(Secondary Index)</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><blockquote><p>其中，二级索引又称为辅助索引/非聚集索引。</p></blockquote><p>聚集索引选取规则：</p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li><li>如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引</li></ul><p>聚集索引和二级索引的具体结构如下：</p><p><img src="/images/hmmysql2/image-20230131150723868.png"></p><p>其中id是主键，所以上面的是聚集索引，下面存放的是主键id，所以是二级索引。</p><ul><li><strong>聚集索引</strong>的叶子节点下挂的是这<strong>一行的数据</strong>。</li><li><strong>二级索引</strong>的叶子节点下挂的是该字段值对应的<strong>主键值</strong>。</li></ul><p>接来下，我们来分析一下如下的SQL语句的具体执行过程：</p><p><img src="/images/hmmysql2/image-20230131151014878.png"></p><ol><li>由于是根据name字段进行查询，所以先根据name=’Arm’到name字段的二级索引中进行匹配查找。但是在二级索引中只能查找到 Arm 对应的主键值 10。</li><li>由于查询返回的数据是*，所以此时，还需要根据主键值10，到聚集索引中查找10对应的记录，最终找到10对应的行row。</li><li>最终拿到这一行的数据，直接返回即可。</li></ol><blockquote><p>回表查询： 这种先到二级索引中查找数据，找到主键值，然后再到聚集索引中根据主键值，获取数据的方式，就称之为回表查询。  </p></blockquote><p><strong>思考题：</strong></p><blockquote><ol><li>以下两条SQL语句，那个执行效率高? 为什么?</li></ol><p>A. select * from user where id = 10 ;</p><p>B. select * from user where name = ‘Arm’ ;</p><p><strong>备注: id为主键，name字段创建的有索引；</strong></p><p>解答：</p><p>A 语句的执行性能要高于B 语句。</p><p>因为A语句直接走聚集索引，直接返回数据。 而B语句需要先查询name字段的二级索引，然后再查询聚集索引，也就是需要进行<strong>回表查询</strong>。  </p></blockquote><blockquote><p>2.InnoDB主键索引的B+tree高度为多高呢?  </p><p>假设:</p><p>一行数据大小为1k，一页中可以存储16行这样的数据（一页大小为16k）。InnoDB的指针占用6个字节的空间，主键即使为bigint，占用字节数为8。</p><p>设索引(键)的数量为 n ，键的总占用空间 ： 键的数量 * 单个键的占用空间 = n * 8</p><p>根据B+tree树的特性，指针的数量比当前节点键的数量多1个，所以</p><p>指针的总占用空间 = （ 主键的数量 + 1 ) * 单个指针占用空间 = (n + 1) * 6</p><p>高度为2：</p><p>n * 8 + (n + 1) * 6 = 16 * 1024 , 算出n约为 1170</p><p>1171 * 16 = 18736</p><p>也就是说，如果树的高度为2，则可以存储 18000 多条记录。</p><p>高度为3：</p><p>1171 * 1171 * 16 = 21939856</p><p>也就是说，如果树的高度为3，则可以存储 2200w 左右的记录。  </p></blockquote><p>另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。</p><h3 id="索引语法"><a href="#索引语法" class="headerlink" title="索引语法"></a>索引语法</h3><ul><li>创建索引</li></ul><p><code>CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);</code></p><p>如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引。</p><p>一个索引可以关联多个字段，如果一个索引关联一个字段称为单链字段，如果一个索引关联多个字段称为联合索引或者组合索引。</p><ul><li>查看索引</li></ul><p><code>SHOW INDEX FROM table_name;</code></p><p>可以在后面加个<code>\G</code> 优化显示(由列改为行)。</p><ul><li>删除索引</li></ul><p><code>DROP INDEX index_name ON table_name;</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引</span><span class="token comment">-- 因为可能重复，所以创建的是常规索引。</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_user_name <span class="token keyword">on</span> tb_user<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引</span><span class="token keyword">create</span> <span class="token keyword">unique</span> <span class="token keyword">index</span> idx_user_phone <span class="token keyword">on</span> tb_user <span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 为profession, age, status创建联合索引</span><span class="token comment">-- 顺序有讲究， Seq_in_index依次</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_user_pro_age_stat <span class="token keyword">on</span> tb_user<span class="token punctuation">(</span>profession<span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token keyword">status</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 为email建立合适的索引来提升查询效率</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_user_email <span class="token keyword">on</span> tb_user<span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 删除索引</span><span class="token keyword">drop</span> <span class="token keyword">index</span> idx_user_email <span class="token keyword">on</span> tb_user<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SQL性能分析"><a href="#SQL性能分析" class="headerlink" title="SQL性能分析"></a>SQL性能分析</h3><h4 id="SQL执行频次"><a href="#SQL执行频次" class="headerlink" title="SQL执行频次"></a>SQL执行频次</h4><p>MySQL 客户端连接成功后，通过 show [session|global] status 命令可以提供服务器状态信息。查看<strong>当前数据库</strong>的 INSERT, UPDATE, DELETE, SELECT 访问频次：</p><p><code>SHOW GLOBAL STATUS LIKE &#39;Com_______&#39;;</code>  GlOBAL 全局</p><p><code>SHOW SESSION STATUS LIKE &#39;Com_______&#39;;</code> SESSION 当前会话</p><p>例：<code>show global status like &#39;Com_______&#39;</code>  一个下划线代表一个字符</p><p><img src="/images/hmmysql2/image-20230201174157419.png"></p><h4 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h4><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。</p><p>查看慢查询日志开关状态：</p><p><code>show variables like &#39;slow_query_log&#39;;</code></p><p><img src="/images/hmmysql2/image-20230201174716659.png" alt="默认没有开启"></p><p><strong>MySQL的慢查询日志默认没有开启</strong>，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：</p><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;my.cnf# 开启慢查询日志开关slow_query_log&#x3D;1# 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志long_query_time&#x3D;2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/hmmysql2/image-20230201175139852.png"></p><p>更改后记得重启MySQL服务(<code>systemctl restart mysqld</code>)，慢日志文件位置在linux：<code>/var/lib/mysql/localhost-slow.log</code></p><p>这是默认的情况：</p><p><img src="/images/hmmysql2/image-20230201175742584.png"></p><blockquote><p>可以看出里面存放了MySQL版本号，端口等一些基本信息。</p></blockquote><p>接下来，我执行一条查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> tb_sku<span class="token punctuation">;</span><span class="token comment">-- tb_sku中有1000万条记录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后结果如下，导入时间太长，直接用老师的结果</p><p><img src="/images/hmmysql2/image-20230201180317811.png"></p><blockquote><p>可以看出记录了当前用户/主机，耗时，用的数据库，SQL语句等。</p></blockquote><p>可以看出慢查询日志可以用来定位执行耗时长的的SQL语句，从而对这类SQL语句进行优化。</p><h4 id="profile详情"><a href="#profile详情" class="headerlink" title="profile详情"></a>profile详情</h4><p>show profile 能在<strong>做SQL优化时帮我们了解时间都耗费在哪里</strong>。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：</p><p><code>SELECT @@have_profiling;</code></p><p>查询profile是否开启：</p><p>SELECT @@have_profiling;</p><p>profiling 默认关闭为0，可以通过set语句在session/global级别开启 profiling：</p><p><code>SET profiling = 1;</code></p><p>查看所有语句的基本耗时：</p><p><code>show profiles;</code></p><p>示例如下：</p><p><img src="/images/hmmysql2/image-20230201200422020.png"></p><blockquote><p>从id主键查询理论上应该比通过name查询快，因为少了回表查询，但是在数据量少的时候也存在意外的情况。</p></blockquote><p>查看指定query_id的SQL语句各个阶段的耗时：</p><p><code>show profile for query query_id;</code></p><p><img src="/images/hmmysql2/image-20230201200949832.png"></p><blockquote><p>query_id 指的是上述<code>show profiles;</code>中的Query_ID。</p></blockquote><p>查看指定query_id的SQL语句CPU的使用情况</p><p><code>show profile cpu for query query_id;</code></p><p><img src="/images/hmmysql2/image-20230201201148010.png"></p><h4 id="explain执行计划"><a href="#explain执行计划" class="headerlink" title="explain执行计划"></a>explain执行计划</h4><p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。<br>语法：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 直接在select语句之前加上关键字 explain / desc</span><span class="token keyword">EXPLAIN</span><span class="token operator">|</span><span class="token keyword">DESC</span> <span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 HWERE 条件<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>EXPLAIN 执行计划各字段含义：</p><ul><li><strong>id：</strong></li></ul><p>select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）。</p><ul><li><strong>select_type：</strong></li></ul><p>表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE之后包含了子查询）等。</p><ul><li><strong>type：</strong></li></ul><p>表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all。（其中NULL的性能最好，但实际过程中却几乎不可能，因为NULL需要不访问表；const需要主键或者唯一索引）</p><ul><li><strong>possible_key：</strong>可能应用在这张表上的索引，一个或多个。</li><li><strong>Key：</strong>实际使用的索引，如果为 NULL，则没有使用索引。</li><li><strong>Key_len：</strong></li></ul><p>表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好。</p><ul><li><strong>rows：</strong></li></ul><p>MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的。</p><ul><li><strong>filtered：</strong>表示返回结果的行数占需读取行数的百分比，filtered的值越大越好。</li></ul><p>示例：</p><p><img src="/images/hmmysql2/image-20230202103328756.png"></p><h3 id="索引使用"><a href="#索引使用" class="headerlink" title="索引使用"></a>索引使用</h3><h4 id="验证索引效率"><a href="#验证索引效率" class="headerlink" title="验证索引效率"></a>验证索引效率</h4><p>使用之前准备的一张表 tb_sku , 在这张表中准备了1000w的记录。  这张表中id为主键，有主键索引，其他字段都没有简历索引。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_sku <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span>\G<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/hmmysql2/image-20230202110016730.png"></p><p>然后用没有索引的sn字段进行查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_sku <span class="token keyword">where</span> sn <span class="token operator">=</span> <span class="token string">'100000003145001'</span>\G<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/hmmysql2/image-20230202110123570.png"></p><p>可以看出sn没有索引，查询效率非常低</p><p>针对sn字段创建索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> idx_sku_sn <span class="token keyword">on</span> tb_sku<span class="token punctuation">(</span>sn<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次执行相同的查询语句，查看SQL耗时</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_sku <span class="token keyword">where</span> sn <span class="token operator">=</span> <span class="token string">'100000003145001'</span>\G<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/hmmysql2/image-20230202110306895.png"></p><p>我们能明显看到，sn字段建立了索引之后，查询性能大大提升。</p><h4 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h4><p>如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。</p><p>在tb_user中，有一个连合索引<code>idx_user_pro_age_stat</code>，顺序为profession,age,status</p><p><img src="/images/hmmysql2/image-20230202112732050.png"></p><p>全部走索引：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">'软件工程'</span> <span class="token operator">and</span> age <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">and</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/hmmysql2/image-20230202111857809.png"></p><p>status这个字段不走索引：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">'软件工程'</span> <span class="token operator">and</span> age <span class="token operator">=</span> <span class="token number">31</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/hmmysql2/image-20230202112015845.png"></p><blockquote><p>可以看出status这个字段的索引长度为5。</p></blockquote><p>age和status这两个字段都不走索引：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">'软件工程'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/hmmysql2/image-20230202112152725.png" alt="image-20230202112152725"></p><blockquote><p>可以看出age这个字段的索引长度为2。</p></blockquote><p>如果跳跃某一列，<font color="red"><strong>索引将部分失效（后面的字段索引失效）。</strong></font></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">'软件工程'</span> <span class="token operator">and</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/hmmysql2/image-20230202112511330.png"></p><blockquote><p>可以看出当跳过了中间的age字段后，age和后面的status均没有走索引。</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> age <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">and</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/hmmysql2/image-20230202112609367.png"></p><blockquote><p>走不走索引完全由最左字段<strong>是否存在</strong>决定，与位置无关。</p><p>补充：通过后面的学习得知这是where情况下。</p><p>如果是order by这种讲究顺序的，那么与位置有关。</p></blockquote><p>联合索引中，出现范围查询（&lt;, &gt;），范围查询右侧的列索引失效。可以用&gt;=或者&lt;=来规避索引失效问题。</p><blockquote><p>通过key和key_len进行判断是否使用了索引。</p></blockquote><h4 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h4><ol><li>在索引列上进行<strong>运算操作</strong>，索引将失效。如：<code>explain select * from tb_user where substring(phone, 10, 2) = &#39;15&#39;;</code></li><li><strong>字符串类型字段使用时，不加引号</strong>，索引将失效。如：<code>explain select * from tb_user where phone = 17799990015;</code>，此处phone的值没有加引号</li><li>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是<strong>头部模糊匹配</strong>，索引失效。如：<code>explain select * from tb_user where profession like &#39;%工程&#39;;</code>，前后都有 % 也会失效。</li><li>用 or 分割开的条件，<strong>如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。</strong></li><li>如果 MySQL 评估使用索引比全表更慢，则不使用索引。(取决于表数据分布情况)</li></ol><h4 id="SQL-提示"><a href="#SQL-提示" class="headerlink" title="SQL 提示"></a>SQL 提示</h4><p>是优化数据库的一个重要手段，简单来说，就是<strong>在SQL语句中加入一些人为的提示来达到优化操作的目的</strong>。</p><p>例如，使用索引（use index）：</p><p><code>explain select * from tb_user use index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></p><p>不使用哪个索引（ignore index ）：<br><code>explain select * from tb_user ignore index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></p><p>必须使用哪个索引（force index）：<br><code>explain select * from tb_user force index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></p><blockquote><p>use 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force就是无论如何都强制使用该索引。</p></blockquote><h4 id="覆盖索引-amp-回表查询"><a href="#覆盖索引-amp-回表查询" class="headerlink" title="覆盖索引&amp;回表查询"></a>覆盖索引&amp;回表查询</h4><p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。</p><p>explain 中 extra 字段含义：</p><ul><li><code>using index condition</code>：查找使用了索引，但是需要回表查询数据。</li><li><code>using where; using index;</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询。</li></ul><p>如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是select *；如果在辅助索引中找聚集索引，如<code>select id, name from xxx where name=&#39;xxx&#39;;</code>，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如<code>select id, name, gender from xxx where name=&#39;xxx&#39;;</code></p><p><img src="/images/hmmysql2/image-20230202120410707.png"></p><p>由于在name的二级索引中，不包含gender，所以，需要两次索引扫描，也就是需要回表查询，性能相对较差一点。  </p><p>所以尽量不要用<code>select *</code>，容易出现回表查询，降低效率，除非有联合索引包含了所有字段。</p><p>面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：</p><p><code>select id, username, password from tb_user where username=&#39;itcast&#39;;</code></p><p><strong>解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引</strong></p><h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只<strong>将字符串的一部分前缀，建立索引</strong>，这样可以大大节约索引空间，从而提高索引效率。</p><p><strong>语法</strong>：<code>create index idx_xxxx on table_name(columnn(n));</code></p><p><strong>前缀长度</strong>：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。</p><p><strong>示例</strong>：</p><p>为tb_user表的email字段，建立长度为5的前缀索引。  </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> idx_email_5 <span class="token keyword">on</span> tb_user<span class="token punctuation">(</span>email<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>前缀长度：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 求去重占的比例</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> email<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> tb_user <span class="token punctuation">;</span><span class="token comment">-- 取前5个去重占的比例</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> substring<span class="token punctuation">(</span>email<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> tb_user <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>比例越接近于1.000，查询效率越高。</p></blockquote><p>查询流程：</p><p><img src="/images/hmmysql2/image-20230202122104157.png"></p><h4 id="单列索引与联合索引"><a href="#单列索引与联合索引" class="headerlink" title="单列索引与联合索引"></a>单列索引与联合索引</h4><ul><li>单列索引：即一个索引只包含单个列。</li><li>联合索引：即一个索引包含了多个列。  </li></ul><p>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引。</p><h3 id="索引设计原则"><a href="#索引设计原则" class="headerlink" title="索引设计原则"></a>索引设计原则</h3><ol><li><p>针对于数据量较大（超过100万条记录），且查询比较频繁的表建立索引。</p></li><li><p>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引。</p></li><li><p>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高（例如身份证等）。</p></li><li><p>如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。</p></li><li><p>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。</p></li><li><p>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。</p></li><li><p>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询。  </p></li></ol><h2 id="4-SQL优化"><a href="#4-SQL优化" class="headerlink" title="4. SQL优化"></a>4. SQL优化</h2><h3 id="插入数据优化"><a href="#插入数据优化" class="headerlink" title="插入数据优化"></a>插入数据优化</h3><h4 id="insert优化"><a href="#insert优化" class="headerlink" title="insert优化"></a>insert优化</h4><ul><li>优化方式一：批量插入（建议每次批量插入不超过1000条，超过分多条批量语句）</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">Insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>优化方式二：手动提交事务</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token keyword">Insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token keyword">Insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token keyword">Insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2001</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2002</span><span class="token punctuation">,</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2003</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化方式三：主键顺序插入，性能高于乱序</li></ul><pre class="line-numbers language-none"><code class="language-none">主键乱序插入 : 8 1 9 21 88 2 4 15 89 5 7 3主键顺序插入 : 1 2 3 4 5 7 8 9 15 21 88 89<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="大批量插入数据"><a href="#大批量插入数据" class="headerlink" title="大批量插入数据"></a>大批量插入数据</h4><p>如果一次性需要插入大批量数据(比如: 几百万的记录)，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的<strong>load指令</strong>进行插入。操作如下：  </p><p><img src="/images/hmmysql2/image-20230202144733882.png"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 客户端连接服务端时，加上参数 -–local-infile</span>mysql <span class="token comment">--local-infile -u root -p</span><span class="token comment">-- 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span><span class="token keyword">set</span> <span class="token keyword">global</span> local_infile <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 执行load指令将准备好的数据，加载到表结构中</span><span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> <span class="token keyword">infile</span> <span class="token string">'/root/load_user_100w_sort.sql'</span> <span class="token keyword">into</span> <span class="token keyword">table</span> tb_user <span class="token keyword">fields</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">','</span> <span class="token keyword">lines</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span class="token comment">-- 每一个字段之间用','分隔，每一行用'\n'分隔</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/hmmysql2/image-20230202151157103.png"></p><p>可以看到插入100万条记录一共用了10多秒，而如果用insert插入数据可能就需要几十分钟了。</p><h3 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h3><h4 id="数据组织方式"><a href="#数据组织方式" class="headerlink" title="数据组织方式"></a>数据组织方式</h4><p>在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为<strong>索引组织表</strong>(index organized table <strong>IOT</strong>)。  </p><p>在InnoDB引擎中，数据行Row是记录在逻辑结构 page 页中的，而每一个页的大小是固定的，默认16K。那也就意味着， 一个页中所存储的行也是有限的，如果插入的数据行row在该页存储不小，将会存储到下一个页中，页与页之间会通过指针连接。  </p><p><img src="/images/hmmysql2/image-20230202165518564.png"></p><h4 id="页分裂"><a href="#页分裂" class="headerlink" title="页分裂"></a>页分裂</h4><p>页可以为空，也可以填充一半，也可以填充100%。<strong>每个页包含了2-N行数据</strong>(如果一行数据过大，会行溢出)，根据主键排列。  </p><p><img src="/images/hmmysql2/image-20230202165639525.png" alt="主键顺序插入"></p><p>主键乱序插入</p><p><img src="/images/hmmysql2/image-20230202165935844.png" alt="插入row50"></p><p>row50应该是插入到row47的，但是位置不够了，所以会新开辟一页，然后将page1里百分之50之后的内容移动到page3</p><p><img src="/images/hmmysql2/image-20230202170118969.png"></p><p>然后将row50插入到page3，之后交换page2和page3的位置</p><p><img src="/images/hmmysql2/image-20230202170209122.png" alt="重新设置链表顺序"></p><h4 id="页合并"><a href="#页合并" class="headerlink" title="页合并"></a>页合并</h4><p>当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。  </p><p><img src="/images/hmmysql2/image-20230202170527822.png"></p><p>当页中删除的记录达到 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前或后）看看是否可以将两个页合并以优化空间使用。  </p><p><img src="/images/hmmysql2/image-20230202170539403.png" alt="页合并"></p><p><img src="/images/hmmysql2/image-20230202170600524.png" alt="插入新的数据"></p><blockquote><p>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或者创建索引时指定。</p></blockquote><h4 id="索引设计原则-1"><a href="#索引设计原则-1" class="headerlink" title="索引设计原则"></a>索引设计原则</h4><ul><li>满足业务需求的情况下，尽量降低主键的长度。</li><li>插入数据时，尽量选择顺序插入，选择使用AUTO_INCREMENT自增主键。</li><li>尽量不要使用UUID做主键或者是其他自然主键，如身份证号。</li><li>业务操作时，避免对主键的修改。  </li></ul><h3 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h3><p>MySQL的排序，有两种方式：</p><ul><li>Using filesort : 通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区sort buffer中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序。</li><li>Using index : 通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高。</li></ul><blockquote><p>对于以上的两种排序方式，Using index的性能高，而Using filesort的性能低，我们在优化排序操作时，尽量要优化为 Using index 。</p></blockquote><p><strong>order by优化原则共四点</strong></p><ul><li><strong>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则。</strong></li></ul><blockquote><p>注意where是不讲顺序的，所以最左前缀法则只要存在即可，而order by是讲究顺序的，所以必须在最左边存在。</p></blockquote><p>例如有一个名为<code>idx_user_age_phone_aa</code>联合索引。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- aa表示age和phone为升序，默认就是升序</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_user_age_phone_aa <span class="token keyword">on</span> tb_user<span class="token punctuation">(</span>age<span class="token punctuation">,</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- Extra结果为Using index</span><span class="token keyword">explain</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>age<span class="token punctuation">,</span>phone <span class="token keyword">from</span> tb_user <span class="token keyword">order</span> <span class="token keyword">by</span> age<span class="token punctuation">,</span>phone<span class="token punctuation">;</span><span class="token comment">-- Extra结果为 Using index; Using filesort</span><span class="token keyword">explain</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>age<span class="token punctuation">,</span>phone <span class="token keyword">from</span> tb_user <span class="token keyword">order</span> <span class="token keyword">by</span> phone<span class="token punctuation">,</span>age<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>尽量使用覆盖索引。</strong></p></li><li><p><strong>多字段排序, 一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）。</strong></p></li></ul><p>例如有一个名为<code>idx_user_age_phone_aa</code>联合索引。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- Extra结果为 Using index; Using filesort</span><span class="token keyword">explain</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>age<span class="token punctuation">,</span>phone <span class="token keyword">from</span> tb_user <span class="token keyword">order</span> <span class="token keyword">by</span> age<span class="token punctuation">,</span>phone <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token comment">-- 解决方法：新建一个索引，ad表示前者为asc，后者为desc</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_user_age_phone_ad <span class="token keyword">on</span> tb_user<span class="token punctuation">(</span>age<span class="token punctuation">,</span>phone <span class="token keyword">desc</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>**如果不可避免的出现filesort，大数据量排序时，可以适当增大排序缓冲区大小sort_buffer_size(默认256k)。  **</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查看排序缓冲区大小</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'sort_buffer_size'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="group-by优化"><a href="#group-by优化" class="headerlink" title="group by优化"></a>group by优化</h3><p>在分组操作中，我们需要通过以下两点进行优化，以提升性能：</p><ul><li>在分组操作时，可以通过索引来提高效率。</li><li>分组操作时，索引的使用也是满足最左前缀法则的。</li></ul><h3 id="limit优化"><a href="#limit优化" class="headerlink" title="limit优化"></a>limit优化</h3><p>在数据量比较大时，如果进行limit分页查询，在查询时，越往后，分页查询效率越低。  </p><p><strong>优化思路：覆盖索引+子查询</strong></p><p>例如我想查询tb_sku中从200万条记录开始的10条记录，即<code>limit 2000000,10</code>,此时需要MySQL排序前2000010记录，仅仅返回 2000000 - 2000010 的记录，其他记录丢弃，查询排序的代价非常大 。  </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> t<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">from</span> tb_sku t<span class="token punctuation">,</span>     <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> tb_sku <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">limit</span> <span class="token number">2000000</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> a<span class="token keyword">where</span> t<span class="token punctuation">.</span>id <span class="token operator">=</span> a<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> tb_user <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果数据量很大，在执行count操作时，是非常耗时的。</p><ul><li>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 <code>count(*)</code> 的时候会直接返回这个数，效率很高； 但是如果是带条件的count，MyISAM也慢。</li><li>InnoDB 引擎就麻烦了，它执行 <code>count(*) </code>的时候，需要把数据一行一行地从引擎里面读出来，然后累积计数。  </li></ul><p>如果说要大幅度提升InnoDB表的count效率，主要的优化思路：<strong>自己计数</strong>(可以借助于redis这样的数据库进行,但是如果是带条件的count又比较麻烦了)。  </p><p><strong>count() 是一个聚合函数，对于返回的结果集，一行行地判断，如果 count 函数的参数不是NULL，累计值就加 1，否则不加，最后返回累计值。</strong></p><p>用法：count（*）、count（主键）、count（字段）、count（数字）  </p><table><thead><tr><th>count用 法</th><th>含义</th></tr></thead><tbody><tr><td>count(主 键)</td><td>InnoDB 引擎会遍历整张表，把每一行的 主键id 值都取出来，返回给服务层。 服务层拿到主键后，直接按行进行累加(主键不可能为null)</td></tr><tr><td>count(字 段)</td><td>没有not null 约束 : InnoDB 引擎会遍历整张表把每一行的字段值都取出 来，返回给服务层，服务层判断是否为null，不为null，计数累加。 有not null 约束：InnoDB 引擎会遍历整张表把每一行的字段值都取出来，返 回给服务层，直接按行进行累加。</td></tr><tr><td>count(数 字)</td><td>InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一行，放一个数字“1” 进去，直接按行进行累加。</td></tr><tr><td>count(*)</td><td>InnoDB引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接 按行进行累加。</td></tr></tbody></table><blockquote><p>按照效率排序的话，count(字段) &lt; count(主键 id) &lt; count(1) ≈ count(*)。</p><p>count(字段) 取值+判断，</p><p>count(主键 id) 取值，</p><p>count(1) 和count(*)不取值。</p></blockquote><h3 id="update优化"><a href="#update优化" class="headerlink" title="update优化"></a>update优化</h3><p>begin = start transaction 都是手动开启事务</p><p>没建行锁默认是表锁。</p><p><strong>优化思路：尽量选择主键/索引字段进行数据更新，避免行锁升级为表锁。</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> course <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">'javaEE'</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当我们在执行删除的SQL语句时，会锁定id为1这一行的数据，然后事务提交之后，行锁释放。</p><p>但是当我们在执行如下SQL时。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> course <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">'SpringBoot'</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'PHP'</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当我们开启多个事务，在执行上述的SQL时，我们发现行锁升级为了表锁。 导致该update语句的性能大大降低。</p><p>原因是id是主键，走聚集索引，而name是普通的字段，没有任何索引，走了全表查询。</p><blockquote><p>InnoDB的行<strong>锁是针对索引加的锁</strong>，不是针对记录加的锁 ,并且该索引不能失效，否则会从行锁升级为表锁 。  </p></blockquote><h2 id="5-视图-存储过程-触发器"><a href="#5-视图-存储过程-触发器" class="headerlink" title="5. 视图/存储过程/触发器"></a>5. 视图/存储过程/触发器</h2><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>视图（View）是一种<strong>虚拟存在的表</strong>。视图中的数据并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。</p><p>通俗的讲，视图只保存了查询的SQL逻辑，不保存查询结果。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><ul><li>创建</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token operator">OR</span> <span class="token keyword">REPLACE</span><span class="token punctuation">]</span> <span class="token keyword">VIEW</span> 视图名称<span class="token punctuation">[</span><span class="token punctuation">(</span>列名列表<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">AS</span> <span class="token keyword">SELECT</span>语句 <span class="token punctuation">[</span> <span class="token keyword">WITH</span> <span class="token punctuation">[</span><span class="token keyword">CASCADED</span> <span class="token operator">|</span> <span class="token keyword">LOCAL</span> <span class="token punctuation">]</span> <span class="token keyword">CHECK</span> <span class="token keyword">OPTION</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>查询</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查看创建视图语句</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> 视图名称<span class="token punctuation">;</span><span class="token comment">-- 查看视图数据</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 视图名称 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li> 修改</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 方式一</span><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token operator">OR</span> <span class="token keyword">REPLACE</span><span class="token punctuation">]</span> <span class="token keyword">VIEW</span> 视图名称<span class="token punctuation">[</span><span class="token punctuation">(</span>列名列表<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">AS</span> <span class="token keyword">SELECT</span>语句 <span class="token punctuation">[</span> <span class="token keyword">WITH</span><span class="token punctuation">[</span> <span class="token keyword">CASCADED</span> <span class="token operator">|</span> <span class="token keyword">LOCAL</span> <span class="token punctuation">]</span> <span class="token keyword">CHECK</span> <span class="token keyword">OPTION</span> <span class="token punctuation">]</span><span class="token comment">-- 方式二</span><span class="token keyword">ALTER</span> <span class="token keyword">VIEW</span> 视图名称<span class="token punctuation">[</span><span class="token punctuation">(</span>列名列表<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">AS</span> <span class="token keyword">SELECT</span>语句 <span class="token punctuation">[</span> <span class="token keyword">WITH</span> <span class="token punctuation">[</span> <span class="token keyword">CASCADED</span> <span class="token operator">|</span><span class="token keyword">LOCAL</span> <span class="token punctuation">]</span> <span class="token keyword">CHECK</span> <span class="token keyword">OPTION</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> 删除</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 视图名称 <span class="token punctuation">[</span><span class="token punctuation">,</span>视图名称<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建</span><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">view</span> stu_v_1 <span class="token keyword">as</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>name <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">&lt;=</span> <span class="token number">10</span> <span class="token punctuation">;</span><span class="token comment">-- 查询</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu_v_1<span class="token punctuation">;</span><span class="token comment">-- 修改</span><span class="token keyword">insert</span> <span class="token keyword">into</span> stu_v_1 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> stu_v_1 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token string">'Tom22'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 删除</span><span class="token keyword">drop</span> <span class="token keyword">view</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> stu_v_1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="视图检查选项"><a href="#视图检查选项" class="headerlink" title="视图检查选项"></a>视图检查选项</h4><p>当使用WITH CHECK OPTION子句创建视图时，MySQL会通过视图检查正在更改的每个行，例如 插入，更新，删除，以使其符合视图的定义。 MySQL允许基于另一个视图创建视图，它还会检查依赖视图中的规则以保持一致性。为了确定检查的范围，mysql提供了两个选项： CASCADED 和 LOCAL，默认值为 CASCADED 。  </p><ul><li>CASCADED级联</li></ul><p>比如，v2视图是基于v1视图的，如果在v2视图创建的时候指定了检查选项为 cascaded，但是v1视图创建时未指定检查选项。 则<strong>在执行检查时，不仅会检查v2，还会级联检查v2的关联视图v1。</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建视图stu_v_1，不加 with cascaded check option ;</span><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">VIEW</span> stu_v_1 <span class="token keyword">as</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>name <span class="token keyword">from</span> student <span class="token keyword">where</span> id<span class="token operator">&lt;=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">-- 创建视图stu_v_2</span><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">VIEW</span> stu_v_2 <span class="token keyword">as</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>name <span class="token keyword">from</span> stu_v_1 <span class="token keyword">where</span> id<span class="token operator">>=</span><span class="token number">10</span> <span class="token keyword">with</span> <span class="token keyword">cascaded</span> <span class="token keyword">check</span> <span class="token keyword">option</span> <span class="token punctuation">;</span><span class="token comment">-- 插入失败，原因是检查V2</span><span class="token keyword">insert</span> <span class="token keyword">into</span> stu_v_2 <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'8yyy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 也会插入失败，原因是检查V2之后，还会检查V2的关联视图V1</span><span class="token keyword">insert</span> <span class="token keyword">into</span> stu_v_2 <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token string">'8yyy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>LOCAL本地</li></ul><p>比如，v2视图是基于v1视图的，如果在v2视图创建的时候指定了检查选项为 local ，但是v1视图创建时未指定检查选项。 则在执行检查时，**只会检查v2，不会检查v2的关联视图v1。  **</p><h4 id="视图的更新"><a href="#视图的更新" class="headerlink" title="视图的更新"></a>视图的更新</h4><p>要使视图可更新，视图中的行与基础表中的行之间必须存在一对一的关系。如果视图包含以下任何一项，则该视图不可更新：</p><ol><li>聚合函数或窗口函数（SUM()、 MIN()、 MAX()、 COUNT()等）</li><li>DISTINCT</li><li>GROUP BY</li><li>HAVING</li><li>UNION 或者 UNION ALL  </li></ol><h4 id="视图的三点作用"><a href="#视图的三点作用" class="headerlink" title="视图的三点作用"></a>视图的三点作用</h4><ul><li>简单</li></ul><p>视图不仅可以简化用户对数据的理解，也可以简化他们的操作。那些被经常使用的查询可以被定义为视图，从而使得用户不必为以后的操作每次指定全部的条件。</p><ul><li> 安全</li></ul><p>数据库可以授权，但不能授权到数据库特定行和特定的列上。通过视图用户只能查询和修改他们所能见到的数据。</p><ul><li>数据独立</li></ul><p>视图可帮助用户屏蔽真实表结构变化带来的影响  。</p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>1.为了保证数据库表的安全性，开发人员在操作tb_user表时，只能看到的用户的基本字段，屏蔽手机号和邮箱两个字段。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">view</span> tb_user_view <span class="token keyword">as</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>profession<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gender<span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">,</span>createtime <span class="token keyword">from</span> tb_user<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user_view<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.查询每个学生所选修的课程（三张表联查），这个功能在很多的业务中都有使用到，为了简化操作，定义一个视图。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">view</span> tb_stu_course_view <span class="token keyword">as</span><span class="token keyword">select</span> s<span class="token punctuation">.</span>name student_name<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token keyword">no</span> student_no<span class="token punctuation">,</span> c<span class="token punctuation">.</span>name course_name<span class="token keyword">from</span> student s<span class="token punctuation">,</span>     student_course sc<span class="token punctuation">,</span>     course c<span class="token keyword">where</span> s<span class="token punctuation">.</span>id <span class="token operator">=</span> sc<span class="token punctuation">.</span>studentid  <span class="token operator">and</span> sc<span class="token punctuation">.</span>courseid <span class="token operator">=</span> c<span class="token punctuation">.</span>id<span class="token punctuation">;</span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_stu_course_view<span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>存储过程是事先经过编译并存储在数据库中的<strong>一段 SQL 语句的集合</strong>，调用存储过程可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。</p><p>存储过程思想上很简单，就是<strong>数据库 SQL 语言层面的代码封装与重用</strong>。  </p><p>特点：</p><ul><li>封装，复用 ———————–&gt; 可以把某一业务SQL封装在存储过程中，需要用到的时候直接调用即可。</li><li>可以接收参数，也可以返回数据 ——–&gt; 再存储过程中，可以传递参数，也可以接收返回值。</li><li>减少网络交互，效率提升 ————-&gt; 如果涉及到多条SQL，每执行一次都是一次网络传输。 而如果封装在存储过程中，我们只需要网络交互一次可能就可以了。  </li></ul><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><ul><li>创建</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> 存储过程名称 <span class="token punctuation">(</span><span class="token punctuation">[</span> 参数列表 <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token comment">-- SQL语句</span><span class="token keyword">END</span> <span class="token punctuation">;</span><span class="token comment">-- 示例</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> p1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在datagrip中，会创建一个routines进行存放，如下图所示：</p><p><img src="/images/hmmysql2/image-20230203143420893.png"></p><blockquote><p>在MySQL中，存储过程PROCEDURE不能简写为proc，而在SQL SERVER就可以。</p></blockquote><ul><li>调用</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CALL</span> 名称 <span class="token punctuation">(</span><span class="token punctuation">[</span> 参数 <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 示例</span><span class="token keyword">call</span> p1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/hmmysql2/image-20230203143718651.png"></p><blockquote><p>在MySQL中使用关键字call进行调用存储过程，而在SQL SERVER中是exec。</p></blockquote><ul><li>查看</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询指定数据库的存储过程及状态信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> INFORMATION_SCHEMA<span class="token punctuation">.</span>ROUTINES <span class="token keyword">WHERE</span> ROUTINE_SCHEMA <span class="token operator">=</span> <span class="token string">'xxx'</span><span class="token punctuation">;</span> <span class="token comment">-- 查询某个存储过程的定义</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> 存储过程名称 <span class="token punctuation">;</span> <span class="token comment">-- 示例</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> INFORMATION_SCHEMA<span class="token punctuation">.</span>ROUTINES <span class="token keyword">WHERE</span> ROUTINE_SCHEMA <span class="token operator">=</span> <span class="token string">'ey'</span><span class="token punctuation">;</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> p1 <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token punctuation">[</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">]</span> 存储过程名称 ；  <span class="token comment">-- 示例</span><span class="token keyword">drop</span> <span class="token keyword">procedure</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> p1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在命令行中，执行创建存储过程的SQL时，需要通过关键字 delimiter 指定SQL语句的结束符。</p></blockquote><p>原因是因为当我们在执行SQL语句时，遇到<code>;</code>就会结束，也就是默认的情况就是<code>delimiter ;</code></p><p><img src="/images/hmmysql2/image-20230203144512831.png"></p><p>将结束符改为’$$’</p><p><img src="/images/hmmysql2/image-20230203144728258.png"></p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>在MySQL中变量分为三种类型: 系统变量、用户定义变量、局部变量。</p><ul><li><strong>系统变量</strong></li></ul><p>系统变量 是MySQL服务器提供，不是用户定义的，属于服务器层面。分为全局变量（GLOBAL）、会话<br>变量（SESSION）。</p><p>什么是会话？</p><p>在DataGrip中，一个Query 控制台就是一个会话。</p><p>右键数据库名 – 》 New – 》Query Console。</p><p><img src="/images/hmmysql2/image-20230203145233607.png"></p><p>这就是两个会话。</p><p><strong>1）查看系统变量：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token punctuation">[</span> <span class="token keyword">SESSION</span> <span class="token operator">|</span> <span class="token keyword">GLOBAL</span> <span class="token punctuation">]</span> VARIABLES <span class="token punctuation">;</span> <span class="token comment">-- 查看所有系统变量</span><span class="token keyword">SHOW</span> <span class="token punctuation">[</span> <span class="token keyword">SESSION</span> <span class="token operator">|</span> <span class="token keyword">GLOBAL</span> <span class="token punctuation">]</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'......'</span><span class="token punctuation">;</span> <span class="token comment">-- 可以通过LIKE模糊匹配方式查找变量</span><span class="token keyword">SELECT</span> @@<span class="token punctuation">[</span><span class="token keyword">SESSION</span> <span class="token operator">|</span> <span class="token keyword">GLOBAL</span><span class="token punctuation">]</span> 系统变量名<span class="token punctuation">;</span> <span class="token comment">-- 查看指定变量的值</span><span class="token comment">-- 示例</span><span class="token keyword">SHOW</span> VARIABLES<span class="token punctuation">;</span> <span class="token comment">-- 默认session</span><span class="token keyword">show</span> <span class="token keyword">session</span> variables <span class="token operator">like</span> <span class="token string">'auto%'</span><span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">global</span> variables <span class="token operator">like</span> <span class="token string">'auto%'</span><span class="token punctuation">;</span><span class="token keyword">select</span> @<span class="token variable">@autocommit</span><span class="token punctuation">;</span>          <span class="token comment">--事务自动提交，1为开启，0为关闭</span><span class="token keyword">select</span> @<span class="token variable">@global.autocommit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2）设置系统变量：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> <span class="token punctuation">[</span> <span class="token keyword">SESSION</span> <span class="token operator">|</span> <span class="token keyword">GLOBAL</span> <span class="token punctuation">]</span> 系统变量名 <span class="token operator">=</span> 值 <span class="token punctuation">;</span>s<span class="token keyword">SET</span> @@<span class="token punctuation">[</span><span class="token keyword">SESSION</span> <span class="token operator">|</span> <span class="token keyword">GLOBAL</span><span class="token punctuation">]</span>系统变量名 <span class="token operator">=</span> 值 <span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token keyword">SESSION</span> autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：mysql服务重新启动之后，所设置的全局参数会失效，要想不失效，可以在 /etc/my.cnf 中配置。  </p></blockquote><ul><li><strong>用户自定义变量</strong></li></ul><p>用户定义变量 是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用 “<strong>@变量名</strong>“ 使用就可以。其作用域为当前连接。  </p><p><strong>1）赋值：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 方式一：赋值时，可以用 = 也可以用 :=</span><span class="token keyword">SET</span> <span class="token variable">@var_name</span> <span class="token operator">=</span> expr <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token variable">@var_name</span> <span class="token operator">=</span> expr<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span><span class="token keyword">SET</span> <span class="token variable">@var_name</span> :<span class="token operator">=</span> expr <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token variable">@var_name</span> :<span class="token operator">=</span> expr<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span><span class="token comment">-- 方式二：</span><span class="token keyword">SELECT</span> <span class="token variable">@var_name</span> :<span class="token operator">=</span> expr <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token variable">@var_name</span> :<span class="token operator">=</span> expr<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span><span class="token keyword">SELECT</span> 字段名 <span class="token keyword">INTO</span> <span class="token variable">@var_name</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span><span class="token comment">-- 示例：</span><span class="token comment">-- 方式一：</span><span class="token keyword">set</span> <span class="token variable">@myname</span> <span class="token operator">=</span> <span class="token string">'8yyy'</span><span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token variable">@myage</span> :<span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token variable">@mygender</span> <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">,</span><span class="token variable">@myhobby</span> :<span class="token operator">=</span> <span class="token string">'.NET'</span><span class="token punctuation">;</span><span class="token comment">-- 方式二：</span><span class="token keyword">select</span> <span class="token variable">@mycolor</span> :<span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span> <span class="token comment">-- 注意必须使用 :=</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> <span class="token variable">@mycount</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span> <span class="token comment">-- 将查询到的结果赋值给@mycount</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2）使用：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token variable">@var_name</span> <span class="token punctuation">;</span><span class="token comment">-- 示例:</span><span class="token keyword">select</span> <span class="token variable">@myname</span><span class="token punctuation">,</span><span class="token variable">@myage</span><span class="token punctuation">,</span><span class="token variable">@mygender</span><span class="token punctuation">,</span><span class="token variable">@myhobby</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：用户定义的变量无需对其进行声明或初始化，只不过获取到的值为NULL。  </p></blockquote><ul><li><strong>局部变量</strong></li></ul><p>局部变量 是根据需要定义的在局部生效的变量，访问之前，需要<strong>DECLARE</strong>声明。可用作存储过程内的局部变量和输入参数，局部变量的<strong>范围是在其内声明的BEGIN … END块</strong>。  </p><p><strong>1）声明：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span> 变量名 变量类型 <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>变量类型就是数据库字段类型：INT、BIGINT、CHAR、VARCHAR、DATE、TIME等。</p><p><strong>2）赋值：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> 变量名 <span class="token operator">=</span> 值 <span class="token punctuation">;</span><span class="token keyword">SET</span> 变量名 :<span class="token operator">=</span> 值 <span class="token punctuation">;</span><span class="token keyword">SELECT</span> 字段名 <span class="token keyword">INTO</span> 变量名 <span class="token keyword">FROM</span> 表名 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建存储过程p2</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> p2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> stu_count <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> stu_count <span class="token keyword">from</span> student<span class="token punctuation">;</span>    <span class="token keyword">select</span> stu_count<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token comment">-- 调用存储过程p2</span><span class="token keyword">call</span> p2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h4><p>if用于做条件判断，具体的语法结构为：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">IF</span> 条件<span class="token number">1</span> <span class="token keyword">THEN</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">ELSEIF</span> 条件<span class="token number">2</span> <span class="token keyword">THEN</span> <span class="token comment">-- 可选</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">ELSE</span> <span class="token comment">-- 可选</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在if条件判断的结构中，ELSE IF 结构可以有多个，也可以没有。 ELSE结构可以有，也可以没有。  </p><p>案例如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 根据定义的分数score变量，判定当前分数对应的分数等级。</span><span class="token comment">-- score >= 85分，等级为优秀。</span><span class="token comment">-- score >= 60分 且 score &lt; 85分，等级为及格。</span><span class="token comment">-- score &lt; 60分，等级为不及格。</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> p3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> score <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">58</span><span class="token punctuation">;</span> <span class="token comment">-- 默认成绩为58</span>    <span class="token keyword">declare</span> result <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">-- 不设置默认值</span>    <span class="token keyword">if</span> score <span class="token operator">>=</span> <span class="token number">85</span> <span class="token keyword">then</span>        <span class="token keyword">set</span> result :<span class="token operator">=</span> <span class="token string">'优秀'</span><span class="token punctuation">;</span>    <span class="token keyword">elseif</span> score <span class="token operator">>=</span> <span class="token number">60</span> <span class="token keyword">then</span>        <span class="token keyword">set</span> result :<span class="token operator">=</span> <span class="token string">'合格'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">set</span> result :<span class="token operator">=</span> <span class="token string">'不合格'</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>    <span class="token keyword">select</span> result<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述的需求我们虽然已经实现了，但是也存在一些问题，比如：score 分数我们是在存储过程中定义死的，而且最终计算出来的分数等级，我们也仅仅是最终查询展示出来而已。  </p><h4 id="参数（IN-OUT-INOUT）"><a href="#参数（IN-OUT-INOUT）" class="headerlink" title="参数（IN,OUT,INOUT）"></a>参数（IN,OUT,INOUT）</h4><p>参数的类型，主要分为以下三种：IN、OUT、INOUT。  </p><table><thead><tr><th>类型</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td>IN</td><td>该类参数作为输入，也就是需要调用时传入值</td><td>默认</td></tr><tr><td>OUT</td><td>该类参数作为输出，也就是该参数可以作为返回值</td><td></td></tr><tr><td>INOUT</td><td>既可以作为输入参数，也可以作为输出参数</td><td></td></tr></tbody></table><p><strong>用法：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> 存储过程名称 <span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token operator">IN</span><span class="token operator">/</span><span class="token keyword">OUT</span><span class="token operator">/</span><span class="token keyword">INOUT</span> 参数名 参数类型 <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token comment">-- SQL语句</span><span class="token keyword">END</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 根据定义的分数score变量，判定当前分数对应的分数等级。</span><span class="token comment">-- score >= 85分，等级为优秀。</span><span class="token comment">-- score >= 60分 且 score &lt; 85分，等级为及格。</span><span class="token comment">-- score &lt; 60分，等级为不及格。</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> p4<span class="token punctuation">(</span><span class="token operator">in</span> score <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">out</span> result <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">if</span> score <span class="token operator">>=</span> <span class="token number">85</span> <span class="token keyword">then</span>        <span class="token keyword">set</span> result :<span class="token operator">=</span> <span class="token string">'优秀'</span><span class="token punctuation">;</span>    <span class="token keyword">elseif</span> score <span class="token operator">>=</span> <span class="token number">60</span> <span class="token keyword">then</span>        <span class="token keyword">set</span> result :<span class="token operator">=</span> <span class="token string">'合格'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">set</span> result :<span class="token operator">=</span> <span class="token string">'不合格'</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">call</span> p4<span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">,</span> <span class="token variable">@result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@result</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下：</p><p><img src="/images/hmmysql2/image-20230203164655444.png"></p><p><img src="/images/hmmysql2/image-20230203164716963.png"></p><p>可以看到p4后面有2个参数，默认是in，所以第一个参数不显示in。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 将传入的200分制的分数，进行换算，换算成百分制，然后返回。</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> p5<span class="token punctuation">(</span><span class="token keyword">inout</span> score <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">set</span> score :<span class="token operator">=</span> score <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token variable">@score</span> <span class="token operator">=</span> <span class="token number">198</span><span class="token punctuation">;</span><span class="token keyword">call</span> p5<span class="token punctuation">(</span><span class="token variable">@score</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@score</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="case"><a href="#case" class="headerlink" title="case"></a>case</h4><ul><li><strong>语法</strong></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 语法一</span><span class="token comment">-- 含义： 当case_value的值为 when_value1时，执行statement_list1，当值为 when_value2时，执行statement_list2， 否则就执行 statement_list</span><span class="token keyword">CASE</span> case_value    <span class="token keyword">WHEN</span> when_value1 <span class="token keyword">THEN</span> statement_list1    <span class="token punctuation">[</span> <span class="token keyword">WHEN</span> when_value2 <span class="token keyword">THEN</span> statement_list2<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">[</span> <span class="token keyword">ELSE</span> statement_list <span class="token punctuation">]</span><span class="token keyword">END</span> <span class="token keyword">CASE</span><span class="token punctuation">;</span><span class="token comment">--语法二</span><span class="token comment">-- 含义： 当条件search_condition1成立时，执行statement_list1，当条件search_condition2成立时，执行statement_list2， 否则就执行 statement_list</span><span class="token keyword">CASE</span>    <span class="token keyword">WHEN</span> search_condition1 <span class="token keyword">THEN</span> statement_list1    <span class="token punctuation">[</span><span class="token keyword">WHEN</span> search_condition2 <span class="token keyword">THEN</span> statement_list2<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">[</span><span class="token keyword">ELSE</span> statement_list<span class="token punctuation">]</span><span class="token keyword">END</span> <span class="token keyword">CASE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>案例</strong></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 根据传入的月份，判定月份所属的季节（要求采用case结构）。</span><span class="token comment">-- 1-3月份，为第一季度</span><span class="token comment">-- 4-6月份，为第二季度</span><span class="token comment">-- 7-9月份，为第三季度</span><span class="token comment">-- 10-12月份，为第四季度</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> p6<span class="token punctuation">(</span><span class="token operator">in</span> <span class="token keyword">month</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> result <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span>        <span class="token keyword">when</span> <span class="token keyword">month</span><span class="token operator">>=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token keyword">month</span><span class="token operator">&lt;=</span><span class="token number">3</span> <span class="token keyword">then</span>            <span class="token keyword">set</span> result <span class="token operator">=</span><span class="token string">'第一季度'</span><span class="token punctuation">;</span>        <span class="token keyword">when</span> <span class="token keyword">month</span><span class="token operator">>=</span><span class="token number">4</span> <span class="token operator">and</span> <span class="token keyword">month</span><span class="token operator">&lt;=</span><span class="token number">6</span> <span class="token keyword">then</span>            <span class="token keyword">set</span> result <span class="token operator">=</span><span class="token string">'第二季度'</span><span class="token punctuation">;</span>        <span class="token keyword">when</span> <span class="token keyword">month</span><span class="token operator">>=</span><span class="token number">7</span> <span class="token operator">and</span> <span class="token keyword">month</span><span class="token operator">&lt;=</span><span class="token number">9</span> <span class="token keyword">then</span>            <span class="token keyword">set</span> result <span class="token operator">=</span><span class="token string">'第三季度'</span><span class="token punctuation">;</span>        <span class="token keyword">when</span> <span class="token keyword">month</span><span class="token operator">>=</span><span class="token number">10</span> <span class="token operator">and</span> <span class="token keyword">month</span><span class="token operator">&lt;=</span><span class="token number">12</span> <span class="token keyword">then</span>            <span class="token keyword">set</span> result <span class="token operator">=</span><span class="token string">'第四季度'</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">set</span> result<span class="token operator">=</span><span class="token string">'非法数据'</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">case</span><span class="token punctuation">;</span>    <span class="token keyword">select</span> result<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">call</span> p6<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：如果判定条件有多个，多个条件之间，可以使用 and 或 or 进行连接。  </p></blockquote><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>while 循环是有条件的循环控制语句。满足条件后，再执行循环体中的SQL语句。具体语法为：  </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 先判定条件，如果条件为true，则执行逻辑，否则，不执行逻辑</span><span class="token keyword">WHILE</span> 条件 <span class="token keyword">DO</span><span class="token keyword">SQL</span>逻辑<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>案例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 计算从1累加到n的值，n为传入的参数值。</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> p7<span class="token punctuation">(</span><span class="token operator">in</span> n <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">out</span> result <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> total <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> n<span class="token operator">></span><span class="token number">0</span> <span class="token keyword">do</span>        <span class="token keyword">set</span> total :<span class="token operator">=</span> total<span class="token operator">+</span>n<span class="token punctuation">;</span>        <span class="token keyword">set</span> n :<span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span>    <span class="token keyword">set</span> result <span class="token operator">=</span> total<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">call</span> p7<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token variable">@result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@result</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="repeat循环"><a href="#repeat循环" class="headerlink" title="repeat循环"></a>repeat循环</h4><p>repeat是有条件的循环控制语句, 当满足until声明的条件的时候，则退出循环 。具体语法为：  </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 先执行一次逻辑，然后判定UNTIL条件是否满足，如果满足，则退出。如果不满足，则继续下一次循环</span><span class="token keyword">REPEAT</span><span class="token keyword">SQL</span>逻辑<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>UNTIL 条件<span class="token keyword">END</span> <span class="token keyword">REPEAT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 计算从1累加到n的值，n为传入的参数值。</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> p8<span class="token punctuation">(</span><span class="token operator">in</span> n <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">out</span> result <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> total <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">repeat</span>        <span class="token keyword">set</span> total <span class="token operator">=</span> total<span class="token operator">+</span>n<span class="token punctuation">;</span>        <span class="token keyword">set</span> n <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    until n<span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token keyword">end</span> <span class="token keyword">repeat</span><span class="token punctuation">;</span>    <span class="token keyword">set</span> result <span class="token operator">=</span> total<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">call</span> p8<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token variable">@result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@result</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="loop-循环"><a href="#loop-循环" class="headerlink" title="loop 循环"></a>loop 循环</h4><p>LOOP 实现简单的循环，如果不在SQL逻辑中增加退出循环的条件，可以用其来实现简单的死循环。</p><p>LOOP可以配合以下两个语句使用：</p><ul><li>LEAVE ：配合循环使用，<strong>退出循环</strong>。</li><li>ITERATE：必须用在循环中，作用是<strong>跳过当前循环剩下的语句，直接进入下一次循环</strong>。  </li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>begin_label:<span class="token punctuation">]</span> <span class="token keyword">LOOP</span><span class="token keyword">LEAVE</span> label<span class="token punctuation">;</span> <span class="token comment">-- 退出指定标记的循环体</span>    <span class="token keyword">ITERATE</span> label<span class="token punctuation">;</span> <span class="token comment">-- 直接进入下一次循环</span>    <span class="token keyword">SQL</span>逻辑<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">END</span> <span class="token keyword">LOOP</span> <span class="token punctuation">[</span>end_label<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 计算从1到n之间的偶数累加的值，n为传入值</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> p9<span class="token punctuation">(</span><span class="token operator">in</span> n <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">out</span> result <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> total <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>     sum:<span class="token keyword">loop</span>        <span class="token keyword">if</span> n<span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token keyword">then</span><span class="token comment">-- 判断退出</span>            <span class="token keyword">leave</span> sum<span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">then</span><span class="token comment">-- 判断跳过</span>            <span class="token keyword">set</span> n :<span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">iterate</span> sum<span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>        <span class="token keyword">set</span> total :<span class="token operator">=</span> total<span class="token operator">+</span>n<span class="token punctuation">;</span>        <span class="token keyword">set</span> n :<span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">end</span> <span class="token keyword">loop</span> sum<span class="token punctuation">;</span>    <span class="token keyword">set</span> result :<span class="token operator">=</span> total<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">call</span> p9<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token variable">@result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@result</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="游标Cursor"><a href="#游标Cursor" class="headerlink" title="游标Cursor"></a>游标Cursor</h4><p>也称为光标。游标（CURSOR）是用来<strong>存储查询结果集</strong>的数据类型 , 在存储过程和函数中可以使用游标对结果集进行循环的处理。游标的使用包括游标的声明、OPEN、FETCH 和 CLOSE，其语法分别如下。 </p><ul><li>声明游标</li></ul><p><code>DECLARE 游标名称 CURSOR FOR 查询语句 ;</code></p><ul><li>打开游标</li></ul><p><code>OPEN 游标名称 ;</code></p><ul><li>获取游标记录</li></ul><p><code>FETCH 游标名称 INTO 变量 [, 变量 ] ;</code></p><ul><li>关闭游标</li></ul><p><code>CLOSE 游标名称 ;  </code></p><p>案例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 根据传入的参数uage，来查询用户表tb_user中，所有的用户年龄小于等于uage的用户姓名（name）和专业（profession）</span><span class="token comment">-- 并将用户的姓名和专业插入到所创建的一张新表(id,name,profession)中。</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> p10<span class="token punctuation">(</span><span class="token operator">in</span> uage <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> uname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">-- 定义两个变量用于存放从游标中读取的数据</span>    <span class="token keyword">declare</span> upro <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">-- 变量需要定要在声明游标前</span>    <span class="token keyword">declare</span> cursor_name_pro <span class="token keyword">cursor</span> <span class="token keyword">for</span> <span class="token keyword">select</span> name<span class="token punctuation">,</span>profession <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> age <span class="token operator">&lt;=</span> uage<span class="token punctuation">;</span> <span class="token comment">-- 声明游标，存储查询结果集</span>     <span class="token comment">-- 声明条件处理程序 ： 当SQL语句执行抛出的状态码为02开头时，将关闭游标u_cursor，并退出</span>    <span class="token keyword">declare</span> <span class="token keyword">exit</span> <span class="token keyword">handler</span> <span class="token keyword">for</span> <span class="token operator">not</span> found <span class="token keyword">close</span> cursor_name_pro<span class="token punctuation">;</span>    <span class="token keyword">create</span> <span class="token keyword">table</span> tb_user2<span class="token punctuation">(</span>  <span class="token comment">-- 创建表结构</span>        id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>        name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>        profession <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">open</span> cursor_name_pro<span class="token punctuation">;</span> <span class="token comment">-- 开启游标</span>    <span class="token keyword">while</span> <span class="token boolean">true</span> <span class="token keyword">do</span>        <span class="token keyword">fetch</span> cursor_name_pro <span class="token keyword">into</span> uname<span class="token punctuation">,</span>upro<span class="token punctuation">;</span>  <span class="token comment">-- 获取游标中的记录</span>        <span class="token keyword">insert</span> <span class="token keyword">into</span> tb_user2 <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span>uname<span class="token punctuation">,</span>upro<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">-- 插入数据到新表中</span>        <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span>    <span class="token keyword">close</span> cursor_name_pro<span class="token punctuation">;</span> <span class="token comment">-- 关闭游标</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">call</span> p10<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>while true</code>需要通过<strong>条件处理程序 Handler</strong>来解决。</p><p>条件处理程序（Handler）可以用来定义在流程控制结构执行过程中遇到问题时相应的处理步骤。具体<br>语法为：  </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span> handler_action <span class="token keyword">HANDLER</span> <span class="token keyword">FOR</span> condition_value <span class="token punctuation">[</span><span class="token punctuation">,</span> condition_value<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> statement <span class="token punctuation">;</span><span class="token comment">-- handler_action 的取值：</span><span class="token comment">-- 1.CONTINUE: 继续执行当前程序</span><span class="token comment">-- 2.EXIT: 终止执行当前程序</span><span class="token comment">-- condition_value 的取值：</span><span class="token comment">-- 1.SQLSTATE sqlstate_value: 状态码，如 02000</span><span class="token comment">-- 2.SQLWARNING: 所有以01开头的SQLSTATE代码的简写</span><span class="token comment">-- 3.NOT FOUND: 所有以02开头的SQLSTATE代码的简写</span><span class="token comment">-- 4.SQLEXCEPTION: 所有没有被SQLWARNING 或 NOT FOUND捕获的SQLSTATE代码的简写</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体的错误状态码，可以参考官方文档：</p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/declare-handler.html">https://dev.mysql.com/doc/refman/8.0/en/declare-handler.html</a></p><p><a href="https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html">https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html</a>  </p><h3 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h3><p>存储函数是<strong>有返回值的存储过程</strong>，存储函数的<strong>参数只能是IN类型的</strong>。具体语法如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> 存储函数名称 <span class="token punctuation">(</span><span class="token punctuation">[</span> 参数列表 <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">RETURNS</span> <span class="token keyword">type</span> <span class="token punctuation">[</span>characteristic <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token keyword">BEGIN</span>    <span class="token comment">-- SQL语句</span>    <span class="token keyword">RETURN</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>characteristic说明:</p><ul><li>DETERMINISTIC：  相同的输入参数总是产生相同的结果。</li><li>NO SQL：不包含 SOL 语句。</li><li>READS SOL DATA：包含读取数据的语句，但不包含写入数据的语句。</li></ul><p>案例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 计算从1累加到n的值，n为传入的参数值</span><span class="token keyword">create</span> <span class="token keyword">function</span> fun1<span class="token punctuation">(</span>n <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">returns</span> <span class="token keyword">int</span> <span class="token keyword">deterministic</span>  <span class="token comment">-- 8.0版本以上必须指定characteristic</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> total <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> n<span class="token operator">></span><span class="token number">0</span> <span class="token keyword">do</span>        <span class="token keyword">set</span> total :<span class="token operator">=</span> total<span class="token operator">+</span>n<span class="token punctuation">;</span>        <span class="token keyword">set</span> n :<span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> total<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">select</span> fun1<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>存储函数应用场景比较少，因为能用存储函数的都可以用存储过程替代。</p></blockquote><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><h4 id="触发器的介绍"><a href="#触发器的介绍" class="headerlink" title="触发器的介绍"></a>触发器的介绍</h4><p>触发器是与表有关的数据库对象，指<strong>在insert/update/delete之前(BEFORE)或之后(AFTER)，触发并执行触发器中定义的SQL语句集合</strong>。触发器的这种特性可以协助应用在数据库端确保数据的完整性, 日志记录 , 数据校验等操作 。</p><p>使用别名OLD和NEW来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还只支持行级触发，不支持语句级触发。  </p><table><thead><tr><th>触发器类型</th><th>NEW 和 OLD</th></tr></thead><tbody><tr><td>INSERT 型触发器</td><td>NEW 表示将要或者已经新增的数据</td></tr><tr><td>UPDATE 型触发器</td><td>OLD 表示修改之前的数据 , NEW 表示将要或已经修改后的数据</td></tr><tr><td>DELETE 型触发器</td><td>OLD 表示将要或者已经删除的数据</td></tr></tbody></table><h4 id="触发器语法"><a href="#触发器语法" class="headerlink" title="触发器语法"></a>触发器语法</h4><ul><li>创建</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> trigger_nameBEFORE<span class="token operator">/</span><span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span><span class="token operator">/</span><span class="token keyword">UPDATE</span><span class="token operator">/</span><span class="token keyword">DELETE</span><span class="token keyword">ON</span> tbl_name <span class="token keyword">FOR EACH ROW</span> <span class="token comment">-- 行级触发器</span><span class="token keyword">BEGIN</span>trigger_stmt <span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看</li></ul><p><code>SHOW TRIGGERS ;  </code></p><ul><li>删除</li></ul><p><code>DROP TRIGGER [schema_name.]trigger_name ; </code> 如果没有指定 schema_name，默认为当前数据库 。</p><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><ul><li>数据准备</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建日志表</span><span class="token keyword">create</span> <span class="token keyword">table</span> user_logs<span class="token punctuation">(</span>  id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>  operation <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'操作类型, insert/update/delete'</span><span class="token punctuation">,</span>  operate_time <span class="token keyword">datetime</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'操作时间'</span><span class="token punctuation">,</span>  operate_id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'操作的ID'</span><span class="token punctuation">,</span>  operate_params <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">'操作参数'</span><span class="token punctuation">,</span>  <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过触发器记录 tb_user 表的数据变更日志，将变更日志插入到日志表user_logs中, 包含增加,修改 , 删除 ;</p><ul><li>insert 插入数据触发器</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> tb_user_insert_trigger    <span class="token keyword">after</span> <span class="token keyword">insert</span>    <span class="token keyword">on</span> tb_user    <span class="token keyword">for each row</span><span class="token keyword">begin</span>    <span class="token keyword">insert</span> <span class="token keyword">into</span> user_logs    <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'insert'</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new<span class="token punctuation">.</span>id<span class="token punctuation">,</span>            concat<span class="token punctuation">(</span><span class="token string">'插入的数据内容为:id='</span><span class="token punctuation">,</span> new<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token string">',name='</span><span class="token punctuation">,</span> new<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">', phone='</span><span class="token punctuation">,</span> NEW<span class="token punctuation">.</span>phone<span class="token punctuation">,</span> <span class="token string">', email='</span><span class="token punctuation">,</span> NEW<span class="token punctuation">.</span>email<span class="token punctuation">,</span>                   <span class="token string">',profession='</span><span class="token punctuation">,</span> NEW<span class="token punctuation">.</span>profession<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token comment">-- 插入数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_user<span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> email<span class="token punctuation">,</span> profession<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> <span class="token keyword">status</span><span class="token punctuation">,</span> createtime<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token string">'二皇子'</span><span class="token punctuation">,</span><span class="token string">'18809091212'</span><span class="token punctuation">,</span><span class="token string">'erhuangzi@163.com'</span><span class="token punctuation">,</span><span class="token string">'软件工程'</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><p><img src="/images/hmmysql2/image-20230204164946475.png"></p><ul><li>update 修改数据触发器</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> tb_user_update_trigger    <span class="token keyword">after</span> <span class="token keyword">update</span>    <span class="token keyword">on</span> tb_user    <span class="token keyword">for each row</span><span class="token keyword">begin</span>    <span class="token keyword">insert</span> <span class="token keyword">into</span> user_logs<span class="token punctuation">(</span>id<span class="token punctuation">,</span> operation<span class="token punctuation">,</span> operate_time<span class="token punctuation">,</span> operate_id<span class="token punctuation">,</span> operate_params<span class="token punctuation">)</span>    <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'update'</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new<span class="token punctuation">.</span>id<span class="token punctuation">,</span>            concat<span class="token punctuation">(</span><span class="token string">'更新之前的数据: id='</span><span class="token punctuation">,</span> old<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token string">',name='</span><span class="token punctuation">,</span> old<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">', phone='</span><span class="token punctuation">,</span>                   old<span class="token punctuation">.</span>phone<span class="token punctuation">,</span> <span class="token string">', email='</span><span class="token punctuation">,</span> old<span class="token punctuation">.</span>email<span class="token punctuation">,</span> <span class="token string">', profession='</span><span class="token punctuation">,</span> old<span class="token punctuation">.</span>profession<span class="token punctuation">,</span>                   <span class="token string">' | 更新之后的数据: id='</span><span class="token punctuation">,</span> new<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token string">',name='</span><span class="token punctuation">,</span> new<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">', phone='</span><span class="token punctuation">,</span>                   NEW<span class="token punctuation">.</span>phone<span class="token punctuation">,</span> <span class="token string">', email='</span><span class="token punctuation">,</span> NEW<span class="token punctuation">.</span>email<span class="token punctuation">,</span> <span class="token string">', profession='</span><span class="token punctuation">,</span> NEW<span class="token punctuation">.</span>profession<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token comment">-- 测试数据</span><span class="token keyword">update</span> tb_user <span class="token keyword">set</span> age <span class="token operator">=</span> <span class="token number">32</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span><span class="token keyword">update</span> tb_user <span class="token keyword">set</span> age <span class="token operator">=</span> <span class="token number">8</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><p><img src="/images/hmmysql2/image-20230204165510983.png"></p><ul><li>delete 删除数据触发器</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> tb_user_delete_trigger    <span class="token keyword">after</span> <span class="token keyword">delete</span>    <span class="token keyword">on</span> tb_user    <span class="token keyword">for each row</span><span class="token keyword">begin</span>    <span class="token keyword">insert</span> <span class="token keyword">into</span> user_logs<span class="token punctuation">(</span>id<span class="token punctuation">,</span> operation<span class="token punctuation">,</span> operate_time<span class="token punctuation">,</span> operate_id<span class="token punctuation">,</span> operate_params<span class="token punctuation">)</span>    <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'delete'</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> old<span class="token punctuation">.</span>id<span class="token punctuation">,</span>            concat<span class="token punctuation">(</span><span class="token string">'删除之前的数据: id='</span><span class="token punctuation">,</span> old<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token string">',name='</span><span class="token punctuation">,</span> old<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">', phone='</span><span class="token punctuation">,</span>                   old<span class="token punctuation">.</span>phone<span class="token punctuation">,</span> <span class="token string">', email='</span><span class="token punctuation">,</span> old<span class="token punctuation">.</span>email<span class="token punctuation">,</span> <span class="token string">', profession='</span><span class="token punctuation">,</span> old<span class="token punctuation">.</span>profession<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token comment">-- 测试数据</span><span class="token keyword">delete</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><p><img src="/images/hmmysql2/image-20230204165613595.png"></p><h2 id="6-锁"><a href="#6-锁" class="headerlink" title="6. 锁"></a>6. 锁</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>介绍</li></ul><p>锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统的计算资源（CPU、RAM、I/O）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p><ul><li>分类</li></ul><p>MySQL中的锁，按照锁的粒度分，分为以下三类：</p><ol><li>全局锁：锁定数据库中的所有表。</li><li>表级锁：每次操作锁住整张表。</li><li>行级锁：每次操作锁住对应的行数据  </li></ol><h3 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h3><p>全局锁就是对<strong>整个数据库实例加锁</strong>，加锁后整个实例就处于<strong>只读</strong>状态，后续的DML(增删改)的写语句，DDL语句，已经更新操作的事务提交语句都将被阻塞。</p><p>其<strong>典型的使用场景是做全库的逻辑备份</strong>，对所有的表进行锁定，从而获取一致性视图，保证数据的完整<br>性。  </p><p><img src="/images/hmmysql2/image-20230206133225453.png" alt="备份过程中不加全局锁造成数据不一致"></p><p><img src="/images/hmmysql2/image-20230206133303188.png" alt="加了全局锁后只能执行数据查询"></p><ul><li><strong>语法：</strong></li></ul><p>1）加全局锁</p><p><code>flush tables with read lock ;  </code></p><p>2）数据备份</p><p><code>mysqldump -uroot –p1234 itcast &gt; itcast.sql  </code></p><p>账号为root，密码为1234，数据库名为itcast，itcast.sql为位置及文件名，例如D:/itcast.sql</p><p>注意mysqldump不是mysql的语法，是一个工具，所以我们可以之间在cmd里进行输入备份。</p><p>3）释放锁</p><p><code>unlock tables;</code></p><ul><li><strong>特点：</strong></li></ul><p>数据库中加全局锁，是一个比较重的操作，存在以下问题：</p><p>1.如果在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆。</p><p>2.如果在从库上备份，那么在备份期间从库不能执行主库同步过来的二进制日志（binlog），会导致主从延迟。</p><p>在InnoDB引擎中，我们可以在备份时加上参数 –single-transaction 参数来完成不加锁的一致性数据备份。  </p><p><code>mysqldump --single-transaction -uroot –p123456 itcast &gt; itcast.sql  </code></p><h3 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h3><p>表级锁，每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。应用在MyISAM、InnoDB、BDB等存储引擎中。</p><p>对于表级锁，主要分为以下三类：</p><ol><li>表锁</li><li>元数据锁（meta data lock，MDL）</li><li>意向锁  </li></ol><h4 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h4><p>对于表锁，分为两类：</p><ul><li><p>表共享读锁（read lock）</p></li><li><p>表独占写锁（write lock）</p></li></ul><p>语法：</p><p>加锁：<code>lock tables 表名... read/write。</code></p><p>释放锁：<code>unlock tables / 客户端断开连接 。</code></p><p>对于读锁：</p><p><img src="/images/hmmysql2/image-20230206155649098.png" alt="读锁"></p><p>左侧为客户端一，对指定表加了读锁，不会影响右侧客户端二的读，但是会阻塞右侧客户端二的写。  </p><p>对于写锁：</p><p><img src="/images/hmmysql2/image-20230206162604789.png" alt="写锁"></p><p>左侧为客户端一，对指定表加了写锁，会阻塞右侧客户端的读和写。</p><blockquote><p>结论: 读锁不会阻塞其他客户端的读，但是会阻塞写。写锁既会阻塞其他客户端的读，又会阻塞其他客户端的写。  </p></blockquote><h4 id="元数据锁"><a href="#元数据锁" class="headerlink" title="元数据锁"></a>元数据锁</h4><p>meta data lock , 元数据锁，简写MDL。</p><p>MDL加锁过程是<strong>系统自动控制，无需显式使用</strong>，在访问一张表的时候会自动加上。MDL锁主要作用是维护表元数据的数据一致性，在表上有活动事务的时候，不可以对元数据进行写入操作。<strong>为了避免DML与DDL冲突，保证读写的正确性。</strong></p><p>这里的元数据，大家可以<strong>简单理解为就是一张表的表结构</strong>。 也就是说，某一张表涉及到未提交的事务时，是不能够修改这张表的表结构的。</p><p>在MySQL5.5中引入了MDL，当对一张表进行增删改查的时候，加MDL读锁(共享)；当对表结构进行变更操作的时候，加MDL写锁(排他)。</p><p>常见的SQL操作时，所添加的元数据锁 ：</p><table><thead><tr><th>对应SQL</th><th>锁类型</th><th>说明</th></tr></thead><tbody><tr><td>lock tables xxx read / write</td><td>SHARED_READ_ONLY / SHARED_NO_READ_WRITE</td><td></td></tr><tr><td>select 、select … lock in share mode</td><td>SHARED_READ</td><td>与SHARED_READ、 SHARED_WRITE兼容，与 EXCLUSIVE互斥</td></tr><tr><td>insert 、update、 delete、select … for update</td><td>SHARED_WRITE</td><td>与SHARED_READ、 SHARED_WRITE兼容，与 EXCLUSIVE互斥</td></tr><tr><td>alter table …</td><td>EXCLUSIVE</td><td>与其他的MDL都互斥</td></tr></tbody></table><p>查看数据库的元数据锁：</p><p><code>select object_type,object_schema,object_name,lock_type,lock_duration fromperformance_schema.metadata_locks ;  </code></p><h4 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h4><p>先来看一个例子：</p><p><img src="/images/hmmysql2/image-20230207105809307.png" alt="当没有意向锁"></p><p>首先左边客户端一，开启一个事务，然后执行DML操作，在执行DML语句时，会对涉及到的行加行锁。  </p><p>当右边客户端二，想对这张表加表锁时，会检查当前表是否有对应的行锁，如果没有，则添加表锁，此时就会从第一行数据，检查到最后一行数据，效率较低。  （逐行检查效率低）</p><p><img src="/images/hmmysql2/image-20230207105900288.png" alt="有了意向锁"></p><p>左边客户端一，在执行DML操作时，会对涉及的行加行锁，<strong>同时也会对该表加上意向锁</strong>。  </p><p>而其他客户端，在对这张表加表锁的时候，会根据该表上所加的意向锁来判定是否可以成功加表锁，而不用逐行判断行锁情况了。  </p><p>（直接判断意向锁）</p><p>为了避免DML在执行时，加的行锁与表锁的冲突，在InnoDB中引入了意向锁，使得表锁不用检查每行数据是否加锁，使用意向锁来减少表锁的检查。  </p><ul><li>分类</li></ul><p><strong>意向共享锁(IS)</strong>: 由语句select … lock in share mode添加 。 与 表锁共享锁(read)兼容，与表锁排他锁(write)互斥。</p><p><strong>意向排他锁(IX)</strong>: 由insert、update、delete、select…for update添加 。与表锁共享锁(read)及排他锁(write)都互斥，意向锁之间不会互斥。  </p><blockquote><p>一旦事务提交了，意向共享锁、意向排他锁，都会自动释放。  </p></blockquote><p>查看SQL语句：</p><p><code>select object_schema,object_name,index_name,lock_type,lock_mode,lock_data fromperformance_schema.data_locks;  </code></p><h3 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h3><p>行级锁，每次操作锁住对应的行数据。锁定粒度最小，发生锁冲突的概率最低，并发度最高。应用在InnoDB存储引擎中。</p><p>InnoDB的数据是基于索引组织的，行锁是通过<strong>对索引上的索引项加锁</strong>来实现的，而不是对记录加的锁。对于行级锁，主要分为以下三类：</p><ul><li>行锁（Record Lock）</li><li>间隙锁（Gap Lock）</li><li>临键锁（Next-Key Lock）</li></ul><h4 id="行锁（记录锁）"><a href="#行锁（记录锁）" class="headerlink" title="行锁（记录锁）"></a>行锁（记录锁）</h4><p>锁定单个行记录的锁，防止其他事务对此行进行update和delete。在RC、RR隔离级别下都支持。</p><blockquote><p>隔离级别：Read committed(Oracle) Repeatable Read(MySQL) 。</p></blockquote><p>InnoDB实现了以下两种类型的行锁：</p><ul><li>共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。</li><li>排他锁（X）：允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁。  </li></ul><p><img src="/images/hmmysql2/image-20230207151809122.png" alt="两种行锁的兼容情况"></p><blockquote><p>注：行锁中的共享锁在lock_mode字段中叫”S,REC_NOT_GAP”,<br>                行锁中的排他锁在lock_mode字段中分别叫”X,REC_NOT_GAP”</p></blockquote><p>常见的SQL语句，在执行时，所加的行锁如下：  </p><table><thead><tr><th>SQL</th><th>行锁类型</th><th>说明</th></tr></thead><tbody><tr><td>INSERT …</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>UPDATE …</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>DELETE …</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>SELECT（正常）</td><td>不加任何锁</td><td></td></tr><tr><td>SELECT … LOCK IN SHARE MODE</td><td>共享锁</td><td>需要手动在SELECT之后加LOCK IN SHARE MODE</td></tr><tr><td>SELECT … FOR UPDATE</td><td>排他锁</td><td>需要手动在SELECT之后加FOR UPDATE</td></tr></tbody></table><p>查看意向锁和行锁：</p><p><code>select object_schema,object_name,index_name,lock_type,lock_mode,lock_data from performance_schema.data_locks;</code></p><p>默认情况下，InnoDB在 REPEATABLE READ事务隔离级别运行，InnoDB使用 next-key 锁进行搜索和索引扫描，以防止幻读。</p><ul><li>针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动优化为行锁。</li><li>InnoDB的行锁是针对于索引加的锁，不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，此时 就会<strong>升级为表锁</strong>。  （这一块在update优化时讲过）</li></ul><h4 id="间隙锁-amp-临键锁"><a href="#间隙锁-amp-临键锁" class="headerlink" title="间隙锁&amp;临键锁"></a>间隙锁&amp;临键锁</h4><p>间隙锁：<strong>锁定索引记录间隙（不含该记录）</strong>，确保索引记录间隙不变，<strong>防止其他事务在这个间隙进行insert，产生幻读</strong>。在RR隔离级别下都支持。</p><p>临键锁：<strong>行锁和间隙锁组合</strong>，同时锁住数据，并锁住数据前面的间隙Gap。在RR隔离级别下支持。  （同时锁住某行记录和一个区间，上界为开区间，下界为闭区间。）</p><p>默认情况下，InnoDB在 REPEATABLE READ事务隔离级别运行，InnoDB使用 next-key 锁进行搜索和索引扫描，以防止幻读。</p><ul><li>索引上的等值查询(唯一索引)，给不存在的记录加锁时, 优化为间隙锁 。</li><li>索引上的等值查询(非唯一普通索引)，向右遍历时最后一个值不满足查询需求时，next-key lock 退化为间隙锁。</li><li>引上的范围查询(唯一索引)–会访问到不满足条件的第一个值为止。  </li></ul><p><strong>索引上的等值查询(唯一索引)，给不存在的记录加锁时, 优化为间隙锁 ，示例如下：</strong></p><p>如下存在一张名为user的表，id是主键，索引肯定是唯一的：</p><p><img src="/images/hmmysql2/image-20230207174131042.png" alt="user表"></p><p>在<code>客户端1</code>开启一个事务，执行update语句，改变一个id不存在的值</p><p><img src="/images/hmmysql2/image-20230207174239327.png"></p><p>从客户端2查看存在的锁</p><p><img src="/images/hmmysql2/image-20230207174328979.png"></p><p>RECORD就是指行级锁，X是指排他锁，GAP就是指间隙锁，lock_data为5表示间隙末尾为5，即间隙在3~5之间</p><p>之后在<code>客户端2</code>增加数据，如果插入成功然后在<code>客户端1</code>读出就会产生幻读，但是发现阻塞</p><p><img src="/images/hmmysql2/image-20230207174635176.png"></p><p>在<code>客户端1</code>提交事务后，<code>客户端2</code>报错</p><p><img src="/images/hmmysql2/image-20230207174900893.png"></p><p><code>客户端1</code>也没有读出id为4的内容，没有出现幻读</p><p><img src="/images/hmmysql2/image-20230207174942101.png"></p><p><strong>索引上的等值查询(非唯一普通索引)，向右遍历时最后一个值不满足查询需求时，next-key lock 退化为间隙锁，示例如下：</strong></p><p>创建普通索引idx_user_age：</p><p><img src="/images/hmmysql2/image-20230207181819327.png"></p><p>添加共享锁：</p><p><img src="/images/hmmysql2/image-20230207181921170.png"></p><p>查看锁：</p><p><img src="/images/hmmysql2/image-20230207182042016.png"></p><p>首先根据下面这张图进行分析</p><p><img src="/images/hmmysql2/image-20230207174131042.png"></p><p>可以看出18和19为年龄，1和5为id。</p><p>也就是说会把18这一行加一个行锁REC_NOT_GAP，同时会根据年龄向右遍历，直到遍历到19，在id为1到5之间，加一个间隙锁（2,3,4）。</p><blockquote><p>lock_mode</p><p>S是指临界锁</p><p>S,REC_NOT_GAP是指行锁</p><p>S,GAP是指间隙锁</p><p>lock_data supremum pseu 正无穷</p></blockquote><p><img src="/images/hmmysql2/image-20230207184535286.png" alt="首先有一张stu表"></p><p>执行主键的范围查询</p><p><img src="/images/hmmysql2/image-20230207184455532.png"></p><p>会产生如下索引：</p><p><img src="/images/hmmysql2/image-20230207184514988.png"></p><p>IS是表锁，这里不需要考虑，</p><p>S,REC_NOT_GAP，表示对id为19这一行加了行锁，</p><p>S suprenum pseu表示从无穷大到25这一段都加了临界锁，</p><p>S 25表示对id从19~25不包含19，包含25，从25到无穷加了临界锁</p><h2 id="7-InnoDB引擎"><a href="#7-InnoDB引擎" class="headerlink" title="7. InnoDB引擎"></a>7. InnoDB引擎</h2><h2 id="8-MySQL管理"><a href="#8-MySQL管理" class="headerlink" title="8. MySQL管理"></a>8. MySQL管理</h2>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑马MySQL学习笔记(一)基础篇</title>
      <link href="/2023/01/27/hmmysql/"/>
      <url>/2023/01/27/hmmysql/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然之前简单的接触MySQL，但还没有系统的学习过MySQL，所以准备好好学习下。</p><p>这是根据B站视频教程：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru/?spm_id_from=333.337.search-card.all.click&vd_source=794a7fc718885ad84490c05351dcf216">黑马程序员 MySQL数据库入门到精通，从mysql安装到mysql高级、mysql优化全囊括</a> 做的学习笔记。</p><h2 id="MySQL-课程介绍"><a href="#MySQL-课程介绍" class="headerlink" title="MySQL 课程介绍"></a>MySQL 课程介绍</h2><h3 id="基础篇（初级工程师）"><a href="#基础篇（初级工程师）" class="headerlink" title="基础篇（初级工程师）"></a>基础篇（初级工程师）</h3><ul><li>MySQL 概述</li><li>SQL</li><li>函数</li><li>约束</li><li>多表查询</li><li>事务</li></ul><h3 id="进阶篇（中级工程师）"><a href="#进阶篇（中级工程师）" class="headerlink" title="进阶篇（中级工程师）"></a>进阶篇（中级工程师）</h3><ul><li>存储引擎</li><li>索引</li><li>SQL优化</li><li>视图/存储过程/触发器</li><li>锁</li><li>InnoDB核心</li><li>MySQL管理</li></ul><h3 id="运维篇（高级工程师）"><a href="#运维篇（高级工程师）" class="headerlink" title="运维篇（高级工程师）"></a>运维篇（高级工程师）</h3><ul><li>日志</li><li>主从分离</li><li>分库分表</li><li>读写分离</li></ul><h2 id="1-MySQL概述"><a href="#1-MySQL概述" class="headerlink" title="1. MySQL概述"></a>1. MySQL概述</h2><table><thead><tr><th align="center">名称</th><th align="left">全称</th><th align="left">简称</th></tr></thead><tbody><tr><td align="center">数据库</td><td align="left">存储数据的仓库，数据是有组织的进行存储</td><td align="left">DataBase(DB)</td></tr><tr><td align="center">数据库管理系统</td><td align="left">操纵和管理数据库的大型软件</td><td align="left">DataBase Management System (DBMS)</td></tr><tr><td align="center">SQL</td><td align="left">操作关系型数据库的编程语言，定义了一套操作关系型数据库统一标准</td><td align="left">Structured Query Language (SOL)</td></tr></tbody></table><h3 id="1-1-MySQL数据库"><a href="#1-1-MySQL数据库" class="headerlink" title="1.1 MySQL数据库"></a>1.1 MySQL数据库</h3><p>MySQL官方提供了2个不同的版本：</p><ul><li>社区版<ul><li>免费，但不提供任何技术支持</li></ul></li><li>商业版<ul><li>收费，可以试用30天，官方提供技术支持的</li></ul></li></ul><h3 id="1-2-MySQL安装"><a href="#1-2-MySQL安装" class="headerlink" title="1.2 MySQL安装"></a>1.2 MySQL安装</h3><p>本课程采用MySQL Community Server 8.0.26（目前的最新版本是8.0.32）</p><p>下载地址：<a href="https://dev.mysql.com/downloads/windows/installer/8.0.html">https://dev.mysql.com/downloads/windows/installer/8.0.html</a></p><p><img src="/images/hmmysql/image-20230127110920201.png" alt="image-20230127110920201"><br>为了保证和课程的一致性，我选择先下载旧版本。</p><p><img src="/images/hmmysql/image-20230127111407760.png" alt="选择默认开发者模式"><br>之后基本都是Next或Execute即可。</p><p><img src="/images/hmmysql/image-20230127112324623.png" alt="设置密码为123456"></p><p><img src="/images/hmmysql/image-20230127112354872.png"></p><h3 id="1-3-启动与停止"><a href="#1-3-启动与停止" class="headerlink" title="1.3 启动与停止"></a>1.3 启动与停止</h3><ul><li>services.msc</li></ul><p><img src="/images/hmmysql/image-20230127112702645.png"></p><ul><li>cmd 管理员</li></ul><pre class="line-numbers language-none"><code class="language-none">net start mysql80 启动net stop mysql80 停止<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/hmmysql/image-20230127112929256.png"></p><blockquote><p>mysql80 是安装过程中的 Windows Service Name。</p></blockquote><h3 id="1-4-客户端连接"><a href="#1-4-客户端连接" class="headerlink" title="1.4 客户端连接"></a>1.4 客户端连接</h3><p>方式一：MySQL 提供的客户端命令行工具</p><p><img src="/images/hmmysql/image-20230127113246427.png"></p><p>输入的密码为自己安装时设置的密码</p><p>方式二：系统自带的命令行工具执行指令</p><pre class="line-numbers language-none"><code class="language-none">mysql [-h 127.0.0.1] [-P 3306] -u -root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要先配置环境变量</p><p><img src="/images/hmmysql/image-20230127114102552.png"></p><h3 id="1-5-配置环境变量"><a href="#1-5-配置环境变量" class="headerlink" title="1.5 配置环境变量"></a>1.5 配置环境变量</h3><p>找到MySQL Server下的bin文件</p><pre class="line-numbers language-none"><code class="language-none">C:\Program Files\MySQL\MySQL Server 8.0\bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制到环境变量</p><p><img src="/images/hmmysql/image-20230127114023507.png"></p><h3 id="1-6-MySQL-数据模型"><a href="#1-6-MySQL-数据模型" class="headerlink" title="1.6 MySQL 数据模型"></a>1.6 MySQL 数据模型</h3><p><img src="/images/hmmysql/image-20230127124105704.png"></p><h2 id="2-SQL"><a href="#2-SQL" class="headerlink" title="2. SQL"></a>2. SQL</h2><h3 id="2-1-SQL-通用语法"><a href="#2-1-SQL-通用语法" class="headerlink" title="2.1 SQL 通用语法"></a>2.1 SQL 通用语法</h3><ol><li>SQL 语句可以单行或多行书写，以分号结尾。</li><li>SQL 语句可以使用空格/缩进来增强语句的可读性。</li><li>MySQL数据库的SOL语句不区分大小写，关键字建议使用大写。</li><li>注释：<ul><li>单行注释：<code>-- 注释内容</code> 或 <code># 注释内容(MySQL特有)</code></li><li>多行注释： <code>/* 注释内容 */</code></li></ul></li></ol><h3 id="2-2-SQL-分类"><a href="#2-2-SQL-分类" class="headerlink" title="2.2 SQL 分类"></a>2.2 SQL 分类</h3><table><thead><tr><th align="center">分类</th><th align="left">全称</th><th>说明</th></tr></thead><tbody><tr><td align="center">DDL</td><td align="left">Data Definition Language</td><td>数据定义语言，用来定义数据库对象(数据库，表，字段)</td></tr><tr><td align="center">DML</td><td align="left">Data Manipulation Language</td><td>数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td align="center">DQL</td><td align="left">Data Query Language</td><td>数据查询语言，用来查询数据库中表的记录</td></tr><tr><td align="center">DCL</td><td align="left">Data Control Language</td><td>数据控制语言，用来创建数据库用户、控制数据库的访问权限</td></tr></tbody></table><h3 id="2-3-DDL（数据库定义语言）"><a href="#2-3-DDL（数据库定义语言）" class="headerlink" title="2.3 DDL（数据库定义语言）"></a>2.3 DDL（数据库定义语言）</h3><h4 id="2-3-1-数据库操作"><a href="#2-3-1-数据库操作" class="headerlink" title="2.3.1 数据库操作"></a>2.3.1 数据库操作</h4><p>查询所有数据库：<br><code>SHOW DATABASES;</code></p><p>查询当前数据库：<br><code>SELECT DATABASE();</code></p><p>创建数据库：<br><code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code></p><p>删除数据库：<br><code>DROP DATABASE [ IF EXISTS ] 数据库名;</code></p><p>使用数据库：<br><code>USE 数据库名;</code></p><blockquote><p>UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集，支持4个字节。</p></blockquote><h4 id="2-3-2-表操作"><a href="#2-3-2-表操作" class="headerlink" title="2.3.2 表操作"></a>2.3.2 表操作</h4><ul><li>查询</li></ul><p>查询当前数据库所有表：<br><code>SHOW TABLES;</code></p><p>查询表结构：<br><code>DESC 表名;</code></p><p>查询指定表的建表语句：<br><code>SHOW CREATE TABLE 表名;</code></p><ul><li>创建</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>字段<span class="token number">1</span> 字段<span class="token number">1</span>类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段<span class="token number">1</span>注释<span class="token punctuation">]</span><span class="token punctuation">,</span>字段<span class="token number">2</span> 字段<span class="token number">2</span>类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段<span class="token number">2</span>注释<span class="token punctuation">]</span><span class="token punctuation">,</span>字段<span class="token number">3</span> 字段<span class="token number">3</span>类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段<span class="token number">3</span>注释<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>字段n 字段n类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段n注释<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span> <span class="token keyword">COMMENT</span> 表注释 <span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例，创建如下表：</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>gender</th></tr></thead><tbody><tr><td>1</td><td>8yyy</td><td>18</td><td>男</td></tr><tr><td>2</td><td>张三</td><td>19</td><td>男</td></tr><tr><td>3</td><td>李四</td><td>20</td><td>男</td></tr></tbody></table><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> EY<span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">USE</span> EY<span class="token punctuation">;</span><span class="token keyword">Database</span> changedmysql<span class="token operator">></span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> TB_USER<span class="token punctuation">(</span>    <span class="token operator">-</span><span class="token operator">></span> id <span class="token keyword">int</span> <span class="token keyword">comment</span> <span class="token string">'编号'</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span> age <span class="token keyword">int</span> <span class="token keyword">comment</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span> gender <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">'性别'</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">'用户表'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改</li></ul><p>添加字段：<br><code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code></p><p>例：<code>ALTER TABLE EMP ADD NICKNAME VARCHAR(20) COMMENT &#39;昵称&#39;;</code></p><p>修改数据类型：<br><code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code></p><p>修改字段名和字段类型：<br><code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code></p><p>例：将EMP表的NICKNAME字段修改为USERNAME，类型为VARCHAR(30)<br><code>ALTER TABLE EMP CHANGE NICKNAME USERNAME VARCHAR(30) COMMENT &#39;用户名&#39;;</code></p><p>删除字段：<br><code>ALTER TABLE 表名 DROP 字段名;</code></p><p>修改表名：<br><code>ALTER TABLE 表名 RENAME TO 新表名;</code></p><ul><li>删除</li></ul><p>删除表：<br><code>DROP TABLE [IF EXISTS] 表名;</code></p><p>删除表，并重新创建该表：<br><code>TRUNCATE TABLE 表名;</code></p><blockquote><p>在删除表时，表中的全部数据也会被删除。</p></blockquote><p>删除数据：<br><code>DELETE FROM 表名 [ WHERE 条件 ];</code></p><h4 id="2-3-3-数据类型"><a href="#2-3-3-数据类型" class="headerlink" title="2.3.3 数据类型"></a>2.3.3 数据类型</h4><blockquote><p>MySQL 支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型。</p></blockquote><ul><li>数值类型</li></ul><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">范围（有符号）</th><th align="left">范围（无符号）</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="left">1 Bytes</td><td align="left">(-128，127)</td><td align="left">(0，255)</td><td align="left">小整数值</td></tr><tr><td align="left">SMALLINT</td><td align="left">2 Bytes</td><td align="left">(-32 768，32 767)</td><td align="left">(0，65 535)</td><td align="left">大整数值</td></tr><tr><td align="left">MEDIUMINT</td><td align="left">3 Bytes</td><td align="left">(-8 388 608，8 388 607)</td><td align="left">(0，16 777 215)</td><td align="left">大整数值</td></tr><tr><td align="left">INT或INTEGER</td><td align="left">4 Bytes</td><td align="left">(-2 147 483 648，2 147 483 647)</td><td align="left">(0，4 294 967 295)</td><td align="left">大整数值</td></tr><tr><td align="left">BIGINT</td><td align="left">8 Bytes</td><td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td align="left">(0，18 446 744 073 709 551 615)</td><td align="left">极大整数值</td></tr><tr><td align="left">FLOAT</td><td align="left">4 Bytes</td><td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td align="left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td align="left">单精度 浮点数值</td></tr><tr><td align="left">DOUBLE</td><td align="left">8 Bytes</td><td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">双精度 浮点数值</td></tr><tr><td align="left">DECIMAL</td><td align="left">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td align="left">依赖于M和D的值</td><td align="left">依赖于M和D的值</td><td align="left">小数值</td></tr></tbody></table><ul><li>字符串类型</li></ul><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">CHAR</td><td align="left">0-255 bytes</td><td align="left">定长字符串</td></tr><tr><td align="left">VARCHAR</td><td align="left">0-65535 bytes</td><td align="left">变长字符串</td></tr><tr><td align="left">TINYBLOB</td><td align="left">0-255 bytes</td><td align="left">不超过 255 个字符的二进制字符串</td></tr><tr><td align="left">TINYTEXT</td><td align="left">0-255 bytes</td><td align="left">短文本字符串</td></tr><tr><td align="left">BLOB</td><td align="left">0-65 535 bytes</td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="left">TEXT</td><td align="left">0-65 535 bytes</td><td align="left">长文本数据</td></tr><tr><td align="left">MEDIUMBLOB</td><td align="left">0-16 777 215 bytes</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="left">MEDIUMTEXT</td><td align="left">0-16 777 215 bytes</td><td align="left">中等长度文本数据</td></tr><tr><td align="left">LONGBLOB</td><td align="left">0-4 294 967 295 bytes</td><td align="left">二进制形式的极大文本数据</td></tr><tr><td align="left">LONGTEXT</td><td align="left">0-4 294 967 295 bytes</td><td align="left">极大文本数据</td></tr></tbody></table><ul><li>日期和时间类型</li></ul><table><thead><tr><th align="left">类型</th><th align="left">大小 ( bytes)</th><th align="left">范围</th><th align="left">格式</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">DATE</td><td align="left">3</td><td align="left">1000-01-01/9999-12-31</td><td align="left">YYYY-MM-DD</td><td align="left">日期值</td></tr><tr><td align="left">TIME</td><td align="left">3</td><td align="left">‘-838:59:59’/‘838:59:59’</td><td align="left">HH:MM:SS</td><td align="left">时间值或持续时间</td></tr><tr><td align="left">YEAR</td><td align="left">1</td><td align="left">1901/2155</td><td align="left">YYYY</td><td align="left">年份值</td></tr><tr><td align="left">DATETIME</td><td align="left">8</td><td align="left">‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’</td><td align="left">YYYY-MM-DD hh:mm:ss</td><td align="left">混合日期和时间值</td></tr><tr><td align="left">TIMESTAMP</td><td align="left">4</td><td align="left">‘1970-01-01 00:00:01’ UTC 到 ‘2038-01-19 03:14:07’ UTC结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td align="left">YYYY-MM-DD hh:mm:ss</td><td align="left">混合日期和时间值，时间戳</td></tr></tbody></table><p>转自：<a href="https://www.runoob.com/mysql/mysql-data-types.html">https://www.runoob.com/mysql/mysql-data-types.html</a></p><p>案例：根据需求创建表（设计合理的数据类型、长度）</p><p>设计一张员工信息表，要求如下：</p><ol><li>编号(纯数字)</li><li>员工工号(字符串类型，长度不超过10位)</li><li>员工姓名(字符串类型，长度不超过10位)</li><li>性别(男/女，存储一个汉字)</li><li>年龄 (正常人年龄，不可能存储负数)</li><li>身份证号(二代身份证号均为18位，身份证中有X这样的字符)</li><li>入职时间(取值年月日即可)</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> EMP<span class="token punctuation">(</span>ID <span class="token keyword">INT</span> <span class="token keyword">COMMENT</span> <span class="token string">'编号'</span><span class="token punctuation">,</span>    WORKNO <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'工号'</span><span class="token punctuation">,</span>    NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>    GENDER <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'性别'</span><span class="token punctuation">,</span>    AGE <span class="token keyword">TINYINT</span> <span class="token keyword">UNSIGNED</span> <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>    IDCARD <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'身份证号'</span><span class="token punctuation">,</span>    ENTRYDATE <span class="token keyword">DATE</span> <span class="token keyword">COMMENT</span> <span class="token string">'入职时间'</span><span class="token punctuation">)</span><span class="token keyword">COMMENT</span> <span class="token string">'员工表'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-MySQL-图形化界面"><a href="#2-4-MySQL-图形化界面" class="headerlink" title="2.4 MySQL 图形化界面"></a>2.4 MySQL 图形化界面</h3><ol><li>Sqlyog</li><li>Navicat</li><li>DataGrip</li></ol><p>其中，DataGrip 功能最为强大。</p><p>目前只有收费，没有免费30天的，关于激活密钥可参考：<a href="https://zhuanlan.zhihu.com/p/497182604">https://zhuanlan.zhihu.com/p/497182604</a></p><p>激活之后，打开创建新项目 New Project:mysql-base ，选择 ‘+’  -&gt; DataSource -&gt; MySQL</p><p><img src="/images/hmmysql/image-20230127145705188.png" alt="输入用户和密码"></p><p>之后选择底下的 DownLoad，下载驱动文件，点击测试，选择OK</p><p><img src="/images/hmmysql/image-20230127150001945.png"></p><p>可选择 <code>0 of 5</code></p><p><img src="/images/hmmysql/image-20230127150022625.png" alt="选择所有数据库"></p><blockquote><p>在这里，schema 等同于 database。</p></blockquote><p><img src="/images/hmmysql/image-20230127150156830.png" alt="显示了所有数据库"></p><p>图形化界面添加数据库和数据表都很简单</p><p><img src="/images/hmmysql/image-20230127150945943.png"></p><h3 id="2-5-DML（数据操作语言）"><a href="#2-5-DML（数据操作语言）" class="headerlink" title="2.5 DML（数据操作语言）"></a>2.5 DML（数据操作语言）</h3><ul><li><strong>添加数据</strong></li></ul><p>指定字段：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code></p><p>全部字段：<br><code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code></p><p>批量添加数据：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code><br><code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p><blockquote><ul><li>插入数据时，指定的字段顺序需要与值的顺序一一对应。</li><li>字符串和日期类型数据应该包含在引号中。</li><li>插入的数据大小应该在字段的规定范围内。</li></ul></blockquote><ul><li><strong>修改数据</strong></li></ul><p>修改数据：<br><code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code></p><p>例子：</p><p><code>UPDATE emp SET name = &#39;Jack&#39; WHERE id = 1;</code></p><ul><li><strong>删除数据</strong></li></ul><p><code>DELETE FROM 表名 [ WHERE 条件 ];</code></p><blockquote><p>DELETE 语句不能删除某一个字段的值（可以使用UPDATE）。</p></blockquote><h3 id="2-6-DQL（数据查询语言）"><a href="#2-6-DQL（数据查询语言）" class="headerlink" title="2.6 DQL（数据查询语言）"></a>2.6 DQL（数据查询语言）</h3><p>查询关键词：SELECT</p><ul><li>DQL 语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>字段列表<span class="token keyword">FROM</span>表名字段<span class="token keyword">WHERE</span>条件列表<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>分组字段列表<span class="token keyword">HAVING</span>分组后的条件列表<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>排序字段列表<span class="token keyword">LIMIT</span>分页参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-6-1-基础查询"><a href="#2-6-1-基础查询" class="headerlink" title="2.6.1 基础查询"></a>2.6.1 基础查询</h4><p>查询多个字段：<br><code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code><br><code>SELECT * FROM 表名;</code></p><blockquote><p>‘*’为通配符，不建议使用，不直观，效率低，建议罗列全部字段名。</p></blockquote><p>设置别名：<br><code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;</code><br><code>SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code></p><blockquote><p>设置别名 AS 可以省略，别名可以不加单引号。</p></blockquote><p>去除重复记录：<br><code>SELECT DISTINCT 字段列表 FROM 表名;</code></p><p>转义：<br><code>SELECT * FROM 表名 WHERE name LIKE &#39;/_张三&#39; ESCAPE &#39;/&#39;</code><br>/ 之后的_不作为通配符</p><h4 id="2-6-2-条件查询（WHERE）"><a href="#2-6-2-条件查询（WHERE）" class="headerlink" title="2.6.2 条件查询（WHERE）"></a>2.6.2 条件查询（WHERE）</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code></p><p>条件：</p><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !=</td><td>不等于</td></tr><tr><td>BETWEEN … AND …</td><td>在某个范围内（含最小、最大值）</td></tr><tr><td>IN(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且（多个条件同时成立）</td></tr><tr><td>OR 或 ||</td><td>或者（多个条件任意一个成立）</td></tr><tr><td>NOT 或 !</td><td>非，不是</td></tr></tbody></table><p>例子：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 年龄等于30</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">-- 年龄小于30</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> age <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">-- 小于等于</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> age <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">-- 没有身份证</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> idcard <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token operator">or</span> idcard <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token comment">-- 有身份证</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> idcard<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> idcard <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span class="token comment">-- 年龄不等于30</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> age <span class="token operator">!=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> age <span class="token operator">&lt;></span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">-- 年龄在20到30之间</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> age <span class="token operator">between</span> <span class="token number">20</span> <span class="token operator">and</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> age <span class="token operator">>=</span> <span class="token number">20</span> <span class="token operator">and</span> age <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">-- 下面语句不报错，但查不到任何信息</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> age <span class="token operator">between</span> <span class="token number">30</span> <span class="token operator">and</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">-- 性别为女且年龄小于30</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> age <span class="token operator">&lt;</span> <span class="token number">30</span> <span class="token operator">and</span> gender <span class="token operator">=</span> <span class="token string">'女'</span><span class="token punctuation">;</span><span class="token comment">-- 年龄等于25或30或35</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> age <span class="token operator">=</span> <span class="token number">25</span> <span class="token operator">or</span> age <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">or</span> age <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> age <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 姓名为两个字</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'__'</span><span class="token punctuation">;</span><span class="token comment">-- 身份证最后为X</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> idcard <span class="token operator">like</span> <span class="token string">'%X'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> idcard <span class="token operator">like</span> <span class="token string">'_________________X'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-6-3-聚合函数（COUNT-MAX-MIN-AVG-SUM）"><a href="#2-6-3-聚合函数（COUNT-MAX-MIN-AVG-SUM）" class="headerlink" title="2.6.3 聚合函数（COUNT/MAX/MIN/AVG/SUM）"></a>2.6.3 聚合函数（COUNT/MAX/MIN/AVG/SUM）</h4><p>常见聚合函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><p>语法：<br><code>SELECT 聚合函数(字段列表) FROM 表名;</code></p><p>例子：</p><p><code>SELECT count(id) from employee where workaddress = &quot;广东省&quot;;</code></p><blockquote><p>所有null值不参与所有聚合函数运算。</p></blockquote><h4 id="2-6-4-分组查询（GROUP-BY）"><a href="#2-6-4-分组查询（GROUP-BY）" class="headerlink" title="2.6.4 分组查询（GROUP BY）"></a>2.6.4 分组查询（GROUP BY）</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];</code></p><p>where 和 having 的区别：</p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul><p>例子：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> employee <span class="token keyword">group</span> <span class="token keyword">by</span> gender<span class="token punctuation">;</span><span class="token comment">-- 根据性别分组，统计男性和女性数量</span><span class="token keyword">select</span> gender<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> employee <span class="token keyword">group</span> <span class="token keyword">by</span> gender<span class="token punctuation">;</span><span class="token comment">-- 根据性别分组，统计男性和女性的平均年龄</span><span class="token keyword">select</span> gender<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> employee <span class="token keyword">group</span> <span class="token keyword">by</span> gender<span class="token punctuation">;</span><span class="token comment">-- 年龄小于45，并根据工作地址分组</span><span class="token keyword">select</span> workaddress<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">from</span> employee<span class="token keyword">where</span> age <span class="token operator">&lt;</span> <span class="token number">45</span><span class="token keyword">group</span> <span class="token keyword">by</span> workaddress<span class="token punctuation">;</span><span class="token comment">-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址</span><span class="token keyword">select</span> workaddress<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> address_count<span class="token keyword">from</span> employee<span class="token keyword">where</span> age <span class="token operator">&lt;</span> <span class="token number">45</span><span class="token keyword">group</span> <span class="token keyword">by</span> workaddress<span class="token keyword">having</span> address_count <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>执行顺序：where &gt; 聚合函数 &gt; having</li><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li></ul><h4 id="2-6-5-排序查询（ORDER-BY）"><a href="#2-6-5-排序查询（ORDER-BY）" class="headerlink" title="2.6.5 排序查询（ORDER BY）"></a>2.6.5 排序查询（ORDER BY）</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code></p><p>排序方式：</p><ul><li>ASC: 升序（默认）</li><li>DESC: 降序</li></ul><p>例子：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 根据年龄升序排序</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employee <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> age <span class="token keyword">ASC</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employee <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> age<span class="token punctuation">;</span><span class="token comment">-- 两字段排序，根据年龄升序排序，入职时间降序排序</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employee <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> age <span class="token keyword">ASC</span><span class="token punctuation">,</span> entrydate <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p></blockquote><h4 id="2-6-6-分页查询（LIMIT）"><a href="#2-6-6-分页查询（LIMIT）" class="headerlink" title="2.6.6 分页查询（LIMIT）"></a>2.6.6 分页查询（LIMIT）</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code></p><p>例子：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询第一页数据，展示10条</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employee <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employee <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">-- 查询第二页</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employee <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>起始索引从0开始，起始索引 = （查询页码 - 1） * 每页显示记录数</li><li>分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10</li></ul><h4 id="2-6-7-案例练习"><a href="#2-6-7-案例练习" class="headerlink" title="2.6.7 案例练习"></a>2.6.7 案例练习</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 1.查询年龄为20,21,22,23岁的女性员工信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> EMP<span class="token keyword">WHERE</span> GENDER <span class="token operator">=</span> <span class="token string">'女'</span>  <span class="token operator">AND</span> AGE <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 2.查询性别为男，并且年龄在 20-40 岁(含)以内的姓名为三个字的员工。</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> EMP<span class="token keyword">WHERE</span> GENDER <span class="token operator">=</span> <span class="token string">'男'</span>  <span class="token operator">AND</span> AGE <span class="token operator">BETWEEN</span> <span class="token number">20</span> <span class="token operator">AND</span> <span class="token number">40</span>  <span class="token operator">AND</span> NAME <span class="token operator">LIKE</span> <span class="token string">'___'</span><span class="token punctuation">;</span><span class="token comment">-- 3.统计员工表中年龄小于60岁的，男性员工和女性员工的人数。</span><span class="token keyword">SELECT</span> GENDER<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> EMP<span class="token keyword">WHERE</span> AGE <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> GENDER<span class="token punctuation">;</span><span class="token comment">-- 4.查询所有年龄小于等于35岁员工的姓名和年龄，并对查询结果按年龄升序排序，如果年龄相同按入职时间降序排序。</span><span class="token keyword">SELECT</span> NAME<span class="token punctuation">,</span> AGE<span class="token keyword">FROM</span> EMP<span class="token keyword">WHERE</span> AGE <span class="token operator">&lt;=</span> <span class="token number">35</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> AGE<span class="token punctuation">,</span> ENTRYDATE <span class="token keyword">DESC</span><span class="token punctuation">;</span><span class="token comment">-- 5.查询性别为男，且年龄在20-40 岁(含)以内的前5个员工信息，对查询的结果按年龄升序排序，年龄相同按入职时间升序排序</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> EMP<span class="token keyword">WHERE</span> GENDER <span class="token operator">=</span> <span class="token string">'男'</span>  <span class="token operator">AND</span> AGE <span class="token operator">BETWEEN</span> <span class="token number">20</span> <span class="token operator">AND</span> <span class="token number">40</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> AGE<span class="token punctuation">,</span> ENTRYDATE<span class="token keyword">LIMIT</span> <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-6-8-DQL执行顺序"><a href="#2-6-8-DQL执行顺序" class="headerlink" title="2.6.8 DQL执行顺序"></a>2.6.8 DQL执行顺序</h4><p>FROM -&gt; WHERE -&gt; GROUP BY -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT</p><h3 id="2-7-DCL（数据控制语言）"><a href="#2-7-DCL（数据控制语言）" class="headerlink" title="2.7 DCL（数据控制语言）"></a>2.7 DCL（数据控制语言）</h3><h4 id="2-7-1-管理用户"><a href="#2-7-1-管理用户" class="headerlink" title="2.7.1 管理用户"></a>2.7.1 管理用户</h4><ul><li>查询用户</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">USER</span> mysql<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>创建用户</li></ul><p><code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</code></p><ul><li>修改用户密码</li></ul><p><code>ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</code></p><ul><li>删除用户</li></ul><p><code>DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>示例：</p><p>例子：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建用户test，只能在当前主机localhost访问，密码123456</span><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'test'</span><span class="token variable">@'localhost'</span> identified <span class="token keyword">by</span> <span class="token string">'123456'</span><span class="token punctuation">;</span><span class="token comment">-- 创建用户test，能在任意主机访问，密码123456</span><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'test'</span><span class="token variable">@'%'</span> identified <span class="token keyword">by</span> <span class="token string">'123456'</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'test'</span> identified <span class="token keyword">by</span> <span class="token string">'123456'</span><span class="token punctuation">;</span><span class="token comment">-- 修改密码</span><span class="token keyword">alter</span> <span class="token keyword">user</span> <span class="token string">'test'</span><span class="token variable">@'localhost'</span> identified <span class="token keyword">with</span> mysql_native_password <span class="token keyword">by</span> <span class="token string">'1234'</span><span class="token punctuation">;</span><span class="token comment">-- 删除用户</span><span class="token keyword">drop</span> <span class="token keyword">user</span> <span class="token string">'test'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>主机名可以使用 % 通配。</p><p>这类SQL开发人员操作的比较少，主要是DBA（Database Administrator 数据库管理员）使用。</p></blockquote><h4 id="2-7-2-权限控制"><a href="#2-7-2-权限控制" class="headerlink" title="2.7.2 权限控制"></a>2.7.2 权限控制</h4><p>MySQL常用权限：</p><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL, ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库/表/视图</td></tr><tr><td>CREATE</td><td>创建数据库/表</td></tr></tbody></table><ul><li>查询权限</li></ul><p><code>SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;</code></p><ul><li>授予权限</li></ul><p><code>GRANT 权限列表 ON 数据库名.表名 TO &#39;用户名&#39;@&#39;主机名&#39;;</code></p><ul><li>撤销权限</li></ul><p><code>REVOKE 权限列表 ON 数据库名.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;</code></p><blockquote><p>多个权限用逗号分隔。</p><p>授权时，数据库名和表名可以用 * 进行通配，代表所有。</p></blockquote><h2 id="3-函数"><a href="#3-函数" class="headerlink" title="3. 函数"></a>3. 函数</h2><h3 id="3-1-字符串函数"><a href="#3-1-字符串函数" class="headerlink" title="3.1 字符串函数"></a>3.1 字符串函数</h3><p>MySQL 常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(s1, s2, …, sn)</td><td>字符串拼接，将s1, s2, …, sn拼接成一个字符串</td></tr><tr><td>LOWER(str)</td><td>将字符串全部转为小写</td></tr><tr><td>UPPER(str)</td><td>将字符串全部转为大写</td></tr><tr><td>LPAD(str, n, pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td>RPAD(str, n, pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str, start, len)</td><td>返回从字符串str从start位置起的len个长度的字符串</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 拼接</span><span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 小写</span><span class="token keyword">SELECT</span> LOWER<span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 大写</span><span class="token keyword">SELECT</span> UPPER<span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 左填充</span><span class="token keyword">SELECT</span> LPAD<span class="token punctuation">(</span><span class="token string">'01'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 右填充</span><span class="token keyword">SELECT</span> RPAD<span class="token punctuation">(</span><span class="token string">'01'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 去除空格</span><span class="token keyword">SELECT</span> TRIM<span class="token punctuation">(</span><span class="token string">' Hello World '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 切片（起始索引为1）</span><span class="token keyword">SELECT</span> SUBSTRING<span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-数值函数"><a href="#3-2-数值函数" class="headerlink" title="3.2 数值函数"></a>3.2 数值函数</h3><p>常见的数值函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x, y)</td><td>返回x/y的模</td></tr><tr><td>RAND()</td><td>返回0~1内的随机数</td></tr><tr><td>ROUND(x, y)</td><td>求参数x的四舍五入值，保留y位小数</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 生成六位数随机验证码</span><span class="token keyword">SELECT</span>  LPAD<span class="token punctuation">(</span><span class="token function">ROUND</span><span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000000</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-3-日期函数"><a href="#3-3-日期函数" class="headerlink" title="3.3 日期函数"></a>3.3 日期函数</h3><p>常见的日期函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定date的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定date的月份</td></tr><tr><td>DAY(date)</td><td>获取指定date的日期</td></tr><tr><td>DATE_ADD(date, INTERVAL expr type)</td><td>返回一个日期/时间值加上一个时间间隔expr后的时间值</td></tr><tr><td>DATEDIFF(date1, date2)</td><td>返回起始时间date1和结束时间date2之间的天数</td></tr></tbody></table><p>例子：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- DATE_ADD 当年时间往后推70年</span><span class="token keyword">SELECT</span> DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">INTERVAL</span> <span class="token number">70</span> <span class="token keyword">YEAR</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- DATEDIFF 第一个结果为20，第二个结果为-20，date1-date2</span><span class="token keyword">SELECT</span> DATEDIFF<span class="token punctuation">(</span><span class="token string">'2023-01-28'</span><span class="token punctuation">,</span><span class="token string">'2023-01-08'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> DATEDIFF<span class="token punctuation">(</span><span class="token string">'2023-01-08'</span><span class="token punctuation">,</span><span class="token string">'2023-01-28'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查询所有员工的入职天数，并根据入职天数倒序排序</span><span class="token keyword">SELECT</span> NAME<span class="token punctuation">,</span> DATEDIFF<span class="token punctuation">(</span>CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ENTRYDATE<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">'ENTRYDAYS'</span><span class="token keyword">FROM</span> EMP<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> ENTRYDAYS <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-流程函数"><a href="#3-4-流程函数" class="headerlink" title="3.4 流程函数"></a>3.4 流程函数</h3><p>流程函数可以在 SQL 语句中实现条件筛选，从而提高语句的效率，常用的流程函数如下：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value, t, f)</td><td>如果value为true，则返回t，否则返回f</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为空，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果val1为true，返回res1，… 否则返回default默认值</td></tr><tr><td>CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果expr的值等于val1，返回res1，… 否则返回default默认值</td></tr></tbody></table><p>例子：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>name<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> age <span class="token operator">></span> <span class="token number">30</span> <span class="token keyword">then</span> <span class="token string">'中年'</span> <span class="token keyword">else</span> <span class="token string">'青年'</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token keyword">from</span> employee<span class="token punctuation">;</span><span class="token comment">-- 查询 employee 表的员工姓名和工作地址（北京/上海为一线城市，其他城市为二线城市）</span><span class="token keyword">select</span>name<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">case</span> workaddress <span class="token keyword">when</span> <span class="token string">'北京市'</span> <span class="token keyword">then</span> <span class="token string">'一线城市'</span> <span class="token keyword">when</span> <span class="token string">'上海市'</span> <span class="token keyword">then</span> <span class="token string">'一线城市'</span> <span class="token keyword">else</span> <span class="token string">'二线城市'</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'工作地址'</span><span class="token keyword">from</span> employee<span class="token punctuation">;</span><span class="token comment">-- 统计各个学生的成绩，>=85 优秀，>=60 及格，其余不及格</span><span class="token keyword">SELECT</span>  NAME<span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> MATH<span class="token operator">>=</span><span class="token number">85</span> <span class="token keyword">THEN</span> <span class="token string">'优秀'</span> <span class="token keyword">WHEN</span>  MATH<span class="token operator">>=</span><span class="token number">60</span> <span class="token keyword">THEN</span> <span class="token string">'合格'</span> <span class="token keyword">ELSE</span> <span class="token string">'不合格'</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">'数学'</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> ENGLISH<span class="token operator">>=</span><span class="token number">85</span> <span class="token keyword">THEN</span> <span class="token string">'优秀'</span> <span class="token keyword">WHEN</span>  ENGLISH<span class="token operator">>=</span><span class="token number">60</span> <span class="token keyword">THEN</span> <span class="token string">'合格'</span> <span class="token keyword">ELSE</span> <span class="token string">'不合格'</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">'英语'</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> CHINESE<span class="token operator">>=</span><span class="token number">85</span> <span class="token keyword">THEN</span> <span class="token string">'优秀'</span> <span class="token keyword">WHEN</span>  CHINESE<span class="token operator">>=</span><span class="token number">60</span> <span class="token keyword">THEN</span> <span class="token string">'合格'</span> <span class="token keyword">ELSE</span> <span class="token string">'不合格'</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">'语文'</span><span class="token keyword">FROM</span> SCORE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-约束"><a href="#4-约束" class="headerlink" title="4. 约束"></a>4. 约束</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><ol><li><strong>概念：约束是作用于表中字段上的，可以再创建表/修改表的时候添加约束。</strong></li><li>目的：保证数据库中数据的正确、有效性和完整性。</li><li>分类：</li></ol><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束（8.0.1版本后）</td><td>保证字段值满足某一个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td><td>FOREIGN KEY</td></tr></tbody></table><h3 id="4-2-常用约束"><a href="#4-2-常用约束" class="headerlink" title="4.2 常用约束"></a>4.2 常用约束</h3><table><thead><tr><th>约束条件</th><th>关键字</th></tr></thead><tbody><tr><td>主键</td><td>PRIMARY KEY</td></tr><tr><td>自动增长</td><td>AUTO_INCREMENT</td></tr><tr><td>不为空</td><td>NOT NULL</td></tr><tr><td>唯一</td><td>UNIQUE</td></tr><tr><td>逻辑条件</td><td>CHECK</td></tr><tr><td>默认值</td><td>DEFAULT</td></tr></tbody></table><p>例子：</p><p><img src="/images/hmmysql/image-20230128153022496.png"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">user</span><span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">'主键'</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">unique</span> <span class="token keyword">comment</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>    age <span class="token keyword">int</span> <span class="token keyword">check</span> <span class="token punctuation">(</span> age<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> age <span class="token operator">&lt;=</span><span class="token number">120</span> <span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>    <span class="token keyword">status</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">'1'</span> <span class="token keyword">comment</span> <span class="token string">'状态'</span><span class="token punctuation">,</span>    gender <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">'性别'</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">'用户表'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-外键约束"><a href="#4-3-外键约束" class="headerlink" title="4.3 外键约束"></a>4.3 外键约束</h3><ul><li><strong>概念：外键用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。</strong></li><li>语法</li></ul><p><strong>添加外键：</strong></p><pre class="line-numbers language-mssql" data-language="mssql"><code class="language-mssql">CREATE TABLE 表名(字段名 字段类型,...[CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> 外键名称 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>外键字段名<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表<span class="token punctuation">(</span>主表列名<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 例子</span><span class="token keyword">alter</span> <span class="token keyword">table</span> emp2 <span class="token keyword">add</span> <span class="token keyword">constraint</span> fk_emp2_dept_id <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">references</span> dept<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删除外键：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> 外键名<span class="token punctuation">;</span><span class="token comment">-- 例子</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> emp2 <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> fk_emp2_dept_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删除/更新行为</strong></p><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与RESTRICT一致）</td></tr><tr><td>RESTRICT</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与NO ACTION一致）</td></tr><tr><td>CASCADE</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录</td></tr><tr><td>SET NULL</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）</td></tr><tr><td>SET DEFAULT</td><td>父表有变更时，子表将外键设为一个默认值（Innodb不支持）</td></tr></tbody></table><p>更改删除/更新行为：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> 外键名称 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>外键字段<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名<span class="token punctuation">(</span>主表字段名<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> 行为 <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> 行为<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 父表删除/更新记录时，子表值为null</span><span class="token keyword">alter</span> <span class="token keyword">table</span> emp2 <span class="token keyword">add</span> <span class="token keyword">constraint</span> fk_emp2_dept_id <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">references</span> dept<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">update</span> <span class="token keyword">set</span> <span class="token boolean">null</span> <span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">set</span> <span class="token boolean">null</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-多表查询"><a href="#5-多表查询" class="headerlink" title="5. 多表查询"></a>5. 多表查询</h2><h3 id="5-1-多表关系"><a href="#5-1-多表关系" class="headerlink" title="5.1 多表关系"></a>5.1 多表关系</h3><ul><li>一对多（多对一）</li><li>多对多</li><li>一对一</li></ul><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><ul><li>案例：部门与员工</li><li>关系：一个部门对应多个员工，一个员工对应一个部门</li><li>实现：<strong>在多的一方建立外键，指向一的一方的主键</strong></li></ul><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><ul><li>案例：学生与课程</li><li>关系：一个学生可以选多门课程，一门课程也可以供多个学生选修</li><li>实现：<strong>建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</strong></li></ul><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><ul><li><p>案例：用户与用户详情</p></li><li><p>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放</p><p>在另一张表中，以提升操作效率</p></li><li><p>实现：<strong>在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</strong></p></li></ul><h3 id="5-2-多表查询概述"><a href="#5-2-多表查询概述" class="headerlink" title="5.2 多表查询概述"></a>5.2 多表查询概述</h3><p>合并查询（笛卡尔积)，会展示所有组合结果）：</p><p><code>select * from emp2, dept;</code></p><blockquote><p>笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积，即连接条件）。</p></blockquote><p>消除无效笛卡尔积：</p><p><code>select * from emp2, dept where emp2.dept_id = dept.id;</code></p><ul><li><p>多表查询分类</p><ul><li><p>连接查询</p><p>内连接：相当于查询A、B交集部分数据</p><p><img src="/images/hmmysql/image-20230128195819033.png"></p><p>外连接：</p><p>​        左外连接：查询<strong>左表</strong>所有数据，以及两张表交集部分数据</p><p>​        右外连接：查询<strong>右表</strong>所有数据，以及两张表交集部分数据</p><p>自连接：当前表与自身的连接查询，子连接必须使用表别名</p></li><li><p>子查询</p></li></ul></li></ul><h3 id="5-3-内连接查询"><a href="#5-3-内连接查询" class="headerlink" title="5.3 内连接查询"></a>5.3 内连接查询</h3><p>内连接查询的是两张表交集的部分</p><p><img src="/images/hmmysql/image-20230128195819033.png" alt="绿色部分"></p><p>隐式内连接：</p><p><code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code></p><p>显式内连接：</p><p><code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code></p><p>显式性能比隐式高</p><p>例子：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询员工姓名，及关联的部门的名称</span><span class="token comment">-- 隐式</span><span class="token keyword">select</span> emp2<span class="token punctuation">.</span>name<span class="token punctuation">,</span>dept<span class="token punctuation">.</span>name <span class="token keyword">from</span> emp2<span class="token punctuation">,</span>dept <span class="token keyword">where</span> emp2<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">select</span> e<span class="token punctuation">.</span>name<span class="token punctuation">,</span>d<span class="token punctuation">.</span>name <span class="token keyword">from</span> emp2 e<span class="token punctuation">,</span>dept d <span class="token keyword">where</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment">-- 显式</span><span class="token keyword">select</span> emp2<span class="token punctuation">.</span>name<span class="token punctuation">,</span>dept<span class="token punctuation">.</span>name <span class="token keyword">from</span> emp2 <span class="token keyword">inner</span> <span class="token keyword">join</span> dept <span class="token keyword">on</span> emp2<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">select</span> e<span class="token punctuation">.</span>name<span class="token punctuation">,</span>d<span class="token punctuation">.</span>name <span class="token keyword">from</span> emp2 e <span class="token keyword">inner</span> <span class="token keyword">join</span> dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id<span class="token operator">=</span>d<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果我们对一个表起了别名就不能使用表名来操作字段了。</p></blockquote><h3 id="5-4-外连接查询"><a href="#5-4-外连接查询" class="headerlink" title="5.4 外连接查询"></a>5.4 外连接查询</h3><p>左外连接：</p><p>查询左表所有数据，以及两张表交集部分数据</p><p><img src="/images/hmmysql/image-20230128195819033.png" alt="蓝色+绿色"></p><p><code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code></p><p>相当于查询表1的所有数据，包含表1和表2交集部分数据</p><p>右外连接：</p><p>查询右表所有数据，以及两张表交集部分数据</p><p><img src="/images/hmmysql/image-20230128195819033.png" alt="棕色+绿色"></p><p><code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code></p><p>例子：</p><p><img src="/images/hmmysql/image-20230129101707171.png" alt="emp2 表"></p><p><img src="/images/hmmysql/image-20230129101722159.png" alt="dept"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询emp2表的所有数据，和对应的部门信息（左外连接）</span><span class="token keyword">select</span> emp2<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> dept<span class="token punctuation">.</span>name<span class="token keyword">from</span> emp2         <span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> dept <span class="token keyword">on</span> emp2<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment">-- 结果与下右相同</span><span class="token keyword">select</span> emp2<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> dept<span class="token punctuation">.</span>name<span class="token keyword">from</span> dept         <span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> emp2 <span class="token keyword">on</span> emp2<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment">-- 查询dept表的所有数据，和对应的员工信息（右外连接）</span><span class="token keyword">select</span> dept<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> emp2<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">from</span> emp2         <span class="token keyword">right</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> dept <span class="token keyword">on</span> dept<span class="token punctuation">.</span>id <span class="token operator">=</span> emp2<span class="token punctuation">.</span>dept_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>实际工作过程中用左外连接比较多，因为左外与右外是可以直接转换的，只需要更改表的顺序。</p></blockquote><p><img src="/images/hmmysql/image-20230129101756665.png" alt="左外连接"></p><p><img src="/images/hmmysql/image-20230129101824652.png" alt="右外连接"></p><h3 id="5-5-自连接查询"><a href="#5-5-自连接查询" class="headerlink" title="5.5 自连接查询"></a>5.5 自连接查询</h3><p>当前表与自身的连接查询，<strong>自连接必须使用表别名</strong></p><p>语法：<br><code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code></p><p>自连接查询，可以是内连接查询，也可以是外连接查询</p><p>例子：</p><p><img src="/images/hmmysql/image-20230129102334435.png" alt="emp2"></p><p>可以根据 managerid 和 id 进行自连接查询，可以知道张三和里斯的老板是金庸。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询员工及其所属领导的名字</span><span class="token comment">-- 表结构： emp2</span><span class="token comment">-- 这种内连接查询只能查出有领导的内容，注意这里用的是隐式，也可以用显示</span><span class="token keyword">select</span> a<span class="token punctuation">.</span>name<span class="token punctuation">,</span> b<span class="token punctuation">.</span>name<span class="token keyword">from</span> emp2 a<span class="token punctuation">,</span>     emp2 b<span class="token keyword">where</span> a<span class="token punctuation">.</span>managerid <span class="token operator">=</span> b<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment">-- 没有领导的也查询出来，使用外连接</span><span class="token keyword">select</span> a<span class="token punctuation">.</span>name<span class="token punctuation">,</span> b<span class="token punctuation">.</span>name<span class="token keyword">from</span> emp2 a         <span class="token keyword">left</span> <span class="token keyword">join</span> emp2 b <span class="token keyword">on</span> a<span class="token punctuation">.</span>managerid <span class="token operator">=</span> b<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><p><img src="/images/hmmysql/image-20230129102823696.png" alt="内连接查询"></p><p><img src="/images/hmmysql/image-20230129102841747.png" alt="外连接查询"></p><h3 id="5-6-联合查询-union-union-all"><a href="#5-6-联合查询-union-union-all" class="headerlink" title="5.6 联合查询 union, union all"></a>5.6 联合查询 union, union all</h3><p>把多次查询的结果合并，形成一个新的查询集</p><p>语法：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表A <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">UNION</span> <span class="token punctuation">[</span><span class="token keyword">ALL</span><span class="token punctuation">]</span><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表B <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>UNION ALL 会有重复结果，UNION 不会</li><li>联合查询比使用or效率高，不会使索引失效</li><li>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致。</li></ul></blockquote><h3 id="5-7-子查询"><a href="#5-7-子查询" class="headerlink" title="5.7 子查询"></a>5.7 子查询</h3><ul><li>概念：SQL语句中嵌套SELECT语句，称谓<strong>嵌套查询</strong>，又称<strong>子查询</strong>。</li></ul><p><code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code></p><blockquote><p><strong>子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个</strong></p></blockquote><ul><li><p>根据子查询结果可以分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul></li><li><p>根据子查询位置可分为：</p><ul><li>WHERE 之后</li><li>FROM 之后</li><li>SELECT 之后</li></ul></li></ul><h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4><p>子查询返回的结果是单个值（数字、字符串、日期等）。</p><p>常用操作符：- &lt; &gt; &gt; &gt;= &lt; &lt;=</p><p>例子：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询销售部部门id</span><span class="token keyword">select</span> id<span class="token keyword">from</span> dept<span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'研发部'</span><span class="token punctuation">;</span><span class="token comment">-- 根据销售部部门id，查询员工信息</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> emp2<span class="token keyword">where</span> dept_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> emp2<span class="token keyword">where</span> dept_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> dept <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'研发部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查询金庸入职之后的员工信息</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> emp2<span class="token keyword">where</span> entrydate <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> entrydate <span class="token keyword">from</span> emp2 <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'金庸'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h4><p>返回的结果是一列（可以是多行）。</p><p>常用操作符：</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>SOME</td><td>与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table><p>例子：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询销售部和市场部的所有员工信息</span><span class="token comment">-- 查出部门id，根据id查询员工信息</span><span class="token keyword">select</span> id<span class="token keyword">from</span> dept<span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'销售部'</span>   <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">'市场部'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> emp2<span class="token keyword">where</span> dept_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> dept <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'销售部'</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">'市场部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查询比财务部所有人工资都高的员工信息</span><span class="token comment">-- 先查出财务部的最高工资，然后根据最高工资查出比他高的员工信息</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token keyword">from</span> emp2<span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> dept <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'财务部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> emp2<span class="token keyword">where</span> salary <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> emp2 <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> dept <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'财务部'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 先查出所有人的工资，然后用all比较所有出比所有财务部工资更高的人</span><span class="token keyword">select</span> salary<span class="token keyword">from</span> emp2<span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> dept <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'财务部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> emp2<span class="token keyword">where</span> salary <span class="token operator">></span> <span class="token keyword">all</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> emp2 <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> dept <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'财务部'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查询比研发部任意一人工资高的员工信息</span><span class="token keyword">select</span> id<span class="token keyword">from</span> dept<span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'研发部'</span><span class="token punctuation">;</span><span class="token keyword">select</span> salary<span class="token keyword">from</span> emp2<span class="token keyword">where</span> dept_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> dept <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'研发部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> emp2<span class="token keyword">where</span> salary <span class="token operator">></span> <span class="token keyword">any</span> <span class="token punctuation">(</span><span class="token keyword">select</span> salary <span class="token keyword">from</span> emp2 <span class="token keyword">where</span> dept_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> dept <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'研发部'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h4><p>返回的结果是一行（可以是多列）。</p><p>常用操作符：=, &lt;, &gt;, IN, NOT IN</p><p>例子：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询与张三的薪资及直属领导相同的员工信息</span><span class="token keyword">select</span> salary<span class="token punctuation">,</span> managerid<span class="token keyword">from</span> emp2<span class="token keyword">where</span> NAME <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> emp2<span class="token keyword">where</span> <span class="token punctuation">(</span>salary<span class="token punctuation">,</span> managerid<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> salary<span class="token punctuation">,</span> managerid <span class="token keyword">from</span> emp2 <span class="token keyword">where</span> NAME <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h4><p>返回的结果是多行多列</p><p>常用操作符：IN</p><p>例子：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询与张三和里斯职位和薪资相同的员工信息</span><span class="token comment">-- 查出张三和里斯的职位和薪资</span><span class="token keyword">select</span> job<span class="token punctuation">,</span> salary<span class="token keyword">from</span> emp2<span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'张三'</span>   <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">'里斯'</span><span class="token punctuation">;</span><span class="token comment">-- 查员工信息</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> emp2<span class="token keyword">where</span> <span class="token punctuation">(</span>job<span class="token punctuation">,</span> salary<span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> job<span class="token punctuation">,</span> salary <span class="token keyword">from</span> emp2 <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'张三'</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">'里斯'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查询入职日期是2006-01-01之后的员工，及其部门信息</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> emp2<span class="token keyword">where</span> entrydate <span class="token operator">></span> <span class="token string">'2006-01-01'</span><span class="token punctuation">;</span><span class="token keyword">select</span> e<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> dept<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp2 <span class="token keyword">where</span> entrydate <span class="token operator">></span> <span class="token string">'2006-01-01'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> e         <span class="token keyword">left</span> <span class="token keyword">join</span> dept <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-8-多表查询案例"><a href="#5-8-多表查询案例" class="headerlink" title="5.8 多表查询案例"></a>5.8 多表查询案例</h3><p>需要用到三张表 emp2,dept,salgrade</p><p>数据准备，创建salgrade</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> salgrade<span class="token punctuation">(</span>    grade <span class="token keyword">int</span> <span class="token keyword">comment</span> <span class="token string">'等级'</span><span class="token punctuation">,</span>    losal <span class="token keyword">int</span> <span class="token keyword">comment</span> <span class="token string">'最低薪资'</span><span class="token punctuation">,</span>    hisal <span class="token keyword">int</span> <span class="token keyword">comment</span> <span class="token string">'最高薪资'</span><span class="token punctuation">)</span><span class="token keyword">comment</span> <span class="token string">'薪资等级表'</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> salgrade <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                           <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3001</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                           <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5001</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                           <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8001</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                           <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10001</span><span class="token punctuation">,</span><span class="token number">15000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                           <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">15001</span><span class="token punctuation">,</span><span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                           <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">20001</span><span class="token punctuation">,</span><span class="token number">23000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                           <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">25001</span><span class="token punctuation">,</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/hmmysql/image-20230129114248584.png" alt="salgrade表"></p><p><strong>1.查询员工的姓名、年龄、职位、部门信息。</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询员工的姓名、年龄、职位、部门信息。</span><span class="token comment">-- 表：emp2,dept</span><span class="token comment">-- 连接条件 emp2.dept_id=dept.id</span><span class="token comment">-- 隐式内连接</span><span class="token keyword">select</span> emp2<span class="token punctuation">.</span>name<span class="token punctuation">,</span> emp2<span class="token punctuation">.</span>age<span class="token punctuation">,</span> emp2<span class="token punctuation">.</span>job<span class="token punctuation">,</span> dept<span class="token punctuation">.</span>name<span class="token keyword">from</span> emp2<span class="token punctuation">,</span>     dept<span class="token keyword">where</span> emp2<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment">-- 显示内连接+表别名</span><span class="token keyword">select</span> e<span class="token punctuation">.</span>name<span class="token punctuation">,</span> e<span class="token punctuation">.</span>age<span class="token punctuation">,</span> e<span class="token punctuation">.</span>job<span class="token punctuation">,</span> d<span class="token punctuation">.</span>name<span class="token keyword">from</span> emp2 e         <span class="token keyword">inner</span> <span class="token keyword">join</span> dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.查询年龄小于30岁的员工姓名、年龄、职位、部门信息。</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询年龄小于30岁的员工姓名、年龄、职位、部门信息。</span><span class="token comment">-- 表：emp2,dept</span><span class="token comment">-- 连接条件 e.dept_id = d.id and e.age&lt;30</span><span class="token keyword">select</span> e<span class="token punctuation">.</span>name<span class="token punctuation">,</span> e<span class="token punctuation">.</span>age<span class="token punctuation">,</span> e<span class="token punctuation">.</span>job<span class="token punctuation">,</span> d<span class="token punctuation">.</span>name<span class="token keyword">from</span> emp2 e         <span class="token keyword">inner</span> <span class="token keyword">join</span> dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id <span class="token operator">and</span> e<span class="token punctuation">.</span>age <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">-- e.age&lt;30用where也可以</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.查询拥有员工的部门ID、部门名称。</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询拥有员工的部门ID、部门名称。</span><span class="token comment">-- 注意是拥有，内连接,还要注意去重</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> d<span class="token punctuation">.</span>id<span class="token punctuation">,</span> d<span class="token punctuation">.</span>name<span class="token keyword">from</span> emp2 e         <span class="token keyword">inner</span> <span class="token keyword">join</span> dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4.查询所有年龄大于40岁的员工,及其归属的部门名称:如果员工没有分配部门,也需要展示出来</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询所有年龄大于40岁的员工,及其归属的部门名称:如果员工没有分配部门,也需要展示出来</span><span class="token comment">-- 表：emp2,dept</span><span class="token comment">-- 连接条件 d.id = e.dept_id</span><span class="token comment">-- 一看就是外连接</span><span class="token keyword">select</span> e<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>name<span class="token keyword">from</span> emp2 e         <span class="token keyword">left</span> <span class="token keyword">join</span> dept d <span class="token keyword">on</span> d<span class="token punctuation">.</span>id <span class="token operator">=</span> e<span class="token punctuation">.</span>dept_id<span class="token keyword">where</span> e<span class="token punctuation">.</span>age <span class="token operator">></span> <span class="token number">40</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意，这里就不能用and了，因为是外连接，它会把emp2表的所有内容全部显示出来。</p></blockquote><p><strong>5.查询所有员工的工资等级。</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询所有员工的工资等级。</span><span class="token comment">-- 表格：emp2,salgrade</span><span class="token comment">-- 连接条件： emp.salary between salgrade.losal and salgrade.hisal</span><span class="token comment">-- 老师用的是隐式内连接</span><span class="token keyword">select</span> e<span class="token punctuation">.</span>name<span class="token punctuation">,</span> e<span class="token punctuation">.</span>salary<span class="token punctuation">,</span> s<span class="token punctuation">.</span>grade<span class="token keyword">from</span> emp2 e<span class="token punctuation">,</span>     salgrade s<span class="token keyword">where</span> e<span class="token punctuation">.</span>salary <span class="token operator">between</span> s<span class="token punctuation">.</span>losal <span class="token operator">and</span> s<span class="token punctuation">.</span>hisal<span class="token punctuation">;</span><span class="token comment">-- 其实用外连接更好，因为可能存在薪资外的等级，当然实际工作中应该是不存在的</span><span class="token keyword">select</span> e<span class="token punctuation">.</span>name<span class="token punctuation">,</span> e<span class="token punctuation">.</span>salary<span class="token punctuation">,</span> s<span class="token punctuation">.</span>grade<span class="token keyword">from</span> emp2 e         <span class="token keyword">left</span> <span class="token keyword">join</span> salgrade s <span class="token keyword">on</span> e<span class="token punctuation">.</span>salary <span class="token operator">between</span> s<span class="token punctuation">.</span>losal <span class="token operator">and</span> s<span class="token punctuation">.</span>hisal<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6.查询“研发部”所有员工的信息及工资等级。</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询“研发部”所有员工的信息及工资等级。</span><span class="token comment">-- 表格：emp2,dept,salgrade</span><span class="token comment">-- 连接条件：e.dept_id=d.id and (e.salary between s.losal and s.hisal)</span><span class="token comment">-- 查询条件：d.name='研发部'</span><span class="token keyword">select</span> e<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>grade<span class="token keyword">from</span> emp2 e<span class="token punctuation">,</span>     dept d<span class="token punctuation">,</span>     salgrade s<span class="token keyword">where</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id  <span class="token operator">and</span> d<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'研发部'</span>  <span class="token operator">and</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>salary <span class="token operator">between</span> s<span class="token punctuation">.</span>losal <span class="token operator">and</span> s<span class="token punctuation">.</span>hisal<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在Datagrid中，Ctrl+Alt+L，可以格式化SQL代码。</p></blockquote><p><strong>7.查询“研发部”员工的平均工资。</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询“研发部”员工的平均工资。</span><span class="token comment">-- 表格：emp2,dept</span><span class="token comment">-- 连接条件：e.dept_id=d.id</span><span class="token comment">-- 查询条件：d.name='研发部'</span><span class="token comment">-- 隐式内连接</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token keyword">from</span> emp2 e<span class="token punctuation">,</span>     dept d<span class="token keyword">where</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id  <span class="token operator">and</span> d<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'研发部'</span><span class="token punctuation">;</span><span class="token comment">-- 标量子查询</span><span class="token keyword">select</span> id<span class="token keyword">from</span> dept<span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'研发部'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>emp2<span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token keyword">from</span> emp2<span class="token keyword">where</span> dept_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> dept <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'研发部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>8.查询工资比“王五”高的员工信息。</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询工资比“王五"高的员工信息。</span><span class="token comment">-- 表格：emp2</span><span class="token comment">-- 标量子查询</span><span class="token keyword">select</span> salary<span class="token keyword">from</span> emp2<span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'王五'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> emp2<span class="token keyword">where</span> salary <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> salary <span class="token keyword">from</span> emp2 <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'王五'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>9.查询比平均薪资高的员工信息。</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询比平均薪资高的员工信息。</span><span class="token comment">-- 表格：emp2</span><span class="token comment">-- 标量子查询</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> emp2<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp2 <span class="token keyword">where</span> salary<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> emp2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>10.查询低于本部门平均工资的员工信息。</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询低于本部门平均工资的员工信息。</span><span class="token comment">-- 表格：emp2</span><span class="token comment">-- 新表,查出所有部分的平均工资</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> avgs<span class="token punctuation">,</span> dept_id<span class="token keyword">from</span> emp2<span class="token keyword">group</span> <span class="token keyword">by</span> dept_id<span class="token punctuation">;</span><span class="token comment">-- 显示内连接</span><span class="token keyword">select</span> e1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> e2<span class="token punctuation">.</span>avgs<span class="token keyword">from</span> emp2 e1         <span class="token keyword">inner</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> avgs<span class="token punctuation">,</span> dept_id <span class="token keyword">from</span> emp2 <span class="token keyword">group</span> <span class="token keyword">by</span> dept_id<span class="token punctuation">)</span> e2 <span class="token keyword">on</span> e1<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> e2<span class="token punctuation">.</span>dept_id<span class="token keyword">where</span> e1<span class="token punctuation">.</span>salary <span class="token operator">></span> e2<span class="token punctuation">.</span>avgs<span class="token punctuation">;</span><span class="token comment">-- 子查询</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token keyword">from</span> emp2 e1<span class="token keyword">where</span> e1<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> emp2 e2<span class="token keyword">where</span> e2<span class="token punctuation">.</span>salary <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> emp2 e1 <span class="token keyword">where</span> e1<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> e2<span class="token punctuation">.</span>dept_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>11.查询所有的部门信息，并统计部门的员工人数。</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询所有的部门信息，并统计部门的员工人数。</span><span class="token comment">-- 表：emp2,dept_id</span><span class="token comment">-- 左外连接查询，部门是0人也需要统计，所以必须查询dept表的所有信息</span><span class="token keyword">select</span> d<span class="token punctuation">.</span>name <span class="token string">'部门名称'</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>dept_id<span class="token punctuation">)</span> <span class="token string">'员工人数'</span><span class="token keyword">from</span> dept d         <span class="token keyword">left</span> <span class="token keyword">join</span> emp2 e <span class="token keyword">on</span> d<span class="token punctuation">.</span>id <span class="token operator">=</span> e<span class="token punctuation">.</span>dept_id<span class="token keyword">group</span> <span class="token keyword">by</span> d<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment">-- 子查询</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">from</span> emp2<span class="token keyword">where</span> dept_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">select</span> d<span class="token punctuation">.</span>name <span class="token string">'部门名称'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp2 e <span class="token keyword">where</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token keyword">from</span> dept d<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-事务"><a href="#6-事务" class="headerlink" title="6. 事务"></a>6. 事务</h2><h3 id="6-1-事务简介"><a href="#6-1-事务简介" class="headerlink" title="6.1 事务简介"></a>6.1 事务简介</h3><p><strong>事务</strong> 是一组操作的集合，它是一个不可分割的工作单位，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作<strong>要么同时成功，要么同时失败</strong>。</p><p>典型：银行转账。</p><blockquote><p>默认MySQL的事务是自动提交的，也就是说，当执行一条DML语句，MySQL会立即隐式的提交事务。</p></blockquote><h3 id="6-2-事务操作"><a href="#6-2-事务操作" class="headerlink" title="6.2 事务操作"></a>6.2 事务操作</h3><p>数据准备：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> account<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">comment</span> <span class="token string">'主键ID'</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>    money <span class="token keyword">int</span> <span class="token keyword">comment</span> <span class="token string">'余额'</span><span class="token punctuation">)</span><span class="token keyword">comment</span> <span class="token string">'账户表'</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> account <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/hmmysql/image-20230129174613576.png" alt="account表"></p><p>操作方式一：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 1. 查询张三账户余额</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span><span class="token comment">-- 2. 将张三账户余额-1000</span><span class="token keyword">update</span> account <span class="token keyword">set</span> money <span class="token operator">=</span> money <span class="token operator">-</span> <span class="token number">1000</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span><span class="token comment">-- 此语句出错后张三钱减少但是李四钱没有增加</span>模拟<span class="token keyword">sql</span>语句错误<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">-- 3. 将李四账户余额+1000</span><span class="token keyword">update</span> account <span class="token keyword">set</span> money <span class="token operator">=</span> money <span class="token operator">+</span> <span class="token number">1000</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'李四'</span><span class="token punctuation">;</span><span class="token comment">-- 查看事务提交方式</span><span class="token keyword">SELECT</span> @<span class="token variable">@AUTOCOMMIT</span><span class="token punctuation">;</span><span class="token comment">-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效</span><span class="token keyword">SET</span> @<span class="token variable">@AUTOCOMMIT</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- 提交事务</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token comment">-- 回滚事务</span><span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span><span class="token comment">-- 设置手动提交后上面代码改为：</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span><span class="token keyword">update</span> account <span class="token keyword">set</span> money <span class="token operator">=</span> money <span class="token operator">-</span> <span class="token number">1000</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span><span class="token keyword">update</span> account <span class="token keyword">set</span> money <span class="token operator">=</span> money <span class="token operator">+</span> <span class="token number">1000</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'李四'</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>操作方式二：</p><p>开启事务：</p><p><code>START TRANSACTION 或 BEGIN TRANSACTION;</code></p><p>提交事务：</p><p><code>COMMIT;</code></p><p>回滚事务：</p><p><code>ROLLBACK;</code></p><p>操作实例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 先执行下列4行代码</span><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span><span class="token keyword">update</span> account <span class="token keyword">set</span> money <span class="token operator">=</span> money <span class="token operator">-</span> <span class="token number">1000</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span><span class="token keyword">update</span> account <span class="token keyword">set</span> money <span class="token operator">=</span> money <span class="token operator">+</span> <span class="token number">1000</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'李四'</span><span class="token punctuation">;</span><span class="token comment">-- 之后选择下面代码执行</span><span class="token comment">-- 成功</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token comment">-- 失败</span><span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-四大特性ACID"><a href="#6-3-四大特性ACID" class="headerlink" title="6.3 四大特性ACID"></a>6.3 四大特性ACID</h3><ul><li>原子性(<strong>A</strong>tomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li><li>一致性(<strong>C</strong>onsistency)：事务完成时，必须使所有数据都保持一致状态</li><li>隔离性(<strong>I</strong>solation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性(<strong>D</strong>urability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><h3 id="6-4-并发事务问题"><a href="#6-4-并发事务问题" class="headerlink" title="6.4 并发事务问题"></a>6.4 并发事务问题</h3><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另一个事务还没提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td></tr></tbody></table><p><img src="/images/hmmysql/image-20230129180725287.png" alt="脏读问题"></p><blockquote><p>脏读又称无效数据的读出，是指在数据库访问中，事务A将某一值修改，然后事务B读取该值，此后A因为某种原因撤销对该值的修改，这就导致了B所读取到的数据是无效的，值得注意的是，脏读一般是针对于<strong>update</strong>操作的。</p></blockquote><p><img src="/images/hmmysql/image-20230129181047907.png" alt="不可重复读"></p><blockquote><p>这是由于查询时系统中其他事务修改的提交而引起的。比如事务A读取某一数据，事务B读取并修改了该数据，A为了对读取值进行检验而再次读取该数据，便得到了不同的结果。</p></blockquote><p><img src="/images/hmmysql/image-20230129181330654.png" alt="幻读"></p><blockquote><p>两个并发事务A、B。在T1这个时刻，事务A通过筛选条件获取到的记录是10条。此时并发事务B往数据库插入一条满足事务A查询条件的记录。这时A还没有结束，在事务内再次获取数据时以相同的条件筛选，结果筛选出了11条记录。这就是幻读。</p></blockquote><h3 id="6-5-并发事务隔离级别"><a href="#6-5-并发事务隔离级别" class="headerlink" title="6.5 并发事务隔离级别"></a>6.5 并发事务隔离级别</h3><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed(Oracle)</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable Read(MySQL默认)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><ul><li>√表示在当前隔离级别下该问题会出现</li><li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li></ul><p>查看事务隔离级别：</p><p><code>SELECT @@TRANSACTION_ISOLATION;</code></p><p>设置事务隔离级别：</p><p><code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE &#125;;</code></p><p>SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效</p><ul><li>脏读实例</li></ul><p><img src="/images/hmmysql/image-20230129182514645.png"></p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp 中的 LINQ</title>
      <link href="/2023/01/18/Linq/"/>
      <url>/2023/01/18/Linq/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是LINQ"><a href="#1-什么是LINQ" class="headerlink" title="1. 什么是LINQ"></a>1. 什么是LINQ</h2><p><strong>在关系型数据库中，数据被放入规范化的表中</strong>，并且通过简单而又强大的语言 SQL 来进行访问。SQL 可以访问数据库中的任何数据，因为数据被放入表中，并遵从一些严格的规则。</p><p>然而，与数据库相反，<strong>在程序中，数据被保存在差异很多的类对象或结构中</strong>。因此，没有通用的查询语句来从数据结构中获取数据。从对象获取数据的方法一直是作为程序的一部分专门设计的。然而<strong>LINQ 可以很轻松地查询对象集合</strong>。</p><p><strong>如下是 LINQ 的重要高级特效。</strong></p><ul><li>LINQ（发音是 link）代表<strong>语言集成查询（Language Integrated Query）</strong>。</li><li>LINQ 是 .NET框架的扩展，它允许我们以<strong>使用 SQL 查询数据库的类似方式来查询数据集合</strong>。</li><li>使用 LINQ，你可以<strong>从数据库、对象集合以及 XML 文档等中查询数据</strong>。</li></ul><blockquote><p>语言集成查询 (LINQ) 是一系列直接将查询功能集成到 C# 语言的技术统称。 数据查询历来都表示为简单的字符串，没有编译时类型检查或 IntelliSense 支持。 此外，需要针对每种类型的数据源了解不同的查询语言：SQL 数据库、XML 文档、各种 Web 服务等。 借助 LINQ，查询成为了最高级的语言构造，就像类、方法和事件一样。</p><p>对于编写查询的开发者来说，LINQ 最明显的“语言集成”部分就是查询表达式。 查询表达式采用声明性<em>查询语法</em>编写而成。 使用查询语法，可以用最少的代码对数据源执行筛选、排序和分组操作。 可使用相同的基本查询表达式模式来查询和转换 SQL 数据库、ADO .NET 数据集、XML 文档和流以及 .NET 集合中的数据。</p></blockquote><p>下面的示例展示了完整的查询操作。 完整的操作包括创建数据源、定义查询表达式和在 <code>foreach</code> 语句中执行查询。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">namespace</span> <span class="token namespace">Example</span><span class="token punctuation">&#123;</span>    <span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nums <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token comment">//数据源</span>            <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> lownums <span class="token operator">=</span>              <span class="token comment">//定义查询表达式</span>                <span class="token keyword">from</span> n <span class="token keyword">in</span> nums                <span class="token keyword">where</span> <span class="token class-name">n</span> <span class="token operator">&lt;</span> <span class="token number">5</span>                <span class="token keyword">select</span> n<span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> lownums<span class="token punctuation">)</span>           <span class="token comment">//执行查询</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-LINQ-提供程序"><a href="#2-LINQ-提供程序" class="headerlink" title="2. LINQ 提供程序"></a>2. LINQ 提供程序</h2><p>在之前的示例中，数据源只是 int 数组，它是程序在内存中的对象。然而，LINQ 还可以查询各种类型的数据源，比如 SQL数据库、XML文档等等。然而，对于每种数据源类型，在其背后一定有根据该数据源类型实现LINQ查询的代码模块。这些代码模块叫做LINQ提供程序（provider）。<br>        有关LINQ提供程序的要点如下：</p><ul><li>微软为一些常见的数据源类型提供了 LINQ Provider。</li><li>可以使用任何支持 LINQ 的语言来查询有 LINQ Provider 的数据源类型。</li><li>第三方在不断提供针对各种数据源类型的 LINQ Provider。</li></ul><p><img src="/images/Linq/759721-20170315104058416-755412424.jpg"></p><h2 id="3-匿名类型"><a href="#3-匿名类型" class="headerlink" title="3. 匿名类型"></a>3. 匿名类型</h2><p>在介绍 LINQ 查询特性的细节之前，我们先学习一个允许我们创建无名类类型的特性——<strong>匿名类型（anonymous type）。匿名类型经常用于LINQ查询的结果之中。</strong><br>        <strong>对象初始化语句</strong>允许我们在使用对象创建表达式时初始化新类实例的字段和属性。提醒一下，这种形式的对象创建表达式由三部分组成：new关键字、类名或构造函数以及对象初始化语句。对象初始化语句在一组大括号内包含了以逗号分隔的成员初始化列表。<br>        <strong>创建匿名类型的变量使用相同的形式，但是没有类名和构造函数</strong>。如下的代码行演示了匿名类型的对象创建表达式：</p><p><img src="/images/Linq/image-20230118131731474.png"></p><p>创建和使用匿名类型的示例：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           <span class="token comment">//必须使用var</span>           <span class="token class-name"><span class="token keyword">var</span></span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">&#123;</span> Name<span class="token operator">=</span><span class="token string">"8yyy"</span><span class="token punctuation">,</span>Age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span>Major<span class="token operator">=</span><span class="token string">"History"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>           Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">student<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">,Age </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">student<span class="token punctuation">.</span>Age</span><span class="token punctuation">&#125;</span></span><span class="token string">,Major:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">student<span class="token punctuation">.</span>Major</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">8yyy,Age 18,Major:History<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要了解的有关匿名类型的重要事项如下：</p><ul><li>匿名类型<strong>只能和局部变量配合使用，不能用于类成员</strong>。</li><li>由于匿名类型没有名字，我们<strong>必须使用 var 关键字作为变量类型</strong>。</li><li><strong>不能设置匿名类型对象的属性</strong>。编译器为匿名类型创建的属性是只读的。<ul><li>student.Age = 20;</li><li><img src="/images/Linq/image-20230118132444419.png" alt="匿名类型的属性是只读的"></li></ul></li></ul><blockquote><p>当编译器遇到匿名类型的对象初始化语句时，它用它构造的一个私有名字创建一个新类类型。对于每一个成员初始化语句，它推断其类型并创建一个只读属性来访问它的值。属性和成员初始化语句具有相同名字。匿名类型被构造后，编译器创建了这个类型的对象。</p></blockquote><p>除了对象初始化语句的赋值形式，匿名类型的对象初始化语句还有其他两种允许的形式：简单标识符和成员访问表达式。这两种形式叫做<strong>投影初始化语句</strong>（projection initializer）。下面的变量声明演示了3种形式。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Other</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">string</span></span> Name <span class="token operator">=</span> <span class="token string">"8yyy"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">string</span></span> Major <span class="token operator">=</span> <span class="token string">"History"</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">var</span></span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">&#123;</span> Age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">,</span> Other<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> Major <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">student<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">,Age </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">student<span class="token punctuation">.</span>Age</span><span class="token punctuation">&#125;</span></span><span class="token string">,Major:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">student<span class="token punctuation">.</span>Major</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>Age = 19</code> 属于赋值形式</li><li><code>Other.Name</code> 属于成员访问</li><li><code>Major</code> 属于标识符</li></ul><p>如果编译器遇到了另一个具有相同的参数名、相同的推断类型和相同顺序的匿名类型对象初始化，它会重用这个类型并直接创建新的实例，不会创建新的匿名类型。</p><h2 id="4-方法语法和查询语法"><a href="#4-方法语法和查询语法" class="headerlink" title="4. 方法语法和查询语法"></a>4. 方法语法和查询语法</h2><p>我们在写LINQ查询时可以使用两种形式的语法：方法语法和查询语法。</p><ul><li><strong>方法语法（method syntax）</strong>使用标准的方法调用。这些方法是一组标准查询运算符的方法。</li><li><strong>查询语法（query syntax）</strong>看上去和SQL语句相似，使用查询表达式形式书写。</li><li>在一个查询中可以组合两种形式</li></ul><p>方法语法是命令式（imperative）的，它指明了查询方法调用的顺序。</p><p>查询语法是声明式（declarative）的，即查询描述的是你想返回的东西，但并没有指明如何执行这个查询。</p><p>C#编译器会将使用查询语法表示的查询翻译为方法调用的形式。这两种形式在运行时没有性能上的差异。</p><p><strong>微软推荐使用查询语法</strong>，因为它更易读，能更清晰地表明查询意图，因此也更不容易出错。然而，有些运算符必须使用方法语法来书写。</p><p>如下演示了这两种形式以及它们的组合：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> numbers <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token class-name"><span class="token keyword">var</span></span> numsQuery <span class="token operator">=</span> <span class="token keyword">from</span> n <span class="token keyword">in</span> numbers           <span class="token comment">//查询语法</span>                          <span class="token keyword">where</span> <span class="token class-name">n</span> <span class="token operator">&lt;</span> <span class="token number">10</span>                          <span class="token keyword">select</span> n<span class="token punctuation">;</span>          <span class="token class-name"><span class="token keyword">var</span></span> numsMethod <span class="token operator">=</span>numbers<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>N <span class="token operator">=></span> N <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//方法语法,使用了Lambda表达式</span>          <span class="token class-name"><span class="token keyword">int</span></span> numsCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">from</span> n <span class="token keyword">in</span> numbers           <span class="token comment">//两种语法的组合</span>                           <span class="token keyword">where</span> <span class="token class-name">n</span><span class="token operator">&lt;</span><span class="token number">10</span>                           <span class="token keyword">select</span> n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> numsQuery<span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">item </span><span class="token punctuation">&#125;</span></span><span class="token string">,"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> numsMethod<span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">item</span><span class="token punctuation">&#125;</span></span><span class="token string">,"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>numsCount<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-查询变量"><a href="#5-查询变量" class="headerlink" title="5. 查询变量"></a>5. 查询变量</h2><p>LINQ查询可以返回两种类型的结果：</p><ul><li>可以是一个<strong>枚举</strong>（可枚举的一组数据，不是枚举类型），它满足查询参数的项列表；</li><li>也可以是一个叫做<strong>标量</strong>（scalar）的单一值，它是满足查询条件的结果的某种摘要形式。</li></ul><p>例：查询变量示例</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> numbers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> lowNums<span class="token operator">=</span><span class="token keyword">from</span> n <span class="token keyword">in</span> numbers <span class="token comment">//返回一个枚举器</span>                         <span class="token keyword">where</span> <span class="token class-name">n</span><span class="token operator">&lt;</span><span class="token number">20</span>                         <span class="token keyword">select</span> n<span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">int</span></span> numsCount<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">from</span> n <span class="token keyword">in</span> numbers           <span class="token comment">//返回一个整数</span>               <span class="token keyword">where</span> <span class="token class-name">n</span><span class="token operator">&lt;</span><span class="token number">20</span>               <span class="token keyword">select</span> n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用查询语法等号左边的变量 lowNums 叫做查询变量。</p><blockquote><p>在 LINQ 中，查询变量是存储查询而不是查询结果的任何变量。 更具体地说，<strong>查询变量始终是可枚举类型</strong>，在 <code>foreach</code> 语句或对其 <code>IEnumerator.MoveNext</code> 方法的直接调用中循环访问时会生成元素序列。</p></blockquote><p>理解查询变量的用法很重要。在执行前面的代码后，<strong>lowNums 查询变量不会包含查询的结果</strong>。相反，编译器会创建能够执行这个查询的代码。</p><p><strong>查询变量numCount包含的是真实的整数值</strong>，它只能通过真实运行查询后获得。</p><p>区别在于查询执行的时间，可总结如下：</p><ul><li>如果查询表达式返回枚举，查询直到处理枚举时才会执行</li><li>如果枚举被处理多次，查询就会执行多次</li><li>如果在进行遍历后，查询执行之前数据有改动，则查询会使用新的数据</li><li>如果查询表达式返回标量，查询立即执行，并且把结果保存在查询变量中</li></ul><h2 id="6-查询表达式的结构"><a href="#6-查询表达式的结构" class="headerlink" title="6. 查询表达式的结构"></a>6. 查询表达式的结构</h2><h3 id="6-1-C-图解教程"><a href="#6-1-C-图解教程" class="headerlink" title="6.1 C#图解教程"></a>6.1 C#图解教程</h3><p>查询表达式由 <strong>from 子句和查询主体</strong>组成。</p><p>有关查询表达式需要了解一些重要事项：</p><ul><li>子句必须按照一定顺序出现</li><li>from子句和select…group子句这两部分是必需的</li><li>LINQ查询表达式中，select子句在表达式最后。C#这么做的原因之一是让Visual Studio智能感应能在我们输入代码时给我们更多选项</li><li>可以有任意多的from…let…where子句</li><li><img src="/images/Linq/759721-20170315104100245-1314843177.jpg"></li></ul><h3 id="6-2-官方文档"><a href="#6-2-官方文档" class="headerlink" title="6.2 官方文档"></a>6.2 官方文档</h3><p>查询表达式由<strong>一组类似于 SQL 或 XQuery 的声明性语法所编写的子句</strong>组成。</p><p>查询表达式必须以 <a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/from-clause">from</a> 子句开头，且必须以 <a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/select-clause">select</a> 或 <a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/group-clause">group</a> 子句结尾。</p><p>在第一个 <code>from</code> 子句与最后一个 <code>select</code> 或 <code>group</code> 子句之间，可以包含以下这些可选子句中的一个或多个：<a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/where-clause">where</a>、<a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/orderby-clause">orderby</a>、<a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/join-clause">join</a>、<a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/let-clause">let</a>，甚至是其他 <a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/from-clause">from</a> 子句。</p><p> 还可以使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/into">into</a> 关键字，使 <code>join</code> 或 <code>group</code> 子句的结果可以充当相同查询表达式中的其他查询子句的源。</p><h3 id="6-3-from-子句"><a href="#6-3-from-子句" class="headerlink" title="6.3 from 子句"></a>6.3 from 子句</h3><p>查询表达式必须以 <code>from</code> 子句开头。 <strong>它指定数据源以及范围变量</strong>。 范围变量表示遍历源序列时，源序列中的每个连续元素。 范围变量基于数据源中元素的类型进行强类型化。</p><p>查询表达式可能会包含多个 <code>from</code> 子句。 在源序列中的每个元素本身是集合或包含集合时，可使用其他 <code>from</code> 子句。</p><p>上面来自于官方文档，下面的解释来自于《C#图解教程》。</p><p>from子句指定了要作为数据源使用的数据集合。它还引入了迭代变量（等同于官方文档中的范围变量）。有关from子句的要点如下：</p><ul><li><p>迭代变量逐个表示数据源的每个元素</p></li><li><p>from 子句的语法如下：</p><ul><li>Type 是集合中元素的类型。这是可选的，因为编译器可以从集合来推断类型</li><li>Item 是迭代变量的名字</li><li>Items 是要查询的集合的名字。集合必须是可枚举的</li></ul><p><strong>from Type<del>opt</del>  Item in Items</strong></p></li></ul><p>下图演示了 from 子句的语法。类型说明符是可选的。可以有任意多个join子句。<br><img src="/images/Linq/759721-20170315104100854-716604914.jpg" alt="img"></p><p>尽管LINQ的 from 子句和 foreach 语句非常相似，但主要不同点如下：</p><ul><li>foreach 语句命令式地指定了从第一个到最后一个<strong>按顺序</strong>地访问集合中的项。而 from 子句则声明式地规定集合中的每个项都要被访问，<strong>但并没有假定以什么样的顺序</strong>。</li><li><strong>foreach 语句在遇到代码时就执行其主体，而 from 子句什么也不执行。</strong>只有在程序的控制流遇到访问查询变量的语句时，才会执行查询。</li></ul><h3 id="6-4-join-子句"><a href="#6-4-join-子句" class="headerlink" title="6.4 join 子句"></a>6.4 join 子句</h3><p>LINQ 中的 join 子句和 SQL 中的 JOIN（联结）子句相似。不同的是，我们现在不但可以在数据库的表上进行联结，还可以在集合对象上进行该操作。如果你不熟悉联结，那么下面的内容会帮你理清思路。<br>需要先了解有关联结的语法：</p><ul><li>使用联结来结合两个多多个集合中的数据</li><li>联结操作接受两个集合然后创建一个临时的对象集合，每个对象包含原始集合对象中的所有字段</li></ul><p>联结的语法如下，它指定了第二个集合要和之前子句中的集合进行联结。注意必须使用上下文关键字 equals 来比较字段，不能用 == 运算符。</p><p><img src="/images/Linq/image-20230118203703756.png"></p><p><img src="/images/Linq/image-20230118203712690.png"></p><h3 id="6-5-什么是联结"><a href="#6-5-什么是联结" class="headerlink" title="6.5 什么是联结"></a>6.5 什么是联结</h3><p>LINQ 中的 join 接收两个集合，然后创建一个新的集合，其中每一个元素包含两个原始集合中的元素成员。</p><p>例如，有两个类 Student 和 CourseStudent：</p><ul><li>Student 类型的对象包含了学生的姓氏和学号</li><li>CourseStudent 类型的对象表示参与课程的学生，它包含课程名以及学生的学号</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> stID<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> lastName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CourseStudent</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> stID<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> CourseName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/Linq/image-20230118205354255.png" alt="程序中的情况"></p><p><strong>假设我们现在希望获得某门课程中每个学生的姓氏</strong>。students 数组有姓氏，但不包含课程参与信息。studentsInCourses 数组有参与课程的信息，但没有学生的名字。我们可以使用两个数组中的对象都包含的学生 ID号（stID）来将信息联系起来。可以通过在 StD 字段上进行联结来实现。</p><p>代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> stID<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> LastName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CourseStudent</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> stID<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> CourseName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token class-name">Student<span class="token punctuation">[</span><span class="token punctuation">]</span></span> students<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">&#123;</span>StID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>LastName<span class="token operator">=</span><span class="token string">"Carson"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">&#123;</span>StID<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>LastName<span class="token operator">=</span><span class="token string">"Klassen"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">&#123;</span>StID<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>LastName<span class="token operator">=</span><span class="token string">"Fleming"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">CourseStudent<span class="token punctuation">[</span><span class="token punctuation">]</span></span> studentsInCourses<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CourseStudent<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CourseStudent</span><span class="token punctuation">&#123;</span>CourseName<span class="token operator">=</span><span class="token string">"Art"</span><span class="token punctuation">,</span>StID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CourseStudent</span><span class="token punctuation">&#123;</span>CourseName<span class="token operator">=</span><span class="token string">"Art"</span><span class="token punctuation">,</span>StID<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CourseStudent</span><span class="token punctuation">&#123;</span>CourseName<span class="token operator">=</span><span class="token string">"History"</span><span class="token punctuation">,</span>StID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CourseStudent</span><span class="token punctuation">&#123;</span>CourseName<span class="token operator">=</span><span class="token string">"History"</span><span class="token punctuation">,</span>StID<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CourseStudent</span><span class="token punctuation">&#123;</span>CourseName<span class="token operator">=</span><span class="token string">"Physics"</span><span class="token punctuation">,</span>StID<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> query<span class="token operator">=</span><span class="token keyword">from</span> s <span class="token keyword">in</span> students                  <span class="token keyword">join</span> c <span class="token keyword">in</span> studentsInCourses <span class="token keyword">on</span> s<span class="token punctuation">.</span>StID equals c<span class="token punctuation">.</span>STID                  <span class="token keyword">where</span> <span class="token class-name">c</span><span class="token punctuation">.</span>CourseName<span class="token operator">==</span><span class="token string">"History"</span>                  <span class="token keyword">select</span> s<span class="token punctuation">.</span>LastName<span class="token punctuation">;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> q <span class="token keyword">in</span> query<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Student taking History:&#123;0&#125;"</span><span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">Student taking History:CarsonStudent taking History:Fleming<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-6-查询主体中的from…let…where片段"><a href="#6-6-查询主体中的from…let…where片段" class="headerlink" title="6.6 查询主体中的from…let…where片段"></a>6.6 查询主体中的from…let…where片段</h3><p>可选的from…let…where部分是查询主体的第一部分，可以由任意数量的3个子句来组合–from子句、let子句和where子句。</p><h4 id="6-6-1-from-子句"><a href="#6-6-1-from-子句" class="headerlink" title="6.6.1 from 子句"></a>6.6.1 from 子句</h4><p>查询表达式从必需的from子句开始，后面跟查询主体。主体本身可以从任何数量的其他from子句开始，每个from子句都指定了一个额外的源数据集合并引入了要在之后运算的迭代变量，所有from子句的语法和含义都一样。</p><p>from示例如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">var</span></span> groupA <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">var</span></span> groupB <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">var</span></span> someInts <span class="token operator">=</span> <span class="token keyword">from</span> a <span class="token keyword">in</span> groupA<span class="token comment">//必须的第一个from子句</span>                   <span class="token keyword">from</span> b <span class="token keyword">in</span> groupB    <span class="token comment">//查询主体的第一个子句</span>                   <span class="token keyword">where</span> <span class="token class-name">a</span> <span class="token operator">></span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;</span> <span class="token number">8</span>                   <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//匿名对象</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> someInts<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：<code>var groupA = new[] &#123; 3,4,5,6&#125;;</code>    写法等价于 <code>int[] groupA = new int[] &#123; 3, 4, 5, 6 &#125;;</code></p></blockquote><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">&#123; a &#x3D; 5, b &#x3D; 6, sum &#x3D; 11 &#125;&#123; a &#x3D; 5, b &#x3D; 7, sum &#x3D; 12 &#125;&#123; a &#x3D; 6, b &#x3D; 6, sum &#x3D; 12 &#125;&#123; a &#x3D; 6, b &#x3D; 7, sum &#x3D; 13 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-6-2-let-子句"><a href="#6-6-2-let-子句" class="headerlink" title="6.6.2 let 子句"></a>6.6.2 let 子句</h4><p>使用 <code>let</code> 子句可将表达式（如方法调用）的结果存储在新范围变量中。 </p><p><strong>let 子句接收一个表达式的运算并且把它赋值给一个需要在其他运算中使用的标识符。</strong>let 子句的语法如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">let</span> Identifier <span class="token operator">=</span> Expression<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">var</span></span> groupA <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">var</span></span> groupB <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">var</span></span> someInts <span class="token operator">=</span> <span class="token keyword">from</span> a <span class="token keyword">in</span> groupA                   <span class="token keyword">from</span> b <span class="token keyword">in</span> groupB                   <span class="token keyword">let</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b  <span class="token comment">//在新的变量中保存结果</span>                   <span class="token keyword">where</span> <span class="token class-name">sum</span> <span class="token operator">==</span> <span class="token number">12</span>                   <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> sum <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> someInts<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">&#123; a &#x3D; 3, b &#x3D; 9, sum &#x3D; 12 &#125;&#123; a &#x3D; 4, b &#x3D; 8, sum &#x3D; 12 &#125;&#123; a &#x3D; 5, b &#x3D; 7, sum &#x3D; 12 &#125;&#123; a &#x3D; 6, b &#x3D; 6, sum &#x3D; 12 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-6-3-where-子句"><a href="#6-6-3-where-子句" class="headerlink" title="6.6.3 where 子句"></a>6.6.3 where 子句</h4><p><strong>where子句根据之后的运算来筛选指定项。</strong>从源数据中筛选出元素。</p><p>只要是在from…let…where部分中，查询表达式可以有多个where。</p><p>上面的示例中几乎都使用了 where 子句，下面来演示下多个 where 子句：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">var</span></span> groupA <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">var</span></span> groupB <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">var</span></span> someInts <span class="token operator">=</span> <span class="token keyword">from</span> a <span class="token keyword">in</span> groupA                   <span class="token keyword">from</span> b <span class="token keyword">in</span> groupB                   <span class="token keyword">let</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b                     <span class="token keyword">where</span> <span class="token class-name">sum</span> <span class="token operator">==</span> <span class="token number">12</span>                   <span class="token keyword">where</span> <span class="token class-name">a</span> <span class="token operator">></span> <span class="token number">4</span>                   <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> sum <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> someInts<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">&#123; a &#x3D; 5, b &#x3D; 7, sum &#x3D; 12 &#125;&#123; a &#x3D; 6, b &#x3D; 6, sum &#x3D; 12 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-7-orderby-子句"><a href="#6-7-orderby-子句" class="headerlink" title="6.7 orderby 子句"></a>6.7 orderby 子句</h3><p>使用 <code>orderby</code> 子句可按升序或降序对结果进行排序。 还可以指定次要排序顺序。 </p><p>orderby子句语法如下图。可选的ascending和descending关键字设置了排序方向。表达式通常是项的一个字段。该字段不一定非得是数值字段，也可以是字符串这样的可排序类型。</p><ul><li>orderby 子句默认是升序</li><li>可以有任意多子句，它们必须用逗号分隔</li></ul><p><img src="/images/Linq/759721-20170315104106166-1771384804.jpg" alt="img"></p><p>例：对学生的姓氏是主要排序，然后对其名是次要排序</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Orderby</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">var</span></span> students <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span><span class="token punctuation">&#123;</span>LName<span class="token operator">=</span><span class="token string">"Jones"</span><span class="token punctuation">,</span>FName<span class="token operator">=</span><span class="token string">"Mary"</span><span class="token punctuation">,</span>Age<span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">,</span>Major<span class="token operator">=</span><span class="token string">"History"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token keyword">new</span><span class="token punctuation">&#123;</span>LName<span class="token operator">=</span><span class="token string">"Smith"</span><span class="token punctuation">,</span>FName<span class="token operator">=</span><span class="token string">"Bob"</span><span class="token punctuation">,</span>Age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>Major<span class="token operator">=</span><span class="token string">"CompSci"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token keyword">new</span><span class="token punctuation">&#123;</span>LName<span class="token operator">=</span><span class="token string">"Smith"</span><span class="token punctuation">,</span>FName<span class="token operator">=</span><span class="token string">"Cesar"</span><span class="token punctuation">,</span>Age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>Major<span class="token operator">=</span><span class="token string">"CompSci"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token keyword">new</span><span class="token punctuation">&#123;</span>LName<span class="token operator">=</span><span class="token string">"Fleming"</span><span class="token punctuation">,</span>FName<span class="token operator">=</span><span class="token string">"Carol"</span><span class="token punctuation">,</span>Age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">,</span>Major<span class="token operator">=</span><span class="token string">"History"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token keyword">new</span><span class="token punctuation">&#123;</span>LName<span class="token operator">=</span><span class="token string">"Fleming"</span><span class="token punctuation">,</span>FName<span class="token operator">=</span><span class="token string">"Debra"</span><span class="token punctuation">,</span>Age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">,</span>Major<span class="token operator">=</span><span class="token string">"History"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> <span class="token keyword">from</span> student <span class="token keyword">in</span> students                <span class="token keyword">orderby</span> student<span class="token punctuation">.</span>LName<span class="token punctuation">,</span> student<span class="token punctuation">.</span>FName <span class="token comment">//进行排序</span>                <span class="token keyword">select</span> student<span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> query<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>LName</span><span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>FName</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">Fleming CarolFleming DebraJones MarySmith BobSmith Cesar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-8-select…group子句"><a href="#6-8-select…group子句" class="headerlink" title="6.8 select…group子句"></a>6.8 select…group子句</h3><p>查询表达式必须以 <code>group</code> 子句或 <code>select</code> 子句结尾。</p><p>select…group 部分由两种类型的子句组成—— select 子句和 gropu..by 子句。select…group部分之前的部分指定了数据源和要选择的对象。</p><ul><li>select 子句指定应该选择所选对象的哪些部分。它可以指定下面的任意一项<ul><li>整个数据项</li><li>数据项的一个字段</li><li>数据项的几个字段组成的新对象（或类似其他值）</li></ul></li></ul><p>例子如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">var</span></span> students <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span><span class="token punctuation">&#123;</span>LName<span class="token operator">=</span><span class="token string">"Jones"</span><span class="token punctuation">,</span>FName<span class="token operator">=</span><span class="token string">"Mary"</span><span class="token punctuation">,</span>Age<span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">,</span>Major<span class="token operator">=</span><span class="token string">"History"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token keyword">new</span><span class="token punctuation">&#123;</span>LName<span class="token operator">=</span><span class="token string">"Smith"</span><span class="token punctuation">,</span>FName<span class="token operator">=</span><span class="token string">"Bob"</span><span class="token punctuation">,</span>Age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>Major<span class="token operator">=</span><span class="token string">"CompSci"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token keyword">new</span><span class="token punctuation">&#123;</span>LName<span class="token operator">=</span><span class="token string">"Smith"</span><span class="token punctuation">,</span>FName<span class="token operator">=</span><span class="token string">"Cesar"</span><span class="token punctuation">,</span>Age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>Major<span class="token operator">=</span><span class="token string">"CompSci"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">var</span></span> query1 <span class="token operator">=</span> <span class="token keyword">from</span> student <span class="token keyword">in</span> students                 <span class="token keyword">where</span> <span class="token class-name">student</span><span class="token punctuation">.</span>Age <span class="token operator">></span><span class="token number">19</span>                 <span class="token keyword">select</span> student<span class="token punctuation">;</span>       <span class="token comment">//选择整个数据项</span>    <span class="token class-name"><span class="token keyword">var</span></span> query2 <span class="token operator">=</span> <span class="token keyword">from</span> student <span class="token keyword">in</span> students                 <span class="token keyword">where</span> <span class="token class-name">student</span><span class="token punctuation">.</span>Age <span class="token operator">></span> <span class="token number">19</span>                 <span class="token keyword">select</span> student<span class="token punctuation">.</span>LName<span class="token punctuation">;</span>       <span class="token comment">//选择数据线的一个字段</span>    <span class="token class-name"><span class="token keyword">var</span></span> query3 <span class="token operator">=</span> <span class="token keyword">from</span> student <span class="token keyword">in</span> students                 <span class="token keyword">where</span> <span class="token class-name">student</span><span class="token punctuation">.</span>Age <span class="token operator">></span> <span class="token number">19</span>                 <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token punctuation">&#123;</span> student<span class="token punctuation">.</span>LName<span class="token punctuation">,</span> student<span class="token punctuation">.</span>FName <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token comment">//选择数据线的几个字段</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>group…by子句是可选的，用来指定选择的项如何分组</li></ul><h3 id="6-9-查询中的匿名类型"><a href="#6-9-查询中的匿名类型" class="headerlink" title="6.9 查询中的匿名类型"></a>6.9 查询中的匿名类型</h3><p>查询结果可以由原始集合的项、原始集合中项的字段或匿名类型组成。</p><p>可以通过<strong>在 select 子中把希望在类型中包括的字段以逗号分隔，并以大括号进行包围来创建匿名类型</strong>。例如，要只选择学生姓名和主修课，可以使用如下的语法：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token punctuation">&#123;</span>s<span class="token punctuation">.</span>LName<span class="token punctuation">,</span>s<span class="token punctuation">.</span>FName<span class="token punctuation">,</span>s<span class="token punctuation">.</span>Major<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-10-group-子句"><a href="#6-10-group-子句" class="headerlink" title="6.10 group 子句"></a>6.10 group 子句</h3><p><code>group</code> 子句返回一个 <strong>IGrouping&lt; Tkey,TElement &gt;</strong> 对象序列，这些对象包含零个或多个与该组的键值匹配的项。 例如，可以按照每个字符串中的第一个字母对字符串序列进行分组。 在这种情况下，第一个字母就是键，类型为 <a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/builtin-types/char">char</a>，并且存储在每个 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.linq.igrouping-2">IGrouping</a> 对象的 <code>Key</code> 属性中。 编译器可推断键的类型。</p><ul><li>如果项包含在查询的结果中，它们就可以根据某个字段的值进行分组。作为分组依据的属性叫做 <strong>键</strong>（key）</li><li>group子句返回的不是原始数据源中项的枚举，而是返回可以枚举已经形成的项的分组的可枚举类型，即对象序列</li><li>分组本身是可枚举类型，它们可以枚举实际的项</li></ul><p>如下代码演示了根据学生的主修课程进行分组：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Groupby</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token class-name"><span class="token keyword">var</span></span> students <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>          <span class="token punctuation">&#123;</span>              <span class="token keyword">new</span><span class="token punctuation">&#123;</span>LName<span class="token operator">=</span><span class="token string">"Jones"</span><span class="token punctuation">,</span>FName<span class="token operator">=</span><span class="token string">"Mary"</span><span class="token punctuation">,</span>Age<span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">,</span>Major<span class="token operator">=</span><span class="token string">"History"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token keyword">new</span><span class="token punctuation">&#123;</span>LName<span class="token operator">=</span><span class="token string">"Smith"</span><span class="token punctuation">,</span>FName<span class="token operator">=</span><span class="token string">"Bob"</span><span class="token punctuation">,</span>Age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>Major<span class="token operator">=</span><span class="token string">"CompSci"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token keyword">new</span><span class="token punctuation">&#123;</span>LName<span class="token operator">=</span><span class="token string">"Fleming"</span><span class="token punctuation">,</span>FName<span class="token operator">=</span><span class="token string">"Carol"</span><span class="token punctuation">,</span>Age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">,</span>Major<span class="token operator">=</span><span class="token string">"History"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token keyword">new</span><span class="token punctuation">&#123;</span>LName<span class="token operator">=</span><span class="token string">"Smith"</span><span class="token punctuation">,</span>FName<span class="token operator">=</span><span class="token string">"Cesar"</span><span class="token punctuation">,</span>Age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>Major<span class="token operator">=</span><span class="token string">"CompSci"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> <span class="token keyword">from</span> student <span class="token keyword">in</span> students                      <span class="token keyword">group</span> student <span class="token keyword">by</span> student<span class="token punctuation">.</span>Major<span class="token punctuation">;</span><span class="token comment">//student.Major即键key</span>           <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> g <span class="token keyword">in</span> query<span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>Key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出分组键</span>              <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> s <span class="token keyword">in</span> g<span class="token punctuation">)</span>   <span class="token comment">//枚举分组中的项</span>              <span class="token punctuation">&#123;</span>                  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"   </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">s<span class="token punctuation">.</span>LName</span><span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">s<span class="token punctuation">.</span>FName</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">History   Jones Mary   Fleming CarolCompSci   Smith Bob   Smith Cesar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/Linq/image-20230119163348385.png"></p><h3 id="6-11-查询延续：into-子句"><a href="#6-11-查询延续：into-子句" class="headerlink" title="6.11 查询延续：into 子句"></a>6.11 查询延续：into 子句</h3><p>可以在 <code>select</code> 或 <code>group</code> 子句中使用 <code>into</code> 关键字创建存储查询的临时标识符。 如果在分组或选择操作之后必须对查询执行其他查询操作，则可以这样做。</p><p>查询延续子句可以接受查询的一部分结果并赋予一个名字，从而可以在查询的另一部分中使用。</p><p>示例如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Into</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> words<span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"apples"</span><span class="token punctuation">,</span> <span class="token string">"blueberries"</span><span class="token punctuation">,</span> <span class="token string">"oranges"</span><span class="token punctuation">,</span> <span class="token string">"bananas"</span><span class="token punctuation">,</span> <span class="token string">"apricots"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token class-name"><span class="token keyword">var</span></span> wordGroup <span class="token operator">=</span> <span class="token keyword">from</span> w <span class="token keyword">in</span> words                          <span class="token keyword">group</span> w <span class="token keyword">by</span> w<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">into</span> fruitGroup   <span class="token comment">//根据水果英文首字母进行分类，存入fruitGroup</span>                          <span class="token keyword">where</span> <span class="token class-name">fruitGroup</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span>     <span class="token comment">//如果一个分类由2个以上</span>                          <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token punctuation">&#123;</span> FirstLetter <span class="token operator">=</span> fruitGroup<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> Words <span class="token operator">=</span> fruitGroup<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//创建一个匿名类型，存储水果英文的键和水果的数量</span>          <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> wordGroup<span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>FirstLetter</span><span class="token punctuation">&#125;</span></span><span class="token string"> has </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>Words</span><span class="token punctuation">&#125;</span></span><span class="token string"> elements."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">a has 2 elements.b has 2 elements.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="7-标准查询运算符"><a href="#7-标准查询运算符" class="headerlink" title="7. 标准查询运算符"></a>7. 标准查询运算符</h2><p>标准查询运算符由一系列API方法组成，API 能让我们查询任何 .NET 数组或集合。<br>标准查询运算符的重要特性如下：</p><ul><li>被查询的集合对象叫做序列，它必须实现<code>IEnumerable&lt;T&gt;</code>接口。</li><li>标准查询运算符使用方法语法。</li><li>一些运算符返回IEnumerable对象（或其他序列），而其他的一些运算符返回标量。返回标量的运算符立即执行，并返回一个值</li><li>很多操作都以一个谓词作为参数。谓词是一个方法，它以对象为参数，根据对象是否满足某条件而返回 true 或 false</li></ul><p>例：Sum和Count运算符的使用</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">int</span></span> total <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">int</span></span> howMany <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Total: &#123;0&#125;,Count: &#123;1&#125;"</span><span class="token punctuation">,</span> total<span class="token punctuation">,</span> howMany<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">Total: 12,Count: 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>标准查询运算符</em> 是组成 LINQ 模式的方法。 这些方法中的大多数都作用于序列；其中序列指其类型实现 <code>IEnumerable&lt; T &gt;</code>接口或 <code> IQueryable &lt; T &gt;</code>接口的对象，包括List&lt;&gt;、Dictionary&lt;&gt;、Stack&lt;&gt;、Array等。 标准查询运算符提供包括筛选、投影、聚合、排序等在内的查询功能。</p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/linq/standard-query-operators-overview">标准查询运算符概述 (C#)</a></p><p><img src="/images/Linq/759721-20170315104112463-1147653819.jpg"></p><h3 id="7-1-标准查询运算符的签名"><a href="#7-1-标准查询运算符的签名" class="headerlink" title="7.1 标准查询运算符的签名"></a>7.1 标准查询运算符的签名</h3><p><code>System.Linq.Enumerable</code> 类声明了标准查询运算符方法。这些方法不仅仅是普通方法，它们是扩展了<code>IEnumerable&lt;T&gt;</code>泛型类的扩展方法。</p><p>扩展方法是公共的静态方法，尽管定义在一个类中，但目的是为另一个类（第一个形参）增加功能。该参数前必须有关键字this。</p><p><img src="/images/Linq/image-20230119194801983.png"></p><p>示例：使用Count 和 First 运算符：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> intArray <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token comment">//方法语法</span>          <span class="token class-name"><span class="token keyword">var</span></span> count1 <span class="token operator">=</span> Enumerable<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span>intArray<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name"><span class="token keyword">var</span></span> firstNum1 <span class="token operator">=</span> Enumerable<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span>intArray<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//扩展语法</span>          <span class="token class-name"><span class="token keyword">var</span></span> count2 <span class="token operator">=</span> intArray<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name"><span class="token keyword">var</span></span> firstNum2 <span class="token operator">=</span> intArray<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Count:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">count1</span><span class="token punctuation">&#125;</span></span><span class="token string">,FirstNumber</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">firstNum1</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Count:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">count2</span><span class="token punctuation">&#125;</span></span><span class="token string">,FirstNumber</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">firstNum2</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">Count:5,FirstNumber1Count:5,FirstNumber1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>分析代码如下：</p><ul><li>Count 运算符返回序列中所有元素的个数。</li><li>First 运算符返回序列中的第一个元素。</li><li>在代码中，前两次使用的运算符都是直接调用的，和普通方法差不多，<strong>数组作为参数。</strong></li><li>之后的两行代码使用扩展方法语法来调用运算符，就好像它们是数组的方法成员一样一，<strong>数组作为被扩展的对象</strong>。</li><li>方法语法调用和扩展语法调用在语义上是完全相等的，只是语法不同。</li></ul><h3 id="7-2-查询表达式和标准查询运算符"><a href="#7-2-查询表达式和标准查询运算符" class="headerlink" title="7.2 查询表达式和标准查询运算符"></a>7.2 查询表达式和标准查询运算符</h3><p>标准查询运算符是进行查询的一组方法。编译器把每个查询表达式翻译成标准查询运算符的形式。</p><p>查询表达式和方法语法可以组合：</p><p><img src="/images/Linq/image-20230119200240402.png"></p><h3 id="7-3-将委托作为参数"><a href="#7-3-将委托作为参数" class="headerlink" title="7.3 将委托作为参数"></a>7.3 将委托作为参数</h3><p>每个运算符的第一个参数是<code>IEnumerable&lt;T&gt;</code>对象的引用，之后的参数可以是任何类型。很多运算符接受泛型委托作为参数。</p><p><strong>泛型委托用于给运算符提供用户自定义代码</strong>。为了解释这一点，我们首先从演示 Count 运算符的几种使用方式的示例开始。Count 运算符被重载且有两种形式，第一种之前示例中用过，它有一个参数，返回集合中元素的个数。签名如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token generic-method"><span class="token function">Count</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，假设我们希望计算数组中奇数元素的总数。Count 方法必须能够检测整数是否为奇数。<br>我们需要使用Count方法的第二种形式。如下所示，它接受一个泛型委托作为第二个参数。调用时，我们提供一个接受单个 T 类型的输入参数并返回布尔值的委托对象。委托代码的返回值必须指定元素是否包含在总数中。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token generic-method"><span class="token function">Count</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> IEnumerable<span class="token operator">&lt;</span>T<span class="token operator">></span> source，<span class="token class-name">Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token punctuation">></span></span> predicate<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> intArray <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token class-name"><span class="token keyword">var</span></span> countOdd <span class="token operator">=</span> intArray<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span>n <span class="token operator">=></span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Count of odd numbers:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">countOdd</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入结果如下：</p><pre class="line-numbers language-none"><code class="language-none">Count of odd numbers:2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-4-LINQ-预定义的委托类型"><a href="#7-4-LINQ-预定义的委托类型" class="headerlink" title="7.4 LINQ 预定义的委托类型"></a>7.4 LINQ 预定义的委托类型</h3><p>和前面示例中的Count运算符差不多，很多LINQ运算符需要我们提供代码来指示运算符如何执行它的操作。我们通过委托对象作为参数来实现。</p><p>LINQ定义了两套泛型委托类型与标准查询运算符一起使用，即<code>Func委托</code>和<code>Action委托</code>，各有17个成员。</p><ul><li>我们用作实参的委托对象必须是这些类型或这些形式之一</li><li>TR代表返回值，并且总是在类型参数列表中的最后一个</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name">TR</span> <span class="token generic-method"><span class="token function">Func</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">in</span> T1<span class="token punctuation">,</span><span class="token keyword">in</span> T2<span class="token punctuation">,</span><span class="token keyword">out</span> TR<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">T1</span> a1<span class="token punctuation">,</span><span class="token class-name">T2</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>                 ↑               ↑              ↑              返回类型         类型参数        方法参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意返回类型参数有out关键字，使之可以<strong>协变，即可以接受声明的类型或从这个类型派生的类型</strong>。输入参数有in关键字，使之可以逆变，即你可以接受声明的类型或从这个类型派生的类型。</p><h3 id="7-5-使用委托类型的示例"><a href="#7-5-使用委托类型的示例" class="headerlink" title="7.5 使用委托类型的示例"></a>7.5 使用委托类型的示例</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsOdd</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> intArray<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        Func<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">></span>myDel<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>IsOdd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">var</span></span> countOdd<span class="token operator">=</span>intArray<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span>myDel<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Count of odd numbers: &#123;0&#125;"</span><span class="token punctuation">,</span>countOdd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-LINQ-to-XML"><a href="#8-LINQ-to-XML" class="headerlink" title="8. LINQ to XML"></a>8. LINQ to XML</h2><p>可扩展标记语言（XML）是存储和交换数据的重要方法。LINQ 为语言增加了一些特性，使得 XML 用起来比 XPath 和 XSLT 容易得多。</p><ul><li>可以使用单一语句自顶向下创建 XML 树</li><li>可以不使用包含树的 XML 文档的情况下在内存中创建并操作 XML</li><li>可以不使用 Text 子节点来创建和操作字符串节点</li><li>搜索 XML树时，不需要遍历它。只需要查询树并让它返回想要的结果</li></ul><h3 id="8-1-标记语言"><a href="#8-1-标记语言" class="headerlink" title="8.1 标记语言"></a>8.1 标记语言</h3><p><strong>标记语言</strong>（markup language）是文档中的一组标签，它提供有关文档的信息并组织其内容。即标记标签不是文档的数据——它们包含关于数据的数据。有关数据的数据称为<strong>元数据</strong>。</p><p>标记语言是被定义的一组标签，旨在传递有关文档内容的特定类型的元数据。例如，HTML 是众所周知的标记语言。标签中的元数据包含了 Web 页面如何在浏览器中呈现已经如何使用超链接在页面中导航的信息。</p><p>大多数标记语言包含一组预定义的标签，而 XML 中仅有少量预定义标签，其他由程序员定义，来表示特定文档类型需要的任何元数据。只要数据的读者和编写者都知道标签的含义，标签就可以包含任何设计者希望的有用信息。</p><h3 id="8-2-XML-基础"><a href="#8-2-XML-基础" class="headerlink" title="8.2 XML 基础"></a>8.2 XML 基础</h3><p>XML文档中的数据包含了一个 XML 树，XML 树主要由嵌套元素组成。</p><p><strong>元素</strong>是 XML 树的基本要素。每个元素都有名字且包含数据，一些元素还包含其他嵌套元素。元素由开始和关闭标签进行划分。任何元素包含的数据都必须介于开始和关闭标签之间。</p><ul><li>开始标签 <code>&lt;ElementName&gt;</code></li><li>结束标签 <code>&lt;/ElementName&gt;</code></li><li>无内容的单个标签 <code>&lt;ElementName/&gt;</code></li></ul><p>例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">   开始标签        内容        结束标签      ↓            ↓            ↓<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EmployeeName</span><span class="token punctuation">></span></span>Sally Jones<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EmployeeName</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PhoneNumber</span><span class="token punctuation">/></span></span>  ←没有内容的元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>有关XML的重要事项：</p><ul><li>XML文档必须有一个根元素包含所有其他元素</li><li>XML标签必须合理嵌套</li><li>与HTML标签不同，XML标签是区分大小写的</li><li>XML特性是名字/值的配对，它包含了元素的额外元数据。特性的值部分必须包含在引号内，单引号双引号皆可</li><li>XML文档中的空格是有效的。这与把空格作为当个空格输出的HTML不同</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Employees</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Employee</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Name</span><span class="token punctuation">></span></span>Bob Smith<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PhoneNumber</span><span class="token punctuation">></span></span>408-555-1000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PhoneNumber</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CellPhone</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Employee</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Employee</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Name</span><span class="token punctuation">></span></span>Sally Jones<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PhoneNumber</span><span class="token punctuation">></span></span>415-555-2000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PhoneNumber</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PhoneNumber</span><span class="token punctuation">></span></span>415-555-2001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PhoneNumber</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Employee</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Employees</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/Linq/759721-20170315104114526-1931773787.jpg"></p><h3 id="8-3-XML-类"><a href="#8-3-XML-类" class="headerlink" title="8.3 XML 类"></a>8.3 XML 类</h3><p><a href="https://learn.microsoft.com/zh-cn/dotnet/standard/linq/linq-xml-classes-overview">LINQ to XML 类概述</a></p><ul><li><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.xml.linq.xattribute">XAttribute</a> 表示一个 XML 属性。</li><li><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.xml.linq.xdocument">XDocument</a> 表示一个 XML 文档。</li><li><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.xml.linq.xelement">XElement</a> 表示一个 XML 元素。</li><li><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.xml.linq.xnode">XNode</a> 是一个抽象类，它表示 XML 树的节点。</li><li><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.xml.linq.xcomment">XComment</a> 表示一个 XML 注释。</li></ul><p>LINQ to XML可以以两种方式用于 XML：</p><ul><li>第一种是作为简化的 XML 操作 API。</li><li>第二种是 LINQ 查询工具。</li></ul><p>LINQ to XML API 由很多表示 XML 树组件的类组成。我们主要使用3个类，XElement、XAttribute和 XDocument。</p><p>下图演示了用于构造 XML 树的类以及它们如何被嵌套。</p><ul><li>可作为 XDocument 节点的直接子节点。<ul><li>下面的节点类型，最多有一个：XDeclaration 节点、XDocumentType 节点以及XElement 节点。</li><li>任何数量的 XProcessingInstruction 节点。</li></ul></li><li>如果在 XDocument 中有最高级别的 XElement 节点，那么它就是XML树中其他元素的根。</li><li>根元素可以包含任意数量的 XElement、XComment 或 XProcessingInstruction 节点，在任何级别上嵌套</li></ul><p><img src="/images/Linq/759721-20170315104115713-1359858360.jpg"></p><p>除了 XAttribute 类，大多数用于创建 XML 树的类都从一个叫做 XNode 的类继承，一般在书中也叫做 “XNodes”。</p><h4 id="8-3-1-创建、保存、加载和显示-XML-文档"><a href="#8-3-1-创建、保存、加载和显示-XML-文档" class="headerlink" title="8.3.1 创建、保存、加载和显示 XML 文档"></a>8.3.1 创建、保存、加载和显示 XML 文档</h4><p>从创建一个简单的包含一个 Employees 节点的 XML 树开始，两个子节点包含两个职员的名字。</p><ul><li>树使用一条语句来创建，并同时在适当的位置创建所有的嵌套元素，这叫作函数式构造( functional construction )。</li><li>每一个元素由对象创建表达式在适当的位置创建，使用了节点类型的构造函数。</li></ul><p>创建树之后，代码使用 XDocument 的 Save方法把它保存在一个叫作 EmployeesFile.xml 的文件中。然后，再使用 XDocument 的 Load 静态方法把 XML 树从文件中重新读回，并把树赋值给一个新的 XDocument 对象。最后，使用 WriteLine 把新的 Document 对象保存的树结构显示出来。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Xml<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span>      <span class="token comment">//引入Linq命名空间</span><span class="token keyword">namespace</span> <span class="token namespace">XMLExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">XDocument</span> employees1 <span class="token operator">=</span>                  <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XDocument</span><span class="token punctuation">(</span>      <span class="token comment">//创建 XML 文档</span>                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"Employees"</span><span class="token punctuation">,</span>   <span class="token comment">//创建根元素</span>                        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">,</span> <span class="token string">"Bob Smith"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//创建元素</span>                        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">,</span><span class="token string">"8yyy"</span><span class="token punctuation">)</span>         <span class="token comment">//创建元素</span>                <span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            employees1<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token string">"EmployeesFile.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//保存到文件</span>            <span class="token comment">//将保存的文件加载到新变量中</span>            <span class="token class-name">XDocument</span> employees2 <span class="token operator">=</span> XDocument<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"EmployeesFile.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>employees2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;Employees&gt;  &lt;Name&gt;Bob Smith&lt;&#x2F;Name&gt;  &lt;Name&gt;8yyy&lt;&#x2F;Name&gt;&lt;&#x2F;Employees&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-3-2-创建-XML-树"><a href="#8-3-2-创建-XML-树" class="headerlink" title="8.3.2 创建 XML 树"></a>8.3.2 创建 XML 树</h4><p>在之前的示例中，我们已经知道了能通过使用 XDocument 和 XElement 的构造函数在内存中创建一个XML文档。在这里，对于两个构造函数:</p><ul><li>第一个参数都是对象名</li><li>第二个参数以及之后的参数含了 XML 树的节点。构造函数的第二个参数是一个 params 参数，也就是说可以有任意多的参数。</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Xml<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span>      <span class="token comment">//引入Linq命名空间</span><span class="token keyword">namespace</span> <span class="token namespace">XMLExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">XDocument</span> employeeDoc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XDocument</span><span class="token punctuation">(</span>      <span class="token comment">//创建文档</span>                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"Employees"</span><span class="token punctuation">,</span>    <span class="token comment">//创建根元素</span>                        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"Employee"</span><span class="token punctuation">,</span><span class="token comment">//第一个employee元素</span>                            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">,</span><span class="token string">"Bob Smith"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"PhoneNumber"</span><span class="token punctuation">,</span> <span class="token string">"400-555-1000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"Employee"</span><span class="token punctuation">,</span><span class="token comment">////第二个employee元素</span>                            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">,</span> <span class="token string">"8yyy"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"PhoneNumber"</span><span class="token punctuation">,</span> <span class="token string">"400-555-1000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"PhoneNumber"</span><span class="token punctuation">,</span> <span class="token string">"400-555-1000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">)</span>                 <span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>employeeDoc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;Employees&gt;  &lt;Employee&gt;    &lt;Name&gt;Bob Smith&lt;&#x2F;Name&gt;    &lt;PhoneNumber&gt;400-555-1000&lt;&#x2F;PhoneNumber&gt;  &lt;&#x2F;Employee&gt;  &lt;Employee&gt;    &lt;Name&gt;8yyy&lt;&#x2F;Name&gt;    &lt;PhoneNumber&gt;400-555-1000&lt;&#x2F;PhoneNumber&gt;    &lt;PhoneNumber&gt;400-555-1000&lt;&#x2F;PhoneNumber&gt;  &lt;&#x2F;Employee&gt;&lt;&#x2F;Employees&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-3-3-使用-XML-树的值"><a href="#8-3-3-使用-XML-树的值" class="headerlink" title="8.3.3 使用 XML 树的值"></a>8.3.3 使用 XML 树的值</h4><p>当我们遍历XML树来获取或修改值时才体现了XML的强大。下表给出了用于获取数据的主要方法。</p><p><img src="/images/Linq/759721-20170315104118416-2120525438.jpg"></p><p>关于上表，需要注意的一些事项如下：</p><ul><li><strong>Nodes</strong> Nodes方法返回<code>IEnumerable&lt;object&gt;</code>类型的对象，因为返回的节点可能是不同的类型，比如XElement、XComment等。我们可以使用以类型作为参数的方法<code>OfType(type)</code>来指定返回某类型的节点。例如，如下代码只能获取 XComment 节点<ul><li><code>IEnumerable&lt;XComment&gt; comments = xd.Nodes().OfType&lt;XComment&gt;();</code></li></ul></li><li><strong>Elements</strong> 由于获取 XElement 是非常普遍的需求，就出现了<code>Nodes.OfType(XElement)()</code>表达式的简短形式–Elements方法<ul><li>无参数的Elements方法返回所有子XElements</li><li>单个name参数的Elements方法返回具有这个名字的子XElements。例如，如下代码返回具有名字PhoneNumber的子XElement节点</li><li><code>IEnumerable&lt;XElement&gt; empPhones=emp.Elements(&quot;PhoneNumber&quot;);</code></li></ul></li><li><strong>Element</strong> 这个方法只获取当前节点的第一个子XElement。如果无参数，获取第一个XElement节点，如果带一个参数，获取第一个具有此名字的子XElement</li><li><strong>Descendants和Ancestors</strong> 这些方法和Elements以及Parent方法差不多，只不过它们不返回直接的子元素和父元素，而是忽略嵌套级别，包括所有之下或者之上的节点</li></ul><p>如下代码演示了 Element 和 Elements 方法：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ElementAndElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">XDocument</span> employeeDoc <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XDocument</span><span class="token punctuation">(</span>      <span class="token comment">//创建文档</span>            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"Employees"</span><span class="token punctuation">,</span>    <span class="token comment">//创建根元素</span>                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"Employee"</span><span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">,</span> <span class="token string">"Bob Smith"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"PhoneNumber"</span><span class="token punctuation">,</span> <span class="token string">"400-555-1000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"Employee"</span><span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">,</span> <span class="token string">"8yyy"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"PhoneNumber"</span><span class="token punctuation">,</span> <span class="token string">"400-555-1000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"PhoneNumber"</span><span class="token punctuation">,</span> <span class="token string">"400-555-1000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>         <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取第一个名为"Employees"的子XElement</span>    <span class="token class-name">XElement</span> root <span class="token operator">=</span> employeeDoc<span class="token punctuation">.</span><span class="token function">Element</span><span class="token punctuation">(</span><span class="token string">"Employees"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回所有的子XElement，即"Employee"</span>    <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>XElement<span class="token punctuation">></span></span> employees <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">Elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> emp <span class="token keyword">in</span> employees<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//获取第一个名为"Name"的子XElement</span>        <span class="token class-name">XElement</span> empNameNode <span class="token operator">=</span> emp<span class="token punctuation">.</span><span class="token function">Element</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>empNameNode<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回所有名为"PhoneNumber"的子XElement</span>        <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>XElement<span class="token punctuation">></span></span> empPhones <span class="token operator">=</span> emp<span class="token punctuation">.</span><span class="token function">Elements</span><span class="token punctuation">(</span><span class="token string">"PhoneNumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> phone <span class="token keyword">in</span> empPhones<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"    </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">phone<span class="token punctuation">.</span>Value</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">Bob Smith    400-555-10008yyy    400-555-1000    400-555-1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-3-4-增加节点以及操作-XML"><a href="#8-3-4-增加节点以及操作-XML" class="headerlink" title="8.3.4 增加节点以及操作 XML"></a>8.3.4 增加节点以及操作 XML</h4><p>我们可以使用 <strong>Add</strong> 方法为现有元素增加子元素。 Add 方法允许我们在一次方法调用中增加任意多个元素，不管增加的节点类型是什么。</p><p>如下代码创建一个简单的 XML 树，用 Add 方法为根元素增加单个节点。之后，再次使用 Add 方法增加三个元素： 两个 XElements 和一个 XComment。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">XDocument</span> xd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XDocument</span><span class="token punctuation">(</span>       <span class="token comment">//创建一个 XML文档</span>            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span>        <span class="token comment">//创建 根元素</span>                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Original tree"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>xd<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">XElement</span> rt <span class="token operator">=</span> xd<span class="token punctuation">.</span><span class="token function">Element</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//获取名为root的第一个元素</span>    rt<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//添加一个名为second的子元素</span>    rt<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"third"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token comment">//连续添加三个子元素</span>           <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XComment</span><span class="token punctuation">(</span><span class="token string">"Important Comment"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"fourth"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Modified tree"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>xd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">Original tree&lt;root&gt;  &lt;first &#x2F;&gt;&lt;&#x2F;root&gt;Modified tree&lt;root&gt;  &lt;first &#x2F;&gt;  &lt;second &#x2F;&gt;  &lt;third &#x2F;&gt;  &lt;!--Important Comment--&gt;  &lt;fourth &#x2F;&gt;&lt;&#x2F;root&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下图是操作 XML 的方法</p><p><img src="/images/Linq/759721-20170315104120526-445884173.jpg"></p><h4 id="8-3-5-使用-XML-特性"><a href="#8-3-5-使用-XML-特性" class="headerlink" title="8.3.5 使用 XML 特性"></a>8.3.5 使用 XML 特性</h4><p><strong>特性即属性，特性提供了有关 XElement 节点的额外信息，它放在 XML 元素的开始标签中。</strong></p><p>属性是与元素关联的名称/值对。 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.xml.linq.xattribute">XAttribute</a> 类表示 XML 属性。</p><table><thead><tr><th align="left">构造函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>XAttribute(XName name, object content)</code></td><td align="left">创建一个 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.xml.linq.xattribute">XAttribute</a> 对象。 <code>name</code> 参数指定属性的名称；<code>content</code> 指定属性的内容。</td></tr></tbody></table><p><strong>属性不是节点</strong>：</p><ul><li>属性与元素之间有些区别。 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.xml.linq.xattribute">XAttribute</a> 对象不是 XML 树中的节点。 它们是与 XML 元素关联的名称/值对。 与文档对象模型 (DOM) 相比，这更加贴切地反映了 XML 结构。 虽然 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.xml.linq.xattribute">XAttribute</a> 对象实际上不是 XML 树的节点，但使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.xml.linq.xattribute">XAttribute</a> 对象与使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.xml.linq.xelement">XElement</a> 对象非常相似。</li><li>这一区别仅对编写在节点级使用 XML 树的代码的开发人员特别重要。 许多开发人员不会关心这种区别。</li></ul><p>当我们以函数方法构造 <strong>XML</strong> 树时，只需在 XElement 的构造函数中包含 XAttribute 构造函数来增加特性。XAttribute 构造函数有两种形式一种是接受 name 和 value，另一种是接受现有 XAttribute 的引用。</p><p>例：为root增加两个特性。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddXAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">XDocument</span> xd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XDocument</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XAttribute</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">//为根节点root添加第一个属性color，值为red</span>                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XAttribute</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">,</span> <span class="token string">"large"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//为根节点root添加第二个属性size，值为large</span>            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>xd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;root color&#x3D;&quot;red&quot; size&#x3D;&quot;large&quot;&gt;  &lt;first &#x2F;&gt;  &lt;second &#x2F;&gt;&lt;&#x2F;root&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>要从一个 XElement 节点获取特性</strong>可以使用 Attribute 方法，提供特性名称作为参数即可。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">XElement</span> rt <span class="token operator">=</span> xd<span class="token punctuation">.</span><span class="token function">Element</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//获取元素</span><span class="token class-name">XAttribute</span> color <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">Attribute</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//获取特性</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"color is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">color<span class="token punctuation">.</span>Value</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>移除特性</strong>，可以使用 Remove 方法，或在它的父节点中使用 SetAttributeValue 方法把特性值设为 null。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">XElement</span> rt <span class="token operator">=</span> xd<span class="token punctuation">.</span><span class="token function">Element</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//获取元素</span>rt<span class="token punctuation">.</span><span class="token function">Attribute</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//移除color特性</span>rt<span class="token punctuation">.</span><span class="token function">SetAttributeValue</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//移除size特性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>增加特性或改变特性的值</strong>，可以使用 SetAttributeValue 方法。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">XElement</span> rt <span class="token operator">=</span> xd<span class="token punctuation">.</span><span class="token function">Element</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//获取元素</span>rt<span class="token punctuation">.</span><span class="token function">SetAttributeValue</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">,</span> <span class="token string">"medium"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//改变特性值</span>rt<span class="token punctuation">.</span><span class="token function">SetAttributeValue</span><span class="token punctuation">(</span><span class="token string">"width"</span><span class="token punctuation">,</span> <span class="token string">"narrow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加特性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="8-3-6-其他类型的节点"><a href="#8-3-6-其他类型的节点" class="headerlink" title="8.3.6 其他类型的节点"></a>8.3.6 其他类型的节点</h4><p><strong>XComment</strong></p><p>XML注释由<code>&lt;!--和--&gt;</code>记号间的文本组成。记号间的文本会被XML解析器忽略。我们可以使用XComment类向一个XML文档插入文本。如下面代码所示： </p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">new</span> <span class="token constructor-invocation class-name">XComment</span><span class="token punctuation">(</span><span class="token string">"This is a comment"</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这段代码产生如下XML文档：<br>        <code>&lt;!--This is a comment--&gt;</code></p><p><strong>XDeclaration</strong></p><p>XML文档从包含XML使用的版本号、字符编码类型以及文档是否依赖外部引用的一行开始。这是有关XML的信息，因此它其实是有关数据的元数据。这叫做XML声明，可以使用XDeclaration类来插入，如下代码给出了XDeclaration的示例：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">new</span> <span class="token constructor-invocation class-name">XDeclaration</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">,</span><span class="token string">"uff-8"</span><span class="token punctuation">,</span><span class="token string">"yes"</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这段代码产生如下XML文档：<br>        <code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8 &quot; standalone=&quot;yes&quot;?&gt; </code></p><p><strong>XProcessingInstruction</strong></p><p>XML处理指令用于提供XML文档如何被使用和翻译的额外数据，最常见的就是把处理指令用于关联XML文档和一个样式表。</p><p>我们可以使用 XProcessingInstruction 构造函数来包含处理指令。它接受两个字符串参数：目标和数据串。如歌处理指令接受多个数据参数，这些参数必须包含在 XProcessingInstruction 构造函数的第二个字符串参数中，如下的构造函数代码所示</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">new</span> <span class="token constructor-invocation class-name">XProcessingInstruction</span><span class="token punctuation">(</span><span class="token string">"xml-stylesheet"</span><span class="token punctuation">,</span><span class="token string">@"href=""stories"",type=""text/css"""</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这段代码产生如下XML文档：<br>        <code>&lt;?xml-stylesheet href=&quot;stories.css&quot; type=&quot;text/css&quot;?&gt;</code></p><blockquote><p>注意：如果把字符串放在@里，则2个双引号表示一个双引号</p></blockquote><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">XDocument</span> xd<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">XDocument</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XDeclaration</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XComment</span><span class="token punctuation">(</span><span class="token string">"This is a comment"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XProcessingInstruction</span><span class="token punctuation">(</span><span class="token string">"xml-stylesheet"</span><span class="token punctuation">,</span><span class="token string">@"href=""stories"",type=""text/css"""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码会产生如下的输出文件。然而如果使用<code>WriteLine(xd)</code>,声明语句不会被打印出来。<br><img src="/images/Linq/759721-20170315104123276-576581633.jpg" alt="img"></p><h4 id="8-3-7-使用-LINQ-to-XML-的-LINQ-查询"><a href="#8-3-7-使用-LINQ-to-XML-的-LINQ-查询" class="headerlink" title="8.3.7 使用 LINQ to XML 的 LINQ 查询"></a>8.3.7 使用 LINQ to XML 的 LINQ 查询</h4><p>现在，我们可以把 LINQ XML API 和 LINQ 查询表达式组合为简单而强大的 XML 树搜索。</p><p>示例如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CreateXMLTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">XDocument</span> xd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XDocument</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"MyElements"</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XAttribute</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XAttribute</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">,</span> <span class="token string">"small"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XAttribute</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XAttribute</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">,</span> <span class="token string">"midium"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">"third"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XAttribute</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XAttribute</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">,</span> <span class="token string">"large"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>xd<span class="token punctuation">)</span><span class="token punctuation">;</span>    xd<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token string">"SimpleSample.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;MyElements&gt;  &lt;first color&#x3D;&quot;red&quot; size&#x3D;&quot;small&quot; &#x2F;&gt;  &lt;second color&#x3D;&quot;red&quot; size&#x3D;&quot;midium&quot; &#x2F;&gt;  &lt;third color&#x3D;&quot;blue&quot; size&#x3D;&quot;large&quot; &#x2F;&gt;&lt;&#x2F;MyElements&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单的 LINQ 查询：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SimpleLINQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">XDocument</span> xd <span class="token operator">=</span> XDocument<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"SimpleSample.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//加载文档</span>    <span class="token class-name">XElement</span> rt <span class="token operator">=</span> xd<span class="token punctuation">.</span><span class="token function">Element</span><span class="token punctuation">(</span><span class="token string">"MyElements"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//获取根元素</span>    <span class="token class-name"><span class="token keyword">var</span></span> xyz <span class="token operator">=</span> <span class="token keyword">from</span> e <span class="token keyword">in</span> rt<span class="token punctuation">.</span><span class="token function">Elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token keyword">where</span> <span class="token class-name">e</span><span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Length <span class="token operator">==</span> <span class="token number">5</span>              <span class="token keyword">select</span> e<span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> x <span class="token keyword">in</span> xyz<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Name:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">x<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string"> Color:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">x<span class="token punctuation">.</span><span class="token function">Attribute</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value</span><span class="token punctuation">&#125;</span></span><span class="token string"> size:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">x<span class="token punctuation">.</span><span class="token function">Attribute</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码使用了简单的 LINQ 查询来从 XML 树中选择节点的子集，然后以各种方式进行显示。这段代码做了如下的事情：</p><ul><li>它从XML树中选择那些名字有 5个字符的元素。由于这些元素的名字是 first、second和 third，只有 first 和 third 这两个名字符合搜索标准，因此这些节点被选中。</li><li>它格式化并显示了所选节点，包括节点名以及特性值。注意，特性使用Attribute 方法来获取，特性的值使用 Value 属性来获取。</li></ul><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">Name:first Color:red size:smallName:third Color:blue size:large<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>《C#图解教程》</li><li>  <a href="https://www.cnblogs.com/moonache/p/6552843.html">C#图解教程 第十九章 LINQ</a></li><li>  <a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/linq/">MSDN 语言集成查询(LINQ)</a></li><li><a href="https://www.cnblogs.com/lingxin/p/6084815.html">LinQ to SQL用法详解</a></li><li><a href="https://www.bootwiki.com/linq/linq-sql.html">https://www.bootwiki.com/linq/linq-sql.html</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LINQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复习下C#中的枚举器和迭代器</title>
      <link href="/2023/01/17/meijuhediedai/"/>
      <url>/2023/01/17/meijuhediedai/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>我们都知道可以使用 foreach 语句来遍历数组中的元素。那么为什么数组可以被 foreach 遍历呢？</p><p><strong>使用 foreach 语句</strong></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码就会一次输出数组中的元素，如下图所示：</p><p><img src="/images/meijuhediedai/image-20230117115436337.png" alt="输出在控制条的内容"></p><blockquote><p>为什么数组可以这么做呢？原因是数组可以按需<strong>提供一个叫做枚举器（enumerator）的对象</strong>，枚举器可以依次返回请求的数组中的元素。枚举器“知道”项的次序并且跟踪它在序列中的位置，然后返回请求的当前项。</p></blockquote><p>对于有枚举器的类型而言，必须有一种方法来获取它。<strong>获取对象枚举器的方法是调用对象的 GetEnumerator 方法</strong>。实现 GetEnumerator 方法的类型叫作可枚举类型（enumerable type）。数组就是可枚举类型。</p><p><img src="/images/meijuhediedai/image-20230117121302141.png" alt="可枚举类型和枚举器之间的关系"></p><p>foreach 结构设计用来和可枚举类型一起使用。只要给它的遍历对象是可枚举类型，比如数组，它就会执行如下行为：</p><ul><li>通过调用 GetEnumerator 方法来获取对象的枚举器；</li><li>从枚举器中请求每一项并且把它作为迭代变量（iteration variable），代码可以读取该变量但不可以改变</li></ul><h2 id="2-IEnumerator-接口"><a href="#2-IEnumerator-接口" class="headerlink" title="2. IEnumerator 接口"></a>2. IEnumerator 接口</h2><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//</span><span class="token comment">// 摘要:</span><span class="token comment">//     Supports a simple iteration over a non-generic collection.</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IEnumerator</span><span class="token punctuation">&#123;</span>    <span class="token comment">//</span>    <span class="token comment">// 摘要:</span>    <span class="token comment">//     Gets the element in the collection at the current position of the enumerator.</span>    <span class="token comment">//</span>    <span class="token comment">// 返回结果:</span>    <span class="token comment">//     The element in the collection at the current position of the enumerator.</span>    <span class="token return-type class-name"><span class="token keyword">object</span></span> Current <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">//</span>    <span class="token comment">// 摘要:</span>    <span class="token comment">//     Advances the enumerator to the next element of the collection.</span>    <span class="token comment">//</span>    <span class="token comment">// 返回结果:</span>    <span class="token comment">//     true if the enumerator was successfully advanced to the next element; false if</span>    <span class="token comment">//     the enumerator has passed the end of the collection.</span>    <span class="token comment">//</span>    <span class="token comment">// 异常:</span>    <span class="token comment">//   T:System.InvalidOperationException:</span>    <span class="token comment">//     The collection was modified after the enumerator was created.</span>    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//</span>    <span class="token comment">// 摘要:</span>    <span class="token comment">//     Sets the enumerator to its initial position, which is before the first element</span>    <span class="token comment">//     in the collection.</span>    <span class="token comment">//</span>    <span class="token comment">// 异常:</span>    <span class="token comment">//   T:System.InvalidOperationException:</span>    <span class="token comment">//     The collection was modified after the enumerator was created.</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现了 IEnumerator 接口的<strong>枚举器</strong>包含3个函数成员：Current、MoveNext 以及 Reset。</p><p><img src="/images/meijuhediedai/image-20230117122525746.png" alt="IEnumerator接口的三个成员"></p><ul><li>Current 是返回序列中当前位置项的属性。<ul><li>它是只读属性。</li><li>它返回 obiect 类型的引用，所以可以返回任何类型的对象。</li></ul></li><li> MoveNext 是把枚举器位置前进到集合中下一项的方法。它返回布尔值，指示新的位置是有效位置还是已经超过了序列的尾部。</li><li>如果新的位置是有效的，方法返回 true。</li><li>如果新的位置是无效的(比如当前位置到达了尾部)，方法返回 false。</li><li>枚举器的原始位置在序列中的第一项之前因此 MoveNext 必须在第一次使用Current 之前调用。</li><li> Reset 是把位置重置为原始状态的方法</li></ul><p><img src="/images/meijuhediedai/image-20230117123630519.png" alt="小集合的枚举器"></p><p>​    左边显示了3个项的集合，右边是一个枚举器——ArrEnumerator类的实例。</p><p>​    枚举器跟踪序列中<code>当前项</code>的方式完全取决于实现。可以通过<code>对象引用</code>、<code>索引值</code>或<code>其他方式</code>来实现。对于内置的一维数组，就使用项的索引。</p><p><img src="/images/meijuhediedai/image-20230117135756979.png" alt="枚举器状态">        上图演示了有3个项的集合的枚举器的状态。这些状态标记了1到5。</p><ul><li><p>注意，在状态 1 中，枚举器的原始位置是-1(也就是在集合的第一个元素之前)。</p></li><li><p>状态的每次切换都由 MoveNext 进行，它提升了序列中的位置。在状态 1和状态 4之间每次调用 MoveNext 都返回 true，然而，在从状态4到状态 5的切换中，位置最终超过了集合的最后一项，所以方法返回 false。</p></li><li><p>在最后一个状态中，进一步调用 MoveNext 总是会返回false。如果调用 Curreut，会抛出异常。</p><p>  ​    </p></li></ul><p>有了集合的枚举器我们就可以使用 MoveNext 和 Current 成员来模仿 foreach 循环遍历集合中的项。例如，我们已经知道了数组是可枚举类型，所以下面的代码手动做 foreach 语句自动做的事情。事实上，在编写 foreach 循环的时候，C#编译器将生成与下面十分类似的代码(当然是以CIL的形式)。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">IEnumerator</span> ie <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取并存储枚举器</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ie<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//将枚举数推到集合的下一个元素，判断是否有效</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">int</span></span> item <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ie<span class="token punctuation">.</span>Current<span class="token punctuation">;</span>  <span class="token comment">//获取当前位置的元素</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Item value:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">item</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ie<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将枚举位置设置为初始位置</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ie<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">int</span></span> item <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ie<span class="token punctuation">.</span>Current<span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Item value:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">item</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">Item value:1Item value:2Item value:3Item value:4Item value:5Item value:1Item value:2Item value:3Item value:4Item value:5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：引用变量的时候需要声明命名空间using System.Collections;默认的是IEnumerator<T>  即支持泛型集合上的的简单迭代</T></p></blockquote><h2 id="3-IEnumerable-接口"><a href="#3-IEnumerable-接口" class="headerlink" title="3. IEnumerable 接口"></a>3. IEnumerable 接口</h2><p><strong>可枚举类</strong>是指实现了 IEnumerable 接口的类。IEnumerable 接口只有一个成员——GetEnumerator 方法，它返回对象的枚举器。</p><p><img src="/images/meijuhediedai/image-20230117141957069.png" alt="GetEnumerator 方法返回类的一个枚举器对象"></p><p>上图炎十了一个有3个枚举项的类 MyClass,通过实现 GetEnumerator 方式来实现 IEnumerable 接口.</p><p>下面的代码展示了一个可枚举类的完整示例，该类叫做 Spectrum，它的枚举器类为ColorEnumerator。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Example</span><span class="token punctuation">&#123;</span>    <span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Spectrum</span> spectrum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Spectrum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> spectrum<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//枚举器</span>    <span class="token keyword">class</span> <span class="token class-name">ColorEnumerator</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEnumerator</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> colors<span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">int</span></span> position <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">ColorEnumerator</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> theColors<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">[</span>theColors<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> theColors<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> theColors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> Current        <span class="token punctuation">&#123;</span>            <span class="token keyword">get</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>position <span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> position <span class="token operator">>=</span> colors<span class="token punctuation">.</span>Length<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> colors<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> colors<span class="token punctuation">.</span>Length<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                position<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            position <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//可枚举类型</span>    <span class="token keyword">class</span> <span class="token class-name">Spectrum</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEnumerable</span></span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> colors <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"violet"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"yellow"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ColorEnumerator</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-泛型枚举接口"><a href="#4-泛型枚举接口" class="headerlink" title="4. 泛型枚举接口"></a>4. 泛型枚举接口</h2><p>在大多数情况下我们都应该使用泛型接口 IEnumerable&lt; T &gt;和IEnumerator&lt; T &gt;。其使用方式和非泛型差不多。</p><p>两者本质的区别如下：</p><ul><li>对于非泛型接口形式：<ul><li>IEnumerable 接口的 GetEnumerator 方法返回实现 IEnumerator 的枚举器类实例；</li><li>实现 IEnumerator 的类实现了 Current 属性，它返回 object 类型的引用，然后我们必须把它转化为对象的实际类型。</li><li>非泛型接口的实现不是类型安全的。它们返回 object 类型的引用，然后必须转化为实际类型。</li></ul></li><li>泛型接口继承自非泛型接口。对于泛型接口形式：<ul><li>IEnumerable&lt; T &gt;接口的 GetEnumerator 方法返回实现IEnumerator <T> 的举器类的实例</T></li><li>实现 IEnumerator&lt; T &gt; 的类实现了Current 属性，它返回实际类型的实例，而不是 object 基类的引用。</li><li>这些是协变接口，所以它们的实际声明就是 IEnumerable&lt; out T &gt;和 IEnumerator&lt; out T &gt;。这意味着实现这些接口的对象可以是派生的类型。</li><li>泛型接口的枚举器是类型安全的，它返回实际类型的引用。</li></ul></li></ul><p><img src="/images/meijuhediedai/image-20230117145037413.png"></p><h2 id="5-迭代器"><a href="#5-迭代器" class="headerlink" title="5. 迭代器"></a>5. 迭代器</h2><p>C#从2.0版本开始提供了更简单的创建枚举器和可枚举类型的方式。实际上，编译器将为我们创建它们。这种结构叫作选代器(iterator)。我们可以把<strong>手动编码的可枚举类型和枚举器替换为由迭代器生成的可枚举类型和枚举器</strong>。</p><p>由于枚举器存在遍历二叉树不方便的问题。才有了迭代器。在了解了迭代器之前必须了解枚举器。</p><p><strong>迭代器就是带了状态机的枚举器。</strong></p><p>下面的方法声明实现了一个产生并返回枚举器的迭代器：</p><ul><li>迭代器返回一个泛型枚举器，该枚举器返回 3 个 string 类型的项。</li><li>yield return 语句声明这是枚举中的下一项。</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name">IEnumerator<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> <span class="token function">BlackAndWhite1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token string">"Black"</span><span class="token punctuation">;</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token string">"Gray"</span><span class="token punctuation">;</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token string">"White"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token return-type class-name">IEnumerator<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> <span class="token function">BlackAndWhite2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> Colors <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"Black"</span><span class="token punctuation">,</span><span class="token string">"Gray"</span><span class="token punctuation">,</span><span class="token string">"White"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Colors<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> Colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很显然，该代码与之前给出的代码不同。</p><h3 id="5-1-迭代器块"><a href="#5-1-迭代器块" class="headerlink" title="5.1 迭代器块"></a>5.1 迭代器块</h3><p>迭代器块是由一个或多个 yield 语句的代码块。迭代器块可以是：</p><ul><li>方法主体；</li><li>访问器主体；</li><li>运算器主体。</li></ul><p>迭代器块与其他代码块不同。其他块包含的语句被当作是命令式的。也就是说，先执行代码块的第一个语句，然后执行后面的语句，最后控制离开块。</p><p>另一方面，迭代器块不是需要在同一时间执行的一串命令式命令，而是声明性的，它描述了希望编译器为我们创建的枚举器类的行为。迭代器块中的代码描述了如何枚举元素。</p><p>迭代器块有两个特殊语句。</p><ul><li><p>yield return 语指定了序列中要返回的下一项。</p></li><li><p>yield break  语何指定在序列中没有其他项。</p></li></ul><p>编译器得到有关如何枚举项的描述后，使用它来构建包含所有需要的方法和属性实现的枚举器类。产生的类被嵌套包含在声明迭代器的类中。</p><p>根据迭代快的返回类型，你可以让迭代器产生枚举器或可枚举类型。</p><p>产生<strong>枚举器</strong>的迭代器：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name">IEnumerator<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> <span class="token function">IteratorMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token range operator">..</span><span class="token punctuation">.</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>产生<strong>可枚举类型</strong>的迭代器：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> <span class="token function">IteratorMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token range operator">..</span><span class="token punctuation">.</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>关于 yield关键字具体可参考：<a href="https://www.jb51.net/article/260875.htm">https://www.jb51.net/article/260875.htm</a></p><h3 id="5-2-使用迭代器来创建枚举器"><a href="#5-2-使用迭代器来创建枚举器" class="headerlink" title="5.2 使用迭代器来创建枚举器"></a>5.2 使用迭代器来创建枚举器</h3><p>下面的代码演示了如何使用迭代器来创建可枚举类。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">namespace</span> <span class="token namespace">Example</span><span class="token punctuation">&#123;</span>    <span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">MyClass</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> mc<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token comment">//可枚举类</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerator<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> <span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">BlackAndWhite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">//获取迭代器</span>        <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerator<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> <span class="token function">BlackAndWhite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//迭代器块，用于返回枚举器</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token string">"Black"</span><span class="token punctuation">;</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token string">"Gray"</span><span class="token punctuation">;</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token string">"White"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>BlackAndWhite 方法是一个迭代器块，可以为 MyClass 类<strong>返回枚举器</strong>的方法。</li><li>MyClass 还实现了 GetEnumerator 方法，它调用了 BlackAndWhite 并且返回 BlackAndWhite 返回的枚举器。</li><li>注意， **在 Main 方法中，由于 MyClass 类实现了 GetEnumerator，是可枚举类型，所以我们在 foreach 语句中直接使用了该类的实例。它不检查接口，只检查接口的实现。 **</li></ul><p>下图演示了MyClass的代码及产生的对象。注意编译器为我们自动做了多少工作。</p><ul><li>图左的迭代器代码演示了它的返回类型是<code>IEnumerator&lt;string&gt;</code></li><li>图右演示了它有一个嵌套类实现了<code>IEnumerator&lt;string&gt;</code></li></ul><p><img src="/images/meijuhediedai/2505608-20220130162917938-136277119.png"></p><h3 id="5-3-使用迭代器来创建可枚举类型"><a href="#5-3-使用迭代器来创建可枚举类型" class="headerlink" title="5.3 使用迭代器来创建可枚举类型"></a>5.3 使用迭代器来创建可枚举类型</h3><p>代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">namespace</span> <span class="token namespace">Example</span><span class="token punctuation">&#123;</span>    <span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">MyClass</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//使用类对象</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> mc<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//使用类枚举器方法</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> mc<span class="token punctuation">.</span><span class="token function">BlackAndWhite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                 Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">MyClass</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerator<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> <span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> myEnumerable <span class="token operator">=</span> <span class="token function">BlackAndWhite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取可枚举类型</span>            <span class="token keyword">return</span> myEnumerable<span class="token punctuation">.</span><span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回枚举器</span>            <span class="token comment">//return BlackAndWhite().GetEnumerator(); //两种方法都可以</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> <span class="token function">BlackAndWhite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//返回可枚举类型</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token string">"Black"</span><span class="token punctuation">;</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token string">"Gray"</span><span class="token punctuation">;</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token string">"White"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>在之前的示例中，BlackAndwhite 选代器方法返回 IEnumerator&lt; string &gt;，MyClass 类通过返回由 BlackAndwhite 创建的对象来实现 GetEnumerator 方法。</p></li><li><p>在本例中，BlackAndwhite 选代器方法返回 IEnumerable&lt; string &gt; 而不是 IEnumerator&lt; string &gt;。因此，Myclass 首先调用 BlackAndwhite 方法获取它的可枚举类型对象，然后调用对象的 GetEnumerator 方法来获取它的枚举器，从而实现 GetEnumerator 方法。</p></li><li><p>注意在 Main 的 foreach 语句中,我们可以使用类的实例（原因这个类实现了GetEnumerator方法）,也可以直接调用 BlackAndWhite 方法，因为它返回的是<strong>可枚举类型</strong>。</p></li></ul><p><img src="/images/meijuhediedai/image-20230117155501681.png" alt="image-20230117155501681"></p><h3 id="5-4-产生多个可枚举类型"><a href="#5-4-产生多个可枚举类型" class="headerlink" title="5.4 产生多个可枚举类型"></a>5.4 产生多个可枚举类型</h3><p>在下面示例种，Spectrum 类有两个可枚举类型的迭代器。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">namespace</span> <span class="token namespace">Example</span><span class="token punctuation">&#123;</span>    <span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Spectrum</span> spectrum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Spectrum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> spectrum<span class="token punctuation">.</span><span class="token function">UVtoIR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>item<span class="token operator">+</span>“ ”<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> spectrum<span class="token punctuation">.</span><span class="token function">IRtoUV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>item<span class="token operator">+</span>“ ”<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Spectrum</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> colors <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"Black"</span><span class="token punctuation">,</span> <span class="token string">"Gray"</span><span class="token punctuation">,</span> <span class="token string">"White"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> <span class="token function">UVtoIR</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> colors<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">yield</span> <span class="token keyword">return</span> colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> <span class="token function">IRtoUV</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> colors<span class="token punctuation">.</span>Length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">yield</span> <span class="token keyword">return</span> colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：尽管 Spectrum 类有两个方法返回可枚举类型，但类本身不是可枚举类型，因为它没有实现 GetEnumerator 方法。</p></blockquote><h3 id="5-5-将迭代器作为属性"><a href="#5-5-将迭代器作为属性" class="headerlink" title="5.5 将迭代器作为属性"></a>5.5 将迭代器作为属性</h3><p>本例演示连个方面的内容：</p><ol><li>使用迭代器来产生具有两个枚举器的类</li><li>演示迭代器如何能实现为属性而不是方法</li></ol><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">namespace</span> <span class="token namespace">ConsoleApp3</span><span class="token punctuation">&#123;</span>    <span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Spectrum</span> spectUV <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Spectrum</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Spectrum</span> spectIR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Spectrum</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> spectUV<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>item<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> spectIR<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>item<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Spectrum</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">bool</span></span> listFromUVtoIR<span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> colors <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"Black"</span><span class="token punctuation">,</span> <span class="token string">"Gray"</span><span class="token punctuation">,</span> <span class="token string">"White"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Spectrum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> listFromUVtoIR<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>listFromUVtoIR <span class="token operator">=</span> listFromUVtoIR<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerator<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> <span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">listFromUVtoIR <span class="token punctuation">?</span></span> UVtoIR <span class="token punctuation">:</span> IRtoUV<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerator<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> UVtoIR         <span class="token punctuation">&#123;</span>            <span class="token keyword">get</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> colors<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">yield</span> <span class="token keyword">return</span> colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerator<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> IRtoUV        <span class="token punctuation">&#123;</span>            <span class="token keyword">get</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> colors<span class="token punctuation">.</span>Length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">yield</span> <span class="token keyword">return</span> colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-6-迭代器实质"><a href="#5-6-迭代器实质" class="headerlink" title="5.6 迭代器实质"></a>5.6 迭代器实质</h3><hr><p>如下是需要了解的有关迭代器的其他重要事项。</p><ul><li>迭代器需要System.Collections.Generic命名空间</li><li>在编译器生成的枚举器中，Reset方法没有实现。而它是接口需要的方法，因此调用时总是抛出System.NetSupportedException异常。</li></ul><p>在后台，由编译器生成的枚举器类是包含4个状态的状态机。</p><ul><li>Before 首次调用MoveNext的初始状态</li><li>Running 调用MoveNext后进入这个状态。在这个状态中，枚举器检测并设置下一项的为知。在遇到yield return、yield break或在迭代器体结束时，退出状态</li><li>Suspended 状态机等待下次调用MoveNext的状态</li><li>After 没有更多项可以枚举</li></ul><p>如果状态机在Before或Suspended状态时调用MoveNext方法，就转到了Running状态。在Running状态中，它检测集合的下一项并设置为知。<br>        如果有更多项，状态机会转入Suspended状态，如果没有更多项，它转入并保持在After状态。</p><p><img src="/images/meijuhediedai/image-20230117160456124.png"></p><h2 id="6-参考文献"><a href="#6-参考文献" class="headerlink" title="6. 参考文献"></a>6. 参考文献</h2><ol><li>《C#图解教程》</li></ol>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Enumerator </tag>
            
            <tag> Iterator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EF Core基础</title>
      <link href="/2023/01/11/EFCore/"/>
      <url>/2023/01/11/EFCore/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>EF Core 既 Entity Framework Core，是轻量化、可扩展、开源和跨平台的 .NET 平台 O/RM 数据访问技术。它最主要的功能是可以实现以下两点：</p><ul><li>使 .NET 开发人员能够使用 .NET 对象处理数据库。</li><li>无需再像通常那样编写大部分数据访问代码(sql或其他查询语句)。</li></ul><p>EF Core 支持多个数据库引擎，请参阅<a href="https://learn.microsoft.com/zh-cn/ef/core/providers/">数据库提供程序</a>了解详细信息。</p><blockquote><p>O/RM（对象关系映射）</p><p>它解决了对象和关系型数据库之间的数据交互问题。</p><ul><li>O-Object对象</li><li>R-Relational关系</li><li>M-Mapping映射</li></ul><p>使用面向对象编程时，数据很多时候都存储在对象里面，具体来说是存储在对象的各个属性（也称成员变量）中。例如有一个 User 类，它的 id、username、password、email 属性都可以用来记录用户信息。当我们需要把对象中的数据存储到数据库时，按照传统思路，就得手动编写 SQL 语句，将对象的属性值提取到 SQL 语句中，然后再调用相关方法执行 SQL 语句。</p><p>而有了 ORM 技术以后，只要提前配置好对象和数据库之间的映射关系，ORM 就可以自动生成 SQL 语句，并将对象中的数据自动存储到数据库中，整个过程不需要人工干预。</p><p>转自<a href="http://c.biancheng.net/hibernate/orm.html">http://c.biancheng.net/hibernate/orm.html</a></p></blockquote><h3 id="1-1-有关LINQ-to-SQL-和-EF-的区别"><a href="#1-1-有关LINQ-to-SQL-和-EF-的区别" class="headerlink" title="1.1 有关LINQ to SQL 和 EF 的区别"></a>1.1 有关LINQ to SQL 和 EF 的区别</h3><p>LINQ to SQL和Entity Framework都是一种包含LINQ功能的对象关系映射技术。他们之间的本质区别在于EF对<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%B6%E6%9E%84&spm=1001.2101.3001.7020">数据库架构</a>和我们查询的类型实行了更好的解耦。使用EF，我们查询的对象不再是完全对应数据库架构的C#类，而是更高层的抽象：Entity Data Model。这为我们提供了额外的灵活性，但是在性能和简单性上面也会有所损失。</p><p>LINQ to SQL和Entity Framework各有所长，LINQ to SQL是一个轻量级的ORM框架，旨在为Microsoft SQL Server数据库提供快速的应用程序开发，其优点是易于使用、简单、高性能。而Entity Framework的优点在于：其为创建数据库架构和实体类之间的映射提供了更好的灵活性，它还通过提供程序支持除了SQL Server之外的第三方数据库。</p><table><thead><tr><th></th><th>LINQ to SQL</th><th>Entity Framework</th></tr></thead><tbody><tr><td>复杂度</td><td>相对不复杂</td><td>相对比较复杂</td></tr><tr><td>模型</td><td>域模型(Domain <a href="https://so.csdn.net/so/search?q=model&spm=1001.2101.3001.7020">model</a>)</td><td>概念数据模型(Conceptual data model)</td></tr><tr><td>数据库服务器</td><td>SQL Server</td><td>多种数据库产品</td></tr><tr><td>开发时间</td><td>快速应用开发</td><td>需要较长时间，但支持更多特性</td></tr><tr><td>继承</td><td>困难</td><td>容易</td></tr><tr><td>文件类型</td><td>DBML文件</td><td>EDMX,CDSL,MSL,SSDL文件</td></tr><tr><td>复杂类型支持</td><td>不支持</td><td>支持</td></tr><tr><td>查询能力</td><td>通过DataContext</td><td>ESQL,对象服务, Entity Client</td></tr><tr><td>性能</td><td>第一次查询较慢</td><td>第一次查询也较慢，但总体优与LINQ to SQL</td></tr><tr><td>完善</td><td>不再出新版本</td><td>还出新版本</td></tr><tr><td>从模型生成数据库</td><td>支持</td><td>不支持</td></tr></tbody></table><p>转自<a href="https://www.cnblogs.com/sdya/p/3693267.html">https://www.cnblogs.com/sdya/p/3693267.html</a></p><ul><li><p>LINQ to SQL是对数据库设计的ORM（对象映射）方案；</p><p>EF是一种ORM实体框架，不仅支持SQL SERVER也支持<a href="https://so.csdn.net/so/search?q=Oracle&spm=1001.2101.3001.7020">Oracle</a>，同时还支持非关系型数据库；</p></li><li><p>LINQ to SQL直接与数据库打交道；</p><p>EF需要通过中间的（Entity Data Model, EDM）更新数据；</p></li></ul><p>转自<a href="https://blog.csdn.net/qq_35520046/article/details/117521597">https://blog.csdn.net/qq_35520046/article/details/117521597</a></p><blockquote><p>EF Core 就是将 LINQ 查询的表示形式翻译成Sql语句，传给数据库提供程序，然后进行数据的查询，将程序好的数据封装成实体类返回。</p></blockquote><h3 id="1-2-EF出现之前访问数据库过程对比"><a href="#1-2-EF出现之前访问数据库过程对比" class="headerlink" title="1.2 EF出现之前访问数据库过程对比"></a>1.2 EF出现之前访问数据库过程对比</h3><ul><li>单纯采用ADO.NET技术</li></ul><p>打开一个数据库的连接，创建一个DataSet来获取或提交数据到数据库，通过将DataSet中的数据和.NET对象相互转换来满足业务需求。</p><p><img src="/images/EF-CORE/image-20230113151601963.png" alt="ADO.NET基本过程"></p><ul><li>而使用EF实体框架后，可以使开发人员能够通过领域对象来处理数据，而无需关注此数据的基础数据库。</li></ul><blockquote><p>实体框架使开发人员可以采用特定于域的对象和属性（例如客户和客户地址）的形式使用数据，而不必自己考虑存储这些数据的基础数据库表和列。</p></blockquote><p><img src="/images/EF-CORE/image-20230113152210375.png" alt="EF基本过程"></p><h3 id="1-3-EF本质"><a href="#1-3-EF本质" class="headerlink" title="1.3 EF本质"></a>1.3 EF本质</h3><ol><li>对象关系映射器（O/RM）</li><li>工作在业务实体（域类）和数据库之间</li><li>保存实体属性中的数据到数据库，也可以从数据库中检测数据并自动将其转换为实体对象。</li></ol><p><img src="/images/EF-CORE/image-20230113152657627.png" alt="image-20230113152657627"></p><p>UI层调用业务逻辑层，业务逻辑层和数据库之间是数据层，EF就在数据层。</p><p><img src="/images/EF-CORE/image-20230113152923752.png" alt="EF组成图示"></p><blockquote><p>可以看见最底层仍然通过ADO.NET实现通讯。</p></blockquote><ul><li><strong>EDM(实体数据模型)</strong><ul><li><strong>概念模型 (entity) :</strong> 概念模型包含了模型类和它们之间的关系。 这将是独立于数据库表设计。</li><li>**存储模型(data): **存储模型是数据库设计模型,包括表、视图、存储过程、以及它们之间的关系和钥匙。</li><li>**映射(mapping): **映射由概念模型如何映射到存储模型的信息组成。</li></ul></li><li>**LINQ To Entity (L2E) : **L2E是一种查询实体对象的语言， 返回在概念模型中定义的实体。</li><li><strong>Entity SQL:</strong> Entity SQL是一个类似于L2E的查询语言。 然而,它比L2E更加复杂。</li><li><strong>Object Services(对象服务): <strong>对象服务是访问数据库中的数据并返回数据的主要入口点。它负责数据实例化，把</strong>Entity Client Data Provider</strong> (下一层)的数据转换成实体对象。</li><li><strong>Entity client Data Provider: <strong>主要职责是将L2E或Entity Sql转换成数据库可以识别的Sql查询语句，它通过</strong>ADO.Net Data Provider</strong>向数据库发送或者索取数据。</li><li>**ADO.Net Data Provider: **使用标准的Ado.net与数据库通信。</li></ul><p>EF Core 是通过一个模型进行数据库访问的。模型由实体类和表示与数据库中的会话组成的，以及允许你查询和保存数据派生的上下文。</p><p>既可以从现有数据库生成模型，也可以使用EF迁移来完成从模型生成数据库，也就是<code>Database First</code> 和 <code>Code First</code>(意味着，EF Core 将基于你定义的 C# 类创建数据库表和架构)。</p><p>除非你的数据库已经存在，否则不推荐使用反向工程来通过数据库创建模型，一般推荐使用<strong>Code First</strong>模式，即代码先行的原则。</p><h2 id="2-安装-Entity-Framework-Core"><a href="#2-安装-Entity-Framework-Core" class="headerlink" title="2. 安装 Entity Framework Core"></a>2. 安装 Entity Framework Core</h2><h3 id="Visual-Studio-NuGet-包管理器对话框"><a href="#Visual-Studio-NuGet-包管理器对话框" class="headerlink" title="Visual Studio NuGet 包管理器对话框"></a>Visual Studio NuGet 包管理器对话框</h3><ul><li>从 Visual Studio 菜单中选择“项目”&gt;“管理 NuGet 包”</li><li>单击“浏览”或“更新”选项卡</li><li>若要安装或更新 SQL Server 提供程序，请选择 <code>Microsoft.EntityFrameworkCore</code> 包并确认。</li></ul><p><img src="/images/EF-CORE/image-20230111200345173.png" alt="安装SQL SERVER数据库提供包"></p><h2 id="3-基础概念"><a href="#3-基础概念" class="headerlink" title="3. 基础概念"></a>3. 基础概念</h2><h3 id="3-1-Context-上下文"><a href="#3-1-Context-上下文" class="headerlink" title="3.1 Context/上下文"></a>3.1 Context/上下文</h3><p>一个 Context 是一个继承自 <strong>DbContext</strong> 的非抽象类。这个类的功能首先是<strong>公开所有实体的集合</strong>，操作这些集合可以在存储中读取或保存数据，除此之外 Context <strong>保存数据的模型</strong>。在使用前需要正确配置各个实体的模型以及其他必要的配置。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogContext</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DbContext</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name">DbSet<span class="token punctuation">&lt;</span>Blog<span class="token punctuation">></span></span> Blogs <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name">DbSet<span class="token punctuation">&lt;</span>Post<span class="token punctuation">></span></span> Posts <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name">DbSet<span class="token punctuation">&lt;</span>BlogImage<span class="token punctuation">></span></span> Images <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Context 以 DbSet <T> 属性的形式公开实体的集合，上面代码中的 Blog，Post，BlogImage 便是实体类型。Context 的另一个重要的功能就是<strong>跟踪对实体的更改</strong>，以便我们在保存更改时，它知道该如何处理。</T></p><p>Context 跟踪的每个实体所处的以下状态之一：<strong>未更改/added，已修改/modified，已添加/added，已删除/deleted</strong>或<strong>已分离/detached</strong>。可以将上下文视为沙箱，我们可以在其中对实体集合进行更改，然后通过一次保存操作应用这些更改。</p><h3 id="3-2-DbContext-类型的基础方法"><a href="#3-2-DbContext-类型的基础方法" class="headerlink" title="3.2 DbContext 类型的基础方法"></a>3.2 DbContext 类型的基础方法</h3><p>EF Core 的 DbContext 类型包含一些会在特定时候调用的基础方法：</p><p><code>OnConfiguring 方法</code>：当 context 需要配置它的 provider 和 链接字符串的时候，该方法会被调用，这为开发者提供了介入的入口。</p><ul><li>配置连接字符串</li><li>配置输出的Logger</li><li>配置过滤和拦截操作</li><li>禁用和启用并发</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnConfiguring</span><span class="token punctuation">(</span><span class="token class-name">DbContextOptionsBuilder</span> optionsBuilder<span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>optionsBuilder<span class="token punctuation">.</span>IsConfigured<span class="token punctuation">)</span>           <span class="token punctuation">&#123;</span>               optionsBuilder<span class="token punctuation">.</span><span class="token function">UseMySql</span><span class="token punctuation">(</span><span class="token string">"server=localhost;database=EFCoreLearn;user=root;password=123456"</span><span class="token punctuation">,</span> Microsoft<span class="token punctuation">.</span>EntityFrameworkCore<span class="token punctuation">.</span>ServerVersion<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"8.0.32-mysql"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               optionsBuilder<span class="token punctuation">.</span><span class="token function">LogTo</span><span class="token punctuation">(</span>Console<span class="token punctuation">.</span>WriteLine<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//日志输出到控制台</span>               optionsBuilder<span class="token punctuation">.</span><span class="token function">AddInterceptors</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">SoftDeleteInterception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加拦截器软删除</span>               optionsBuilder<span class="token punctuation">.</span><span class="token function">EnableThreadSafetyChecks</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭并安全检测</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>OnModelCreating 方法</code>：在 EF Core 组装数据模型时会被自动调用，你将会在这个方法里添加构建模型的代码。</p><p>模型配置主要分为两种方法：</p><ul><li>FluentAPI</li><li>数据注解</li></ul><p>上述方法中的两种约定配置，可以混用，但是不推荐。</p><p><strong>数据注解的方式 优点：简单方便；缺点：耦合性太高；</strong></p><p><strong>FluentAPI 优点：解耦; 缺点： 编写复杂</strong></p><p><code>SaveChanges 方法</code>：当我们希望将修改保存到数据库时进行调用。 返回为受保存操作影响的记录数。</p><h3 id="3-3-Database-Provider-数据库提供程序"><a href="#3-3-Database-Provider-数据库提供程序" class="headerlink" title="3.3 Database Provider / 数据库提供程序"></a>3.3 Database Provider / 数据库提供程序</h3><p>EF Core 是“数据库无关”的，这意味着每个要“接入”它的数据库厂商或任何的第三方都要提供它们的“数据库提供程序”以让 EF Core 可以使用它们。</p><p>微软提供了包括 SQL Server、Azure SQL Database、SQL Server Express、SQL Server Express LocalDB、SQLite 以及 In Memory 在内的“官方”数据库提供程序。</p><p>配置数据库提供程序首先要确定数据库提供程序包已经安装在项目中，然后只需要在 Context 的 OnConfiguring 方法中添加对应的配置方法（SqlServer 为 UseSqlServer）即可。</p><h3 id="3-4-scaffold-dbcontext-命令使用说明"><a href="#3-4-scaffold-dbcontext-命令使用说明" class="headerlink" title="3.4 scaffold-dbcontext 命令使用说明"></a>3.4 scaffold-dbcontext 命令使用说明</h3><blockquote><p>EF Core不支持用于可视化设计器的DB模型和向导来创建类似于EF 6的实体和上下文类。因此，我们需要使用以下Scaffold-DbContext命令进行逆向工程。此逆向工程命令DbContext基于现有数据库的架构来创建实体和上下文类（通过派生）。</p></blockquote><p>工具的scaffold-dbcontext（数据库上下文脚手架）指令来生成models和context。</p><p>指令详细介绍：</p><p><code>Scaffold-DbContext [-Connection] &lt;String&gt; [-Provider] &lt;String&gt; [-OutputDir &lt;String&gt;] [-Context &lt;String&gt;]  [-Schemas &lt;String&gt;] [-Tables &lt;String&gt;] [-DataAnnotations] [ -Force] [-Project &lt;String&gt;]  [-StartupProject &lt;String&gt;] [-Environment &lt;String&gt;] [&lt;CommonParameters&gt;]</code></p><p>PARAMETERS </p><p><code>-Connection &lt;String&gt; </code><br>指定数据库的连接字符串。</p><p><code>-Provider &lt;String&gt; </code><br>指定要使用的提供程序。例如，Microsoft.EntityFrameworkCore.SqlServer。</p><p><code>-OutputDir &lt;String&gt; </code><br>指定用于输出类的目录。如果省略，则使用顶级项目目录。</p><p><code>-Context &lt;String&gt; </code><br>指定生成的DbContext类的名称。</p><p><code>-Schemas &lt;String&gt; </code><br>指定要为其生成类的模式。</p><p><code>-Tables &lt;String&gt; </code><br>指定要为其生成类的表。</p><p><code>-DataAnnotations [&lt;SwitchParameter&gt;] </code><br>使用DataAnnotation属性在可能的情况下配置模型。如果省略，输出代码将仅使用流畅的API。</p><p><code>-Force [&lt;SwitchParameter&gt;] </code><br>强制脚手架覆盖现有文件。否则，只有在没有输出文件被覆盖的情况下，代码才会继续。</p><p><code>-Project &lt;String&gt; </code><br>指定要使用的项目。如果省略，则使用默认项目。</p><p><code>-StartupProject &lt;String&gt; </code><br>指定要使用的启动项目。如果省略，则使用解决方案的启动项目。</p><p><code>-Environment &lt;String&gt; </code><br>指定要使用的环境。如果省略，则使用“开发”。</p><p>参考：<a href="https://blog.csdn.net/zh1303300/article/details/107787182">https://blog.csdn.net/zh1303300/article/details/107787182</a></p><h3 id="3-5-分析下这三个包"><a href="#3-5-分析下这三个包" class="headerlink" title="3.5 分析下这三个包"></a>3.5 分析下这三个包</h3><p>首先需要下载三个包，这三个包目前都不是最新版本的</p><p><img src="/images/EFCore/image-20230218151352632.png"></p><blockquote><p>引入Microsoft.EntityFrameworkCore.SqlServer包之后其实不需要额外引入Microsoft.EntityFrameworkCore基础包了，因为“数据库提供程序”包会自动引入将 EF Core 与该数据库系统配合使用所需的所有依赖项。 这包括 Microsoft.EntityFrameworkCore 基础包。</p></blockquote><p>首先分析下这三个包</p><p><code>Entity Framework Core</code> is a modern object-database mapper for .NET. It supports LINQ queries, change tracking, updates, and schema migrations. EF Core works with SQL Server, Azure SQL Database, SQLite, Azure Cosmos DB, MySQL, PostgreSQL, and other databases through a provider plugin API.</p><p>翻译过来就是</p><p><code>Entity Framework Core</code>是一个用于.NET的现代对象数据库映射器。它支持LINQ查询、变化跟踪、更新和模式迁移。EF Core通过一个供应商插件API与SQL Server、Azure SQL Database、SQLite、Azure Cosmos DB、MySQL、PostgreSQL和其他数据库一起工作。</p><p><code>Microsoft.EntityFrameworkCore.SqlServer</code>:Microsoft SQL Server database provider for Entity Framework Core.（相当于 a provider plugin API.<code>数据库提供程序”包</code>）</p><blockquote><p>只要下载了数据库提供程序包就不需要下载<code>Entity Framework Core</code>，原因是数据库提供程序包自带<code>Entity Framework Core</code>。</p></blockquote><p><code>Microsoft.EntityFrameworkCore.Tools</code>:</p><p>Entity Framework Core Tools for the NuGet Package Manager Console in Visual Studio.</p><p>Enables these commonly used commands:</p><p>Add-Migration 开启迁移 (一般用法：Add-Migration 迁移名称)</p><p>Bundle-Migration</p><p>Drop-Database</p><p>Get-DbContext</p><p>Get-Migration</p><p>Optimize-DbContext</p><p>Remove-Migration</p><p>Scaffold-DbContext</p><p>Script-Migration</p><p>Update-Database</p><p>也就是说Microsoft.EntityFrameworkCore.Tools用于提供一些常用的命令。</p><h3 id="3-6-客户端评估和服务端评估"><a href="#3-6-客户端评估和服务端评估" class="headerlink" title="3.6 客户端评估和服务端评估"></a>3.6 客户端评估和服务端评估</h3><p><strong>客户端评估：</strong> 将数据在内存中进行过滤筛选，就是所谓的客户端评估。</p><p><strong>服务端评估：</strong> 把查询操作翻译成SQL语句在数据库服务器里进行过滤筛选的操作，就是服务端评估。</p><p>在EFCore中，客户端评估，主要是采用 <strong>IEnumerable</strong>的扩展方法，服务端评估只要采用的是<strong>IQueryable</strong>的扩展方法。</p><p><code>var techear4 = dbContext.Teachers.Where(x =&gt; x.Age &gt; 45);</code></p><p><img src="/images/EFCore/f22f32326bc048569183a4c03058996c.png" alt="img"></p><p><code>var techear5 = dbContext.Teachers.ToList().Where(x =&gt; x.Age &gt; 45);</code></p><p><img src="/images/EFCore/b740319177024ea8a25ed5a38ed28d56.png" alt="img"></p><p>1.在某些情况服务端筛选是无法完成的这个时候必须转为客户端筛选</p><p>2.将服务端评估转为客户端评估的方式有下面两种方式：</p><ul><li>通过调用 AsEnumerable 方式 dbContext.Course…AsEnumerable().Where(xxxxxx);</li><li>通过调用ToList()/ToArray()等方法，但使用 ToList 将通过创建列表来进行缓冲，因此也会占用额外的内存。但是通过AsEnumerable方法不会。</li></ul><p>3.尽管客户端评估由于方法无法在数据库上执行，所有数据都将被拉取到内存中，然后在客户端应用过滤。这就会导致内存过高，造成性能下降。</p><h2 id="4-学习"><a href="#4-学习" class="headerlink" title="4.学习"></a>4.学习</h2><ol><li><a href="https://blog.csdn.net/xieyunhappy/article/details/112075402?spm=1001.2014.3001.5502">EFCore 从入门到精通-1（总览)</a></li><li><a href="https://blog.csdn.net/xieyunhappy/article/details/112093495?spm=1001.2014.3001.5502">EFCore 从入门到精通-2（初体验)</a></li><li><a href="https://blog.csdn.net/xieyunhappy/article/details/124407203?spm=1001.2014.3001.5502">EFCore 从入门到精通-3（模型创建)</a></li><li><a href="https://blog.csdn.net/xieyunhappy/article/details/112122844?spm=1001.2014.3001.5502">EFCore 从入门到精通-4（映射关系与导航属性)</a></li><li><a href="https://blog.csdn.net/xieyunhappy/article/details/124442968?spm=1001.2014.3001.5502">EFCore 从入门到精通-5（谈谈迁移)</a></li><li><a href="https://blog.csdn.net/xieyunhappy/article/details/125847444?spm=1001.2014.3001.5502">EFCore 从入门到精通-6（详谈查询)</a></li><li><a href="https://blog.csdn.net/xieyunhappy/article/details/125872517?spm=1001.2014.3001.5502">EFCore 从入门到精通-7（高级查询)</a></li><li><a href="https://blog.csdn.net/xieyunhappy/article/details/125893893?spm=1001.2014.3001.5502">EFCore 从入门到精通-8（再谈映射关系)</a></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="https://learn.microsoft.com/zh-cn/ef/core/">MSDN Entity Framework Core</a></li><li><a href="https://zhuanlan.zhihu.com/p/161107452">EF Core / 基础_从建库到增删改查</a></li><li><a href="https://www.bilibili.com/video/BV1X54y1j7HV/?spm_id_from=333.337.search-card.all.click&vd_source=794a7fc718885ad84490c05351dcf216">EFCore简介</a></li><li><a href="https://blog.csdn.net/stone0823/article/details/119427050">asp.net core练手小项目(04) - EF Core 连接 Sql Server 数据库</a></li><li><a href="https://www.cnblogs.com/afei-24/p/11012886.html">EF Core 简单使用介绍</a></li><li><a href="https://blog.csdn.net/Lzysnd/article/details/121566888">ASP.NET Core 使用 EF Core</a></li><li><a href="https://www.shaoqun.com/a/1649447.html">EFCore 6.0入门看这篇就够了</a></li><li><a href="https://learn.microsoft.com/zh-cn/ef/core/get-started/winforms">Windows 窗体入门</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> .NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EF Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>winform核心技术</title>
      <link href="/2023/01/06/winform-zaji/"/>
      <url>/2023/01/06/winform-zaji/</url>
      
        <content type="html"><![CDATA[<h2 id="1-认识窗体和常见控件"><a href="#1-认识窗体和常见控件" class="headerlink" title="1. 认识窗体和常见控件"></a>1. 认识窗体和常见控件</h2><h3 id="1-1-Icon属性"><a href="#1-1-Icon属性" class="headerlink" title="1.1 Icon属性"></a>1.1 Icon属性</h3><p>用于设置窗体左上角图标</p><p>可以选择搜索ICO图标在线生成，将.jpg，.png等文件转化为.ico</p><p><a href="https://tool.520101.com/diannao/ico/">https://tool.520101.com/diannao/ico/</a></p><h3 id="1-2-FormBorderStyle属性"><a href="#1-2-FormBorderStyle属性" class="headerlink" title="1.2 FormBorderStyle属性"></a>1.2 FormBorderStyle属性</h3><p>指定窗体的边框样式。</p><table><thead><tr><th>Fixed3D</th><th>2</th><th>固定的三维边框。</th></tr></thead><tbody><tr><td>FixedDialog</td><td>3</td><td>固定的对话框样式的粗边框。</td></tr><tr><td>FixedSingle</td><td>1</td><td>固定的单行边框。</td></tr><tr><td>FixedToolWindow</td><td>5</td><td>不可调整大小的工具窗口边框。 工具窗口不会显示在任务栏中也不会显示在当用户按 Alt+Tab 时出现的窗口中。 尽管指定 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.forms.formborderstyle?view=netframework-4.8#system-windows-forms-formborderstyle-fixedtoolwindow">FixedToolWindow</a> 的窗体通常不显示在任务栏中，还是必须确保 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.forms.form.showintaskbar?view=netframework-4.8#system-windows-forms-form-showintaskbar">ShowInTaskbar</a> 属性设置为 <code>false</code>，因为其默认值为 <code>true</code>。</td></tr><tr><td>None</td><td>0</td><td>无边框。</td></tr><tr><td>Sizable</td><td>4</td><td>可调整大小的边框。</td></tr><tr><td>SizableToolWindow</td><td>6</td><td>可调整大小的工具窗口边框。 工具窗口不会显示在任务栏中也不会显示在当用户按 Alt+Tab 时出现的窗口中。</td></tr></tbody></table><h4 id="1-2-1-Fixed3D"><a href="#1-2-1-Fixed3D" class="headerlink" title="1.2.1 Fixed3D"></a>1.2.1 Fixed3D</h4><p>固定的三维边框</p><p><img src="/images/winform-zaji/image-20230106105852038.png"></p><h4 id="1-2-2-FixedDialog"><a href="#1-2-2-FixedDialog" class="headerlink" title="1.2.2 FixedDialog"></a>1.2.2 FixedDialog</h4><p>固定的对话框样式的粗边框</p><p><img src="/images/winform-zaji/image-20230106105933836.png"></p><h4 id="1-2-3-FixedSingle"><a href="#1-2-3-FixedSingle" class="headerlink" title="1.2.3 FixedSingle"></a>1.2.3 FixedSingle</h4><p>固定的单行边框</p><p><img src="/images/winform-zaji/image-20230106110058739.png"></p><h4 id="1-2-4-FixedToolWindow"><a href="#1-2-4-FixedToolWindow" class="headerlink" title="1.2.4 FixedToolWindow"></a>1.2.4 FixedToolWindow</h4><p>不可调整大小的工具窗口边框</p><p><img src="/images/winform-zaji/image-20230106110127436.png"></p><h4 id="1-2-5-None"><a href="#1-2-5-None" class="headerlink" title="1.2.5 None"></a>1.2.5 None</h4><p>无边框</p><p><img src="/images/winform-zaji/image-20230106110150767.png"></p><h4 id="1-2-6-Sizable"><a href="#1-2-6-Sizable" class="headerlink" title="1.2.6 Sizable"></a>1.2.6 Sizable</h4><p>可调整大小的边框，默认</p><p><img src="/images/winform-zaji/image-20230106110226892.png"></p><h4 id="1-2-7-SizableToolWindow"><a href="#1-2-7-SizableToolWindow" class="headerlink" title="1.2.7 SizableToolWindow"></a>1.2.7 SizableToolWindow</h4><p>可调整大小的工具窗口边框</p><p><img src="/images/winform-zaji/image-20230106110309777.png"></p><h3 id="1-3-StartPosition属性"><a href="#1-3-StartPosition属性" class="headerlink" title="1.3 StartPosition属性"></a>1.3 StartPosition属性</h3><p>获取或设置运行时窗体的起始位置。</p><table><thead><tr><th>CenterParent</th><th>4</th><th>窗体在其父窗体中居中。</th></tr></thead><tbody><tr><td>CenterScreen</td><td>1</td><td>窗体在当前显示窗口中居中，其尺寸在窗体大小中指定。</td></tr><tr><td>Manual</td><td>0</td><td>窗体的位置由 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.forms.control.location?view=netframework-4.8#system-windows-forms-control-location">Location</a> 属性确定。</td></tr><tr><td>WindowsDefaultBounds</td><td>3</td><td>窗体定位在 Windows 默认位置，其边界也由 Windows 默认决定。</td></tr><tr><td>WindowsDefaultLocation</td><td>2</td><td>窗体定位在 Windows 默认位置，其尺寸在窗体大小中指定。</td></tr></tbody></table><h3 id="1-4-MessageBox-Show-方法"><a href="#1-4-MessageBox-Show-方法" class="headerlink" title="1.4 MessageBox.Show 方法"></a>1.4 MessageBox.Show 方法</h3><p>返回一个DialogResult的枚举对象</p><h4 id="1-4-1-DialogResult-枚举"><a href="#1-4-1-DialogResult-枚举" class="headerlink" title="1.4.1 DialogResult 枚举"></a>1.4.1 DialogResult 枚举</h4><table><thead><tr><th>Abort</th><th>3</th><th>对话框的返回值是 <code>Abort</code>（通常从标签为“中止”的按钮发送）。</th></tr></thead><tbody><tr><td>Cancel</td><td>2</td><td>对话框的返回值是 <code>Cancel</code>（通常从标签为“取消”的按钮发送）。</td></tr><tr><td>Ignore</td><td>5</td><td>对话框的返回值是 <code>Ignore</code>（通常从标签为“忽略”的按钮发送）。</td></tr><tr><td>No</td><td>7</td><td>对话框的返回值是 <code>No</code>（通常从标签为“否”的按钮发送）。</td></tr><tr><td>None</td><td>0</td><td>从对话框返回了 <code>Nothing</code>。 这表明有模式对话框继续运行。</td></tr><tr><td>OK</td><td>1</td><td>对话框的返回值是 <code>OK</code>（通常从标签为“确定”的按钮发送）。</td></tr><tr><td>Retry</td><td>4</td><td>对话框的返回值是 <code>Retry</code>（通常从标签为“重试”的按钮发送）。</td></tr><tr><td>Yes</td><td>6</td><td>对话框的返回值是 <code>Yes</code>（通常从标签为“是”的按钮发送）。</td></tr></tbody></table><p>示例</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form1_FormClosing</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">FormClosingEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">DialogResult</span> a <span class="token operator">=</span> MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">"你正在关闭窗体"</span><span class="token punctuation">,</span> <span class="token string">"提示消息框"</span><span class="token punctuation">,</span> MessageBoxButtons<span class="token punctuation">.</span>YesNoCancel<span class="token punctuation">,</span> MessageBoxIcon<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> DialogResult<span class="token punctuation">.</span>Yes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> e<span class="token punctuation">.</span>Cancel <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> e<span class="token punctuation">.</span>Cancel <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击关闭窗口提示</p><p><img src="/images/winform-zaji/image-20230106113301604.png"></p><h3 id="1-5-IsMdiContainer属性"><a href="#1-5-IsMdiContainer属性" class="headerlink" title="1.5 IsMdiContainer属性"></a>1.5 IsMdiContainer属性</h3><p>获取或设置一个值，该值指示窗体是否为多文档界面 (MDI) 子窗体的容器。</p><blockquote><p>注意窗体不能既是 MDI 子级，又是 MDI 父级。</p></blockquote><p>所以我们设置 Form1 的<code>IsMdiContainer</code>属性为 True，Form2、Form3、Form4 的<code>IsMdiContainer</code>属性为False，我们在 Form1 窗体里同时加载 Form2、Form3、Form4 子窗体</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Load_Three_Forms</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Form2</span> form2<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Form2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            form2<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            form2<span class="token punctuation">.</span>MdiParent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token class-name">Form3</span> form3<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Form3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            form3<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            form3<span class="token punctuation">.</span>MdiParent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token class-name">Form4</span> form4<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Form4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            form4<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            form4<span class="token punctuation">.</span>MdiParent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Form.MdiParent 属性 获取或设置此窗体的当前多文档界面 (MDI) 父窗体。</p><p>效果如下</p><p><img src="/images/winform-zaji/image-20230106164225874.png"></p><h4 id="1-5-1-Form-LayoutMdi-MdiLayout-方法"><a href="#1-5-1-Form-LayoutMdi-MdiLayout-方法" class="headerlink" title="1.5.1 Form.LayoutMdi(MdiLayout) 方法"></a>1.5.1 Form.LayoutMdi(MdiLayout) 方法</h4><ul><li>在 MDI 父窗体内排列多文档界面 (MDI) 子窗体。</li></ul><p><strong>MdiLayout 枚举</strong></p><ul><li>指定 MDI 父窗口中多文档界面 (MDI) 子窗口的布局。</li></ul><p><strong>字段如下</strong></p><table><thead><tr><th>ArrangeIcons</th><th>3</th><th>所有 MDI 子图标均排列在 MDI 父窗体的工作区内。</th></tr></thead><tbody><tr><td>Cascade</td><td>0</td><td>所有 MDI 子窗口均<strong>层叠</strong>在 MDI 父窗体的工作区内。</td></tr><tr><td>TileHorizontal</td><td>1</td><td>所有 MDI 子窗口均<strong>水平平铺</strong>在 MDI 父窗体的工作区内。</td></tr><tr><td>TileVertical</td><td>2</td><td>所有 MDI 子窗口均<strong>垂直平铺</strong>在 MDI 父窗体的工作区内。</td></tr></tbody></table><p>默认的加载窗体就是层叠的，只不过设置为Cascade后会放大点</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token function">LayoutMdi</span><span class="token punctuation">(</span>MdiLayout<span class="token punctuation">.</span>TileHorizontal<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>水平平铺</p><p><img src="/images/winform-zaji/image-20230106165229192.png"></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token function">LayoutMdi</span><span class="token punctuation">(</span>MdiLayout<span class="token punctuation">.</span>Cascade<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>层叠</p><p><img src="/images/winform-zaji/image-20230106165250991.png"></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token function">LayoutMdi</span><span class="token punctuation">(</span>MdiLayout<span class="token punctuation">.</span>TileVertical<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>垂直平铺</p><p><img src="/images/winform-zaji/image-20230106165302161.png"></p><h3 id="1-6-继承的窗体"><a href="#1-6-继承的窗体" class="headerlink" title="1.6 继承的窗体"></a>1.6 继承的窗体</h3><p>如果我们想新建一个窗体，继承Form1的内容</p><blockquote><p>添加 -&gt; 新建项 -&gt; Windows Forms -&gt; 继承的窗体</p></blockquote><p><img src="/images/winform-zaji/image-20230106170125132.png" alt="新建继承的窗体"></p><p>选择Form1，点击确定</p><p><img src="/images/winform-zaji/image-20230106170139719.png" alt="继承选取器"></p><p>Form5效果如下</p><p><img src="/images/winform-zaji/image-20230106170242147.png" alt="创建的窗体Form5"></p><p><strong>继承下来的控件默认都是锁定的</strong></p><blockquote><p>原因是控件默认Modifiers属性都是 Private 的,如果我们想让继承的控件也能做更改,那么我们需要将继承的父窗体控件的Modifiers属性设置为 Public.</p></blockquote><h3 id="1-7-调整控件的大小"><a href="#1-7-调整控件的大小" class="headerlink" title="1.7 调整控件的大小"></a>1.7 调整控件的大小</h3><p><img src="/images/winform-zaji/image-20230106174009864.png" alt="使宽度相同/使高度相同/使大小相同"></p><p><img src="/images/winform-zaji/image-20230106174330211.png"></p><p>黑点的控件会根据白点的控件大小进行更改</p><p>可以使用 Ctrl 选择白点还是黑点控件,然后互点控件还可以改变黑白点</p><h3 id="1-8-RichTextBox-控件"><a href="#1-8-RichTextBox-控件" class="headerlink" title="1.8 RichTextBox 控件"></a>1.8 RichTextBox 控件</h3><h4 id="1-8-1-RichTextBox-ScrollBars-属性"><a href="#1-8-1-RichTextBox-ScrollBars-属性" class="headerlink" title="1.8.1 RichTextBox.ScrollBars 属性"></a>1.8.1 RichTextBox.ScrollBars 属性</h4><p>获取或设置 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.forms.richtextbox?view=netframework-4.8">RichTextBox</a> 控件中显示的滚动条类型。</p><table><thead><tr><th>Both（默认）</th><th>3</th><th>在需要时同时显示水平滚动条和垂直滚动条。</th></tr></thead><tbody><tr><td>ForcedBoth</td><td>19</td><td>始终同时显示水平滚动条和垂直滚动条。</td></tr><tr><td>ForcedHorizontal</td><td>17</td><td>始终显示水平滚动条。</td></tr><tr><td>ForcedVertical</td><td>18</td><td>始终显示垂直滚动条。</td></tr><tr><td>Horizontal</td><td>1</td><td>仅在文本比控件的宽度长时显示水平滚动条。</td></tr><tr><td>None</td><td>0</td><td>不显示滚动条。</td></tr><tr><td>Vertical</td><td>2</td><td>仅在文本比控件的高度长时显示垂直滚动条。</td></tr></tbody></table><h4 id="1-8-2-TextBoxBase-WordWrap-属性"><a href="#1-8-2-TextBoxBase-WordWrap-属性" class="headerlink" title="1.8.2 TextBoxBase.WordWrap 属性"></a>1.8.2 TextBoxBase.WordWrap 属性</h4><p>指示多行文本框控件在必要时是否自动换行到下一行的开始。</p><p>和ScrollBars 属性配合使用</p><h4 id="1-8-3-设置文本字体"><a href="#1-8-3-设置文本字体" class="headerlink" title="1.8.3 设置文本字体"></a>1.8.3 设置文本字体</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">richTextBox1<span class="token punctuation">.</span>SelectionFont <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Font</span><span class="token punctuation">(</span><span class="token string">"楷体"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> FontStyle<span class="token punctuation">.</span>Bold<span class="token punctuation">)</span><span class="token punctuation">;</span>richTextBox1<span class="token punctuation">.</span>ForeColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>Red<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>效果如下</p><p><img src="/images/winform-zaji/image-20230107150004459.png"></p><h4 id="1-8-4-设置文本超链接访问"><a href="#1-8-4-设置文本超链接访问" class="headerlink" title="1.8.4 设置文本超链接访问"></a>1.8.4 设置文本超链接访问</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">richTextBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"www.baidu.com"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置 richTextBox1 的 LinkClicked 事件如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">richTextBox1_LinkClicked</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">LinkClickedEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>Process<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>LinkText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>System.Diagnostics 命名空间</strong></p><p>​        提供允许你与系统进程、事件日志和性能计数器进行交互的类。</p><p><strong>Process 类</strong></p><p>​        提供对本地和远程进程的访问权限并使你能够启动和停止本地系统进程。</p><p><strong>Start 方法</strong></p><p>​        启动进程资源并将其与 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.diagnostics.process?view=netframework-4.8">Process</a> 组件关联。</p><p><strong>LinkClickedEventArgs.LinkText 属性</strong></p><p>​        获取正在单击的链接的文本。</p><h3 id="1-9-ComboBox-控件"><a href="#1-9-ComboBox-控件" class="headerlink" title="1.9 ComboBox 控件"></a>1.9 ComboBox 控件</h3><h4 id="1-9-1-DropDownStyle-属性"><a href="#1-9-1-DropDownStyle-属性" class="headerlink" title="1.9.1 DropDownStyle 属性"></a>1.9.1 DropDownStyle 属性</h4><p>获取或设置指定组合框样式的值。</p><p>ComboBoxStyle 枚举</p><table><thead><tr><th>DropDown</th><th>1</th><th>通过单击下箭头指定显示列表，并指定文本部分可编辑。 这表示用户可以输入新的值，而不仅限于选择列表中现有的值。 使用此设置时，<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.forms.autocompletemode?view=netframework-4.8#system-windows-forms-autocompletemode-append">Append</a> 的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.forms.combobox.autocompletemode?view=netframework-4.8#system-windows-forms-combobox-autocompletemode">AutoCompleteMode</a> 值的作用与 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.forms.autocompletemode?view=netframework-4.8#system-windows-forms-autocompletemode-suggestappend">SuggestAppend</a> 值相同。 这是默认样式。</th></tr></thead><tbody><tr><td>DropDownList</td><td>2</td><td>通过单击下箭头指定显示列表，并指定文本部分不可编辑。 这表示用户不能输入新的值。 只能选择列表中已有的值。 只有在 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.forms.combobox.autocompletemode?view=netframework-4.8#system-windows-forms-combobox-autocompletemode">AutoCompleteMode</a> 为 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.forms.autocompletemode?view=netframework-4.8#system-windows-forms-autocompletemode-suggest">Suggest</a> 或 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.forms.autocompletemode?view=netframework-4.8#system-windows-forms-autocompletemode-suggestappend">SuggestAppend</a> 时才会显示列表。</td></tr><tr><td>Simple</td><td>0</td><td>指定列表始终可见，并指定文本部分可编辑。 这表示用户可以输入新的值，而不仅限于选择列表中现有的值。</td></tr></tbody></table><p>DropDown</p><p><img src="/images/winform-zaji/image-20230107151354830.png" alt="DropDown样式"></p><p>DropDownList</p><p><img src="/images/winform-zaji/image-20230107151452795.png" alt="DropDownList样式，不可编辑"></p><p>Simple</p><p><img src="/images/winform-zaji/image-20230107151556325.png" alt="Simple样式"></p><h4 id="1-9-2-编辑项"><a href="#1-9-2-编辑项" class="headerlink" title="1.9.2 编辑项"></a>1.9.2 编辑项</h4><p>可通过点击左上角 -&gt; 编辑项 进行操作，每行一个</p><p><img src="/images/winform-zaji/image-20230107152039700.png" alt="编辑项"></p><p>也可通过代码的形式添加项</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">comboBox1<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-10-Panel-容器"><a href="#1-10-Panel-容器" class="headerlink" title="1.10 Panel 容器"></a>1.10 Panel 容器</h3><p>面板控件 Panel 是一个包含其他控件的控件。 可以使用 Panel 来组合控件的集合，例如一组 RadioButton 控件。</p><p>除了Panel外，容器还有GroupBox/TabControl等，都可以用于存放其他控件。</p><h3 id="1-11-MenuStrip-控件"><a href="#1-11-MenuStrip-控件" class="headerlink" title="1.11 MenuStrip 控件"></a>1.11 MenuStrip 控件</h3><p>菜单栏控件。</p><p><img src="/images/winform-zaji/image-20230107170912022.png"></p><h3 id="1-12-ToolStrip-控件"><a href="#1-12-ToolStrip-控件" class="headerlink" title="1.12 ToolStrip 控件"></a>1.12 ToolStrip 控件</h3><p>工具栏控件。默认有8种</p><p><img src="/images/winform-zaji/image-20230107171024318.png"></p><h3 id="1-13-StatusStrip-控件"><a href="#1-13-StatusStrip-控件" class="headerlink" title="1.13 StatusStrip 控件"></a>1.13 StatusStrip 控件</h3>]]></content>
      
      
      <categories>
          
          <category> .Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> winform </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github仓库建立及配置</title>
      <link href="/2022/12/19/Github-repository/"/>
      <url>/2022/12/19/Github-repository/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近几天，在搞Hexo博客的备份，但是不太顺利，准备好好学一学关于Github的知识。</p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>一般就是点击右上角你的头像，选择Your repositories.</p><p><img src="/images/Github-repository/image-20221219151552712.png"></p><p>点击 <code>New</code>，即可进入到创建仓库的页面</p><p><img src="/images/Github-repository/image-20221219151651626.png"></p><h3 id="Repository-name"><a href="#Repository-name" class="headerlink" title="Repository name"></a>Repository name</h3><p>这里输入框即输入你仓库的名字，你可以想一个适当的名字进行填写。</p><h3 id="Descriptioin（optional）"><a href="#Descriptioin（optional）" class="headerlink" title="Descriptioin（optional）"></a>Descriptioin（optional）</h3><p>根据名字我们可知其意，就是对你创建仓库的描述，当然，这个可以选填。</p><h3 id="Public-Private"><a href="#Public-Private" class="headerlink" title="Public/Private"></a>Public/Private</h3><p>Public即为公众的，选了Public即代表你的仓库代码为公开的，仓库内的所有内容都会被公开。</p><p>Private即为私有的，选了Private即代表你的仓库为私密的，当然你选了这个也可以自己设置访问权限。相比Public多了一些功能。</p><h3 id="Initialize-this-repository-with：Add-a-README-file"><a href="#Initialize-this-repository-with：Add-a-README-file" class="headerlink" title="Initialize this repository with：Add a README file"></a>Initialize this repository with：Add a README file</h3><p>如果勾选了这个选项，那么它就代表着GitHub会自动初始化仓库并且设置README文件，可以让你立刻clone这个仓库。clone意思就是本地没有repository（仓库）时，将远程repository（仓库）整个下载过来。如果不勾选它，那么，你可以手动push。将你已经有的Git仓库添加到GitHub。</p><h3 id="Add-gitignore"><a href="#Add-gitignore" class="headerlink" title="Add .gitignore"></a>Add .gitignore</h3><p>在使用git作版本控制时，git会默认把git控制的文件夹里面的所有文件都加入到版本控制。但是在实践中，我们经常会遇到不想某些文件或文件夹被git追踪的情况。比如logs文件、代码构建过程中产生的一些列文件，要解决这种问题,通常情况下我们需要创建一个文件格式后缀名为.gitignore的文件，来<strong>控制那些文件不被git追踪</strong>。</p><p>这里所说的git追踪，通俗一点来讲就是在我们push上传文件的时候，这些<strong>文件不会被上传</strong>。只会存在你本地的磁盘里，不会随你要上传的文件一起上传，它会被滤过。</p><p>下拉菜单中有多种语言及框架，看你的需要进行选择。</p><h3 id="Choose-a-license"><a href="#Choose-a-license" class="headerlink" title="Choose a license"></a>Choose a license</h3><p>这个下拉菜单意思是给你的代码仓库<strong>添加一个许可证</strong>，你可以根据需求进行选择。比如我添加一个开源许可证，当别人浏览我的代码仓库时，别人也可以进行修改我仓库中的项目。</p><p>随后会生成包含许可协议内容的LICENSE文件，用来表明你的仓库内容的许可协议。</p><h2 id="将本地文件上传到仓库"><a href="#将本地文件上传到仓库" class="headerlink" title="将本地文件上传到仓库"></a>将本地文件上传到仓库</h2><ol><li>把github上面的仓库克隆到本地</li></ol><p>git clone <a href="mailto:&#103;&#x69;&#116;&#64;&#x67;&#105;&#116;&#104;&#117;&#x62;&#46;&#99;&#111;&#109;">&#103;&#x69;&#116;&#64;&#x67;&#105;&#116;&#104;&#117;&#x62;&#46;&#99;&#111;&#109;</a>:xxx/xxx.git，推荐使用SSH的形式</p><p>使用git bash</p><ol start="2"><li><p>把需要上传的文件拷贝到刚下载的新文件夹内</p></li><li><p>接下来依次输入以下代码即可完成其他剩余操作：</p><ol><li><p>git add . （注：别忘记后面的.，此操作是把Test文件夹下面的文件都添加进来）</p></li><li><p>git commit -m “提交信息” （注：“提交信息”里面换成你需要，如“first commit”）</p></li><li><p>git push origin main (其中origin是仓库名，main是分支名) </p></li></ol><p>​    git push 不指定远程仓库名和分支名。(当你只有一个分支的时候可以简写为这种形式)</p></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="https://blog.csdn.net/qq_44722674/article/details/117200397">github仓库建立及配置教程新手教程</a></li><li><a href="https://blog.csdn.net/weixin_43729943/article/details/103915046">如何在GitHub上创建自己的仓库？</a></li><li><a href="https://blog.csdn.net/stc1247679496/article/details/104269657">git如何上传本地文件到github仓库（超详细教程）</a> </li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+Hexo博客使用：用github actions自动化布署hexo博客</title>
      <link href="/2022/12/18/HexoBlogChangeComputer/"/>
      <url>/2022/12/18/HexoBlogChangeComputer/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于网上能搜到的资料都是去年或者前年的，导致问题很多，中途心态炸了好几次。。。</p><h2 id="已配置好环境的情况迁移"><a href="#已配置好环境的情况迁移" class="headerlink" title="已配置好环境的情况迁移"></a>已配置好环境的情况迁移</h2><p>由于我已经在两台电脑中来回迁移好几次了，所以环境已经配好了，只需要将所有文件全部复制过来：以下文件+.ssh文件夹下的id_rsa和id_rsa.pub文件（在C盘的用户文件夹下）</p><p><img src="/images/HexoBlogChangeComputer/image-20221218154708042.png"></p><p>然后<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>即可</p><h2 id="用github-actions自动化布署hexo博客"><a href="#用github-actions自动化布署hexo博客" class="headerlink" title="用github actions自动化布署hexo博客"></a>用github actions自动化布署hexo博客</h2><p>常规的hexo使用方式如下：<br>写markdown文件保存-&gt;<code>hexo generate</code>生成文件-&gt;<code>hexo deploy</code>部署到github仓库-&gt;把源文件备份到博客仓库的source分支或者备份到一个私有仓库</p><p>利用<code>Github-Actions</code>+<code>Powershell脚本</code>可以把写博客的流程简化为：<br>写markdown文件保存-&gt;打开powershell，输入<code>pushhexo</code>指令完成上面的所有步骤</p><h3 id="1-前提"><a href="#1-前提" class="headerlink" title="1 前提"></a>1 前提</h3><p>后面的所有内容都假设你已经能正常用<code>hexo deploy</code>布署博客，这表示你的环境已经满足下面几点要求：</p><ul><li>安装了git且设置了<code>秘钥</code>（即存放在用户下.ssh文件夹下的id_rsa和id_ras.pub这两个文件）</li><li>创建 <code>xxx.github.io</code> 仓库用来存放静态博客页面</li></ul><h3 id="2-创建一个备份仓库"><a href="#2-创建一个备份仓库" class="headerlink" title="2 创建一个备份仓库"></a>2 创建一个备份仓库</h3><p>因为配置文件中有一些敏感信息，所以我选择创建一个<strong>私有仓库</strong>，过程不表，假设命名为<code>Back-up-Hexo</code>。<br>这里要注意，如果我们安装了主题，并且是从github上clone下来的，那么主题文件夹中（比如themes/next/)会有名为<code>.git</code>的隐藏文件夹用于git同步，需要把它删除，因为我们备份到私有仓库的时候是把主题文件一起备份的(这样才能在自动化部署中保留主题)，嵌套的git仓库会报错，当然删除以后就不能用<code>git pull</code>的方式更新主题了。</p><p>把本地的博客文件夹上传到<code>hexo</code>私有仓库，并保证<code>.gitignore</code>文件中包含以下几项，<strong>避免</strong>以前手动生成及部署过的文件也作为源文件上传：</p><ul><li>node_modules/</li><li>public/</li><li>.deploy*/</li></ul><p><img src="/images/HexoBlogChangeComputer/image-20221219154725390.png"></p><h3 id="3-设置秘钥"><a href="#3-设置秘钥" class="headerlink" title="3 设置秘钥"></a>3 设置秘钥</h3><p>将<code>id_rsa</code>这个SSH生成的密钥添加到私有仓库的<code>Actions secrets</code>，我这里命名为<code>HEXO_DEPLOY_PRI</code>，创建Github Actions需要用到。</p><h3 id="4-创建Github-Actions脚本"><a href="#4-创建Github-Actions脚本" class="headerlink" title="4 创建Github Actions脚本"></a>4 创建Github Actions脚本</h3><blockquote><p>​        简单来说，GitHub Actions 可以提供一台无法直接访问的 Azure ，通过 .github/workflows/*.yml 执行所写的指令。 Azure 可以提供 Ubuntu 、 Windows 等环境。当我们运行 Jobs 时，它会创建一个容器 (runner)，容器支持：Ubuntu、Windows 和 MacOS 等系统，在容器中我们可以安装软件，利用安装的软件帮我们处理一些数据，然后把处理好的数据推送到某个地方。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">blog <span class="token punctuation">(</span>repository<span class="token punctuation">)</span>└── .github    └── workflows        └── deploy.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个<code>.github/workflows/pages.yml</code>文件(没有目录就先创建目录），这里参考的<a href="https://hexo.io/docs/github-pages.html">hexo官方的脚本</a>并稍作修改：</p><p>创建<code>.github</code>文件夹的方法是创建一个名为<code>.github.</code>的文件夹即可</p><pre class="line-numbers language-none"><code class="language-none">name: CI  on:  push:    branches:      - main  env:  GIT_USER: 8yyy  GIT_EMAIL: 1410868939@qq.com  DEPLOY_REPO: 8yyy&#x2F;8yyy.github.io  DEPLOY_BRANCH: mainjobs:  build:    name: Build on node $&#123;&#123; matrix.node_version &#125;&#125; and $&#123;&#123; matrix.os &#125;&#125;    runs-on: ubuntu-latest    strategy:      matrix:        os: [ubuntu-latest]        node_version: [16.x]    steps:      - name: Checkout        uses: actions&#x2F;checkout@v3      - name: Checkout deploy repo        uses: actions&#x2F;checkout@v3        with:          repository: $&#123;&#123; env.DEPLOY_REPO &#125;&#125;          ref: $&#123;&#123; env.DEPLOY_BRANCH &#125;&#125;          path: .deploy_git      - name: Use Node.js $&#123;&#123; matrix.node_version &#125;&#125;        uses: actions&#x2F;setup-node@v3        with:          node-version: $&#123;&#123; matrix.node_version &#125;&#125;      - name: Configuration environment        env:          HEXO_DEPLOY_PRI: $&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;        run: |          sudo timedatectl set-timezone &quot;Asia&#x2F;Shanghai&quot;          mkdir -p ~&#x2F;.ssh&#x2F;          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~&#x2F;.ssh&#x2F;id_rsa          chmod 600 ~&#x2F;.ssh&#x2F;id_rsa          ssh-keyscan github.com &gt;&gt; ~&#x2F;.ssh&#x2F;known_hosts          git config --global user.name $GIT_USER          git config --global user.email $GIT_EMAIL      - name: Install dependencies        run: |          npm install      - name: Deploy hexo        run: |          npm run deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面指令只需要对 env 进行修改即可，其他需要修改的内容我已经改好了（可能需要更改的地方也就是on）</p><h3 id="5-写Powershell脚本进一步简化操作"><a href="#5-写Powershell脚本进一步简化操作" class="headerlink" title="5 写Powershell脚本进一步简化操作"></a>5 写Powershell脚本进一步简化操作</h3><p>上面的步骤完成以后，我们仍然需要手动的执行<code>git add,git commit,git push</code>这些操作，这里借助<code>powershell</code>脚本实现简化。</p><p>先找开<code>powershell</code>，执行<code>$profile</code>,会显示配置文件位置，打开这个配置文件，添加下面的内容：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#hexo 备份到github</span><span class="token keyword">function</span> pushhexo<span class="token punctuation">&#123;</span>    <span class="token variable">$currpath</span>=<span class="token variable">$pwd</span><span class="token punctuation">.</span>path<span class="token punctuation">;</span>    <span class="token variable">$hexopath</span>=<span class="token string">"H:\Back-up-Hexo"</span><span class="token punctuation">;</span>    <span class="token function">Set-Location</span> <span class="token variable">$hexopath</span><span class="token punctuation">;</span>    git add <span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">;</span>    git commit <span class="token operator">-</span>m <span class="token string">"backup"</span><span class="token punctuation">;</span>    git push<span class="token punctuation">;</span>    <span class="token function">Set-Location</span> <span class="token variable">$currpath</span><span class="token punctuation">;</span>    <span class="token function">Write-Output</span> <span class="token string">"Push hexo files to github successfully"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Windows的<a href="https://so.csdn.net/so/search?q=powershell&spm=1001.2101.3001.7020">powershell</a>默认情况下是没有配置文件的，直接按照<code>$PROFILE</code>输出的路径和文件名，新建一个文件即可。</p><p>若要在本地计算机上运行未签名的脚本，并从其他用户签名脚本，请使用“以管理员身份运行”选项启动 PowerShell，然后使用以下命令将计算机上的执行策略更改为 <strong>RemoteSigned</strong>：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Set-ExecutionPolicy</span> RemoteSigned<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>其中<code>$hexopath=&quot;H:\Back-up-Hexo&quot;;</code>这一行需要修改路径为你的博客根目录，保存后需要重启powershell才能生效。</p><p>到这里，我们就可以在<code>powershell</code>中输入<code>pushhexo</code>实现一键备份和部署了。</p><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6 总结"></a>6 总结</h3><p>由于网上参考的资料几乎都是去年或者前年的东西，导致问题百出，搞了好几天心态炸了好几次。现在终于搞完了!芜湖~！</p><h4 id="总觉下部署的时候出现的问题"><a href="#总觉下部署的时候出现的问题" class="headerlink" title="总觉下部署的时候出现的问题"></a>总觉下部署的时候出现的问题</h4><p><strong>1.Run Failed  .github/workflows/pages.yml: No jobs were run</strong></p><blockquote><p>这是第一天出现的问题，搞了半天搞不好，甚至于对<a href="https://www.fewth.com/%E7%94%A8github-actions%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B8%83%E7%BD%B2hexo%E5%8D%9A%E5%AE%A2-%E4%BB%8E%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%88%B0%E5%85%AC%E5%85%B1%E4%BB%93%E5%BA%93/#:~:text=%E5%86%99markdown%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98-%3E%20hexo%20generate%20%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6-%3E%20hexo%20deploy,%E9%83%A8%E7%BD%B2%E5%88%B0github%E4%BB%93%E5%BA%93-%3E%E6%8A%8A%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%87%E4%BB%BD%E5%88%B0%E5%8D%9A%E5%AE%A2%E4%BB%93%E5%BA%93%E7%9A%84source%E5%88%86%E6%94%AF%E6%88%96%E8%80%85%E5%A4%87%E4%BB%BD%E5%88%B0%E4%B8%80%E4%B8%AA%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%20%E5%88%A9%E7%94%A8%20Github-Actions%20%2B%20Powershell%E8%84%9A%E6%9C%AC%20%E5%8F%AF%E4%BB%A5%E6%8A%8A%E5%86%99%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%B5%81%E7%A8%8B%E7%AE%80%E5%8C%96%E4%B8%BA%EF%BC%9A">用github actions自动化布署hexo博客-从私有仓库到公共仓库</a>作者发了邮件，搞这一段的时候真的心态爆炸了好几次。然后第二天尝试了好几次决定换一个写法，现在想来用这个现在应该不适用了，虽然明明去年还是可用的。至于原因可以看下面的内容</p></blockquote><p><strong>2.Please update the following actions to use Node.js 16: actions/checkout@v2, actions/setup-node@v1</strong></p><p>前面还有一段Node.js 12 actions are deprecated.</p><blockquote><p>不能不感叹技术更新迭代的真快，明明去年还可以用Node.js 12，今天就只能改用Node.js 16了，上面作者用的就是Node.js 12，还有Actions基本都是v1和v2，所以根本用不了了，当然Run Failed的问题和这些都没有关系，至于是什么原因到现在还不了解。需要将所有Actions改为v3版本，例如actions/checkout@v3，actions/setup-node@v3</p></blockquote><p><strong>3.branch 默认分支改为了 main</strong></p><blockquote><p>Push the files of your Hexo folder to the default branch of your repository. The default branch is usually <strong>main</strong>, older repository may use <strong>master</strong> branch.</p><p>Github账号默认的主分支从2020年10月1日起已经由<strong>master改为了main</strong></p><p>所以on的写法改为了</p><pre class="line-numbers language-none"><code class="language-none">on:  push:    branches:      - main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>从网上能找到的资料几乎都是master，这个需要特别注意，不过我一开始就注意到了这个问题。</p></blockquote><p><strong>4.关于windows powershell的问题</strong></p><blockquote><p>这个我在创建过程中已经写出来了</p></blockquote><p>用<code>Github Action</code>实现自动部署，不仅可以简化部署流程，还可以免去本地渲染的机器性能开销。在文章数量越来越多的时候（几百或者几千），hexo渲染就会越来越慢，甚至卡死，利用<code>Github Actions</code>的话，本地只需要负责io传输就行了，渲染由github完成。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li> <a href="https://zhuanlan.zhihu.com/p/127027266">使用GitHub备份Hexo博客源文件</a></li><li> <a href="https://blog.csdn.net/Copanko/article/details/105461777">新建私密仓库来备份你的hexo源文件</a></li><li> <a href="https://www.fewth.com/%E7%94%A8github-actions%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B8%83%E7%BD%B2hexo%E5%8D%9A%E5%AE%A2-%E4%BB%8E%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%88%B0%E5%85%AC%E5%85%B1%E4%BB%93%E5%BA%93/#:~:text=%E5%86%99markdown%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98-%3E%20hexo%20generate%20%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6-%3E%20hexo%20deploy,%E9%83%A8%E7%BD%B2%E5%88%B0github%E4%BB%93%E5%BA%93-%3E%E6%8A%8A%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%87%E4%BB%BD%E5%88%B0%E5%8D%9A%E5%AE%A2%E4%BB%93%E5%BA%93%E7%9A%84source%E5%88%86%E6%94%AF%E6%88%96%E8%80%85%E5%A4%87%E4%BB%BD%E5%88%B0%E4%B8%80%E4%B8%AA%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%20%E5%88%A9%E7%94%A8%20Github-Actions%20%2B%20Powershell%E8%84%9A%E6%9C%AC%20%E5%8F%AF%E4%BB%A5%E6%8A%8A%E5%86%99%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%B5%81%E7%A8%8B%E7%AE%80%E5%8C%96%E4%B8%BA%EF%BC%9A">用github actions自动化布署hexo博客-从私有仓库到公共仓库</a></li><li> <a href="https://blog.csdn.net/qq_24881591/article/details/115221873">https://blog.csdn.net/qq_24881591/article/details/115221873</a></li><li> <a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_signing?view=powershell-7.3&amp;viewFallbackFrom=powershell-7.1">https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_signing?view=powershell-7.3&amp;viewFallbackFrom=powershell-7.1</a></li><li> <a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">GitHub Actions 入门教程</a></li><li> <a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/">利用 Github Actions 自动部署 Hexo 博客</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github Actions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Excel导入数据到datagridview和Sql Server数据库</title>
      <link href="/2022/12/18/ExcelToDataGridViewAndSqlServer/"/>
      <url>/2022/12/18/ExcelToDataGridViewAndSqlServer/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/ExcelToDataGridViewAndSqlServer/image-20221218142841079.png"></p><p>需求如下：有一个文本框textBox1，一个按钮button1，一个dataGridView1控件。点击textBox1选择文件，将Excel路径添加到文本框内，然后点击导入，将Excel内的数据导入到dataGridView1和Sql Server数据库内。</p><h2 id="0-点击-textBox1-获取文件"><a href="#0-点击-textBox1-获取文件" class="headerlink" title="0. 点击 textBox1 获取文件"></a>0. 点击 textBox1 获取文件</h2><p>只要需要用到 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.forms.openfiledialog?f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(System.Windows.Forms.OpenFileDialog);k(Designer_Microsoft.DotNet.DesignTools.Client.Designers.DocumentProxyDesigner);k(NonVisualSelection);k(DevLang-csharp)&rd=true&view=windowsdesktop-7.0">openFileDialog</a> 控件</p><p>定义：显示一个标准对话框，提示用户打开文件。 </p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">string</span></span> fileName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">textBox1_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token comment">//打开文件，获取到文件存储路径，并保存在textBox中</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>openFileDialog1<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>openFileDialog1<span class="token punctuation">.</span>FileName<span class="token punctuation">;</span>          <span class="token comment">//导入文件，读取文件的路径，并将其导入到DataGridView中</span>          fileName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Text<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Excel表如下：</p><p><img src="/images/ExcelToDataGridViewAndSqlServer/image-20221221164850778.png"></p><h2 id="1-Excel数据导入-DataGridView"><a href="#1-Excel数据导入-DataGridView" class="headerlink" title="1. Excel数据导入 DataGridView"></a>1. Excel数据导入 DataGridView</h2><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Text <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             <span class="token keyword">try</span>             <span class="token punctuation">&#123;</span>                 <span class="token class-name"><span class="token keyword">string</span></span> strCon <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$" Provider = Microsoft.Jet.OLEDB.4.0 ; Data Source = </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">fileName</span><span class="token punctuation">&#125;</span></span><span class="token string"> ;Extended Properties=Excel 4.0"</span></span><span class="token punctuation">;</span>                 <span class="token class-name">OleDbConnection</span> myConn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OleDbConnection</span><span class="token punctuation">(</span>strCon<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token class-name"><span class="token keyword">string</span></span> strCom <span class="token operator">=</span> <span class="token string">" SELECT * FROM [Sheet1$] "</span><span class="token punctuation">;</span>                 <span class="token comment">//Sheet1为对应Excel表名</span>                 <span class="token class-name">OleDbDataAdapter</span> myCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OleDbDataAdapter</span><span class="token punctuation">(</span>strCom<span class="token punctuation">,</span> myConn<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token class-name">DataTable</span> dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DataTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 myCommand<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span>dataGridView1<span class="token punctuation">.</span>DataSource <span class="token operator">=</span> dt<span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>             <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>             <span class="token punctuation">&#123;</span>                 MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">else</span>         <span class="token punctuation">&#123;</span>             MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">"请选择Excel文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OleDbConnection 提示错误如下</p><p><img src="/images/ExcelToDataGridViewAndSqlServer/image-20221218143548825.png" alt="image-20221218143548825"></p><p>需要安装一个OleDb这个依赖</p><p>解决方案：</p><p>在visual studio 工具栏搜索：程序包管理器控制台，然后执行</p><pre class="line-numbers language-none"><code class="language-none">Install-Package System.Data.OleDb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/ExcelToDataGridViewAndSqlServer/image-20221218143655478.png"></p><p>OLE DB（OLEDB）是微软的战略性的通向不同的数据源的低级<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3/10418844?fromModule=lemma_inlink">应用程序接口</a>。OLE DB不仅包括微软资助的标准数据接口开放数据库连通性（ODBC）的结构化查询语言（SQL）能力，还具有面向其他非<a href="https://baike.baidu.com/item/SQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B?fromModule=lemma_inlink">SQL数据类型</a>的通路。</p><p>OLE 全称 Object Link and embed，即对象连接与嵌入。</p><p>OleDbConneetion连接支持OLE DB的数据库，如Access，Excel；</p><p>报错如下：</p><p><img src="/images/ExcelToDataGridViewAndSqlServer/image-20221221164229634.png"></p><p><strong>这个是微软JET数据引擎的兼容性问题。解决方法，只能是让程序编译成32位版运行。</strong></p><p><img src="/images/ExcelToDataGridViewAndSqlServer/image-20221221164628003.png"></p><p>再点击运行，运行效果如下：</p><p><img src="/images/ExcelToDataGridViewAndSqlServer/image-20221221165307439.png"></p><p>Sql Server数据库表如下：</p><p><img src="/images/ExcelToDataGridViewAndSqlServer/image-20221221170139785.png"></p><blockquote><p> 表的列数须和Excel表匹配</p></blockquote><h2 id="2-Excel数据导入-Sql-Server数据库"><a href="#2-Excel数据导入-Sql-Server数据库" class="headerlink" title="2.Excel数据导入 Sql Server数据库"></a>2.Excel数据导入 Sql Server数据库</h2><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">SqlConnection</span> con <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span><span class="token string">@"Data Source=.\sqlexpress;Initial Catalog=test;Integrated Security=true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dataGridView1<span class="token punctuation">.</span>Rows<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dataGridView1<span class="token punctuation">.</span>Rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Cells<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">SqlCommand</span> cmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cmd<span class="token punctuation">.</span>Connection <span class="token operator">=</span> con<span class="token punctuation">;</span>        <span class="token comment">//插入的数据为数据库对应列数,列数须匹配</span>        cmd<span class="token punctuation">.</span>CommandText <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"INSERT INTO tb(A,B,C,D) VALUES('</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">dataGridView1<span class="token punctuation">.</span>Rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Cells<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value</span><span class="token punctuation">&#125;</span></span><span class="token string">','</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">dataGridView1<span class="token punctuation">.</span>Rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Cells<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value</span><span class="token punctuation">&#125;</span></span><span class="token string">','</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">dataGridView1<span class="token punctuation">.</span>Rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Cells<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value</span><span class="token punctuation">&#125;</span></span><span class="token string">','</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">dataGridView1<span class="token punctuation">.</span>Rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Cells<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value</span><span class="token punctuation">&#125;</span></span><span class="token string">')"</span></span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cmd<span class="token punctuation">.</span><span class="token function">ExecuteNonQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">"导入成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><p><img src="/images/ExcelToDataGridViewAndSqlServer/image-20221221171647750.png"></p><p><img src="/images/ExcelToDataGridViewAndSqlServer/image-20221221171659107.png"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="https://blog.csdn.net/Zohar974/article/details/125223497">Winform：Excel数据导入DataGridView，DataGridView数据导入数据库</a></li><li><a href="https://blog.csdn.net/TheFlyPenguin/article/details/121921561">C#连接OleDbConnection操作数据库</a></li><li><a href="https://baike.baidu.com/item/OLE%20DB/4331851?fr=aladdin">OLE DB</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> winform </tag>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WinForm选择文件夹的方式</title>
      <link href="/2022/12/18/WinForm%E9%80%89%E6%8B%A9%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/12/18/WinForm%E9%80%89%E6%8B%A9%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/WinForm%E9%80%89%E6%8B%A9%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/image-20221218112428865.png"></p><p>如图Form1，我有一个按钮控件button1和一个文本框控件textBox1，我点击按钮可以浏览文件夹，选择文件夹后路径显式在文本框内。（当然直接点击文本框显式选择路径可能更好）</p><h2 id="使用System-Windows-Forms-FolderBrowserDialog-类来选择文件夹"><a href="#使用System-Windows-Forms-FolderBrowserDialog-类来选择文件夹" class="headerlink" title="使用System.Windows.Forms.FolderBrowserDialog 类来选择文件夹"></a>使用System.Windows.Forms.FolderBrowserDialog 类来选择文件夹</h2><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.forms.folderbrowserdialog?f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(System.Windows.Forms.FolderBrowserDialog);k(DevLang-csharp)&rd=true&view=windowsdesktop-7.0">FolderBrowserDialog 类</a></p><p>提示用户选择文件夹。</p><p>代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">FolderBrowserDialog</span> folderBrowserDialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FolderBrowserDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>folderBrowserDialog<span class="token punctuation">.</span>SelectedPath <span class="token operator">=</span> <span class="token string">@"C:\";folderBrowserDialog.Description = "</span>请选择文件夹所在的目录"<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>folderBrowserDialog<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> DialogResult<span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> folderBrowserDialog<span class="token punctuation">.</span>SelectedPath<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码分析如下：</p><p>FolderBrowserDialog() 该类只有这一个构造函数。</p><p>SelectedPath属性用于获取或设置用户选定的路径。</p><p>Description属性用于选择文件夹时的描述。</p><p>ShowDialog()方法用于运行通用对话框。</p><p>运行效果如下：</p><p>点击按钮，运行通用对话框</p><p><img src="/images/WinForm%E9%80%89%E6%8B%A9%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/image-20221218134700957.png"></p><p>点击选择文件夹后，文本框内显示路径</p><p><img src="/images/WinForm%E9%80%89%E6%8B%A9%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/image-20221218134755825.png"></p><p>还有一种方法是使用 Ookii.dll 实现文件夹选择，但在现在效果是一样的，所以不再演示了。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li> <a href="https://blog.csdn.net/qq_27461747/article/details/107369363">C# winform 选择文件夹的两种方式</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> winform - Folder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DependencyProperty</title>
      <link href="/2022/12/08/DependencyProperty/"/>
      <url>/2022/12/08/DependencyProperty/</url>
      
        <content type="html"><![CDATA[<h2 id="属性-Property"><a href="#属性-Property" class="headerlink" title="属性(Property)"></a>属性(Property)</h2><p>​        我们都知道属性是类的字段的封装器。在.NET Framework推出时，微软将Get/Set这对方法合并成了属性(Property)。这种.NET Framework中的属性又称为<strong>CLR属性</strong>。</p><p>​        在面向对象的世界里，属性大量存在，比如Button，就大约定义了70-80个属性来描述其状态。那么属性的不足又在哪里呢？</p><p>　　当然，所谓的不足，要针对具体环境来说。拿Button来讲，它的继承树是Button-&gt;ButtonBase-&gt;ContentControl-&gt;Control-&gt;FrameworkElement-&gt;UIElement-&gt;Visual-&gt;DependencyObject-&gt;…</p><p>　　每次继承，父类的私有字段都被继承下来。当然，这个继承是有意思的，不过以Button来说，大多数属性并没有被修改，仍然保持着父类定义时的默认值。通常情况，在整个Button对象的生命周期里，也只有少部分属性被修改，大多数属性一直保持着初始值。每个字段，都需要占用4K等不等的内存，这里，就出现了期望可以优化的地方：</p><ul><li>因继承而带来的对象膨胀。每次继承，父类的字段都被继承，这样，继承树的低端对象不可避免的膨胀。</li><li>大多数字段并没有被修改，一直保持着构造时的默认值，可否把这些字段从对象中剥离开来，减少对象的体积。</li></ul><h2 id="依赖属性"><a href="#依赖属性" class="headerlink" title="依赖属性"></a>依赖属性</h2><blockquote><p>​        Windows Presentation Foundation (WPF) 提供了一组服务，这些服务可用于扩展公共语言运行时 (CLR) 属性的功能，这些服务通常统称为 WPF 属性系统。由 WPF 属性系统支持的属性称为依赖项属性。</p></blockquote><p>　　这段是MSDN上对依赖属性（DependencyProperty）的描述。主要介绍了两个方面，WPF中提供了可用于扩展CLR属性的服务；被这个服务支持的属性称为依赖属性。</p><p>​        在 WPF 中，微软将属性这个概念又向前推进了一步，推出了“依赖属性”这个新概念。简言<br>之，依赖属性就是一种可以自己没有值，并能通过使用Binding从数据源获得值(依赖在别人身上)<br>的属性。拥有依赖属性的对象被称为“依赖对象”。与传统的 CLR属性和面向对象思想相比依赖属<br>性有很多新颖之处，其中包括:</p><ul><li>节省实例对内存的开销。</li><li>属性值可以通过 Binding 依赖在其他对象上。</li></ul><h3 id="依赖属性对内存的使用方法"><a href="#依赖属性对内存的使用方法" class="headerlink" title="依赖属性对内存的使用方法"></a>依赖属性对内存的使用方法</h3><p>​        <strong>依赖属性较之 CLR 属性在内存使用方面迥然不同</strong>。前面已经说过，实例的每个 CLR 属性都包装着一个非静态的字段(或者说由一个非静态的字段在后台支持)，思考这样一个问题:</p><blockquote><p>​        TextBox 有 <strong>138</strong> 个属性，假设每个 CLR  属性都包装着一个 <strong>4</strong> 字节的字段，如果程序运行的时候创建了 <strong>10</strong> 列 <strong>1000</strong> 行 的一个 TextBox列表，那么这些字段将占用4 * 138 * 10 * 1000 ≈ 5.26M内存!在这一百多个属性中，最常用的也就是 Text 属性，这就意味着大多数内存都会被浪费掉。</p></blockquote><p>​        <code>用得着的就带上，用不着就不带，有必要的时候可以借别人的用一下。</code>        </p><p>​        其实，这就是 WPF 中依赖属性的原理。<strong>传统的.NET 开发中，一个对象所占用的内存空间在调用new操作符进行实例化的时候就已经决定了，而 WPF允许对象在被创建的时候并不包含用于存储数据的空间(即字段所占用的空间)、只保留在需要用到数据时能够获得默认值、借用其他对象数据或实时分配空间的能力</strong>——这种对象就称为依赖对象(Dependency Object)而它这种实时获取数据的能力则依靠依赖属性(Dependency Property)来实现。WPF开发中，必须使用依赖对象作为依赖属性的宿主，使二者结合起来，才能形成完整的Binding 目标被数据所驱动。<br>​        在WPF 系统中，依赖对象的概念被 <code>DependencyObject </code>类所实现，依赖属性的概念则由<code>DependencyProperty </code>类所实现。<strong>DependencyObject 具有 GetValue和 SetValue 两个方法</strong>:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DependencyObject</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DispatcherObject</span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token class-name">DependencyProperty</span> dp<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetValue</span><span class="token punctuation">(</span><span class="token class-name">DependencyProperty</span> dp<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​        这两个方法都以 DependencyProperty 对象为参数，GetValue 方法通过 DependencyProperty 对象获取数据；SetValue 通过DependencyProperty 对象存储值——正是这两个方法把 DependencyObjec 和 DependencyProperty 紧密结合在一起。</p></blockquote><p>​        DependencyObject 是 WPF 系统中相当底层的一个基类，下图是 DependencyObject 继承树：</p><p><img src="/images/DependencyProperty/image-20221209110625389.png"></p><p>​        从这颗继承树上可以看出，WPF 的所有 UI 控件都是依赖对象。WPF 的类库在设计时充分利用了依赖属性的优势，UI 控件的绝大多数属性都已经依赖化了。</p><h3 id="声明和使用依赖属性"><a href="#声明和使用依赖属性" class="headerlink" title="声明和使用依赖属性"></a>声明和使用依赖属性</h3><p>简单的实例，界面如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textBox1<span class="token punctuation">"</span></span> <span class="token attr-name">BorderBrush</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Black<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textBox2<span class="token punctuation">"</span></span> <span class="token attr-name">BorderBrush</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Black<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">Content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>OK<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">Click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Button_Click<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        前面已经说过，DependencyProperty 必须以 DependencyObject 为宿主、借助它的 SetValue 和 GetValue 方法进行写入与读取。<strong>因此，想使用自定义的 DependencyProperty，宿主一定是 DependencyObject 的派生类。</strong></p><p>DependencyProperty 实例的声明特点很鲜明：</p><ul><li>引用变量由 public static readonly 三个修饰符修饰</li><li>实例并非使用 new 操作符得到而是使用 DependencyProperty.Register 方法生成</li></ul><p>代码如下:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DependencyObject</span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">DependencyProperty</span> NameProperty <span class="token operator">=</span>        DependencyProperty<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        在这里，我们遇到一个命名约定——成员变量的名字需要加上 Property 后缀以表明它是一个依赖属性。我们打算用这个依赖属性存学生的名字，所有把它命名为 NameProperty。    </p><p>​        再次，这个成员变量所引用的实例并非使用 new 操作符得到，而是使用 DependencyProperty.Register 方法创建。现在使用的是这个方法参数最少、最简单的一个重载，让我们分析一下这3个参数：</p><ul><li>第1个参数为 string 类型，<strong>用这个参数来指明以哪个 CLR 属性作为这个依赖属性的包装器</strong>，或者说此依赖属性支持(back)的是哪个 CLR 属性。目前虽然没有为这个依赖属性准备包装器，但将来会使用名为 Name 的 CLR 属性来包装它，所以这个参数被赋值为 Name。</li><li>第2个参数用来<strong>指明此依赖属性用来存储什么类型的值</strong>，学生的姓名是 string 类型，所以是这个参数被赋值为 typeof(string)。</li><li>第3个参数用来<strong>指明此依赖属性的宿主是什么类型</strong>，或者说 DependencyProperty.Register 方法将把这个依赖属性注册关联到哪个类型上。本例中的意图是为 Student 类准备一个可依赖的名称属性，所以需要把 NameProperty 注册成与 Student 关联，因此这个参数被赋值为 typeof(Student)。</li></ul><blockquote><p>这里有三点需要注意：<br>(1) 依赖属性的包装器(Wrapper)是一个CLR属性，因为初学者头脑中“属性”的概念就是 CLR 属性，所以常常把包装器误认为是依赖属性，而实际上依赖属性就是那个由public static readonly修饰的 DependencyProperty实例，有没有包装器这个依赖属性都存在。<br>(2) 既然有没有包装器依赖属性都存在，那么包装器是干什么用的呢?包装器的作用是以“实例属性”的形式向外界暴露依赖属性，这样，一个依赖属性才能成为数据源的一个Path。<br>(3) 注册依赖属性时使用的第二个参数是一个数据类型，这个数据类型也是向装器的数据类型，它的全称应该是“依赖属性的注册类型”，但一般情况下也会把这个类型类型称为“依赖属性的类型”(严格地说，依赖属性的类型永远都是DependencyProperty，只是工作中叫习惯了)。</p></blockquote><p>尝试把这个依赖属性来存储值并把值顺利读取出来，UI 中 OK 按钮的 Click 事件处理器代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Button_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//调用 SetValue 方法把textBox1.Text属性存储进依赖属性</span>    stu<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>NameProperty<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用 GetValue 方法把值读取出来</span>    textBox2<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span>stu<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>NameProperty<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/DependencyProperty/image-20221209113528056.png"></p><p>​        我们知道一般情况下数据的来源是业务逻辑层的对象而目标是 UI 层的控件。在下面这个例子中，我们暂且倒过来，让 textBox1 作为数据来源，把 Student 实例作为数据的目标，让 Student 实例依赖在 textBox1 上。注意：这里仅仅是为了展示依赖属性的“依赖”功能，现实工作中几乎从来不这么做。<br>下面是窗口类的后台代码:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">MainWindow</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Window</span></span><span class="token punctuation">&#123;</span>    <span class="token class-name">Student</span> stu<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Binding</span> binding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"Text"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source <span class="token operator">=</span> textBox1 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        BindingOperations<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span> Student<span class="token punctuation">.</span>NameProperty<span class="token punctuation">,</span> binding<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Button_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>NameProperty<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        最核心的代码位于构造器的最后两行，先是创建一个 Binding 的实例，让 textBox1 作为数据源对象并从其 Text 属性中获取数据；其后一句是使用 BindingOperations 类的 SetBinding 方法指定将 Stu 对象借助刚刚声明的 Binding 实例依赖在 textBox1 上。</p><p>​        说实话，这个有点“学院派” 的例子并不怎么使用，但通过它我们要认清一个事实，那就是依赖属性即使没有 CLR 属性作为其外包装器也可以很好的工作。</p><p>运行结果如下</p><p><img src="/images/DependencyProperty/image-20221209114305800.png"></p><p>如果我想把 textBox1 和 textBox2 关联起来，代码是这样的：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Binding</span> binding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"Text"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source <span class="token operator">=</span> textBox1 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    BindingOperations<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span> Student<span class="token punctuation">.</span>NameProperty<span class="token punctuation">,</span> binding<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将textBox1 和 textBox2 关联起来</span>    textBox2<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> binding<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下</p><p><img src="/images/DependencyProperty/image-20221209133351078.png"></p><p>​        这里调用了 textBox2 的 SetBinding 方法，这比调用 BindingOperations 的 SetBinding 方法以第三人称的视角将数据的源与目标关联起来感觉要自然一些。如果你尝试调用 stu 对象的 SetBinding 方法，你会发现 stu 没有这个方法，<strong>因为 DependencyObject 类(Student类的基类)没有这个方法</strong>。<strong>SetBinding 方法是FrameworkElement 类的方法</strong>。FrameworkElement 是个相当高层的类，甚至比UlElement类的层级还高——这从侧面向我们传递了这样一个思想——<strong>微软希望能够 SetBinding(即作为数据目标)的对象是UI元素</strong>。其实，FrameworkElement 类的 SetBinding方法并不神秘，仅仅对 BindingOperations 的 SetBinding 方法做了一个简单的封装，代码如下:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FrameworkElement</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">UIElement</span></span> <span class="token comment">//...还有很多接口</span><span class="token punctuation">&#123;</span><span class="token comment">// ...</span>    <span class="token keyword">public</span> <span class="token return-type class-name">BindingExpressionBase</span> <span class="token function">SetBinding</span><span class="token punctuation">(</span><span class="token class-name">DependencyProperty</span> dp<span class="token punctuation">,</span> <span class="token class-name">BindingBase</span> binding<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span><span class="token keyword">return</span> BindingOperations<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>dp<span class="token punctuation">,</span>binding<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">///...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看完上面几个例子，相信大家已经理解了依赖属性的使用方法。但<strong>现在我们使用的依赖属性依靠 SetValue 和 GetValue 两个方法进行对外界的暴露</strong>，而且在使用 GetValue 的时候还需要进行一次数据类型的转换。</p><p>因此，大多数情况下我们会为依赖属性<strong>添加一个CRL属性外包装</strong>:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DependencyObject</span></span> <span class="token punctuation">&#123;</span>       <span class="token comment">//CLR 属性包装器</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name     <span class="token punctuation">&#123;</span>        <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token function">GetValue</span><span class="token punctuation">(</span>NameProperty<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">set</span> <span class="token punctuation">&#123;</span> <span class="token function">SetValue</span><span class="token punctuation">(</span>NameProperty<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">DependencyProperty</span> NameProperty <span class="token operator">=</span>        DependencyProperty<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有了这个属性包装器，我们就可以这样访问依赖属性了：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">     <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Button_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span><span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         stu<span class="token punctuation">.</span>Name <span class="token operator">=</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Text<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>textBox2<span class="token punctuation">.</span>Text <span class="token operator">=</span> stu<span class="token punctuation">.</span>Name<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        现在，我们为依赖对象的依赖属性添加了 CLR 属性包装，有了这个包装，就相当于为依赖对象准备了用于暴露数据的 Binding Path，也就是说，<strong>现在的依赖对象已经具备了扮演数据源和数据目标双重角色的能力</strong>。值得注意的是，尽管 Student 类没有实现 INotifyPropertyChanged 接口，当属性的值发生改变时与之关联的 Binding 对象依然可以得到通知，依赖属性默认带有这样的功能，天生就是合格的数据源。</p><p>​        向 FrameworkElement 类借用 SetBinding 方法升级 Student 类：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DependencyObject</span></span> <span class="token punctuation">&#123;</span>       <span class="token comment">//CLR 属性包装器</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name     <span class="token punctuation">&#123;</span>        <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token function">GetValue</span><span class="token punctuation">(</span>NameProperty<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">set</span> <span class="token punctuation">&#123;</span> <span class="token function">SetValue</span><span class="token punctuation">(</span>NameProperty<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//依赖属性</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">DependencyProperty</span> NameProperty <span class="token operator">=</span>        DependencyProperty<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//SetBinding 包装</span>    <span class="token keyword">public</span> <span class="token return-type class-name">BindingExpressionBase</span> <span class="token function">SetBinding</span><span class="token punctuation">(</span><span class="token class-name">DependencyProperty</span> dp<span class="token punctuation">,</span><span class="token class-name">BindingBase</span> binding<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> BindingOperations<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> dp<span class="token punctuation">,</span> binding<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        然后，我们使用 Binding 把 Student 对象关联到 textBox1 上， 再把 textBox2 关联到 Student 对象上形参 Binding 链：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stu<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>NameProperty<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"Text"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source <span class="token operator">=</span> textBox1 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    textBox2<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source <span class="token operator">=</span> stu <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        运行效果就是，当在 textBox1 中输入字符的时候，textBox2 也会同步显式。</p><blockquote><p>​        最后，向大家介绍一个小技巧，<strong>在一个类中声明依赖属性时并不需要手动进行声明、注册并使用 CLR 属性封装，只需要输入propdp，连按两次Tab键，一个标准的依赖属性(带CLR属性包装)就声明好了</strong>，继续按动 Tab 键，可以在提示环境中修改依赖属性的各个参数。这个功能称为snippet(称为代码模板或代码片断)是Visual Studio所有非简化版本自带的功能，多多掌握这个功能可以极大地提高编码速度并降低错误率。</p></blockquote><p>​        由snippet 自动生成的代码中，DependencyProperty.Register 使用的是带<strong>4个参数的重载</strong>，前3个参数与我们前面介绍的一致，第4个参数的类型是 PropertyMetadata 类。第4个参数的作用是给依赖属性的 DefaultMetadata 属性赋值。顾名思义，DefaultMetadata 的作用是向依赖属性的调用者提供一些基本信息，这些信息包括：</p><ul><li>CoerceValueCallback：依赖属性值被强制改变时此委托会被调用，此委托可关联一个影响函数。</li><li>DefaultValue：依赖属性未被显式赋值时，若读取之则获得此默认值，不设此值会抛出异常。</li><li>IsSealed：控制 PropertyMetadata的属性值是否可以更改，默认值为 true。</li><li>PropertyChangedCallback：依赖属性的值被改变之后此委托会被调用，此委托可关联一个影响函数。</li></ul><blockquote><p>​        需要注意的是，依赖属性的 DefaultMetadata 只能通过 Register 方法的第4个参数进行赋值，而且一旦赋值就不能改变(DefaultMetadata 是个只读属性)。如果想用新的PropertyMetadata 替换这个默认的 Metadata，需要使用DependencvProperty.OverrideMetadata 方法。</p></blockquote><h3 id="依赖属性值存取的秘密"><a href="#依赖属性值存取的秘密" class="headerlink" title="依赖属性值存取的秘密"></a>依赖属性值存取的秘密</h3><p>​        因为依赖对象的依赖属性是一个 static对象，所以值不可能保存在这个对象里。显然，WPF 有一套机制来存取依赖属性的值。</p><h4 id="DependencyProperty-Register-方法"><a href="#DependencyProperty-Register-方法" class="headerlink" title="DependencyProperty.Register 方法"></a>DependencyProperty.Register 方法</h4><p>​        这个方法不仅要创建 DependencyProperty 实例，还要对它进行“注册”，那么DependencyProperty 实例被注册到哪了呢？</p><p>​        阅读源码，你会发现 DependencyProperty 类具有这样一个成员：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Hashtable</span> PropertyFromName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        显然，一旦程序运行，就会有这样一个全局的 Hashtable 存在，这个 Hashtable 就是用来注册 DepencyProperty 实例的地方。</p><p>​        在源码中，所有的 DependencyProperty.Register 方法重载最后都归结对 DependencyProperty.RegisterCommon 方法的调用（可以把 RegisterCommon 理解为 Register 方法的 ”完整版“）。</p><p>RegisterCommon 方法的原型如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">DependencyProperty</span> RegisterCommon<span class="token punctuation">&#123;</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span>    <span class="token class-name">Type</span> propertyType<span class="token punctuation">,</span>    <span class="token class-name">Type</span> ownerType<span class="token punctuation">,</span>    <span class="token class-name">PropertyMetadata</span> defaultMetadata<span class="token punctuation">,</span>    Validate ValueCallBack validate ValueCallback<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        可以看出，RegisterCommon 方法的前面四个参数与我们之前分析的 Register 方法一致。</p><p>​        在刚刚进入方法的时候你会看到这样一句：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">FromNameKey</span> key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FromNameKey</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> ownerType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//FromNameKey 是.NET Framework 内部数据类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        FromNameKey 的构造器代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token function">FromNameKey</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name">Type</span> ownerType<span class="token punctuation">)</span>           <span class="token punctuation">&#123;</span>               _name <span class="token operator">=</span> name<span class="token punctuation">;</span>               _ownerType <span class="token operator">=</span> ownerType<span class="token punctuation">;</span>               _hashCode <span class="token operator">=</span> <span class="token punctuation">(</span>_name<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> _ownerType<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且 override 有其 GetHashCode 方法：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> _hashCode<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        代码的意图一目了然：<strong>FromNameKey 对象(也就是变量key)的 hashcode 实际上是 RegisterCommon 第1个参数(CLR属性名字符串)的 hashcode 与第3个参数(宿主类型)的 hashcode 做异或运算得来的。这样操作，每对“CLR属性名一宿主类型”所决定的 DependencyProperty 实例就是唯一的。</strong>所以，在 RegisterCommon 方法里会发现这样的代码:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">if</span> <span class="token punctuation">(</span>PropertyFromName<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">&#123;</span>                  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentException</span><span class="token punctuation">(</span>SR<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"PropertyAlreadyRegistered"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> ownerType<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        如果你尝试使用同一个 CLR属性名字和同一个宿主类型进行注册，程序就会抛出异常。</p><p>​        接下来，RegisterCommon 检查程序员是否提供了 PropertyMetadate，如果没有提供则为之准备个默认的 PropertyMetadate 实例。当所有“原料”都准备妥当、没有问题后，DependencyProperty的实例被创建出来：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">DependencyProperty</span> dependencyProperty <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DependencyProperty</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> propertyType<span class="token punctuation">,</span> ownerType<span class="token punctuation">,</span> defaultMetadata<span class="token punctuation">,</span> validateValueCallback<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并且被注册进 Hashtable 中（Hashtable 会自动调用 key 的 GetHashcode 方法获取 其 Hash code）：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">PropertyFromName<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> dependencyProperty<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        读到这里，我们可以用一句话概括 DependencvPropertv 对象的创建与注册，那就是：<strong>创建一个DependencyProperty 实例并用它的CLR属性名和宿主类型名生成 hash code，最后把 hash code 和 DependencyProperty 实例作为 Key-Value 对存入全局的、名为 PropertyFromName的 Hashtable 中</strong>。这样，WFP 属性系统通过 CLR 属性名和宿主类型名就可以从这个全局的 Hashtable 中检索出对应的 DependencyProperty 实例。</p><p>​        最后，生成的 DependencyProperty 实例被当作返回值交还：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">return</span> dependencyProperty<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>​        有一点需要注意：把 DependencyProperty 实例注册进全局 Hashtable 时使用的 key 由 CLR属性名哈希值和宿主类型哈希值经过运算得到，但这并<strong>不是 DependencyProperty 实例的哈希值</strong>，每个 DependencyProperty 实例都具有一个名为Globallndex的 int 类型属性，GlobalIndex的值是经过一些算法处理得到的，确保了每个 DependencyProperty 实例的 Globallndex 是唯一的。</p></blockquote><p>​        至此，一个 DependencyProperty 实例已经被创建并注册进一个全局的 Hashtable 中，下面就要使用 DependencyObject 的SetValue 和 GetValue 借助这个 DependencyProperty 实例保存和读取值了。<br>​        我们先来看相对比较简单的 GetValue 方法，它的代码如下:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token class-name">DependencyProperty</span> dp<span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           <span class="token function">VerifyAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>dp <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>           <span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token string">"dp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">return</span> <span class="token function">GetValueEntry</span><span class="token punctuation">(</span>               <span class="token function">LookupEntry</span><span class="token punctuation">(</span>dp<span class="token punctuation">.</span>GlobalIndex<span class="token punctuation">)</span><span class="token punctuation">,</span>                dp<span class="token punctuation">,</span>                <span class="token keyword">null</span><span class="token punctuation">,</span>               RequestFlags<span class="token punctuation">.</span>FullyResolved<span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        方法的其实若干行均是为了检验传入参数的有效性，只有return一句才是核心内容。这句代码的函数嵌套比较深，把它展开可以写成这样：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">EntryIndex</span> entryIndex <span class="token operator">=</span> <span class="token function">LockupEntry</span><span class="token punctuation">(</span>dp<span class="token punctuation">.</span>GloballIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">EffectiveValueEntry</span> valueEntry <span class="token operator">=</span> <span class="token function">GetValueEntry</span><span class="token punctuation">(</span>entryIndex<span class="token punctuation">,</span> dp <span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> RequestFlags<span class="token punctuation">.</span>FullyResolved<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> valueEntry<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        <strong>WPF 的依赖属性系统在存放值的时候会把每个有效值存放在一个EffectiveValueEntry 类的实例</strong>，检索算法只要找到这个入口、走进入口就能拿到依赖属性的值。EffectiveValueEntry 的所有构造器都包含一个DependencyProperty 类型的参数，换句话说，每个EffectiveValueEntry都关联着一个DependencyProperty。EffectiveValueEntry 类具有一个名为 PropertyIndex 的属性，这个属性的值实际上就是与之关联的 DependencyProperty 的 GlobalIndex 属性值(这个值的由来我们在前面已经详细讨论过)。</p><p>​        在 DependencyObject 类的源码中可以找到这样一个成员变量：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token class-name">EffectiveValueEntry<span class="token punctuation">[</span><span class="token punctuation">]</span></span> _effectiveValues<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        这个数组依每个成员的 PropertyIndex 属性值进行排序，对这个数组的操作(如插入、删除和排序等)由专门的算法来完成。正是这个数组向我们提示了<strong>依赖属性存储值的秘密——每个 DependencyObject 实例都自带一个 EffectiveValueEntry 类型数组(你可以把它理解为一排可以随时扩建的“小房间”)，当某个依赖属性的值要被读取时，算法就会从这个数组中去检索值，如果数组中没有包含这个值，算法会返回依赖属性的默认值</strong>(这个值由依赖属性的 DefaultMetadata 来提供)。</p><p>​        至此，我们明白了一件事情，那就是<strong>被 static 关键字所修饰的依赖属性对象其作用是用来检索真正的属性值而不是存储值；被用做检索键值的实际上是依赖属性的GlobalIndex属性</strong>(本质是其 hash code，而hash code又由其CLR包装器名和宿主类型名共同决定)，为了保证 GlobalIndex 属性值的稳定性，我们声明的时候又使用了 readonly 关键字进行修饰。</p><p>​        <strong>WPF对依赖属性值的读取的优先级，由先到后：</strong></p><ol><li>WPF 属性系统强制值。</li><li>由动画过程控制的值。</li><li>本地变量值(存储在EffectiveValueEntry数组中)。</li><li>由上级元素的 Template 设置的值。</li><li>由隐式样式(Implicit Style)设置的值。</li><li>由样式之触发器(Style Trigger)设置的值。</li><li>由模板之触发器(Template Trigger)设置的值。</li><li>由样式之设置器(Style Setter)设置的值。</li><li>由默认样式(Default Style)设置的值，默认模式其实就是由主题(Theme)指定的模式。</li><li>由上级元素继承而来的值。</li><li>默认值，来源于依赖属性的元数据(metadata)。</li></ol><p>​        <strong>理解了 GetValue 方法，SetValue方法也不再神秘。</strong><br>​        进入这个方法后，首先验证依赖属性的值是否可以被改变，如果不能则抛出异常，如果可以就进入后面的赋值流程。赋值流程也很简单，主要有这样几个操作:</p><ul><li>检查值是不是 DependencyProperty.UnsetValue，如果是，说明调用者的意图是清空现有的值。此时程序会调用 ClearValueCommon 方法来清空现有的值。</li><li>检查 EffectiveValueEntry 数组中是否已经存在相应依赖属性的位置,如果有则把旧值改写为新值，如果没有则新建 EffectiveValueEntry 对象并存储新值。这样，只有被用到的值才会被放进这个列表，借此，WPF 系统用算法(时间)换取了对内存(空间)的节省。</li><li>调用 UpdateEffectiveValue 对新值做一些相应处理。</li></ul><h2 id="附加属性（-Attached-Properties-）"><a href="#附加属性（-Attached-Properties-）" class="headerlink" title="附加属性（ Attached Properties ）"></a>附加属性（ Attached Properties ）</h2><p>​        一个属性本来不属于某个对象，但由于某种需求而被后来附加上。也就是把一个对象放入一个特定环境后对象才具有的属性（表示出来就是被环境赋予的属性）就称为<strong>附加属性</strong>。</p><p>​        实际开发过程中我们经常遇到这样的情况，比如有一个名为 Human 的类， 它有可能被与学校相关的工作流用到(记录它的专业、班级、年级)，也有可能被与公司相关的工作流用到(记录它的部门、项目)。如果把它们写在一起显然是不合适的，因为如果某些 Human 类型的实例只用于与公司相关的流程，那么其 Majorld、ClassId、GradeId 属性所占用的内存就被浪费了。</p><p>​        <strong>附加属性的作用就是将属性与数据类型（宿主）解耦，让数据类型的设计更加灵活。</strong></p><p>​        <strong>附加属性的本质就是依赖属性，二者仅在注册和包装器上有一点区别</strong>。前面说过，用于<code>快速创建依赖属性</code>的snippet是<code>propdp</code>，现在我们要使用另一个snippet是<code>propa</code>，这个snippet用于<code>快速创建附加属性</code>。</p><p>​        以人在学校里会获得年级和班级两个属性为例，我们来体验自定义附加属性。人放在学校里会获得年级和班级两个属性说明年级和班级两个属性是由学校附加给人的，因此，这两个属性的真实所有者(宿主)应该是学校。我们准备一个名为 School 的类，并让它继承DependencyObject 类，然后把光标定位于类体中(花括号之间)，输入propa，当代码提示列表高亮显示时连按两下 Tab 键，一个附加属性的框架就准备好了。继续按动 Tab 键可以在几个空缺间轮换并修改，直至按下 Enter 键。</p><p>​        下面就是一个做好“完形填空“的附加属性：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">School</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">DependencyObject</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetGrade</span><span class="token punctuation">(</span><span class="token class-name">DependencyObject</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>GradeProperty<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetGrade</span><span class="token punctuation">(</span><span class="token class-name">DependencyObject</span> obj<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        obj<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>GradeProperty<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Using a DependencyProperty as the backing store for Grade.  This enables animation, styling, binding, etc...</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">DependencyProperty</span> GradeProperty <span class="token operator">=</span>        DependencyProperty<span class="token punctuation">.</span><span class="token function">RegisterAttached</span><span class="token punctuation">(</span><span class="token string">"Grade"</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">School</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PropertyMetadata</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        可以很明显地看出，<strong>GradeProperty 就是一个 DependencyProperty 类型成员变量，声明时一样使用 public static readonly 三个关键字共同修饰</strong>。唯一的不同就是<strong>注册附加属性使用的是名为 RegisterAttached 的方法</strong>，但参数却与使用 Register 方法无异。附加属性的包装器也与依赖属性不同——依赖属性使用 CLR 属性对 GetValue 和 SetValue 两个方法进行包装，附加属性则使用两个方法分别进行包装——这样做完全是为了在使用的时候保持语句行文上的通畅。</p><p>​        如何消费 School 的 GradeProperty呢？准备一个派生自DependencyObject 的 Human 类：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Human</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DependencyObject</span></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        在 UI 上准备一个 Button并把下面的代码作为其 Click 时间的处理器：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Button_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Human</span> human <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Human</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    School<span class="token punctuation">.</span><span class="token function">SetGrade</span><span class="token punctuation">(</span>human<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">int</span></span> grade <span class="token operator">=</span> School<span class="token punctuation">.</span><span class="token function">GetGrade</span><span class="token punctuation">(</span>human<span class="token punctuation">)</span><span class="token punctuation">;</span>    MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>grade<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        剖析源码，你会发现这一过程与前面依赖属性保存值的过程别无二致——值仍然被保存在 Human 实例的EffectiveValueEntry 数组里，只是用于在数组里检索值的依赖属性(即附加属性)并不以 Human 类为宿主而是寄宿在 School 类里，可那又有什么关系呢——反正 CLR 属性名和宿主类型名只用来生成 hash code 和 GloballIndex。</p><p>运行效果如下：<br><img src="/images/DependencyProperty/image-20221210192658873.png"></p><p>​        <strong>附加属性的本质是依赖属性——附加属性也可以使用 Binding 依赖在其他对象的数据上。</strong></p><p>下面这个例子：窗体使用 Canvas 布局，两个 Slider 用来控制举行在 Canvas 中的横纵坐标。</p><p>XAML代码如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Canvas</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Slider</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sliderX<span class="token punctuation">"</span></span> <span class="token attr-name">Canvas.Top</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">Canvas.Left</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>260<span class="token punctuation">"</span></span>            <span class="token attr-name">Minimum</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">Maximum</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Slider</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sliderY<span class="token punctuation">"</span></span> <span class="token attr-name">Canvas.Top</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40<span class="token punctuation">"</span></span> <span class="token attr-name">Canvas.Left</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>260<span class="token punctuation">"</span></span>            <span class="token attr-name">Minimum</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">Maximum</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Rectangle</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rect<span class="token punctuation">"</span></span> <span class="token attr-name">Fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Blue<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span>               <span class="token attr-name">Canvas.Left</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding ElementName=sliderX,Path=Value&#125;<span class="token punctuation">"</span></span>               <span class="token attr-name">Canvas.Top</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding ElementName=sliderY,Path=Value&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Canvas</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置 Binding 的等效C#代码如下：</p><pre class="line-numbers language-none"><code class="language-none">this.rect.SetBinding(Canvas.LeftProperty, new Binding(&quot;Value&quot;) &#123; Source &#x3D; sliderX &#125;);           this.rect.SetBinding(Canvas.TopProperty, new Binding(&quot;Value&quot;) &#123; Source &#x3D; sliderY &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>《深入浅出WPF》刘铁猛</li><li> <a href="https://www.cnblogs.com/Zhouyongh/archive/2009/09/10/1564099.html">一站式WPF–依赖属性（DependencyProperty）一</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> .NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WPF </tag>
            
            <tag> 深入浅出WPF </tag>
            
            <tag> Dependency Property </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binding</title>
      <link href="/2022/11/18/Binding/"/>
      <url>/2022/11/18/Binding/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>根据猛哥《深入浅出WPF》第六章深入浅出话Binding做的笔记</p><h2 id="Data-Binding-在WPF中的位置"><a href="#Data-Binding-在WPF中的位置" class="headerlink" title="Data Binding 在WPF中的位置"></a>Data Binding 在WPF中的位置</h2><p><strong>一般情况下，应用程序会具有三层结构：</strong></p><ul><li>数据存储层<ul><li>存储层相当于一个城市的<strong>仓储区</strong></li><li>由数据库和文件系统构成</li></ul></li><li>数据处理层(逻辑层)<ul><li>这一层相当于城市的<strong>工业区</strong></li><li>与业务逻辑相关、用于加工处理数据的算法都集中在这里</li></ul></li><li>数据展示层<ul><li>这一层相当于城市的<strong>港口区</strong></li><li>把加工后的数据通过可视的界面展示给用户或者通过其他种类的接口展示给别的应用程序(界面和接口两个词在英文中均为Interface，所以本质上没有什么区别)</li><li>收集用户的操作、把它们反馈给逻辑层</li></ul></li></ul><p><strong>程序的本质是数据加算法</strong>。数据会在存储、逻辑和展示三个层流通，所以站在数据的角度上来看，这三层都很重要。但算法在程序中的分布就不均匀了，对于一个三层结构的程序来说，算法一般分布在这几处：</p><ol><li><p>数据库内部。</p></li><li><p>读取和写回数据。</p></li><li><p>业务逻辑。</p></li><li><p>数据展示。</p></li><li><p>页面与逻辑的交互。</p></li></ol><ul><li><strong>1和2</strong>两个部分的算法一般都非常<strong>稳定</strong>，不会轻易去改动，复用性也很高</li><li><strong>3</strong>处于客户需求关系最紧密、最复杂，变动也最大，大多数算法都集中在这里</li><li><strong>4和5</strong>两层负责UI与逻辑交互，也占有一定量的算法</li></ul><p><strong>显然，3部分是程序的核心、是开发的重中之重，所以我们应该把精力集中在3部分</strong>。然而4、5部分却经常成为麻烦的来源。首先，这两部分都与逻辑层紧密相关，一不小心就有可能把本来该放在逻辑层里的算法写进这两部分；其次，这两部分以消息或事件的方式与逻辑层沟通，一旦出现同一数据需要在多处展示/修改时，用于同步的代码就会错综复杂；最后4和5本应是互逆的一对儿，但是却需要分开来写——显示数据写一个算法、修改数据又是一个算法。总之导致的结果就是4和5两部分会占去一部分算法，搞不好还会牵扯不少精力。</p><p>问题的根源就在于逻辑层与表示层的地位不固定——当实现客户需求的时候，逻辑层的确处在中心地位，但到了实现UI交互的时候展示层又处在中心地位。WPF作为一种专门的展示层技术，华丽的外观和动画只是它的表层现象，更重要的是在深层次上帮助程序员把思维的重心固定在了逻辑层、让展示层永远处于逻辑层的从属地位。WPF具有这种能力的关键是它引入了Data Binding概念以及与之配套的Dependency Property系统和Data Template。</p><p>展示层使用WPF类库实现，而展示层与逻辑层的沟通就使用Data Binding来实现。可见Data Binding在WPF系统中起到的是数据高速公路的作用。</p><p>引入Data Binding机制后，4、5两个部分会简化很多。首先、数据在逻辑层与用户界面之间“直来直去”、不涉及逻辑问题，这样用户界面部分几乎不包含算法；Data Binding本身就是双向通信，所以相当于把4、5合二为一；对于多个UI元素关注同一个数据的情况，只需要使用Data Binding把这些UI元素一一与数据关联上，当数据变化后这些UI元素会同步显示这一变化。经过这样的优化，所有与业务逻辑相关的算法都处在数据逻辑层，逻辑层成为一个能够独立运转的、完整的体系，而用户界面则不包含任何代码、完全依赖和从属数据逻辑层。</p><h2 id="Binding-基础"><a href="#Binding-基础" class="headerlink" title="Binding 基础"></a>Binding 基础</h2><p>如果把Binding比作数据的桥梁，那么它的两端分别是<code>Binding</code>的源（<code>Source</code>）和目标（<code>Target</code>）。<strong>一般情况下，Binding源是逻辑层的对象，Binding目标是UI层的控件对象</strong>，这样，数据就会源源不断通过<code>Binding</code>送达UI层、被UI层展现，也就完成了数据驱动UI的过程。</p><p>UI上的元素关心的属性被称为 <strong>Binding的路径(Path)</strong> 。</p><p><code>Binding</code>是一种<strong>自动机制</strong>，当值变化后属性要有能力通知<code>Binding</code>，让<code>Binding</code>把变化传递给UI元素，让一个属性具备这种通知<code>Binding</code>值已经变化的能力的方法是让作为数据源的类实现<code>System.ComponentModel</code>命名空间中的<code>INotifyPropertyChangeed</code>接口。当为<code>Binding</code>设置了数据源后，<code>Binding</code>就会自动侦听来自这个接口的<code>PropertyChanged</code>事件</p><p>首先准备一个实现了<code>INotifyPropertyChanged</code>接口的<code>Student</code>类</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>ComponentModel</span><span class="token punctuation">;</span><span class="token comment">//引用类库</span><span class="token keyword">namespace</span> <span class="token namespace">BindingExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">INotifyPropertyChanged</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">PropertyChangedEventHandler</span> PropertyChanged<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name        <span class="token punctuation">&#123;</span>            <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>            <span class="token keyword">set</span>            <span class="token punctuation">&#123;</span>                name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>                <span class="token comment">//激发事件</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PropertyChanged <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>PropertyChanged<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PropertyChangedEventArgs</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>WPF的XAML代码如下，创建了一个<code>TextBox</code>和<code>Button</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Window</span> <span class="token attr-name"><span class="token namespace">x:</span>Class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BindingExample.MainWindow<span class="token punctuation">"</span></span>        <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml/presentation<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/expression/blend/2008<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>mc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.openxmlformats.org/markup-compatibility/2006<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>local</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clr-namespace:BindingExample<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">mc:</span>Ignorable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span>        <span class="token attr-name">Title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MainWindow<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>450<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textBoxName<span class="token punctuation">"</span></span> <span class="token attr-name">BorderBrush</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Black<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>250,167,250,218<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">Content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Add Age<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>250,244,250,141<span class="token punctuation">"</span></span> <span class="token attr-name">Click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Button_Click<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Window</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用Binding把数据源和UI元素连接起来</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">namespace</span> <span class="token namespace">BindingExample</span><span class="token punctuation">&#123;</span>    <span class="token comment">/// &lt;summary></span>    <span class="token comment">/// Interaction logic for MainWindow.xaml</span>    <span class="token comment">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">MainWindow</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Window</span></span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> stu<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//准备数据源</span>            stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//准备 Binding</span>            <span class="token class-name">Binding</span> binding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//binding的数据源为stu引用的对象</span>            binding<span class="token punctuation">.</span>Source <span class="token operator">=</span> stu<span class="token punctuation">;</span>            <span class="token comment">//为binding指定访问路径，stu的Name属性</span>            binding<span class="token punctuation">.</span>Path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PropertyPath</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//使用 binding 连接数据源与 Binding 目标</span>            BindingOperations<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>textBoxName<span class="token punctuation">,</span> TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> binding<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Button_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            stu<span class="token punctuation">.</span>Name <span class="token operator">+=</span> <span class="token string">"Name"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下</p><p><img src="/images/Binding/image-20221118144045742.png"></p><p><code>BindingOperations.SetBinding(this.textBoxName, TextBox.TextProperty, binding);</code></p><p>把数据源和目标连接在一起的任务是用<code>BindingOperations.SetBinding()</code>方法完成的。这个方法的三个参数是我们记忆的重点</p><ol><li><p>第一个参数用于指定<code>Binding</code>的目标</p></li><li><p>第二个参数用于为<code>Binding</code>指明把数据送达目标的哪个属性。</p><blockquote><p>只是你会发现这里用的不是对象的属性而是类的一个静态只读的<code>DependencyProperty </code>类型成员变量！这就是我们后面要详细讲述的与<code>Binding</code>息息相关的依赖属性。其实很好理解，种类属性的值可以通过<code>Binding</code>依赖在其他对象的属性值上，被其他对象的属性值所驱动</p></blockquote></li><li><p>第三个参数指定使用哪个<code>Binding</code>实例将数据源与目标关联起来</p></li></ol><p>借助Binding类的构造器及C#3.0的对象初始化器语法简化上述代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>textBoxName<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source <span class="token operator">=</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//三合一操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过上述例子，我们可以建立一个如下的模型</p><p><img src="/images/Binding/20190808120834139.png"></p><h2 id="Binding的源与路径"><a href="#Binding的源与路径" class="headerlink" title="Binding的源与路径"></a>Binding的源与路径</h2><p>​        只要它是一个对象，并行通过属性（Property）公开自己的数据，它就能作为Binding的<font color="red"><b>源</b></font>。</p><p>​        如果想让作为<code>Binding</code>源的对象具有自动通知<code>Binding</code>属性已改变的能力，就需要让类实现<code>INotifyPropertyChanged</code>接口并在熟悉的<code>set</code>语句中激发<code>PropertyChanged</code>事件。</p><p>​       除了使用对象作为数据源外，还可以有更多的选择，例如<code>控件自己</code>或<code>自己的容器</code>或<code>子集元素</code>、把集合作为ItemsControl的数据源、使用XML作为TreeView或Menu的数据源、把多个控件关联到一个“数据制高点”上、甚至干脆不给Binding指定数据源，让它自己去找。</p><h3 id="把控件作为Binding源于Binding标记扩展"><a href="#把控件作为Binding源于Binding标记扩展" class="headerlink" title="把控件作为Binding源于Binding标记扩展"></a>把控件作为Binding源于Binding标记扩展</h3><p>控件自己就是源的情况如下</p><p>TextBox的Text属性关联在了Slider的Value属性上</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Window</span> <span class="token attr-name"><span class="token namespace">x:</span>Class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_6._3._2.MainWindow<span class="token punctuation">"</span></span>        <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml/presentation<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/expression/blend/2008<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>mc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.openxmlformats.org/markup-compatibility/2006<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>local</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clr-namespace:_6._3._2<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">mc:</span>Ignorable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span>        <span class="token attr-name">Title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MainWindow<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>450<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textBox1<span class="token punctuation">"</span></span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Path=Value,ElementName=slider1&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">BorderBrush</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Black<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Slider</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slider1<span class="token punctuation">"</span></span> <span class="token attr-name">Maximum</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">Minimum</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Window</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下</p><p><img src="/images/Binding/image-20221120201839882.png"></p><p>回头看这句XAML代码，它使用了Binding标记扩展语法</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textBox1<span class="token punctuation">"</span></span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Path=Value,ElementName=slider1&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">BorderBrush</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Black<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与之等价C#代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"Value"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ElementName <span class="token operator">=</span> <span class="token string">"slider1"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为Binding类的构造器本身可以接受Path作为参数，所以<code>Path=</code>可以省略</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textBox1<span class="token punctuation">"</span></span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Value,ElementName=slider1&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">BorderBrush</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Black<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>​        因为在C#代码中我们可以直接访问控件对象，所以一般也不会使用Binding的ElementName属性，而是直接把对象赋值给Binding的Source属性</p></blockquote><blockquote><p>wpf数据绑定Source和ElementName的区别</p></blockquote><ul><li>Source 用于指定数据源为后台数据对象、集合<ul><li>例如<code>Source = stu = new Student()</code></li></ul></li><li>ElementName 用于指定“数据源”为界面上某个控件的某个属性</li></ul><h3 id="控制Binding的方向及数据更新"><a href="#控制Binding的方向及数据更新" class="headerlink" title="控制Binding的方向及数据更新"></a>控制Binding的方向及数据更新</h3><p>​        Binding模式可以支持<strong>源向目标</strong>或者<strong>目标向源</strong>的单向沟通以及只在Binding关系确立时读取一次数据。</p><p>​        控制Binding数据流向的属性是Mode，它的类型是BindingMode枚举。</p><p>​        BindingMode类型的枚举值：TwoWay、OneWay、OnTime、OneWayToSource和Default。　 　 </p><ul><li>TwoWay  源↔目标  无论是目标属性还是源属性，只要发生了更改，TwoWay 就会更新目标属性或源属性。</li><li>OneWay  源→目标  仅当源属性发生更改时更新目标属性。</li><li>OneTime 仅当应用程序启动时或 DataContext 进行更改时更新目标属性。</li><li>OneWayToSource  目标→源  在目标属性更改时更新源属性。</li><li>Default 使用目标属性的默认 Mode 值。（这里的Default指的是Binding的模式会根据目标是实际情况来确定，如果是可以编辑的（TextBox的Text属性），Default就采用双向模式。如果是TextBlock，不可编辑，就使用单向模式。）</li></ul><p>以上内容转自<a href="https://cloud.tencent.com/developer/article/1793723">https://cloud.tencent.com/developer/article/1793723</a></p><p>上述Slider示例中，在TextBox输入一个值，然后按Tab键（TextBox丢失焦点），Slider的手柄会自动跳到相应的位置。</p><p>例如输入66</p><p><img src="/images/Binding/image-20221120204527390.png"></p><p><strong>为什么一定要TextBox失去焦点后Slider的值才变呢？</strong></p><ul><li>UpdateSourceTrigger：属性控制值改变时机。默认值为Default，行为与LostFocus一致。</li><li>枚举值PropertyChanged、LostFocus、Explicit和Default<ul><li>Explicit，源不会更新除非你手动来操作</li><li>LostFocus，一旦目标控件失去焦点，源就会被更新。</li><li>PropertyChanged，一旦绑定的属性值改变，源会立即更新。</li></ul></li></ul><blockquote><p>​        顺便提一句，Binding还具有NotifyOnSourceUpdated和NotifyOnTargetUpdate两个bool类型的属性，如果设为true，则当源或目标被更新后Binding会激发相应的SourceUpdated事件和TargetUpdated事件，实际工作中，我们可以通过监听这两个事件找出有哪些数据或控件被更新了。</p></blockquote><h3 id="Binding的路径（Path）"><a href="#Binding的路径（Path）" class="headerlink" title="Binding的路径（Path）"></a>Binding的路径（Path）</h3><ul><li><p>Path就是Binding需要关注属性的值。前面例子是把<strong>Slider控件当做源，它的Value作为路径</strong></p></li><li><p>Path的实际类型是<code>PropertyPath</code></p></li></ul><p>例如上面的代码中XAML的代码为<code>Path=Value</code>，实际上<code>Path=</code>可以省略</p><p>等效的C#代码是<code>Path=new PropertyPath(&quot;Value&quot;)</code>或者<code>new Binding(&quot;Value&quot;)</code></p><ul><li>Binding还支持多级路径。</li></ul><p>我们想让一个TextBox显示另外一个TextBox的文本长度</p><pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;StackPanel&gt;        &lt;TextBox x:Name&#x3D;&quot;textBox1&quot; BorderBrush&#x3D;&quot;Black&quot; Margin&#x3D;&quot;5&quot;&#x2F;&gt;        &lt;TextBox x:Name&#x3D;&quot;textBox2&quot; Text&#x3D;&quot;&#123;Binding Path&#x3D;Text.Length,ElementName&#x3D;textBox1,Mode&#x3D;OneWay&#125;&quot; BorderBrush&#x3D;&quot;Black&quot; Margin&#x3D;&quot;5&quot;&#x2F;&gt;    &lt;&#x2F;StackPanel&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>其中Mode是用于控制Binding数据流向，OneWay  源→目标  仅当源属性发生更改时更新目标属性。</p></blockquote><p>等价的C#代码是</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>textBox2<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"Text.Length"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">,</span>Mode<span class="token operator">=</span>BindingMode<span class="token punctuation">.</span>OneWay<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行效果如下</p><p><img src="/images/Binding/image-20221120212611890.png"></p><p>集合类型的索引器（Indexer）又称为<strong>带参属性</strong>，<strong>索引器也能作为Path来使用</strong>。如让一个TextBox显示另一个TextBox文本的第四个字符</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textBox1<span class="token punctuation">"</span></span> <span class="token attr-name">BorderBrush</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Black<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--编译器会报错，但是仍能正常运行并输出正确结果--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textBox2<span class="token punctuation">"</span></span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Path=Text.[3],ElementName=textBox1,Mode=OneWay&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">BorderBrush</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Black<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有个显示就是编译器会报错，但是仍能正常运行并输出正确结果</p><p><img src="/images/Binding/image-20221120220828821.png"></p><p>等价的C#代码如下，可以去掉<code>Text.[3]</code>下的<code>.</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>textBox2<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"Text.[3]"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">,</span>Mode<span class="token operator">=</span>BindingMode<span class="token punctuation">.</span>OneWay<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/Binding/image-20221120221137171.png"></p><p>​        当<strong>使用一个集合或者DataView作为Binding源</strong>时，如果想<strong>把它的默认元素当作Path使用</strong>，则需要使用这样的语法：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> stringList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token string">"Tim"</span><span class="token punctuation">,</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token string">"Blog"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source <span class="token operator">=</span> stringList <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>textBox2<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"/Length"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source <span class="token operator">=</span> stringList<span class="token punctuation">,</span>Mode<span class="token operator">=</span>BindingMode<span class="token punctuation">.</span>OneWay <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>textBox3<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"/[2]"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source <span class="token operator">=</span> stringList<span class="token punctuation">,</span> Mode <span class="token operator">=</span> BindingMode<span class="token punctuation">.</span>OneWay <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/Binding/image-20221121084059203.png"></p><p>​        如果集合元素的属性仍然还是一个集合，<strong>想把子级集合中的元素当做Path，则可以使用多级斜线的语法（即一路“斜线”下去）</strong>，代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">MainWindow</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Window</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List<span class="token punctuation">&lt;</span>Country<span class="token punctuation">></span></span> countryList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Country<span class="token punctuation">></span></span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Country</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Name<span class="token operator">=</span><span class="token string">"Chinese"</span><span class="token punctuation">,</span>                ProvinceList <span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Province<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Province</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        Name<span class="token operator">=</span><span class="token string">"ZheJiang"</span><span class="token punctuation">,</span>                        CityList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>City<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">&#123;</span>                            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">City</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">&#123;</span>                                Name<span class="token operator">=</span><span class="token string">"HangZhou"</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"/Name"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source <span class="token operator">=</span> countryList <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>textBox2<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"/ProvinceList/Name"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source <span class="token operator">=</span> countryList <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>textBox3<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"/ProvinceList/CityList/Name"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source <span class="token operator">=</span> countryList <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">City</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Province</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>City<span class="token punctuation">></span></span> CityList <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Country</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Province<span class="token punctuation">></span></span> ProvinceList <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/Binding/image-20221121090911460.png"></p><p>也可以这么写</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">textBox1<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"[0].Name"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source <span class="token operator">=</span> countryList <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>textBox2<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"[0].ProvinceList[0].Name"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source <span class="token operator">=</span> countryList <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>textBox3<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"[0].ProvinceList[0].CityList[0].Name"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source <span class="token operator">=</span> countryList <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="“没有Path”的Binding"><a href="#“没有Path”的Binding" class="headerlink" title="“没有Path”的Binding"></a>“没有Path”的Binding</h3><p>​        有时候在代码中看到一些<code>Path是一个“.”</code>或者干脆<code>没有Path</code>的Binding，这是一种比较特殊的情况——<strong>Binding源本身就是数据且不需要Path来指明</strong>。如string、int等基本类型的实例本身就是数据，无法指出通过它的哪个属性来访问这个数据，这时只需将Path的值设置为“.”就可以了。</p><blockquote><p>注：在XAML代码里这个“.”可以省略不写，但在C#代码里却不能省略。</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Window</span> <span class="token attr-name"><span class="token namespace">x:</span>Class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_6._3._4.MainWindow<span class="token punctuation">"</span></span>        <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml/presentation<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/expression/blend/2008<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>mc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.openxmlformats.org/markup-compatibility/2006<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>sys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clr-namespace:System;assembly=mscorlib<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>local</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clr-namespace:_6._3._4<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">mc:</span>Ignorable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span>        <span class="token attr-name">Title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MainWindow<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>450<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel.Resources</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">sys:</span>String</span> <span class="token attr-name"><span class="token namespace">x:</span>Key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myString<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                8yyy            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">sys:</span>String</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel.Resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textBlock1<span class="token punctuation">"</span></span> <span class="token attr-name">TextWrapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Wrap<span class="token punctuation">"</span></span> <span class="token attr-name">FontSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>16<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span>                   <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Path=.,Source=&#123;StaticResource ResourceKey=myString&#125;&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Window</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：需要提前引入  xmlns:sys=”clr-namespace:System;assembly=mscorlib”</p></blockquote><p>运行结果如下</p><p><img src="/images/Binding/image-20221121093159412.png"></p><p>上述Text中的代码可以简写如下形式</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--形式1-!</span><span class="token punctuation">></span></span>Text="&#123;Binding .,Source=&#123;StaticResource ResourceKey=myString&#125;&#125;"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--形式2-!</span><span class="token punctuation">></span></span>Text="&#123;Binding Source=&#123;StaticResource ResourceKey=myString&#125;&#125;"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>等效的C#代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">string</span></span> myString <span class="token operator">=</span> <span class="token string">"8yyy"</span><span class="token punctuation">;</span><span class="token comment">//形式1</span>textBlock1<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBlock<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source <span class="token operator">=</span> myString <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//形式2，容易被误解为没有指定Path</span>textBlock1<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBlock<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source <span class="token operator">=</span> myString <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="为Binding指定源（Source）的几种方法"><a href="#为Binding指定源（Source）的几种方法" class="headerlink" title="为Binding指定源（Source）的几种方法"></a>为Binding指定源（Source）的几种方法</h3><p>Binding的源是数据的来源，只要一个对象包含数据并能通过属性把数据暴露出来，它就能当作Binding的源来使用。常见的办法有：</p><ul><li><strong>把普通CLR类型单个对象指定为Source</strong>：包括.NET Framework自带类型的对象和用户自定义类型的对象（需实现INotifyPropertyChanged接口），方法有两种——把对象赋值给Binding.Source属性或把对象的Name赋值给Binding.ElementName。</li><li><strong>把普通CLR集合类型对象指定为Source</strong>：包括数组、List、<strong>ObservableCollection</strong>等集合类型（一般是把ItemsControl派生类控件的ItemsSource 属性关联到一个集合对象上）。</li><li><strong>把ADO.NET数据对象指定为Source</strong>：包括<strong>DataTable</strong>和<strong>DataView</strong>等对象。</li><li><strong>使用XmlDataProvider把XML数据指定为Source</strong>：XML可以用来表示单个数据对象或者集合，可以把树状结构的XML数据作为源指定给与级联式的WPF控件（<strong>如TreeView和Menu</strong>）关联的Binding。</li><li><strong>把依赖对象（Dependency Object）指定为Source</strong>：依赖对象可以作为Binding的目标或源，有可能形成Binding链，<strong>依赖对象中的依赖属性可以作为Binding的Path</strong>。</li><li><strong>把容器的DataContext 指定为Source（WPF Data Binding的默认行为）</strong>：建立一个只设置Path不设置Source的Binding（只确定属性、不确定对象），Binding会<strong>自动把控件的DataContext当作自己的Source</strong>（沿着控件树向外层寻找带有Path指定属性的对象）。</li><li><strong>通过ElementName 指定Source</strong>：在C#代码里可以直接把对象作为Source赋值给Binding，但XAML无法访问对象，所以<strong>只能使用对象的Name属性来找到对象</strong>。</li><li><strong>通过Binding的RelativeSource属性相对地指定Source</strong>：当控件需要关注自己的、自己容器的或者自己内部元素的某个值就需要使用这种办法。</li><li><strong>把ObjectDataProvider对象指定为Source</strong>：当数据源的数据不是通过属性而是通过方法暴露给外界的时候，可以使用这两种对象来包装数据源再把它们指定为Source。</li><li><strong>把使用LINQ检索得到的数据对象作为Binding的源</strong>：LINQ查询的结果是一个<strong>IEnumerable类型对象</strong>。</li></ul><blockquote><p>注：公共语言运行时（CLR:Common Language Runtime），它是所有.NET应用程序运行时环境，是所有.NET应用程序都使用的编程基础，它如同一个支持.NET Framework ，运行一个.NET 程序也必须安装。</p></blockquote><h3 id="没有Source的Binding——使用DataContext作为Binding的源"><a href="#没有Source的Binding——使用DataContext作为Binding的源" class="headerlink" title="没有Source的Binding——使用DataContext作为Binding的源"></a>没有Source的Binding——使用DataContext作为Binding的源</h3><p><code>获取或设置元素参与数据绑定时的数据上下文。</code></p><p>​        <code>DataContext</code>属性被定义在<code>FrameworkElement</code>类（WPF控件的基类）里，<strong>所有WPF控件（包括容器控件）都具备这个属性</strong>。WPF的UI布局是<strong>树形结构</strong>，每个结点都是控件——在UI元素树的每个结点都有<code>DataContext</code>。当一个<code>Binding</code>只知道自己的<code>Path</code>而不知道自己的<code>Soruce</code>时，它会沿着UI元素树一路向树的根部找过去，每路过一个结点就要看看这个结点的DataContext是否具有Path所指定的属性：</p><ul><li>如果有，那就把这个对象作为自己的Source；</li><li>如果没有，那就继续找下去；</li><li>如果到了树的根部还没有找到，那这个Binding就没有Source，因而也不会得到数据。</li></ul><p>下面举一个简单的例子，首先添加一个Student类，代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>XAML代码如下</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span> <span class="token attr-name">Background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LightBlue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel.DataContext</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">local:</span>Student</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span> <span class="token attr-name">Age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8yyy<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel.DataContext</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Path=Id&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Path=Age&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Path=Name&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/Binding/image-20221121100038058.png"></p><blockquote><p>注意：虽然写代码的时候会报错找不到Student类，但是F5运行后就好了，WPF似乎经常会出现这样的问题</p></blockquote><p>UI布局的树状图如下</p><p><img src="/images/Binding/1495663-20210211205749496-1239787666.png"></p><p>三个TextBox的Text通过Binding获取值，但只为Binding指定了Path，没有指定Source，可以简写为：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Id&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Name&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Age&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在前面学习Binding路径的时候我们已经知道，当Binding的Source本身就是数据、不需要使用属性来暴露数据时，Binding的Path可以设置为<code>“.”</code>，亦可以<code>省略不写</code>。</p><p>当某个DataContext是一个简单类型对象的时候，我们完全可能看到<strong>一个“既没有Path又没有Source”的Binding</strong>：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel.DataContext</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">sys:</span>String</span><span class="token punctuation">></span></span>Hello DataContext!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">sys:</span>String</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel.DataContext</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DataContext是一个“依赖属性”，当没有为控件的某个依赖属性显式赋值时，控件会把自己容器的属性值“借过来”当作自己的属性值。<strong>“Binding沿着UI元素树向上找”只是一个错觉，实际上是属性值沿着UI元素树向下传递了</strong>。</p><p>这里有一个简单的小例子，程序的UI部分是若干层Grid，最内层Grid里放置了一个Button，我们为最外层的Grid设置了DataContext属性值，因为内层的Grid和Button都没有设置DataContext属性值所以最外层的Grid的DataContext属性值会一直传递到Button那里，单机Button就会显示这个值</p><p>XAML代码如下</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span> <span class="token attr-name">DataContext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8yyy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">Content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>OK<span class="token punctuation">"</span></span> <span class="token attr-name">Click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn_Click<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Button的Click事件处理器代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">btn_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>btn<span class="token punctuation">.</span>DataContext<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/Binding/image-20221121102016270.png"></p><p>在实际工作中DataContext的用法是非常灵活的。比如：</p><ul><li>当UI上的多个控件都是用Binding关注同一个对象时，不妨使用DataContext。</li><li>当作为Source的对象不能被直接访问的时候——比如B窗体内的控件想把A窗体内的控件（private访问级别）当作自己的Binding源时，但A窗体内的控件是<code>Private</code>访问级别，可以把这个控件（或者控件的值）作为窗体A的DataContext（<code>public</code>访问级别）从而暴露数据。</li></ul><blockquote><p>​        形象地说，这时候外层容器的DataContext就相当于一个数据的“制高点”，只有把数据放上去，别的元素就都能看见。另外，DataContext本身也是一个依赖属性，我们可以使用Binding把它关联到一个数据源上。</p></blockquote><h3 id="使用集合对象作为列表控件的ItemSource"><a href="#使用集合对象作为列表控件的ItemSource" class="headerlink" title="使用集合对象作为列表控件的ItemSource"></a>使用集合对象作为列表控件的ItemSource</h3><p>​        WPF中的列表式控件们派生自<code>ItemsControl类</code>，继承了<code>ItemsSource属性</code>。<strong>ItemsSource属性可以接收一个IEnumerable接口派生类的实例作为自己的值</strong>（所有可被迭代遍历的集合都实现了这个接口，包括数组、List<T>等）。每一个<code>ItemsControl</code>的派生类都具有自己对应的<code>Item Container</code>（<strong>条目容器，如ListBox的ListBoxItem、ComboBox的ComboBoxItem</strong>）。只要为一个<code>ItemsControl对象</code>设置了<code>ItemsSource属性值</code>，<code>ItemsControl对象</code>就会自动迭代其中的数据元素，为每个数据元素准备一个条目容器，并使用Binding在条目容器与数据元素之间建立起关联。</T></p><h4 id="使用DisplayMemberPath属性"><a href="#使用DisplayMemberPath属性" class="headerlink" title="使用DisplayMemberPath属性"></a>使用DisplayMemberPath属性</h4><blockquote><p>ItemsControl.DisplayMemberPath 属性</p><p>​        获取或设置源对象上的值的路径，以用作对象的可视表示形式。</p></blockquote><p>UI代码如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stackPanel<span class="token punctuation">"</span></span> <span class="token attr-name">Background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LightBlue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student ID:<span class="token punctuation">"</span></span> <span class="token attr-name">FontWeight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Bold<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textBoxId<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student List:<span class="token punctuation">"</span></span> <span class="token attr-name">FontWeight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Bold<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ListBoxStudents<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>110<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        我们要实现的效果就是把一个List<Student>集合的实例作为ListBox的ItemsSource，让ListBox显示Student的Name并使用TextBox显示ListBox当前选中条目的Id。</Student></p><p>C#代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">MainWindow</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Window</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//准备数据源</span>        <span class="token class-name">List<span class="token punctuation">&lt;</span>Student<span class="token punctuation">></span></span> stuList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Student<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Id<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>Name<span class="token operator">=</span><span class="token string">"Tim"</span><span class="token punctuation">,</span>Age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>Name<span class="token operator">=</span><span class="token string">"Tom"</span><span class="token punctuation">,</span>Age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Id<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>Name<span class="token operator">=</span><span class="token string">"8yyy"</span><span class="token punctuation">,</span>Age<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//为ListBox设置Binding</span>        ListBoxStudents<span class="token punctuation">.</span>ItemsSource <span class="token operator">=</span> stuList<span class="token punctuation">;</span>        ListBoxStudents<span class="token punctuation">.</span>DisplayMemberPath <span class="token operator">=</span> <span class="token string">"Name"</span><span class="token punctuation">;</span>        <span class="token comment">//为TextBox设置Binding</span>        <span class="token class-name">Binding</span> binding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"SelectedItem.Id"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source <span class="token operator">=</span> ListBoxStudents <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        textBoxId<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> binding<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/Binding/image-20221121104743102.png"></p><p>​        当DisplayMember属性被赋值后，ListBox在获得ItemsSource的时候就会创建等量的ListBoxItem并以DisplayMemberPath属性值为Path创建Binding，Binding的目标是ListBoxItem的内容插件（实际上是一个TextBox）。</p><p>​        这个创建Binding的过程是在<code>DisplayMemberTemplateSelector</code>类的<code>SelectTemplate</code>方法里完成的，方法定义的格式如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">DataTemplate</span> <span class="token function">SelectTemplate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> item<span class="token punctuation">,</span> <span class="token class-name">DependencyObject</span> container<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//逻辑代码</span>    <span class="token class-name">FrameworkElementFactory</span> text <span class="token operator">=</span> ContentPresenter<span class="token punctuation">.</span><span class="token function">CreateTextBlockFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Binding</span> binding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    binding<span class="token punctuation">.</span>Path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PropertyPath</span><span class="token punctuation">(</span>_displayMemberPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    binding<span class="token punctuation">.</span>StringFormat <span class="token operator">=</span> _stringFormat<span class="token punctuation">;</span>    text<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBlock<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> binding<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​        注意到返回值是DataTemplate类型的，当我们没有为ItemsControl显式地指定DataTemplate时，SelectTemplate方法就会为我们创建一个默认的（也是最简单的）DataTemplate。</p></blockquote><p>这里，我们只关系SelectTemplate内部与创建Binding相关的几行代码：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">binding<span class="token punctuation">.</span>Path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PropertyPath</span><span class="token punctuation">(</span>_displayMemberPath<span class="token punctuation">)</span><span class="token punctuation">;</span>text<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBlock<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> binding<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>​    注意：这里只对新创建的Binding设定了Path而没有为它指定Source，紧接着就把它关联到了TextBlock上，显然，要想得到Source，这个Binding要向UI元素树根的方向去寻找包含_displayMemberPath指定属性的DataContext</p></blockquote><h4 id="使用DataTemplate"><a href="#使用DataTemplate" class="headerlink" title="使用DataTemplate"></a>使用DataTemplate</h4><p>先把C#代码中的<code>listBoxStudents.DisplayMemberPath = &quot;Name&quot;;</code>删除，然后在XAML中添加几行代码：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stackPanel<span class="token punctuation">"</span></span> <span class="token attr-name">Background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LightBlue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student ID:<span class="token punctuation">"</span></span> <span class="token attr-name">FontWeight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Bold<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textBoxId<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student List:<span class="token punctuation">"</span></span> <span class="token attr-name">FontWeight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Bold<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ListBoxStudents<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>110<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListBox.ItemTemplate</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DataTemplate</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span> <span class="token attr-name">Orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Path=Id&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Path=Name&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Path=Age&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DataTemplate</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ListBox.ItemTemplate</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ListBox</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/Binding/image-20221123160151377.png"></p><blockquote><p>在使用集合类型作为列表控件的ItemsSource时一般会考虑使用ObservableCollection<T>代替List<T>，因为ObservableCollection<T>类实现了INotifyCollectionChanged和INotifyPropertyChanged接口，能把集合的变化立刻通知显示它的列表控件，改变会立刻显现出来。</T></T></T></p></blockquote><h3 id="使用-ADO-NET-对象作为Binding的源"><a href="#使用-ADO-NET-对象作为Binding的源" class="headerlink" title="使用 ADO.NET 对象作为Binding的源"></a>使用 ADO.NET 对象作为Binding的源</h3><p>​        在 <code>.NET</code> 开发中使用 <code>ADO.NET</code> 类对数据库进行操作。常见的工作是从数据库中把数据读取到 <code>DataTable</code> 中，再把 <code>DataTable</code> 显示在UI列表控件里（如成绩单、博客文章列表、论坛帖子列表等）。在流行的软件架构中并不把直接显示<code>DataTable</code>，而是先通过<code>LINQ</code>等手段把<code>DataTable</code>里的数据转换成恰当的用户自定义类型集合，但<code>WPF</code>也支持在列表控件与<code>DataTable</code>之间直接建立<code>Binding</code>。</p><p>DataTable的数据内容如下表所示</p><table><thead><tr><th align="center">Id</th><th align="center">Name</th><th align="center">Age</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">8yyy</td><td align="center">8</td></tr><tr><td align="center">2</td><td align="center">Tom</td><td align="center">18</td></tr><tr><td align="center">3</td><td align="center">Tony</td><td align="center">26</td></tr></tbody></table><p>UI部分的XAML代码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span> <span class="token attr-name">Background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LightBlue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>listBoxStudents<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>130<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">Content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Load<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5,0<span class="token punctuation">"</span></span> <span class="token attr-name">Click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Button_Click<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>C#代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Button_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//获取DataTable实例</span>    <span class="token class-name">DataTable</span> dt <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listBoxStudents<span class="token punctuation">.</span>DisplayMemberPath <span class="token operator">=</span> <span class="token string">"Name"</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listBoxStudents<span class="token punctuation">.</span>ItemsSource <span class="token operator">=</span> dt<span class="token punctuation">.</span>DefaultView<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name">DataTable</span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">DataTable</span> dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DataTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dt<span class="token punctuation">.</span>Columns<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"Id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dt<span class="token punctuation">.</span>Columns<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dt<span class="token punctuation">.</span>Columns<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"Age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dt<span class="token punctuation">.</span>Rows<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"8yyy"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dt<span class="token punctuation">.</span>Rows<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dt<span class="token punctuation">.</span>Rows<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"Tony"</span><span class="token punctuation">,</span> <span class="token string">"26"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下</p><p><img src="/images/Binding/image-20221129154204111.png"></p><p>其中最重要的代码是<code>listBoxStudents.ItemsSource = dt.DefaultView;</code>，DataTable的DefaultView属性是一个<strong>DataView</strong>类型的对象（实现了IEnumerable接口），所以可以被赋值给ListBox.ItemsSource属性。</p><p>多数情况下会选择 <strong>ListView</strong> 控件来显示一个DataTable，XAML代码如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span> <span class="token attr-name">Background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LightBlue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListView</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>listViewStudents<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>130<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListView.View</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GridView</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GridViewColumn</span> <span class="token attr-name">Header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Id<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span>                                <span class="token attr-name">DisplayMemberBinding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Id&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GridViewColumn</span> <span class="token attr-name">Header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Name<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80<span class="token punctuation">"</span></span>                                <span class="token attr-name">DisplayMemberBinding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Name&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GridViewColumn</span> <span class="token attr-name">Header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Age<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span>                                <span class="token attr-name">DisplayMemberBinding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Age&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>GridView</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ListView.View</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ListView</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">Content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Load<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5,0<span class="token punctuation">"</span></span> <span class="token attr-name">Click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Button_Click<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C#代码中，Button的Click时间处理器基本没有什么变化</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Button_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//获取DataTable实例</span>    <span class="token class-name">DataTable</span> dt <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listViewStudents<span class="token punctuation">.</span>ItemsSource <span class="token operator">=</span> dt<span class="token punctuation">.</span>DefaultView<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下所示</p><p><img src="/images/Binding/image-20221130142714182.png"></p><blockquote><p>​        通过上面的例子我们已经知道 DataTable 对象的 DefaultView 属性可以作为 ItemsSource 使用。显然 DataTable 不能直接拿来为ItemsSource属性赋值。</p></blockquote><p>不过，当你把一个 DataTable 对象放在一个对象的 DataContext属性里，并把ItemsSource与一个既没有指定Source又没有指定Path的Binding关联起来时，Binding却能自动找到它的DefaultView并当作自己的Source来使用：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Button_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//获取DataTable实例</span>    <span class="token class-name">DataTable</span> dt <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listViewStudents<span class="token punctuation">.</span>DataContext <span class="token operator">=</span> dt<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listViewStudents<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>ListView<span class="token punctuation">.</span>ItemsSourceProperty<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-XML-数据库作为-Binding-的源"><a href="#使用-XML-数据库作为-Binding-的源" class="headerlink" title="使用 XML 数据库作为 Binding 的源"></a>使用 XML 数据库作为 Binding 的源</h3><p>.NET Framework提供了两套处理XML数据的类库：</p><ul><li><p><strong>符合DOM（Document Object Model，文档对象模型）标准的类库</strong>：包括XmlDocument、XmlElement、XmlNode、XmlAttribute等类，特点是中规中矩、功能强大、但背负了太多XML的传统和复杂。</p></li><li><p><strong>以LINQ（Language-Integrated Query，语言集成查询）为基础的类库</strong>：包括XDocument、XElement、XNode、XAttribute等类，特点是可以使用LINQ进行查询和操作、方便快捷、但<strong>会产生很多临时对象</strong>。</p><p><strong>本小节我们主要讲解基于 DOM 标准的 XML 类库。</strong></p></li></ul><p>​        现代程序设计只要涉及数据传输就离不开 XML ，因此大多数数据传输都基于 <strong>SOAP（Simple Object Access Protocol，简单对象访问协议）</strong>相关的协议，而SOAP又是通过将对象序列化为XML文本进行传输。XML文本是树形结构的，所以XML可以方便地用于表示线性集合（如Array、List等）和树形结构数据。</p><blockquote><p>​        需要注意的是，当使用 XML 数据作为 Binding 的 Source 时我们将使用 XPath 属性二不是使用 Path 属性来指定数据的来源。</p></blockquote><h4 id="从XML文档显示线性集合"><a href="#从XML文档显示线性集合" class="headerlink" title="从XML文档显示线性集合"></a>从XML文档显示线性集合</h4><p>下面的 XML 文本是一组学生的信息（假设存放在H:\DotNet\WPF\BindingExample\RawData.xml文件中），我要把它显示在一个 ListView 控件里：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StudentList</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Student</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Name</span><span class="token punctuation">></span></span>Tim<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Student</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Student</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Name</span><span class="token punctuation">></span></span>Tom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Student</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Student</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Name</span><span class="token punctuation">></span></span>Vina<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Student</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Student</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Name</span><span class="token punctuation">></span></span>Emily<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Student</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StudentList</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>XAML代码如下</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span> <span class="token attr-name">Background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LightBlue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListView</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>listViewStudents<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>130<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListView.View</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GridView</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GridViewColumn</span> <span class="token attr-name">Header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Id<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80<span class="token punctuation">"</span></span>                                <span class="token attr-name">DisplayMemberBinding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding XPath=@Id&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GridViewColumn</span> <span class="token attr-name">Header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Name<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span>                                <span class="token attr-name">DisplayMemberBinding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding XPath=Name&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>GridView</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ListView.View</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ListView</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">Content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Load<span class="token punctuation">"</span></span> <span class="token attr-name">Click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Button_Click<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5,0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        XAML 代码中关键的是 <em><strong>DisplayMemberBinding=”{Binding XPath=@Id}”</strong></em> 和 ***DisplayMemberBinding=”{Binding XPath=Name}***，它们分别为 GridView 的两列指明了关注的 XML 路径，使用@符号加字符串表示的是XML元素的Attribute属性，不加@符号的字符串表示的是子级元素。</p><blockquote><pre><code>    显然，Id表示的是XML元素的属性，而Name表示的是子集元素。</code></pre></blockquote><p>Button 的 Click 事件代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Button_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//需要提前引入 System.Xml 类库</span>    <span class="token comment">//创建一个表示 XML 文档的对象</span>    <span class="token class-name">XmlDocument</span> doc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XmlDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//从指定路径加载指定的 XML 数据</span>    doc<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">@"H:\DotNet\WPF\BindingExample\RawData.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">XmlDataProvider</span> xdp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XmlDataProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xdp<span class="token punctuation">.</span>Document <span class="token operator">=</span> doc<span class="token punctuation">;</span>    <span class="token comment">//使用 XPath 选择需要暴露的数据</span>    <span class="token comment">//现在是需要暴露一组 Student</span>    xdp<span class="token punctuation">.</span>XPath <span class="token operator">=</span> <span class="token string">@"/StudentList/Student"</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listViewStudents<span class="token punctuation">.</span>DataContext <span class="token operator">=</span> xdp<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listViewStudents<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>ListView<span class="token punctuation">.</span>ItemsSourceProperty<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下</p><p><img src="/images/Binding/image-20221130150839695.png"></p><p> <strong>注解如下：</strong></p><ul><li><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.xml.xmldocument?f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(System.Xml.XmlDocument);k(DevLang-csharp)&rd=true&view=net-7.0">XmlDocument</a><ul><li>表示 XML 文档。 可使用此类在文档中加载、验证、编辑、添加和放置 XML。</li></ul></li><li><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.data.xmldataprovider?f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(System.Windows.Data.XmlDataProvider);k(DevLang-csharp)&rd=true&view=windowsdesktop-7.0">XmlDataProvider</a><ul><li>允许以声明方式访问数据绑定的 XML 数据。</li></ul></li></ul><p>​        XmlDataProvider 还有一个名为 Source 的属性，可以用它直接指定 XML 文档所在的位置（无论XML文档存储在本地硬盘还是网络上）</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Button_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">XmlDataProvider</span> xdp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XmlDataProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xdp<span class="token punctuation">.</span>Source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">@"H:\DotNet\WPF\BindingExample\RawData.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xdp<span class="token punctuation">.</span>XPath <span class="token operator">=</span> <span class="token string">@"/StudentList/Student"</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listViewStudents<span class="token punctuation">.</span>DataContext <span class="token operator">=</span> xdp<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listViewStudents<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>ListView<span class="token punctuation">.</span>ItemsSourceProperty<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="XML语言可以方便地表示树形数据结构"><a href="#XML语言可以方便地表示树形数据结构" class="headerlink" title="XML语言可以方便地表示树形数据结构"></a>XML语言可以方便地表示树形数据结构</h4><p>​        下面的例子是使用TreeView 控件来显示拥有若干层目录的文件系统，而且，这次是把 XML 数据和 XmIDataProvider 对象直接写在XAML代码里。代码中用到了 HierarchicalDataTemplate 类,这个类具有名为 ItemsSource 的属性,可见由这种 Template展示的数据是可以拥有子级集合的。代码如下:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Window.Resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>XmlDataProvider</span> <span class="token attr-name"><span class="token namespace">x:</span>Key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xdp<span class="token punctuation">"</span></span> <span class="token attr-name">XPath</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FileSystem/Folder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">x:</span>XData</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FileSystem</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Folder</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Folder</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Programming<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Folder</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Windows<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Folder</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WPF<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Folder</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WinForm<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Folder</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Folder</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Folder</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Tools<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Folder</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Development<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Folder</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Designment<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Folder</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Players<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Folder</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Folder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FileSystem</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">x:</span>XData</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>XmlDataProvider</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Window.Resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TreeView</span> <span class="token attr-name">ItemsSource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Source=&#123;StaticResource xdp&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TreeView.ItemTemplate</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HierarchicalDataTemplate</span> <span class="token attr-name">ItemsSource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding XPath=Folder&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding XPath=@Name&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>HierarchicalDataTemplate</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TreeView.ItemTemplate</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TreeView</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：        </p><p>​        如果把XmlDataProvider直接写在XAML代码里，它的<strong>XML数据需要放在&lt; x:XData &gt;…&lt; /x:XData &gt;标签</strong>里<strong>StaticResource</strong>和<strong>HierarchicalDataTemplate</strong>等学完<strong>Resource</strong>和<strong>Template</strong>才会明白。</p></blockquote><p>运行结果如下</p><p><img src="/images/Binding/image-20221130204640843.png"></p><h3 id="使用LINQ检索结果作为Binding的源"><a href="#使用LINQ检索结果作为Binding的源" class="headerlink" title="使用LINQ检索结果作为Binding的源"></a>使用LINQ检索结果作为Binding的源</h3><p>​        .NET Framework 3.0开始支持<strong>LINQ（Language-Integrated Query，语言集成查询）</strong>，使用LINQ可以方便地操作集合对象、DataTable对象和XML对象，不必动辄就把好几层foreach循环嵌套。<br>​        LINQ查询的结果是一个**IEnumerable &lt; T &gt;**类型对象，而IEnumerable&lt; T &gt;又派生自 IEnumerable ，所以它可以作为列表控件的 ItemsSource 来使用。</p><p>首先创建一个名为 Student 的类</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span>  Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>又设计了如下的UI用于在 Button 被单机的时候显示一个 Student 集合类型对象</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span> <span class="token attr-name">Background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LightBlue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListView</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>listViewStudents<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>143<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListView.View</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GridView</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GridViewColumn</span> <span class="token attr-name">Header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Id<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span>                                <span class="token attr-name">DisplayMemberBinding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Id&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GridViewColumn</span> <span class="token attr-name">Header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Name<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span>                                <span class="token attr-name">DisplayMemberBinding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Name&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GridViewColumn</span> <span class="token attr-name">Header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Age<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80<span class="token punctuation">"</span></span>                                <span class="token attr-name">DisplayMemberBinding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Age&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>GridView</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ListView.View</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ListView</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">Content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Load<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5,0<span class="token punctuation">"</span></span> <span class="token attr-name">Click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Button_Click<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先来看查询集合对象。要从一个已经填充好的 **List&lt; Student &gt;**对象中检测出所有名字以字母开头的学生</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Button_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List<span class="token punctuation">&lt;</span>Student<span class="token punctuation">></span></span> stuList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Student<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> Id<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>Name<span class="token operator">=</span><span class="token string">"8yyy"</span><span class="token punctuation">,</span>Age<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> Id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>Name<span class="token operator">=</span><span class="token string">"Tim"</span><span class="token punctuation">,</span>Age<span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> Id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>Name<span class="token operator">=</span><span class="token string">"Tony"</span><span class="token punctuation">,</span>Age<span class="token operator">=</span><span class="token number">28</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listViewStudents<span class="token punctuation">.</span>ItemsSource <span class="token operator">=</span> <span class="token keyword">from</span> stu <span class="token keyword">in</span> stuList <span class="token keyword">where</span> <span class="token class-name">stu</span><span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">"T"</span><span class="token punctuation">)</span> <span class="token keyword">select</span> stu<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果数据存放在一个已经填充好的 <strong>DataTable</strong> 对象里，则代码是这样：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Button_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">DataTable</span> dt <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetDataTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listViewStudents<span class="token punctuation">.</span>ItemsSource <span class="token operator">=</span>        <span class="token keyword">from</span> row <span class="token keyword">in</span> dt<span class="token punctuation">.</span>Rows<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Cast</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DataRow<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">where</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"Name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">"T"</span><span class="token punctuation">)</span>        <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Id <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"Id"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Name <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token string">"Name"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Age <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"Age"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name">DataTable</span> <span class="token function">GetDataTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">DataTable</span> dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DataTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dt<span class="token punctuation">.</span>Columns<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"Id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dt<span class="token punctuation">.</span>Columns<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dt<span class="token punctuation">.</span>Columns<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"Age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dt<span class="token punctuation">.</span>Rows<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"8yyy"</span><span class="token punctuation">,</span><span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dt<span class="token punctuation">.</span>Rows<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"Tim"</span><span class="token punctuation">,</span> <span class="token string">"19"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dt<span class="token punctuation">.</span>Rows<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"Tony"</span><span class="token punctuation">,</span> <span class="token string">"28"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果数据存储在 <strong>XML</strong> 文件里（H:\DotNet\WPF\BindingExample\RawData.xml）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StudentList</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Student</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8yyy<span class="token punctuation">"</span></span> <span class="token attr-name">Age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Student</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Tim<span class="token punctuation">"</span></span> <span class="token attr-name">Age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>19<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Student</span> <span class="token attr-name">Id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Tony<span class="token punctuation">"</span></span> <span class="token attr-name">Age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>28<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StudentList</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>则代码是这样的（注：**xdoc.Descendants(“Student”)**这个方法可以跨越XML的层级。）</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Button_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">XDocument</span> xdoc <span class="token operator">=</span> XDocument<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">@"H:\DotNet\WPF\BindingExample\RawData.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listViewStudents<span class="token punctuation">.</span>ItemsSource <span class="token operator">=</span>        <span class="token keyword">from</span> element <span class="token keyword">in</span> xdoc<span class="token punctuation">.</span><span class="token function">Descendants</span><span class="token punctuation">(</span><span class="token string">"Student"</span><span class="token punctuation">)</span>        <span class="token keyword">where</span> <span class="token class-name">element</span><span class="token punctuation">.</span><span class="token function">Attribute</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">"T"</span><span class="token punctuation">)</span>        <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Id <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">Attribute</span><span class="token punctuation">(</span><span class="token string">"Id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">,</span>            Name <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">Attribute</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">,</span>            Age <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">Attribute</span><span class="token punctuation">(</span><span class="token string">"Age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/Binding/image-20221201143105897.png"></p><h3 id="使用-ObjectDataOrivuder-对象作为-Binding-的-Source"><a href="#使用-ObjectDataOrivuder-对象作为-Binding-的-Source" class="headerlink" title="使用 ObjectDataOrivuder 对象作为 Binding 的 Source"></a>使用 ObjectDataOrivuder 对象作为 Binding 的 Source</h3><p>有时<strong>很难保证一个类的所有数据都使用属性暴露出来</strong>，比如<strong>需要的数据可能是方法的返回值</strong>，重新设计底层类的风险和成本会比较高且黑盒引用类库时不可能改变已经编译好的类，这时就需要使用ObjectDataProvider来包装作为Binding源的数据对象了。</p><p><strong>ObjectDataProvider</strong>把对象作为数据源提供给Binding，之前的<strong>XmlDataProvider</strong>也是把XML数据作为数据源提供给Binding，两者的父类<strong>都是DataSourceProvider抽象类</strong>。</p><p>有一个名为Calculator的类，它具有计算加、减、乘、除的方法：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Calculator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> arg1<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> arg2<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">double</span></span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">double</span></span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">double</span></span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span><span class="token keyword">out</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>arg2<span class="token punctuation">,</span><span class="token keyword">out</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>            <span class="token keyword">return</span> z<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">"Input Error!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//其他算法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先随便新建一个WPF项目，添加一个Button，Button的Click事件处理器如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Button_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ObjectDataProvider</span> odp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ObjectDataProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    odp<span class="token punctuation">.</span>ObjectInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    odp<span class="token punctuation">.</span>MethodName <span class="token operator">=</span> <span class="token string">"Add"</span><span class="token punctuation">;</span>    odp<span class="token punctuation">.</span>MethodParameters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    odp<span class="token punctuation">.</span>MethodParameters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>odp<span class="token punctuation">.</span>Data<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ObjectDataProvider.ObjectInstance <ul><li>属性获取或设置用作绑定源的对象。</li></ul></li></ul><p>运行结果如下</p><p><img src="/images/Binding/image-20221201145952473.png"></p><p>ObjectDataProvider 对应与被包装对象的关系</p><p><img src="/images/Binding/1495663-20210213182053383-2097032320.png"></p><p>下列程序实现第三个TextBox能实时地显示上面两个TextBox输入数字的和</p><p>XAML代码如下</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span> <span class="token attr-name">Background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LightBlue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textBoxArg1<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textBoxArg2<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textBoxResult<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SetBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//创建并配置 ObjectDataProvider 对象</span>    <span class="token class-name">ObjectDataProvider</span> odp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ObjectDataProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    odp<span class="token punctuation">.</span>ObjectInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    odp<span class="token punctuation">.</span>MethodName <span class="token operator">=</span> <span class="token string">"Add"</span><span class="token punctuation">;</span>    odp<span class="token punctuation">.</span>MethodParameters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    odp<span class="token punctuation">.</span>MethodParameters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//以 ObjectDataProvier 对象为 Source 创建 Binding</span>    <span class="token class-name">Binding</span> bindingToArgs1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"MethodParameters[0]"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Source <span class="token operator">=</span> odp<span class="token punctuation">,</span>        BindsDirectlyToSource <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        UpdateSourceTrigger <span class="token operator">=</span> UpdateSourceTrigger<span class="token punctuation">.</span>PropertyChanged    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">Binding</span> bindingToArgs2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"MethodParameters[1]"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Source <span class="token operator">=</span> odp<span class="token punctuation">,</span>        BindsDirectlyToSource <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        UpdateSourceTrigger <span class="token operator">=</span> UpdateSourceTrigger<span class="token punctuation">.</span>PropertyChanged    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">Binding</span> bindingToResult <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source<span class="token operator">=</span>odp <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//将 Binding 关联到 UI 元素上</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>textBoxArg1<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> bindingToArgs1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>textBoxArg2<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> bindingToArgs2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>textBoxResult<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> bindingToResult<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ObjectDataProvider类的作用是用来包装一个以方法暴露数据的对象</strong>，这里先创建了一个 ObjectDataProvider 对象，然后用一个 Calculator 对象为其 ObjectInstance 属性赋值，就把一个 Calculator 对象包装在了 ObjectDataProvider 对象里。</p><ul><li>Binding.BindsDirectlyToSource<ul><li>若要相对于数据项自身计算路径，则为 <code>false</code>；否则为 <code>true</code>。 默认值为 <code>false</code>。</li></ul></li><li>Binding.UpdateSourceTrigger<ul><li>获取或设置一个值，它可确定绑定源更新的计时。</li><li>默认值为 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.data.updatesourcetrigger?view=windowsdesktop-7.0#system-windows-data-updatesourcetrigger-default">Default</a>，即返回目标依赖属性的默认 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.data.updatesourcetrigger?view=windowsdesktop-7.0">UpdateSourceTrigger</a> 值。 但是，大多数依赖项属性的默认值为 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.data.updatesourcetrigger?view=windowsdesktop-7.0#system-windows-data-updatesourcetrigger-propertychanged">PropertyChanged</a>，有更新立刻将值传回Source</li></ul></li></ul><p>还有另一种办法创建被包装的对象，告诉 ObjectDataProvider 将被包装对象的类型和希望调用的构造器，让 ObjectDataProvider 自己去创建被包装对象，<strong>一般会在XAML代码中使用这种指定类型和构造器的办法</strong>。代码如下：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;...odp.ObjectType &#x3D; typeof(YourClass);odp.ConstructorParameters.Add(arg1);odp.ConstructorParameters.Add(arg2);&#x2F;&#x2F;...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重载方法的区别在于参数列表，上面代码中向MethodParameters属性中加入了两个string类型的对象，相当于告诉ObjectDataProvider对象去调用Calculator对象中具有两个string类型参数的Add方法（<strong>MethodParameters属性是类型敏感的</strong>）。</p><p>三个TextBox都以ObjectDataProvider对象为数据源，只是前两个TextBox在Binding的数据流向上做了限制，原因如下：</p><ul><li><strong>ObjectDataProvider的MethodParameters不是依赖属性，不能作为Binding的目标</strong>。</li><li>数据驱动UI的理念要求<strong>尽可能地使用数据对象作为Binding的Source而把UI元素当做Binding的Target</strong>。</li></ul><h3 id="使用-Binding-的-RelativeSource"><a href="#使用-Binding-的-RelativeSource" class="headerlink" title="使用 Binding 的 RelativeSource"></a>使用 Binding 的 RelativeSource</h3><p>有时候<strong>只知道Source对象与作为Binding目标的对象在UI布局上的相对关系，不能确定 Source 的对象叫什么 名字</strong>，比如控件自己关联自己的某个属性、关联自己某级容器的数据，此时要使用Binding的<strong>RelativeSource属性</strong>。RelativeSource属性的数据类型为<strong>RelativeSource类</strong>，通过这个类的几个静态或非静态属性可以控制它搜索相对数据源的方式。</p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.data.relativesource?f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(System.Windows.Data.RelativeSource);k(DevLang-csharp)&rd=true&view=windowsdesktop-7.0">RelativeSource 类</a></p><ul><li>实现一个标记扩展，该扩展描述相对于绑定目标位置的绑定源位置。</li></ul><p>重载</p><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.data.relativesource.-ctor?view=windowsdesktop-7.0#system-windows-data-relativesource-ctor">RelativeSource()</a></th><th>初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.data.relativesource?view=windowsdesktop-7.0">RelativeSource</a> 类的新实例。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.data.relativesource.-ctor?view=windowsdesktop-7.0#system-windows-data-relativesource-ctor(system-windows-data-relativesourcemode)">RelativeSource(RelativeSourceMode)</a></td><td>用初始模式初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.data.relativesource?view=windowsdesktop-7.0">RelativeSource</a> 类的一个新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.data.relativesource.-ctor?view=windowsdesktop-7.0#system-windows-data-relativesource-ctor(system-windows-data-relativesourcemode-system-type-system-int32)">RelativeSource(RelativeSourceMode, Type, Int32)</a></td><td>用初始模式以及其他用于查找所需相对源的树遍历限定符初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.data.relativesource?view=windowsdesktop-7.0">RelativeSource</a> 类的一个新实例。</td></tr></tbody></table><p>RelativeSourceMode 枚举</p><table><thead><tr><th>FindAncestor</th><th>3</th><th>引用数据绑定元素的父链中的上级。 这可用于绑定到特定类型的上级或其子类。 如果您要指定 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.data.relativesource.ancestortype?view=windowsdesktop-7.0#system-windows-data-relativesource-ancestortype">AncestorType</a> 和/或 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.data.relativesource.ancestorlevel?view=windowsdesktop-7.0#system-windows-data-relativesource-ancestorlevel">AncestorLevel</a>，可以使用此模式。</th></tr></thead><tbody><tr><td>PreviousData</td><td>0</td><td>允许在当前显示的数据项列表中绑定上一个数据项（不是包含数据项的控件）。</td></tr><tr><td>Self</td><td>2</td><td>引用正在其上设置绑定的元素，并允许你将该元素的一个属性绑定到同一元素的其他属性上。</td></tr><tr><td>TemplatedParent</td><td>1</td><td>引用应用了模板的元素，其中此模板中存在数据绑定元素。 这类似于设置 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.templatebindingextension?view=windowsdesktop-7.0">TemplateBindingExtension</a>，并仅当 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.data.binding?view=windowsdesktop-7.0">Binding</a> 在模板中时适用。</td></tr></tbody></table><p>RelativeSource类的非静态属性有3个：</p><ul><li><strong>AncestorLevel属性</strong>：以Binding目标控件为起点的层级偏移量（如下面例子中d2的偏移量是1、g2的偏移量为2，依次类推）。</li><li><strong>AncestorType属性</strong>：告诉Binding寻找哪个类型的对象作为自己的源，不是这个类型的对象会被跳过。</li><li><strong>Mode属性</strong>：是<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.data.relativesourcemode?view=netframework-4.8">RelativeSourceMode枚举</a>，取值有：PreviousData 、TemplatedParent 、Self 和FindAncestor。</li></ul><p>RelativeSource类的静态属性3个：<strong>Previous</strong>、<strong>Self</strong>和<strong>TemplateParent</strong>，它们的类型是RelativeSource类。这<strong>3个静态属性是为了在XAML代码里直接获取RelativeSource实例</strong>，本质是<strong>创建一个RelativeSource实例、把实例的Mode属性设置为相应的值，然后返回这个实例</strong>。</p><p>下面这段 XAML 代码表示的是多层布局控件内放置着一个 TextBox</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>g1<span class="token punctuation">"</span></span> <span class="token attr-name">Background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Red<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DockPanel</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d1<span class="token punctuation">"</span></span> <span class="token attr-name">Background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Orange<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>g2<span class="token punctuation">"</span></span> <span class="token attr-name">Background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Yellow<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DockPanel</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d2<span class="token punctuation">"</span></span> <span class="token attr-name">Background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LawnGreen<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textBox1<span class="token punctuation">"</span></span> <span class="token attr-name">FontSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>24<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DockPanel</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DockPanel</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>布局如下</p><p><img src="/images/Binding/image-20221206102413394.png"></p><p>然后我们把TextBox 的Text 属性关联到外层容器的Name 属性上</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">RelativeSource</span> rs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RelativeSource</span><span class="token punctuation">(</span>RelativeSourceMode<span class="token punctuation">.</span>FindAncestor<span class="token punctuation">)</span><span class="token punctuation">;</span>            rs<span class="token punctuation">.</span>AncestorLevel <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            rs<span class="token punctuation">.</span>AncestorType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Grid</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Binding</span> binding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> RelativeSource <span class="token operator">=</span> rs <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> binding<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下<img src="/images/Binding/image-20221206102819928.png"></p><blockquote><p>目标控件是 TextBox ，源是 Grid，所以 AncestorLevel=1 时，结果为g2，AncestorLevel=2 时，结果为g1</p></blockquote><p>或在XAML中插入等效代码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">Text="&#123;Binding RelativeSource=&#123;RelativeSource Mode=FindAncestor,AncestorType=&#123;x:Type DockPanel&#125;,AncestorLevel=2&#125;,Path=Name&#125;"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行效果如下</p><p><img src="/images/Binding/image-20221206103539315.png"></p><blockquote><p>目标控件是 TextBox ，源是 DockPanel，所以 AncestorLevel=1 时，结果为d2，AncestorLevel=2 时，结果为d1</p></blockquote><p>如果 TextBox 需要关联自身的 Name 属性</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">RelativeSource</span> rs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RelativeSource</span><span class="token punctuation">(</span>RelativeSourceMode<span class="token punctuation">.</span>Self<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Binding</span> binding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> RelativeSource <span class="token operator">=</span> rs <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> binding<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Binding对数据的转换与校验"><a href="#Binding对数据的转换与校验" class="headerlink" title="Binding对数据的转换与校验"></a>Binding对数据的转换与校验</h2><p>Binding可以<strong>通过ValidationRules属性对数据有效性进行校验，通过Converter属性为数据设置转换器</strong>（两端要求使用不同的数据类型时）。</p><h3 id="Binding-的数据校验"><a href="#Binding-的数据校验" class="headerlink" title="Binding 的数据校验"></a>Binding 的数据校验</h3><p>Binding的 ValidationRules 属性类型是 Collection&lt; ValidationRules &gt;，<strong>可以为每个Binding设置多个数据校验条件的，其中每一个条件是一个ValidationRule类型对象</strong>。</p><p>ValidationRule类是个抽象类，在使用的时候需要<strong>创建它的派生类并实现它的Validate方法</strong>，对于Validate方法的返回值（<strong>ValidationResult类型对象</strong>）：</p><ul><li>校验通过，则把返回值的IsValid属性设置为true。</li><li>校验失败，则把返回值IsValid属性设置为false并为ErrorContent属性设置一个合适的消息内容（一般是个字符串）。</li></ul><p>下面这个程序是在 UI 上绘制一个 TextBox 和一个 Slider，然后在后台 C#代码里使用 Binding 把它们关联起来一一以 Slider 为源、TextBox 为目标。Slider 的取值范围是0到100，也就是说，我们需要校验 TextBox 里输入的值是不是在0到100这个范围内。</p><p>XAML部分</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textBox1<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Slider</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slider1<span class="token punctuation">"</span></span> <span class="token attr-name">Minimum</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">Maximum</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>为了进行校验，需要准备一个 ValidationRule 的派生类</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RangeValidationRule</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ValidationRule</span></span><span class="token punctuation">&#123;</span>    <span class="token comment">//需要实现 Validate 方法</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">ValidationResult</span> <span class="token function">Validate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">CultureInfo</span> cultureInfo<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">double</span></span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">out</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>d <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> d <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidationResult</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidationResult</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Validation Failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在窗体的构造器里建立 Binding：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Binding</span> binding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"Value"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>slider1 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    binding<span class="token punctuation">.</span>UpdateSourceTrigger <span class="token operator">=</span> UpdateSourceTrigger<span class="token punctuation">.</span>PropertyChanged<span class="token punctuation">;</span>    <span class="token class-name">RangeValidationRule</span> rvr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RangeValidationRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    binding<span class="token punctuation">.</span>ValidationRules<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>rvr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> binding<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下</p><p><img src="/images/Binding/image-20221207111506255.png"></p><blockquote><p>当输入0到100之间的值时程序正常显示，但输入这个区间之外的值或不能被解析的值时 TextBox 会显示红色边，表示值是错误的，不能把它传递给 Source。</p></blockquote><p>Binding默认只在Target被外部方法更新时校验数据，而来自Binding的Source属性更新Target时是不会进行校验的。<strong>当来自Source的数据也有可能出问题时，需要将校验条件的ValidatesOnTargetUpdated属性设置为true</strong>。</p><blockquote><p>所以上述方法只有改变 textBox1 的内容出错时，才会给予反馈，而 slider1 的滑块移出有效范围后，没有任何反馈(注意是在我已经将 slider1 的 Minimum 改为-10后)</p></blockquote><h4 id="在Target被Source属性更新时也校验数据"><a href="#在Target被Source属性更新时也校验数据" class="headerlink" title="在Target被Source属性更新时也校验数据"></a>在Target被Source属性更新时也校验数据</h4><p>设置 Bindinig代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Binding</span> binding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"Value"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>slider1 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    binding<span class="token punctuation">.</span>UpdateSourceTrigger <span class="token operator">=</span> UpdateSourceTrigger<span class="token punctuation">.</span>PropertyChanged<span class="token punctuation">;</span>    <span class="token class-name">RangeValidationRule</span> rvr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RangeValidationRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rvr<span class="token punctuation">.</span>ValidatesOnTargetUpdated <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">//需要加上这句</span>    binding<span class="token punctuation">.</span>ValidationRules<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>rvr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> binding<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下，当slider1 的滑块移出有效范围后 textBox1 也会显示校验失败的效果</p><p><img src="/images/Binding/image-20221207112301418.png"></p><h4 id="显示校验失败的错误消息"><a href="#显示校验失败的错误消息" class="headerlink" title="显示校验失败的错误消息"></a>显示校验失败的错误消息</h4><p>当校验错误的时候Validate方法返回的ValidationResult对象携带着一条错误消息，显示错误消息需要用到后面才会详细讲解的知识——<strong>路由事件（Routed Event）</strong>。</p><p>首先，在创建 Binding 时要把 Binding 对象的 NotifyOnValidationError 属性设为 true，这样，当数据校验失败的时候 Binding 会像报警器一样发出一个信号，这个信号会以 Binding 对象的 Target 为起点在 UI元素树上传播。信号每到达一个结点，如果这个结点上设置有对这种信号的侦听器(事件处理器)，那么这个侦听器就会被触发用以处理这个信号。信号处理完后，程序员还可以选择是让信号继续向下传播还是就此终止一一这就是路由事件，信号在UI元素树上的传递过程就称为路由 (Route)。</p><p>建立Binding的代码如下:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">      <span class="token keyword">public</span> <span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Binding</span> binding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"Value"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>slider1 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          binding<span class="token punctuation">.</span>UpdateSourceTrigger <span class="token operator">=</span> UpdateSourceTrigger<span class="token punctuation">.</span>PropertyChanged<span class="token punctuation">;</span>          <span class="token class-name">RangeValidationRule</span> rvr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RangeValidationRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          rvr<span class="token punctuation">.</span>ValidatesOnTargetUpdated <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>           binding<span class="token punctuation">.</span>ValidationRules<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>rvr<span class="token punctuation">)</span><span class="token punctuation">;</span>          binding<span class="token punctuation">.</span>NotifyOnValidationError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//1</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">.</span>TextProperty<span class="token punctuation">,</span> binding<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span><span class="token function">AddHandler</span><span class="token punctuation">(</span>Validation<span class="token punctuation">.</span>ErrorEvent<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RoutedEventHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ValidationError<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>      <span class="token punctuation">&#125;</span><span class="token comment">//用于侦听校验错误时间的事件处理器</span>      <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ValidationError</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>Validation<span class="token punctuation">.</span><span class="token function">GetErrors</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">)</span><span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>ToolTip <span class="token operator">=</span> Validation<span class="token punctuation">.</span><span class="token function">GetErrors</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ErrorContent<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/Binding/image-20221207122215339.png"></p><h4 id="Binding的数据转换"><a href="#Binding的数据转换" class="headerlink" title="Binding的数据转换"></a>Binding的数据转换</h4><p>Binding有一种机制称为<strong>数据转换（Data Convert）</strong>，当Source端Path所关联的数据与Target端目标属性数据类型不一致时（如Slider的Value属性是double类型值、TextBox的Text属性是string类型值），可以添加<strong>数据转换器（Data Converter）</strong>。</p><p>double类型与string类型互相转换处理起来比较简单，WPF类库自动替我们做了，但有些类型之间的转换就不是WPF能替我们做的了，如下面这些情况：</p><ul><li><strong>Source里的数据是Y、N和X三个值（可能是 char 类型、string 类型或自定义枚举类型），UI上对应的是CheckBox控件</strong>，需要把这三个值映射为它的IsChecked属性值（bool?类型）</li><li><strong>当TextBox里已经输入了文字时用于登陆的 Button 才会出现</strong>，这是 string 类型与 Visibility 枚举类型或bool类型之间的转换（Binding 的 Mode 将是 OneWay）。</li><li><strong>Source里的数据可能是Male或Female（string或枚举），UI上对应的是用于显示头像的Image控件</strong>，这时候需要把Source里的值转换成对应的头像图片URI（亦是 OneWay）。</li></ul><p>以上情况，只能自己动手写 Converter，方法是<strong>创建一个类并让这个类实现IValueConverter接口</strong>，IValueConverter接口定义如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IValueConverter</span><span class="token punctuation">&#123;</span>    <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Convert</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">Type</span> targetType<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> parameter<span class="token punctuation">,</span> <span class="token class-name">CultureInfo</span> culture<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">ConvertBack</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">Type</span> targetType<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> parameter<span class="token punctuation">,</span> <span class="token class-name">CultureInfo</span> culture<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当数据从Binding的Source流向Target时，Converter方法将被调用；反之，ConvertBack方法将被调用。两个方法的参数列表一模一样：</p><ul><li>第一个参数为object，最大限度地保证了Converter的重用性（<strong>可以在方法体内对实际类型进行判断</strong>）；</li><li>第二个参数用于确定方法的返回类型，可以理解为outputType<strong>避免与Binding的Target混淆</strong>；</li><li>第三个参数用于把额外的信息传入方法，<strong>若需要传递多个信息则可把信息放入一个集合对象来传入方法</strong>。</li></ul><p>Binding对象的Mode属性为TwoWay或Default行为与TwoWay一致，则两个方法都有可能被调用；Mode为OneWay或Default行为与OneWay一致则只有Convert方法会被调用，其他情况同理。</p><p>下面这个例子是一个Converter的综合实例，程序的用途是在列表里向玩家显示一些军用飞机的状态。<br>首先创建几个自定义类型数据：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Category</span><span class="token punctuation">&#123;</span>    Bomber<span class="token punctuation">,</span>    Fighter<span class="token punctuation">&#125;</span><span class="token comment">//状态</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">State</span><span class="token punctuation">&#123;</span>    Available<span class="token punctuation">,</span>    Locked<span class="token punctuation">,</span>    Unknown<span class="token punctuation">&#125;</span><span class="token comment">//飞机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Plane</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name">Category</span> Category <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name">State</span> State <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 UI里 Plane 的 Category 属性被映射为轰炸机或战斗机的图标，这两个图标我已经加入了项目</p><p><img src="/images/Binding/image-20221207133032285.png"></p><p>同时，飞机的 State 属性在 UI 里被映射为 CheckBox。因为存在以上两个映射关系，我们需要提供两个 Converter：一个是由 Category 类型单向转换为string 类型(XAML编译器能够把string对象解析为图片资源)，另一个是在 State 与 bool?类型之间双向转换。代码如下:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CategoryToSourceConcerter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IValueConverter</span></span><span class="token punctuation">&#123;</span>    <span class="token comment">// 将 Category 转换为 Uri</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Convert</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">Type</span> targetType<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> parameter<span class="token punctuation">,</span> <span class="token class-name">CultureInfo</span> culture<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">Category</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>Category<span class="token punctuation">)</span><span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> Category<span class="token punctuation">.</span>Bomber<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">@"\Icons\Bomber.png"</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> Category<span class="token punctuation">.</span>Fighter<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">@"\Icons\Fighter.png"</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 不会被调用</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">ConvertBack</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">Type</span> targetType<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> parameter<span class="token punctuation">,</span> <span class="token class-name">CultureInfo</span> culture<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StateToNullableBoolConverter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IValueConverter</span></span><span class="token punctuation">&#123;</span>    <span class="token comment">// 将 State 转换为 bool?</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Convert</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">Type</span> targetType<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> parameter<span class="token punctuation">,</span> <span class="token class-name">CultureInfo</span> culture<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">State</span> s <span class="token operator">=</span> <span class="token punctuation">(</span>State<span class="token punctuation">)</span><span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> State<span class="token punctuation">.</span>Available<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> State<span class="token punctuation">.</span>Locked<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> State<span class="token punctuation">.</span>Unknown<span class="token punctuation">:</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 将 bool? 转换为 State</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">ConvertBack</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">Type</span> targetType<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> parameter<span class="token punctuation">,</span> <span class="token class-name">CultureInfo</span> culture<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">bool</span><span class="token punctuation">?</span></span> nb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">?</span><span class="token punctuation">)</span><span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token boolean">true</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> State<span class="token punctuation">.</span>Available<span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token boolean">false</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> State<span class="token punctuation">.</span>Locked<span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token keyword">null</span><span class="token punctuation">:</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> State<span class="token punctuation">.</span>Unknown<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我们看看如何在 XAML 里消费这些 Concerter。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Window.Resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">local:</span>CategoryToSourceConcerter</span> <span class="token attr-name"><span class="token namespace">x:</span>Key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ets<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">local:</span>StateToNullableBoolConverter</span> <span class="token attr-name"><span class="token namespace">x:</span>Key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stnb<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Window.Resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span> <span class="token attr-name">Background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LightBlue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>listBoxPlane<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>160<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>buttonLoad<span class="token punctuation">"</span></span> <span class="token attr-name">Content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Load<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5,0<span class="token punctuation">"</span></span>            <span class="token attr-name">Click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>buttonLoad_Click<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>buttonSave<span class="token punctuation">"</span></span> <span class="token attr-name">Content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Save<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5,0<span class="token punctuation">"</span></span>            <span class="token attr-name">Click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>buttonSave_Click<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>XAML 代码中已经添加了对程序集的引用并映射为名称空间 local，同时，以资源的形式创建了两个 Converter 的实例。名为 listBoxPlane 的 ListBox 控件是我们工作的重点，需要为它添加用于显示数据的 DataTemplate。我们把焦点集中在 ListBox 控件的ItemTemplate 属性上:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>listBoxPlane<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>160<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListBox.ItemTemplate</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DataTemplate</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span> <span class="token attr-name">Orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Image</span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span>                               <span class="token attr-name">Source</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Path=Category,Converter=&#123;StaticResource ets&#125;&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Path=Name&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80,0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CheckBox</span> <span class="token attr-name">IsThreeState</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span>                                  <span class="token attr-name">IsChecked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Path=State,Converter=&#123;StaticResource stnb&#125;&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DataTemplate</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ListBox.ItemTemplate</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ListBox</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Load 按钮的 Click 事件处理器负责把一组飞机的数据赋值给 ListBox 的 ItemsSource 属性，Save 按钮的 Click 时间处理器负责把用户更改过的数据写入文件：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">buttonLoad_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List<span class="token punctuation">&lt;</span>Plane<span class="token punctuation">></span></span> planeList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Plane<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Plane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Category<span class="token operator">=</span>Category<span class="token punctuation">.</span>Bomber<span class="token punctuation">,</span>Name<span class="token operator">=</span><span class="token string">"B-1"</span><span class="token punctuation">,</span>State<span class="token operator">=</span>State<span class="token punctuation">.</span>Unknown<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Plane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Category<span class="token operator">=</span>Category<span class="token punctuation">.</span>Fighter<span class="token punctuation">,</span>Name<span class="token operator">=</span><span class="token string">"F-22"</span><span class="token punctuation">,</span>State<span class="token operator">=</span>State<span class="token punctuation">.</span>Unknown<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Plane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Category<span class="token operator">=</span>Category<span class="token punctuation">.</span>Bomber<span class="token punctuation">,</span>Name<span class="token operator">=</span><span class="token string">"B-2"</span><span class="token punctuation">,</span>State<span class="token operator">=</span>State<span class="token punctuation">.</span>Unknown<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Plane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Category<span class="token operator">=</span>Category<span class="token punctuation">.</span>Fighter<span class="token punctuation">,</span>Name<span class="token operator">=</span><span class="token string">"J-10"</span><span class="token punctuation">,</span>State<span class="token operator">=</span>State<span class="token punctuation">.</span>Unknown<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listBoxPlane<span class="token punctuation">.</span>ItemsSource <span class="token operator">=</span> planeList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">buttonSave_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">Plane</span> p <span class="token keyword">in</span> listBoxPlane<span class="token punctuation">.</span>Items<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        sb<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Category=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">p<span class="token punctuation">.</span>Category</span><span class="token punctuation">&#125;</span></span><span class="token string">,Name=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">p<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">,State=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">p<span class="token punctuation">.</span>State</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    File<span class="token punctuation">.</span><span class="token function">WriteAllText</span><span class="token punctuation">(</span><span class="token string">@"H:\DotNet\WPF\BindingExample\DataConvertExample\Items\PlaneList.txt"</span><span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>忽然发现图片没有加载进来，看了看原来是文件夹命名错了</p><p><img src="/images/Binding/image-20221207135814484.png"></p><p>发现还是不行，最后将传入的格式改为绝对路径可以了</p><p><img src="/images/Binding/image-20221207142627846.png"></p><p>运行效果如下</p><p><img src="/images/Binding/image-20221207142746941.png"></p><p><img src="/images/Binding/image-20221207142759962.png"></p><h2 id="MultiBinding（多路Binding）"><a href="#MultiBinding（多路Binding）" class="headerlink" title="MultiBinding（多路Binding）"></a>MultiBinding（多路Binding）</h2><p><strong>当UI需要显示的信息由不止一个数据来源决定时，需要使用MultiBinding，即多路Binding</strong>。MultiBinding与Binding一样均以BindingBase为基类，凡是能使用Binding对象的场合都能使用MultiBinding。</p><p>MultiBinding具有一个名为Bindings的属性（类型是Collection），通过这个属性MultiBinding把一组Binding对象聚合起来，<strong>处在这个集合中的Binding对象可以拥有自己的数据校验与转换机制</strong>，它们汇集起来的数据将共同决定传往MultiBinding目标的数据，示意图如下所示：</p><p><img src="/images/Binding/1495663-20210215143424787-981545996.png"></p><p>有一个用于新用户注册的UI（包含4个TextBox和一个Button），还有如下一些限定：</p><ul><li>第一、二个TextBox输入用户名，要求内容一致。</li><li>第三、四个TextBox输入用户E-Mail，要求内容一致。</li><li>当TextBox的内容全部符合要求的时候，Button可用。</li></ul><p>XAML代码如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span> <span class="token attr-name">Background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LightBlue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textBox1<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>23<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textBox2<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>23<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5,0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textBox3<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>23<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textBox4<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>23<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5,0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button1<span class="token punctuation">"</span></span> <span class="token attr-name">Content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Sumbit<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置MultiBinding的代码，实现Converter，代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">SetMultiBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetMultiBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 准备基础 Binding</span>    <span class="token class-name">Binding</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"Text"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">Binding</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"Text"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>textBox2 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">Binding</span> b3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"Text"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>textBox3 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">Binding</span> b4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"Text"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Source <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>textBox4 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//准备 MultiBinding</span>    <span class="token class-name">MultiBinding</span> mb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MultiBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Mode <span class="token operator">=</span> BindingMode<span class="token punctuation">.</span>OneWay <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    mb<span class="token punctuation">.</span>Bindings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//注意：MultiBinding 对 Add 子 Binding 的顺序是敏感的  </span>    mb<span class="token punctuation">.</span>Bindings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>    mb<span class="token punctuation">.</span>Bindings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span><span class="token punctuation">;</span>    mb<span class="token punctuation">.</span>Bindings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>b4<span class="token punctuation">)</span><span class="token punctuation">;</span>    mb<span class="token punctuation">.</span>Converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">LoginMultiBindingConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将 Button 与 MultiBinding 对象关联</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>button1<span class="token punctuation">.</span><span class="token function">SetBinding</span><span class="token punctuation">(</span>Button<span class="token punctuation">.</span>IsEnabledProperty<span class="token punctuation">,</span> mb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Globalization</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Data</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">MultiBindingExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">LoginMultiBindingConverter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMultiValueConverter</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Convert</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> values<span class="token punctuation">,</span> <span class="token class-name">Type</span> targetType<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> parameter<span class="token punctuation">,</span> <span class="token class-name">CultureInfo</span> culture<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>values<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Cast</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>text <span class="token operator">=></span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>values<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> values<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> values<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">ConvertBack</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> targetTypes<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> parameter<span class="token punctuation">,</span> <span class="token class-name">CultureInfo</span> culture<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意以下几点：</p><ul><li>MultiBinding对于<strong>添加子级Binding的顺序是敏感的</strong>，这个顺序决定了汇集到Converter里数据的顺序。</li><li>MultiBinding的Converter实现的是<strong>IMultiValueConverter接口</strong>。</li></ul><p>运行效果如下</p><p><img src="/images/Binding/image-20221207152018158.png"></p><p><img src="/images/Binding/image-20221207152032329.png"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>刘铁猛《深入浅出WPF》</li><li><a href="https://www.cnblogs.com/timefiles/archive/2021/02/15/WpfBinding.html">https://www.cnblogs.com/timefiles/archive/2021/02/15/WpfBinding.html</a></li><li><a href="https://cloud.tencent.com/developer/article/1793723">https://cloud.tencent.com/developer/article/1793723</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> .NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WPF </tag>
            
            <tag> 深入浅出WPF </tag>
            
            <tag> Data Binding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fox</title>
      <link href="/2022/11/17/Fox/"/>
      <url>/2022/11/17/Fox/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>bilibili麦扣<a href="https://space.bilibili.com/370283072?spm_id_from=333.337.0.0">M_Studio</a>老师的Unity教程，经典小狐狸打卡</p><h2 id="Asset-Store"><a href="#Asset-Store" class="headerlink" title="Asset Store"></a>Asset Store</h2><blockquote><p>Window –&gt; Asset Store</p></blockquote><p>目前只能访问网页端，打开页面如下</p><p><img src="/images/Fox/image-20221117111058142.png"></p><h2 id="Pixels-Per-Unit（PPU）"><a href="#Pixels-Per-Unit（PPU）" class="headerlink" title="Pixels Per Unit（PPU）"></a>Pixels Per Unit（PPU）</h2><p>每个Unity单位显示多少个像素。默认100也就意味着每1个unity单位显示100像素。这会让里面出现的东西显示的非常小，不适合创作，所以我们采用16</p><p><img src="/images/Fox/image-20221117135312255.png"></p><h2 id="Tileemap"><a href="#Tileemap" class="headerlink" title="Tileemap"></a>Tileemap</h2><p><strong>Tilemap</strong> 组件是一个存储和处理<a href="https://docs.unity.cn/cn/2018.4/Manual/Tilemap-TileAsset.html">瓦片资源</a>以便创建 2D 关卡的系统。</p><p>新版的Unity存在多个选项，选择第一个即可</p><blockquote><p>Hierarchy右键 –&gt; 2D Object –&gt; Tilemap –&gt; Rectangular</p></blockquote><p><img src="/images/Fox/image-20221117140114167.png"></p><h3 id="创建瓦片"><a href="#创建瓦片" class="headerlink" title="创建瓦片"></a>创建瓦片</h3><blockquote><p>Window -&gt; 2d -&gt; Tile Palette</p></blockquote><p><img src="/images/Fox/image-20221117140427880.png"></p><p>新版的SunnyLand 作者已经帮你切割好了</p><p>然后可以直接通过拖动Tile Palette里的元素绘制地图，简单绘制如下，有点抽象</p><p><img src="/images/Fox/image-20221117142153072.png"></p><p>如果你想让你的地图显示的完整点，可以通过修改<code>Main Camera</code>的<code>Size</code>实现</p><p><img src="/images/Fox/image-20221117142312777.png"></p><h2 id="Sorting-Layer"><a href="#Sorting-Layer" class="headerlink" title="Sorting Layer"></a>Sorting Layer</h2><p>在Unity中，2D的界面中一旦放入多个图像就需要对这些图像进行分层，以此区分哪个图显示在前哪个图显示在后。分层设置一般在<strong>Render（渲染器）</strong>的组件中<strong>Sorting Layer</strong>属性中设置。</p><p>一般操作过程就是添加<code>Add Sorting Layer...</code></p><p>越下面显示越前</p><p>当然也可以使用Order in Layer，数字越大显示越前面</p><h2 id="Input-Manager"><a href="#Input-Manager" class="headerlink" title="Input Manager"></a>Input Manager</h2><p>在 <strong>Input Manager</strong> 窗口中可以为项目定义输入轴及其关联操作。要访问该窗口，请从 Unity 的主菜单中转到 <strong>Edit &gt; Project Settings</strong>，然后从右侧的导航选择 <strong>Input Manager</strong>。</p><p><img src="/images/Fox/image-20221117155228601.png"></p><p>在2D中需要锁定刚体的Z，防止Player移动过程中旋转</p><blockquote><p>Rigidbody 2D –&gt; Constraints –&gt; FreezeRotation Z打勾</p></blockquote><p>当你在游戏试玩过程中更改的参数，结束运行时不会保存</p><blockquote><p>可以通过运行时右上角三点的 Copy Component复制，然后运行结束后选择Paste Component Values粘贴</p></blockquote><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="https://docs.unity.cn/cn/2018.4/Manual/class-Tilemap.html">Unity手册</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fox </tag>
            
            <tag> Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WPF入门</title>
      <link href="/2022/11/13/WPF/"/>
      <url>/2022/11/13/WPF/</url>
      
        <content type="html"><![CDATA[<h2 id="1-WPF-概述"><a href="#1-WPF-概述" class="headerlink" title="1. WPF 概述"></a>1. WPF 概述</h2><p>使用 Windows Presentation Foundation (WPF)，你可以创建适用于 Windows 且具有非凡视觉效果的桌面客户端应用程序。</p><p>WPF 的核心是一个与分辨率无关且基于矢量的呈现引擎，旨在充分利用现代图形硬件。 WPF 通过一套完善的应用程序开发功能对该核心进行了扩展，这些功能包括可扩展应用程序标记语言 (XAML)、控件、数据绑定、布局、二维和三维图形、动画、样式、模板、文档、媒体、文本和版式。 WPF 属于 .NET，因此可以生成整合 .NET API 其他元素的应用程序。</p><h2 id="2-WPF-特点"><a href="#2-WPF-特点" class="headerlink" title="2. WPF 特点"></a>2. WPF 特点</h2><p>1、统一的编程模型</p><p>WPF提供的编程模型统一普通控件、语音、视频、文档3D等技术，这些媒体类型能够统一协调工作，降低了我们的学习成本。</p><p>2、与分辨率无关</p><p>WPF是基于<strong>矢量</strong>绘图的，因此它产生的图形界面能够支持各种分辨率的显示设备，而不会像WinForm等在高分辨率的现实设备上产生锯齿。</p><p>3、硬件加速技术</p><p>WPF是基于<strong>Direct3D</strong>创建。在WPF应用程序中无论是2D还是3D的图形或者文字内容都会被转换为3D三角形、材质和其他Direct3D对象，并由硬件负责渲染，因此它能够更好的利用系统的图像处理单元GPU，从硬件加速中获得好处。</p><p>4、声明式编程</p><p>WPF引入一种新的<strong>XAML</strong>语言（Extensible Application Markup Language）来开发界面。使用XAML语言将界面开发以及后台逻辑开发很好的分开，降低了前后台开发的耦合度，使用户界面设计师与程序开发者能更好的合作，降低维护和更新的成本。</p><p>5、易于部署</p><p>WPF除了可以使用传统的Windows Installer以及ClickOnce方式来发布我们的桌面应用程序之外，还可以将我们的应用程序稍加改动发布为基于浏览器的应用程序。</p><p>6、基于数据驱动，数据是核心</p><h2 id="3-初步了解XAML"><a href="#3-初步了解XAML" class="headerlink" title="3. 初步了解XAML"></a>3. 初步了解XAML</h2><p>读作’zanmo’</p><p><strong>XAML 是一种基于 XML 的标记语言</strong>，以声明形式实现应用程序的外观。 通常用它创建窗口、对话框、页和用户控件，并填充控件、形状和图形。</p><p>XAML ⽂件是通常具有 .xaml 扩展名的 XML ⽂件。 可通过任何 XML 编码对⽂件进⾏编码，但通常以 UTF-8 编码。  </p><blockquote><p>Ctrl+K+C 快速注释</p><p>Ctrl+K+U 快速解注释</p></blockquote><h3 id="3-1-对象元素语法"><a href="#3-1-对象元素语法" class="headerlink" title="3.1 对象元素语法"></a>3.1 对象元素语法</h3><p>对象元素语法 是 XAML 标记语法，它通过声明 XML 元素来实例化 CLR 类或结构。 此语法类似于其他标记语⾔（如 HTML）的元素语法。</p><ul><li>单标签格式。 <markName>。</markName></li><li>双标签格式。 <markName> 【可嵌⼊其他的标签】 </markName>  </li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--单标签格式--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span><span class="token punctuation">/></span></span>       <span class="token comment">&lt;!--双标签格式--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--Content--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-XAML根元素"><a href="#3-2-XAML根元素" class="headerlink" title="3.2 XAML根元素"></a>3.2 XAML根元素</h3><p>⼀个 XAML ⽂件只能有⼀个根元素，这样才能同时作为格式正确的 XML ⽂件和有效的 XAML ⽂件。 对于典型 WPF ⽅案，可使⽤在 WPF 应⽤模型中具有突出意义的根元素（例如，⻚⾯的 Window 或 Page）  </p><p>Window</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Window</span> <span class="token attr-name"><span class="token namespace">x:</span>Class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WPFExample.MainWindow<span class="token punctuation">"</span></span>        <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml/presentation<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/expression/blend/2008<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>mc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.openxmlformats.org/markup-compatibility/2006<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>local</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clr-namespace:WPFExample<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">mc:</span>Ignorable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span>        <span class="token attr-name">Title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MainWindow<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>450<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Window</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Page</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Page</span> <span class="token attr-name"><span class="token namespace">x:</span>Class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WPFExample.Page1<span class="token punctuation">"</span></span>      <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml/presentation<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>mc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.openxmlformats.org/markup-compatibility/2006<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/expression/blend/2008<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>local</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clr-namespace:WPFExample<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">mc:</span>Ignorable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">d:</span>DesignHeight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>450<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">d:</span>DesignWidth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span>      <span class="token attr-name">Title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Page1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Page</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在根标签下只能有一个二级标签，例如Grid就是一个二级标签</p><p>而在二级标签下可以有多个三级、四级标签，就在上面介绍对象元素语法时，Grid标签下有两个Button三级标签</p></blockquote><h3 id="3-3-WPF-和-XAML-命名空间声明"><a href="#3-3-WPF-和-XAML-命名空间声明" class="headerlink" title="3.3 WPF 和 XAML 命名空间声明"></a>3.3 WPF 和 XAML 命名空间声明</h3><p>在许多 XAML ⽂件的根标记中的命名空间声明内，通常可看到两个 XML 命名空间声明。 **第⼀个声明默认映射整个 WPF 客户端/框架 **，XAML规定你可以有一个命名空间不加名字</p><blockquote><p>XAML 命名空间：xmlns=”<a href="http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;">http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</a></p></blockquote><p>第⼆个声明映射单独的 XAML 命名空间，（通常）将其映射到 x: 前缀。</p><blockquote><p>xmlns:x=”<a href="http://schemas.microsoft.com/winfx/2006/xaml&quot;">http://schemas.microsoft.com/winfx/2006/xaml&quot;</a></p></blockquote><p>这些声明之间的关系是 x: 前缀映射⽀持作为 xaml 语⾔定义⼀部分的内部函数，⽽ WPF 是⼀种将 xaml ⽤作语⾔的实现，并为 xaml 定义了其对象的词汇。  </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Window</span> <span class="token attr-name"><span class="token namespace">x:</span>Class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WPFExample.MainWindow<span class="token punctuation">"</span></span>        <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml/presentation<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/expression/blend/2008<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>mc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.openxmlformats.org/markup-compatibility/2006<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>local</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clr-namespace:WPFExample<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">mc:</span>Ignorable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span>        <span class="token attr-name">Title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MainWindow<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>450<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Window</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你想为第一个默认的名称空间加名字也可以，例如命名为n，改成如下格式即可</p><p><img src="/images/WPF/image-20221115102315216.png"></p><h3 id="3-4-在XAML中为对象属性赋值"><a href="#3-4-在XAML中为对象属性赋值" class="headerlink" title="3.4 在XAML中为对象属性赋值"></a>3.4 在XAML中为对象属性赋值</h3><h4 id="3-4-1-Attribute-Value-形式"><a href="#3-4-1-Attribute-Value-形式" class="headerlink" title="3.4.1 Attribute=Value 形式"></a>3.4.1 Attribute=Value 形式</h4><p>字符串形式赋值</p><blockquote><p>形如 Title=”MainWindow” Height=”450” Width=”800” 这样的形式</p></blockquote><p>适用于最简单的赋值</p><h4 id="3-4-2-属性标签"><a href="#3-4-2-属性标签" class="headerlink" title="3.4.2 属性标签"></a>3.4.2 属性标签</h4><p>对象类名+属性名，使用属性赋值可以进行复杂的赋值</p><p>例如想在Button的Content属性中添加一个Image</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button.Content</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Image</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button.Content</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想要让Rectangle获得渐变的效果，就不能使用形如<code>Fill=&quot;Red&quot;</code>的格式</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Rectangle</span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">Stroke</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Blue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Rectangle.Fill</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearGradientBrush</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearGradientBrush.StartPoint</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Point</span> <span class="token attr-name">X</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">Y</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearGradientBrush.StartPoint</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearGradientBrush.EndPoint</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Point</span> <span class="token attr-name">X</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">Y</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearGradientBrush.EndPoint</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearGradientBrush.GradientStops</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GradientStopCollection</span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GradientStop</span> <span class="token attr-name">Offset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.2<span class="token punctuation">"</span></span> <span class="token attr-name">Color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LightBlue<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GradientStop</span> <span class="token attr-name">Offset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.7<span class="token punctuation">"</span></span> <span class="token attr-name">Color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DarkBlue<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GradientStop</span> <span class="token attr-name">Offset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span> <span class="token attr-name">Color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Blue<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>GradientStopCollection</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearGradientBrush.GradientStops</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearGradientBrush</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Rectangle.Fill</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Rectangle</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>使用属性标签的弊端是让代码看起来有些臃肿，解决方向</strong></p><ol><li>能使用<code>Attribute=Value</code>的形式就使用<code>Attribute=Value</code>的形式</li><li>如果你需要的属性值是默认值就不需要写出来了</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Rectangle</span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">Stroke</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Blue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Rectangle.Fill</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearGradientBrush</span> <span class="token attr-name">StartPoint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0,0<span class="token punctuation">"</span></span> <span class="token attr-name">EndPoint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1,1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearGradientBrush.GradientStops</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GradientStopCollection</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GradientStop</span> <span class="token attr-name">Offset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.2<span class="token punctuation">"</span></span> <span class="token attr-name">Color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LightBlue<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GradientStop</span> <span class="token attr-name">Offset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.7<span class="token punctuation">"</span></span> <span class="token attr-name">Color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DarkBlue<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GradientStop</span> <span class="token attr-name">Offset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span> <span class="token attr-name">Color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Blue<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>GradientStopCollection</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearGradientBrush.GradientStops</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearGradientBrush</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Rectangle.Fill</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Rectangle</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> 甚至由于0,0 1,1就是StartPoint和EndPoint的默认值，可以直接不写</p></blockquote><h4 id="3-4-3-标签扩展"><a href="#3-4-3-标签扩展" class="headerlink" title="3.4.3 标签扩展"></a>3.4.3 标签扩展</h4><p>XAML中的标签扩展并不多</p><p>例如想在TextBlock中显示Hello WPF!</p><blockquote><p><TextBlock height="24" width="120" background="LightBlue" text="Hello WPF!"> 可以直接这么写</TextBlock></p></blockquote><p>也可以使用标签扩展，需要引入<code>xmlns:sys=&quot;clr-namespace:System;assembly=mscorlib&quot;</code>，同时添加<code>&lt;Window.Resources&gt;</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Window</span> <span class="token attr-name"><span class="token namespace">x:</span>Class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Lesson_02C.Window1<span class="token punctuation">"</span></span>        <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml/presentation<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/expression/blend/2008<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>mc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.openxmlformats.org/markup-compatibility/2006<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>sys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clr-namespace:System;assembly=mscorlib<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>local</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clr-namespace:Lesson_02C<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">mc:</span>Ignorable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span>        <span class="token attr-name">Title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Window1<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>450<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Window.Resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">sys:</span>String</span> <span class="token attr-name"><span class="token namespace">x:</span>Key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stringHello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello WPF!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">sys:</span>String</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Window.Resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>24<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span> <span class="token attr-name">Background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LightBlue<span class="token punctuation">"</span></span>                   <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;StaticResource ResourceKey=stringHello&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Window</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Text中的<code>ResourceKey=</code>也可以省略，但是为了代码的可读性建议不要省略</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid.RowDefinitions</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RowDefinition</span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>24<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RowDefinition</span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RowDefinition</span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>24<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid.RowDefinitions</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tb<span class="token punctuation">"</span></span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding ElementName=sld,Path=Value&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Slider</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sld<span class="token punctuation">"</span></span> <span class="token attr-name">Grid.Row</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">Value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">Maximum</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">Minimum</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/WPF/image-20221115145112954.png"></p><h2 id="4-x名称空间及常用元素"><a href="#4-x名称空间及常用元素" class="headerlink" title="4.  x名称空间及常用元素"></a>4.  x名称空间及常用元素</h2><h3 id="4-1-x名称空间的由来和作用"><a href="#4-1-x名称空间的由来和作用" class="headerlink" title="4.1 x名称空间的由来和作用"></a>4.1 x名称空间的由来和作用</h3><blockquote><p>x:Class  是对x名称空间的使用</p><p>xmlns:x 是对x名称空间的声明</p></blockquote><p>x名称空间专门用于解析和分析xaml文档</p><p>x名称空间里的成员是专门为<a href="https://so.csdn.net/so/search?q=XAML&spm=1001.2101.3001.7020">XAML</a>编译器看的，用来引导XAML编译器把XAML编译成CLR代码，因此x是XAML的首字母。通过x空间的成员告诉编译器怎么编译XAML，生成什么类名，属性的可访问性等。</p><h3 id="4-2-x名称空间里都有些什么"><a href="#4-2-x名称空间里都有些什么" class="headerlink" title="4.2 x名称空间里都有些什么"></a>4.2 x名称空间里都有些什么</h3><p align="center"><b>x名称空间中包含的工具</b></p><table><thead><tr><th align="center">名称</th><th align="center">种类（在XAML中出现的形式）</th></tr></thead><tbody><tr><td align="center">x:Array</td><td align="center">标签扩展</td></tr><tr><td align="center">x:Class</td><td align="center">Attribute</td></tr><tr><td align="center">x:ClassModifier</td><td align="center">Attribute</td></tr><tr><td align="center">x:Code</td><td align="center">XAML指令元素</td></tr><tr><td align="center">x:FieldModifier</td><td align="center">Attribute</td></tr><tr><td align="center">x:Key</td><td align="center">Attribute</td></tr><tr><td align="center">x:Name</td><td align="center">Attribute</td></tr><tr><td align="center">x:Shared</td><td align="center">Attribute</td></tr><tr><td align="center">x:Static</td><td align="center">标签扩展</td></tr><tr><td align="center">x:Subclass</td><td align="center">Attribute</td></tr><tr><td align="center">x:Type</td><td align="center">标签扩展</td></tr><tr><td align="center">x:TypeArguments</td><td align="center">Attribute</td></tr><tr><td align="center">x:Uid</td><td align="center">Attribute</td></tr><tr><td align="center">x:Data</td><td align="center">XAML指令元素</td></tr><tr><td align="center">x:Null</td><td align="center">标签扩展</td></tr></tbody></table><h3 id="4-3-x-Class"><a href="#4-3-x-Class" class="headerlink" title="4.3 x:Class"></a>4.3 x:Class</h3><p>用来告诉XAML编译器把XAML标签的编译结果与后台代码的哪个类合并，只能用于根节点，并且根节点的类型要与后台代码的类保持一致。</p><h3 id="4-4-x-ClassModifier"><a href="#4-4-x-ClassModifier" class="headerlink" title="4.4 x:ClassModifier"></a>4.4 x:ClassModifier</h3><p>用来告诉XAML编译器把XAML标签编译成的<strong>类具有怎样的访问级别</strong>，必须具有x:Class Attribute的标签才能应用，并且与指定的后端代码访问级别一致。</p><h3 id="4-5-x-Name"><a href="#4-5-x-Name" class="headerlink" title="4.5 x:Name"></a>4.5 x:Name</h3><p>用来告诉XAML编译器<strong>把创建的对象指向到指定的变量名，这样可以直接在代码中引用该对象</strong>。如果标签具有Name属性，同时把Name属性赋值为x:Name指定的值。<strong>为了增强代码的统一性，全部使用x:Name来指定对象的变量名</strong>。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//返回一个包含控件内容的对象</span>         <span class="token class-name">Grid</span> g <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Content <span class="token keyword">as</span> <span class="token class-name">Grid</span><span class="token punctuation">;</span>         <span class="token class-name">Button</span> b <span class="token operator">=</span> g<span class="token punctuation">.</span>Children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token class-name">Button</span><span class="token punctuation">;</span>         b<span class="token punctuation">.</span>Content <span class="token operator">=</span> <span class="token string">"WPF"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-x-FieldModifier"><a href="#4-6-x-FieldModifier" class="headerlink" title="4.6 x:FieldModifier"></a>4.6 x:FieldModifier</h3><p>用来告诉XAML编译器由该标签生成的<strong>类的字段的访问级别</strong>，默认为internal。</p><h2 id="5-MVVM入门与提高"><a href="#5-MVVM入门与提高" class="headerlink" title="5. MVVM入门与提高"></a>5. MVVM入门与提高</h2><p>必要知识的准备</p><ul><li>熟悉Data Binding 和 Dependency Property</li><li>了解WPF中的命令(知道ICommand接口即可)</li><li>熟悉Lambda表达</li></ul><blockquote><p>大致对应书上的第六章、第七章还有第九章的9.2.1</p></blockquote><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="https://learn.microsoft.com/zh-cn/dotnet/desktop/wpf/introduction-to-wpf?view=netframeworkdesktop-4.8">WPF 介绍</a></li><li><a href="https://www.jb51.net/article/238802.htm">WPF简介与基础开发</a></li><li>刘铁猛《深入浅出WPF》</li><li><a href="https://www.bilibili.com/video/BV1iY411w7zD?p=2&vd_source=794a7fc718885ad84490c05351dcf216">2022年WPF入门教程详解</a></li><li> <a href="https://www.cnblogs.com/jefflee/p/5806041.html">《深入浅出WPF》学习笔记之x名称空间详解</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> .Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WPF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp集合</title>
      <link href="/2022/11/08/CSharp%E9%9B%86%E5%90%88/"/>
      <url>/2022/11/08/CSharp%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>用过C++ STL容器的都知道STL容器非常好用，其封装了一些常用的数据结构，很方便使用。那么在C#中是否有类似与STL容器的东西呢？是有的，在<strong>C#集合(Collections)<strong>中，例如在STL中，最常用的容器要算</strong>vector、list、map、set</strong>这四种了。C#中，对应的容器分别是:<strong>List、LinkedList、Dictionary、HashSet</strong>。</p><h2 id="2-集合的类型"><a href="#2-集合的类型" class="headerlink" title="2. 集合的类型"></a>2. 集合的类型</h2><p>集合是一个类，因此必须在向该集合添加元素之前，声明类的实例。</p><p>如果集合中只包含一种数据类型的元素，则可以使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic">System.Collections.Generic</a> 命名空间中的一个类。 泛型集合强制类型安全，因此无法向其添加任何其他数据类型。 当你从泛型集合检索元素时，你无需确定其数据类型或对其进行转换。</p><p>集合有三个重要的类型：</p><ul><li><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/collections#BKMK_Generic">System.Collections.Generic 类</a></li><li><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/collections#BKMK_Concurrent">System.Collections.Concurrent 类</a></li><li><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/collections#BKMK_Collections">System.Collections 类</a></li></ul><h3 id="2-1-System-Collections-Generic-类"><a href="#2-1-System-Collections-Generic-类" class="headerlink" title="2.1 System.Collections.Generic 类"></a>2.1 System.Collections.Generic 类</h3><p>可以使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic">System.Collections.Generic</a> 命名空间中的某个类来创建泛型集合。 当集合中的所有项都具有相同的数据类型时，泛型集合会非常有用。 泛型集合通过仅允许添加所需的数据类型，强制实施强类型化。</p><p>下表列出了 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic">System.Collections.Generic</a> 命名空间中的一些常用类：</p><table><thead><tr><th align="left">类</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Dictionary&lt;TKey,TValue&gt;</td><td align="left">表示基于键进行组织的键/值对的集合。</td></tr><tr><td align="left">List<T></T></td><td align="left">表示可按索引访问的对象的列表。 提供用于对列表进行搜索、排序和修改的方法。</td></tr><tr><td align="left">Queue<T></T></td><td align="left">表示对象的先进先出 (FIFO) 集合。</td></tr><tr><td align="left">SortedList&lt;TKey,TValue&gt;</td><td align="left">表示基于相关的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic.icomparer-1">IComparer</a> 实现按键进行排序的键/值对的集合。</td></tr><tr><td align="left">Stack<T></T></td><td align="left">表示对象的后进先出 (LIFO) 集合。</td></tr></tbody></table><h4 id="2-1-1-Dictionary-lt-TKey-TValue-gt"><a href="#2-1-1-Dictionary-lt-TKey-TValue-gt" class="headerlink" title="2.1.1 Dictionary&lt;TKey,TValue&gt;"></a>2.1.1 Dictionary&lt;TKey,TValue&gt;</h4><p>表示键和值的集合。</p><p>在C#中,Dictionary能提供快速的基于键值的元素查找。我们先来看一下定义</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span>TValue<span class="token punctuation">></span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">.</span>ICollection<span class="token punctuation">&lt;</span>System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">.</span>KeyValuePair<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span>TValue<span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">.</span>IDictionary<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span>TValue<span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">.</span>IEnumerable<span class="token punctuation">&lt;</span>System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">.</span>KeyValuePair<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span>TValue<span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">.</span>IReadOnlyCollection<span class="token punctuation">&lt;</span>System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">.</span>KeyValuePair<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span>TValue<span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">.</span>IReadOnlyDictionary<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span>TValue<span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>IDictionary</span><span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>Serialization<span class="token punctuation">.</span>IDeserializationCallback</span><span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>Serialization<span class="token punctuation">.</span>ISerializable</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从定义中可以看到，Dictionary继承了很多父类。大体的功能就是让他能实现枚举，快速查找，比较，筛选等基本操作。</p><p>可详细参考官方文档：<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic.dictionary-2?view=net-6.0">Dictionary&lt;TKey,TValue&gt; 类</a></p><p>下面列举一个简单的示例</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//定义学生的学号和姓名</span><span class="token class-name"><span class="token keyword">var</span></span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//像集合中添加元素</span>stu<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stu<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stu<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"8yyy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历集合输出</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> it <span class="token keyword">in</span> stu<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"学号:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">it<span class="token punctuation">.</span>Key</span><span class="token punctuation">&#125;</span></span><span class="token string">  姓名:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">it<span class="token punctuation">.</span>Value</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"集合中一共有</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span>Count</span><span class="token punctuation">&#125;</span></span><span class="token string">个元素"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取集合的类型</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//移除集合中所有的键值</span>stu<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"集合中一共有</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span>Count</span><span class="token punctuation">&#125;</span></span><span class="token string">个元素"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/CSharp%E9%9B%86%E5%90%88/image-20221108114611128.png"></p><h4 id="2-1-2-List类"><a href="#2-1-2-List类" class="headerlink" title="2.1.2 List类"></a>2.1.2 List<T>类</T></h4><p>表示可通过索引访问的对象的强类型列表。 提供用于对列表进行搜索、排序和操作的方法。</p><blockquote><p>与C++中的vector容器非常相似</p></blockquote><p>之前做过整理，可查看我的博客：<a href="https://8yyy.github.io/2022/10/13/%E9%9B%86%E5%90%88%E7%B1%BB%E5%88%97%E8%A1%A8List/">集合类列表List</a></p><h4 id="2-1-3-Queue-类"><a href="#2-1-3-Queue-类" class="headerlink" title="2.1.3 Queue 类"></a>2.1.3 Queue<T> 类</T></h4><p>队列。表示对象的先进先出集合。</p><p>详细可参考官方文档：<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic.queue-1?view=net-7.0">https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic.queue-1?view=net-7.0</a></p><p>下面列举一个简单的示例</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">Queue<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Queue<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             nums<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加元素,相当于C++中的push</span>         <span class="token punctuation">&#125;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"原队列:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> nums<span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>item<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"当前队列一共有</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">nums<span class="token punctuation">.</span>Count</span><span class="token punctuation">&#125;</span></span><span class="token string">个元素"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回队列中的元素数,相当于C++中的size</span>         nums<span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//移除元素,相当于C++中的pop</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"移除元素后的队列:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> nums<span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>item <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"当前队列一共有</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">nums<span class="token punctuation">.</span>Count</span><span class="token punctuation">&#125;</span></span><span class="token string">个元素"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>   <span class="token comment">//判断某个元素是否在队列中</span>         <span class="token punctuation">&#123;</span>             Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"8在这个队列中"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"队列开始的元素为:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">nums<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//相当于c++中的front</span>         <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         arr<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将队列中的元素复制到arr数组中</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"数组arr中的元素:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> arr<span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>item <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下</p><p><img src="/images/CSharp%E9%9B%86%E5%90%88/image-20221110091012075.png"></p><h4 id="2-1-4-SortedList-lt-TKey-TValue-gt"><a href="#2-1-4-SortedList-lt-TKey-TValue-gt" class="headerlink" title="2.1.4 SortedList&lt;TKey,TValue&gt;"></a>2.1.4 SortedList&lt;TKey,TValue&gt;</h4><p>表示键/值对的集合，这些键和值按键排序并可按照键和索引访问。</p><p>SortedList最合适对一列<strong>健/值对</strong>进行排序，<strong>在排序时，是对键进行排序</strong>，<font color="red">SortedList 是 Hashtable 和 Array 的混合。当使用 Item 索引器属性按照元素的键访问元素时，其行为类似于 Hashtable。当使用 GetByIndex 或 SetByIndex 按照元素的索引访问元素时，其行为类似于 Array。</font></p><p>SortedList 在内部维护两个数组以将数组存储到列表中；即，一个数组用于键，另一个数组用于相关联的值。每个元素都是一个可作为 <strong>DictionaryEntry</strong> 对象进行访问的键/值对。键不能为空引用（Visual Basic 中为 Nothing），但值可以。SortedList 的容量是列表可拥有的元素数。随着向 SortedList 中添加元素，<strong>容量通过重新分配按需自动增加</strong>。可通过调用 TrimToSize 或通过显式设置 Capacity 属性减少容量。SortedList 的元素将按照特定的 IComparer 实现（在创建SortedList 时指定）或按照键本身提供的 IComparable 实现并<strong>依据键来进行排序</strong>。不论在哪种情况下，SortedList 都不允许重复键。</p><p>索引顺序基于排序顺序。当添加元素时，元素将按正确的排序顺序插入 SortedList，同时索引会相应地进行调整。若移除了元素，索引也会相应地进行调整。<font color="red">因此，当在SortedList 中添加或移除元素时，特定键/值对的索引可能会更改。</font></p><p>由于要进行排序，所以在 SortedList 上操作比在 Hashtable 上操作要慢。但是，SortedList 允许通过相关联键或通过索引对值进行访问，可提供更大的灵活性。</p><p><font color="red">由于 SortedList 的每个元素都是一个键/值对，因此元素类型既不是键的类型，也不是值的类型。而是 KeyValuePair&lt;(Of &lt;(TKey, TValue&gt;)&gt;) 类型。</font></p><p>以上内容转自：<a href="https://www.cnblogs.com/lgx5/p/6385680.html">https://www.cnblogs.com/lgx5/p/6385680.html</a></p><p>详细可参考官方文档：<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic.sortedlist-2?view=net-7.0">https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic.sortedlist-2?view=net-7.0</a></p><p>下面列举一个简单的示例</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">SortedList<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SortedList<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         stu<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//添加元素</span>         stu<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         stu<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"8yyy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">></span></span> item <span class="token keyword">in</span> stu<span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"键</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>Key</span><span class="token punctuation">&#125;</span></span><span class="token string">,值</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>Value</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"当前SortedList中一共可以包含</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span>Capacity</span><span class="token punctuation">&#125;</span></span><span class="token string">个元素"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         stu<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"wangwu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//SortedList会根据键进行排序</span>         stu<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">"zhaoyun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span> item <span class="token keyword">in</span> stu<span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"键</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>Key</span><span class="token punctuation">&#125;</span></span><span class="token string">,值</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>Value</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"当前SortedList中一共可以包含</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span>Capacity</span><span class="token punctuation">&#125;</span></span><span class="token string">个元素"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"当前SortedList中一共有</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span>Count</span><span class="token punctuation">&#125;</span></span><span class="token string">个元素"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//确定 SortedList&lt;TKey,TValue> 是否包含特定键。</span>         <span class="token punctuation">&#123;</span>             Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"当前SortedList中包含'8'键"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">ContainsValue</span><span class="token punctuation">(</span><span class="token string">"8yyy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//确定 SortedList&lt;TKey,TValue> 是否包含特定值。</span>         <span class="token punctuation">&#123;</span>             Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"当前SortedList中包含'8yyy'值"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"移除键为9的元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         stu<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//从 SortedList&lt;TKey,TValue> 中移除包含指定键的元素。</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"移除所有为2的元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         stu<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//移除 SortedList&lt;TKey,TValue> 的指定索引处的元素。</span>         <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span> item <span class="token keyword">in</span> stu<span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"键</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>Key</span><span class="token punctuation">&#125;</span></span><span class="token string">,值</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>Value</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"当前SortedList中一共可以包含</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span>Capacity</span><span class="token punctuation">&#125;</span></span><span class="token string">个元素"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"当前SortedList中一共有</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span>Count</span><span class="token punctuation">&#125;</span></span><span class="token string">个元素"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         stu<span class="token punctuation">.</span>Capacity <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>   <span class="token comment">//获取或设置 SortedList&lt;TKey,TValue> 可包含的元素数。</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"当前SortedList中一共可以包含</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span>Capacity</span><span class="token punctuation">&#125;</span></span><span class="token string">个元素"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/CSharp%E9%9B%86%E5%90%88/image-20221110095924572.png"></p><h4 id="2-1-5-Stack-类"><a href="#2-1-5-Stack-类" class="headerlink" title="2.1.5 Stack 类"></a>2.1.5 Stack<T> 类</T></h4><p>栈。表示相同指定类型的实例可变大小的后进先出 (LIFO) 集合。</p><p>详细可参考官方文档：<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic.stack-1?view=net-7.0">https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic.stack-1?view=net-7.0</a></p><p>下面列举一个简单的示例</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">Stack<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             st<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在 Stack&lt;T> 的顶部插入一个对象。</span>         <span class="token punctuation">&#125;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"原始栈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> st<span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>item<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"当前栈的元素个数</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">st<span class="token punctuation">.</span>Count</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//输出元素的个数</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"删除一个元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         st<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//删除并返回 Stack&lt;T> 顶部的对象。</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"当前栈的元素个数</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">st<span class="token punctuation">.</span>Count</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//输出元素的个数</span>         <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> st<span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>item <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回顶部的元素但不删除</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"3在这个栈中"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/CSharp%E9%9B%86%E5%90%88/image-20221110101754527.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/collections">MSDN C#集合</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Collections </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用排序算法汇总</title>
      <link href="/2022/11/07/%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/"/>
      <url>/2022/11/07/%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="1-算法分类"><a href="#1-算法分类" class="headerlink" title="1. 算法分类"></a>1. 算法分类</h2><p>十种常见排序算法可以分为两大类：</p><ul><li><strong>比较类排序</strong>：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此也称为非线性时间比较类排序。</li><li><strong>非比较类排序</strong>：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此也称为线性时间非比较类排序。 </li></ul><p><img src="/images/%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/849589-20190306165258970-1789860540.png"></p><h2 id="2-算法复杂度"><a href="#2-算法复杂度" class="headerlink" title="2. 算法复杂度"></a>2. 算法复杂度</h2><p><img src="/images/%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/849589-20180402133438219-1946132192.png"></p><ul><li><strong>稳定</strong>：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。</li><li><strong>不稳定</strong>：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。</li><li><strong>时间复杂度</strong>：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。</li><li><strong>空间复杂度：</strong>是指算法在计算机</li></ul><p>内执行时所需存储空间的度量，它也是数据规模n的函数。 </p><h2 id="3-冒泡排序（Bubble-Sort）"><a href="#3-冒泡排序（Bubble-Sort）" class="headerlink" title="3. 冒泡排序（Bubble Sort）"></a>3. 冒泡排序（Bubble Sort）</h2><h3 id="3-1-算法描述"><a href="#3-1-算法描述" class="headerlink" title="3.1 算法描述"></a>3.1 算法描述</h3><ul><li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li><li>针对所有的元素重复以上的步骤，除了最后一个；</li><li>重复步骤1~3，直到排序完成。</li></ul><h3 id="3-2-动图演示"><a href="#3-2-动图演示" class="headerlink" title="3.2 动图演示"></a>3.2 动图演示</h3><p><img src="/images/%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/849589-20171015223238449-2146169197.gif"></p><h3 id="3-3-使用CSharp代码实现"><a href="#3-3-使用CSharp代码实现" class="headerlink" title="3.3 使用CSharp代码实现"></a>3.3 使用CSharp代码实现</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">/// &lt;summary></span><span class="token comment">/// 冒泡排序</span><span class="token comment">/// &lt;/summary></span><span class="token comment">/// &lt;param name="arr">原数组&lt;/param></span><span class="token comment">/// &lt;returns>经过排序的数组&lt;/returns></span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//一共比较len-1次</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//每次比较len-1-i个元素</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//比较相邻的元素</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name"><span class="token keyword">int</span></span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//进行元素的交换</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-选择排序（Selection-Sort）"><a href="#4-选择排序（Selection-Sort）" class="headerlink" title="4. 选择排序（Selection Sort）"></a>4. 选择排序（Selection Sort）</h2><h3 id="4-1-算法描述"><a href="#4-1-算法描述" class="headerlink" title="4.1 算法描述"></a>4.1 算法描述</h3><p>n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：</p><ul><li>初始状态：无序区为R[1..n]，有序区为空；</li><li>第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；</li><li>n-1趟结束，数组有序化了。</li></ul><h3 id="4-2-动图演示"><a href="#4-2-动图演示" class="headerlink" title="4.2 动图演示"></a>4.2 动图演示</h3><p><img src="/images/%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/849589-20171015224719590-1433219824.gif"></p><h3 id="4-3-使用CSharp代码实现"><a href="#4-3-使用CSharp代码实现" class="headerlink" title="4.3 使用CSharp代码实现"></a>4.3 使用CSharp代码实现</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">/// &lt;summary></span><span class="token comment">/// 选择排序</span><span class="token comment">/// &lt;/summary></span><span class="token comment">/// &lt;param name="arr">原数组&lt;/param></span><span class="token comment">/// &lt;returns>经过排序的数组&lt;/returns></span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">SelectionSort</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//一共比较len-1次</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">int</span></span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//从i+1个开始找</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//找出当前最小的数，记录索引</span>            <span class="token punctuation">&#123;</span>                minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name"><span class="token keyword">int</span></span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//进行元素的交换</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-插入排序"><a href="#5-插入排序" class="headerlink" title="5. 插入排序"></a>5. 插入排序</h2><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><h3 id="5-1-算法描述"><a href="#5-1-算法描述" class="headerlink" title="5.1 算法描述"></a>5.1 算法描述</h3><p>一般来说，插入排序都采用<strong>in-place（占用常数内存，不占用额外内存</strong>）在数组上实现。具体算法描述如下：</p><ul><li>从第一个元素开始，该元素可以认为已经被排序；</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li><li>将新元素插入到该位置后；</li><li>重复步骤2~5。</li></ul><h3 id="5-2-动图演示"><a href="#5-2-动图演示" class="headerlink" title="5.2 动图演示"></a>5.2 动图演示</h3><p><img src="/images/%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/849589-20171015225645277-1151100000.gif"></p><h3 id="5-3-使用CSharp代码实现"><a href="#5-3-使用CSharp代码实现" class="headerlink" title="5.3 使用CSharp代码实现"></a>5.3 使用CSharp代码实现</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">/// &lt;summary></span><span class="token comment">/// 插入排序</span><span class="token comment">/// &lt;/summary></span><span class="token comment">/// &lt;param name="arr">原数组&lt;/param></span><span class="token comment">/// &lt;returns>排序后的数组&lt;/returns></span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">InsertionSort</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">int</span></span> preIndex<span class="token punctuation">;</span>     <span class="token class-name"><span class="token keyword">int</span></span> current<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                           <span class="token comment">//第一个元素默认已经排序，所以从第二个开始</span>    <span class="token punctuation">&#123;</span>        preIndex <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                                   <span class="token comment">//代表排序的元素前一个元素</span>        current <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                                   <span class="token comment">//代表排序的元素</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>preIndex <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span> <span class="token operator">></span> current<span class="token punctuation">)</span>    <span class="token comment">//找到比排序的元素大的元素，往后移</span>        <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>preIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            preIndex<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        arr<span class="token punctuation">[</span>preIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> current<span class="token punctuation">;</span>                        <span class="token comment">//进过排序后的preIndex的值为所要排序的元素的值前一个元素的索引，所以需要+1</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-希尔排序（Shell-Sort）"><a href="#6-希尔排序（Shell-Sort）" class="headerlink" title="6. 希尔排序（Shell Sort）"></a>6. 希尔排序（Shell Sort）</h2><p>1959年Shell发明，第一个突破O(n2)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫<strong>缩小增量排序</strong>。</p><h3 id="6-1-算法描述"><a href="#6-1-算法描述" class="headerlink" title="6.1 算法描述"></a>6.1 算法描述</h3><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p><ul><li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li><li>按增量序列个数k，对序列进行k 趟排序；</li><li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ul><h3 id="6-2-动图演示"><a href="#6-2-动图演示" class="headerlink" title="6.2 动图演示"></a>6.2 动图演示</h3><p><img src="/images/%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/849589-20180331170017421-364506073.gif" alt="img"></p><h3 id="6-3-使用CSharp代码实现"><a href="#6-3-使用CSharp代码实现" class="headerlink" title="6.3 使用CSharp代码实现"></a>6.3 使用CSharp代码实现</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">/// &lt;summary></span><span class="token comment">/// 希尔排序</span><span class="token comment">/// &lt;/summary></span><span class="token comment">/// &lt;param name="arr">原数组&lt;/param></span><span class="token comment">/// &lt;returns>排序后的数组&lt;/returns></span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">ShellSort</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//设置增量序列为len/2</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//进行插入排序</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> preIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> current <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>preIndex<span class="token operator">-</span>i<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>preIndex <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">></span> current<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                arr<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>preIndex <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>                preIndex <span class="token operator">=</span> preIndex <span class="token operator">-</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            arr<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span> <span class="token operator">=</span> current<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-归并排序（Merge-Sort）"><a href="#7-归并排序（Merge-Sort）" class="headerlink" title="7. 归并排序（Merge Sort）"></a>7. 归并排序（Merge Sort）</h2><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。 </p><h3 id="7-1-算法描述"><a href="#7-1-算法描述" class="headerlink" title="7.1 算法描述"></a>7.1 算法描述</h3><ul><li>把长度为n的输入序列分成两个长度为n/2的子序列；</li><li>对这两个子序列分别采用归并排序；</li><li>将两个排序好的子序列合并成一个最终的排序序列。</li></ul><h3 id="7-2-动图演示"><a href="#7-2-动图演示" class="headerlink" title="7.2 动图演示"></a>7.2 动图演示</h3><p><img src="/images/%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/849589-20171015230557043-37375010.gif"></p><p><img src="/images/%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/20210411164839610.png"></p><p>这张图来自chengxiao，具体哪看到的有些忘了</p><h3 id="7-3-使用CSharp代码实现"><a href="#7-3-使用CSharp代码实现" class="headerlink" title="7.3 使用CSharp代码实现"></a>7.3 使用CSharp代码实现</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">/// &lt;summary></span><span class="token comment">/// 归并排序</span><span class="token comment">/// &lt;/summary></span><span class="token comment">/// &lt;param name="arr">原数组&lt;/param></span><span class="token comment">/// &lt;param name="begin">数组开始的索引&lt;/param></span><span class="token comment">/// &lt;param name="end">数组结束的索引&lt;/param></span><span class="token comment">/// &lt;param name="temp">排序后的数组&lt;/param></span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MergeSort</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> begin<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> end<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> temp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">>=</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">int</span></span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>begin <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//分</span>    <span class="token function">MergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> mid<span class="token punctuation">,</span>  temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归排序arr[begin,mid](首先从上往下递归分解到最底层元素个数为1的情况)</span>    <span class="token function">MergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span>  temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归排序arr[mid + 1,end](首先从上往下递归分解到最底层元素个数为1的情况)</span>    <span class="token function">Merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> end<span class="token punctuation">,</span>  temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//然后递归的从下往上合并排序</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Merge</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> begin<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> mid<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> end<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> temp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> begin<span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">int</span></span> t <span class="token operator">=</span> begin<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> temp<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> temp<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> temp<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> temp<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> it <span class="token operator">=</span> begin<span class="token punctuation">;</span> it <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> arr<span class="token punctuation">[</span>it<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>it<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-4-算法分析"><a href="#7-4-算法分析" class="headerlink" title="7.4 算法分析"></a>7.4 算法分析</h3><p>归并排序是一种稳定的排序方法。和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(nlogn）的时间复杂度。代价是需要额外的内存空间。</p><h2 id="8-快速排序（Quick-Sort）"><a href="#8-快速排序（Quick-Sort）" class="headerlink" title="8. 快速排序（Quick Sort）"></a>8. 快速排序（Quick Sort）</h2><p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p><h3 id="8-1-算法描述"><a href="#8-1-算法描述" class="headerlink" title="8.1 算法描述"></a>8.1 算法描述</h3><p>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p><ul><li>从数列中挑出一个元素，称为 “基准”（pivot）；</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ul><h3 id="8-2-动图演示"><a href="#8-2-动图演示" class="headerlink" title="8.2 动图演示"></a>8.2 动图演示</h3><p><img src="/images/%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/849589-20171015230936371-1413523412.gif" alt="img"></p><h3 id="8-3-代码实现"><a href="#8-3-代码实现" class="headerlink" title="8.3 代码实现"></a>8.3 代码实现</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">/// &lt;summary></span><span class="token comment">/// 快速排序_主函数</span><span class="token comment">/// &lt;/summary></span><span class="token comment">/// &lt;param name="arr">数组&lt;/param></span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">QuickSort</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">QSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>Length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/// &lt;summary></span><span class="token comment">/// 快速排序_递归调用</span><span class="token comment">/// &lt;/summary></span><span class="token comment">/// &lt;param name="array">数组&lt;/param></span><span class="token comment">/// &lt;param name="low">低位索引&lt;/param></span><span class="token comment">/// &lt;param name="high">高位索引&lt;/param></span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">QSort</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> array<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> low<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> pivot<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        pivot <span class="token operator">=</span> <span class="token function">Partition</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">QSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> pivot <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//尾递归，可以减少一次递归堆栈深度</span>        low <span class="token operator">=</span> pivot <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/// &lt;summary></span><span class="token comment">/// 获取枢轴数</span><span class="token comment">/// &lt;/summary></span><span class="token comment">/// &lt;param name="array">数组&lt;/param></span><span class="token comment">/// &lt;param name="low">低位索引&lt;/param></span><span class="token comment">/// &lt;param name="high">高位索引&lt;/param></span><span class="token comment">/// &lt;returns>&lt;/returns></span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Partition</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> array<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> low<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> pivotkey<span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">int</span></span> m <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">//下面是三数取中优化</span>    <span class="token comment">//交换左端与右端数据，保证左端较小</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">ref</span> array<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">ref</span> array<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//交换中间与右端数据，保证中间较小</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">ref</span> array<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">ref</span> array<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//交换中间与左端数据，保证左端较小</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">ref</span> array<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">ref</span> array<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//默认选取当前数组的第一个值作为枢轴值</span>    pivotkey <span class="token operator">=</span> array<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//枢轴备份</span>    <span class="token class-name"><span class="token keyword">int</span></span> pivotkeyback <span class="token operator">=</span> pivotkey<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">>=</span> pivotkey<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            high<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        array<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivotkey<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            low<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        array<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//将枢轴数值替换回array[low]</span>    array<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> pivotkeyback<span class="token punctuation">;</span>    <span class="token comment">//返回当前枢轴下标</span>    <span class="token keyword">return</span> low<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/// &lt;summary></span><span class="token comment">/// 快速排序_元素交换</span><span class="token comment">/// &lt;/summary></span><span class="token comment">/// &lt;param name="x">&lt;/param></span><span class="token comment">/// &lt;param name="y">&lt;/param></span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span><span class="token keyword">ref</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> temp <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">;</span>    x <span class="token operator">=</span> y<span class="token punctuation">;</span>    y <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="mailto:undefined">烟雨迷离半世殇</a>大佬<a href="https://www.lfzxb.top/summary-of-common-sorting-algorithms/">常用排序算法汇总</a></li><li><a href="https://www.cnblogs.com/onepixel/p/7674659.html">十大经典排序算法（动图演示）</a>，大佬写的超级棒</li></ol>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataStructure </tag>
            
            <tag> CSharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity入门</title>
      <link href="/2022/11/03/Unity%E5%85%A5%E9%97%A8/"/>
      <url>/2022/11/03/Unity%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Unity介绍"><a href="#1-Unity介绍" class="headerlink" title="1. Unity介绍"></a>1. Unity介绍</h2><p>​        Unity 是实时3D互动内容创作和运营平台 。包括游戏开发、美术、建筑、汽车设计、影视在内的所有创作者，借助Unity将创意变成现实。 Unity平台提供一整套完善的软件解决方案，可用于创作、运营和变现任何实时互动的2D和3D内容，支持平台包括手机、平板电脑、PC、游戏主机、增强现实和虚拟现实设备。 </p><p>​        Unity  引擎的灵活性使开发者能够为超过20个平台创作和优化内容 ，这些平台包括<a href="https://baike.baidu.com/item/iOS/45705?fromModule=lemma_inlink">iOS</a>、安卓、<a href="https://baike.baidu.com/item/Windows/165458?fromModule=lemma_inlink">Windows</a>  、Mac OS、索尼<a href="https://baike.baidu.com/item/PS4/5619865?fromModule=lemma_inlink">PS4</a>、任天堂<a href="https://baike.baidu.com/item/Switch/20155794?fromModule=lemma_inlink">Switch</a> 、微软Xbox One、谷歌<a href="https://baike.baidu.com/item/Stadia/23387024?fromModule=lemma_inlink">Stadia</a>、<a href="https://baike.baidu.com/item/%E5%BE%AE%E8%BD%AFHololens/16690972?fromModule=lemma_inlink">微软Hololens</a>、谷歌AR Core、苹果AR Kit、商汤SenseAR等等  。公司超过1800人  规模的研发团队，同时跟随合作伙伴迭代 ，确保在最新的版本和平台上提供优化支持服务。</p><p>​        不仅提供创作工具 ，Unity还提供运营服务来帮助创作者 。这些解决方案包括：Unity Ads广告服务、Unity游戏云一站式联网游戏服务、Vivox游戏语音服务、Multiplay海外<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%89%98%E7%AE%A1/342361?fromModule=lemma_inlink">服务器托管</a>服务 、Unity内容分发平台（<a href="https://baike.baidu.com/item/UDP/571511?fromModule=lemma_inlink">UDP</a>）、Unity Asset Store资源商店 、Unity云构建等。 </p><p>​        Unity总部位于美国<a href="https://baike.baidu.com/item/%E5%8A%A0%E5%88%A9%E7%A6%8F%E5%B0%BC%E4%BA%9A%E5%B7%9E/40442?fromModule=lemma_inlink">加利福尼亚州</a>旧金山，并在丹麦、比利时、立陶宛、哥伦比亚 、加拿大、中国、芬兰、瑞典、德国、法国、日本、英国、爱尔兰、韩国和新加坡设有办公室。 创作者分布在全球190个国家和地区。</p><p>​                                                                                                                                                                                    ———摘自百度百科</p><h2 id="2-Unity官网"><a href="#2-Unity官网" class="headerlink" title="2. Unity官网"></a>2. Unity官网</h2><p>中文官网：<a href="https://unity.cn/">https://unity.cn</a></p><p>英文官网：<a href="https://unity.com/">https://unity.com</a></p><h2 id="3-Unity的下载和安装"><a href="#3-Unity的下载和安装" class="headerlink" title="3. Unity的下载和安装"></a>3. Unity的下载和安装</h2><p>一般最好下载<strong>LTS（Long Term Support）长期支持版本</strong></p><p>首先进入Unity中文网，点击右上角的Unity</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221103141053388.png"></p><p>对了，因为Unity和腾讯有合作，所以可以直接使用微信登录Unity官网</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221103141156925.png"></p><p>正常情况下，都是建议你先下载一个<code>Unity Hub</code>,然后在<code>Unity Hub</code>里下载<code>Unity</code></p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221103141340106.png"></p><p>然后我这个<code>Unity Hub</code>是之前下载VS的时候一起安装了的，然后点击安装发现容量不够，所以我选择自己安装，回到官网，选择2021.3.12版本，点击下载，当然你也可以选择更新的版本</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221103141500527.png"></p><p>下载完之后</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221103141836712.png"></p><h2 id="4-第一个Unity游戏RollABall"><a href="#4-第一个Unity游戏RollABall" class="headerlink" title="4. 第一个Unity游戏RollABall"></a>4. 第一个Unity游戏RollABall</h2><p>SIKI学院的一个实例</p><h3 id="4-1-新建项目"><a href="#4-1-新建项目" class="headerlink" title="4.1 新建项目"></a>4.1 新建项目</h3><p>首先需要在设置里激活许可证，选择个人版就好</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221103142909330.png"></p><p>到项目面本，点击新建一个3D游戏RollABall，我这里拼错了</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221103142019138.png"></p><p>创建完后之后打开是这样的，默认是Default，可点击右上角进行修改</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221103142137984.png"></p><h3 id="4-2-认识工程目录"><a href="#4-2-认识工程目录" class="headerlink" title="4.2 认识工程目录"></a>4.2 认识工程目录</h3><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221103142259578.png"></p><ol><li>Assets 资源，存放素材脚本场景等等</li><li>Library 库</li><li>Logs 日志</li><li>Packages 包</li><li>ProjectSettings 设置</li><li>Temp 临时文件夹</li><li>UserSettings</li></ol><p>然后我发现没有sln文件，经过搜索得知</p><blockquote><p>这个问题主要是没有在 <code>edit</code> -&gt; <code>preferences</code> -&gt; <code>External Tools</code> -&gt; <code>external script editor中设置你需要的启动器所以根本没生成sln文件，只要把这个设置为你使用的VS版本就可以了</code></p></blockquote><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221103144317045.png"></p><h3 id="4-3-如何创建代码和场景"><a href="#4-3-如何创建代码和场景" class="headerlink" title="4.3 如何创建代码和场景"></a>4.3 如何创建代码和场景</h3><p>目前Unity脚本只支持C#,放在Assets文件夹下，过程如下</p><blockquote><p>右键Assets文件夹 –&gt; create  –&gt; c# scripts</p></blockquote><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221103145404776.png"></p><p>就会创建一个名为<code>NewBehaviourScript</code>的C#脚本，可以给他重命名下，双击脚本，即可打开VS</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221103145510730.png"></p><p>打开VS默认如下，发现之前做坦克大战的时候差不多的两个方法</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221103145606551.png"></p><p>打开工程文件夹，就可以看到刚才创建的脚本文件</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221103145657372.png"></p><p>Scenes是指游戏场景，我们可以在Unity当中</p><blockquote><p>右键Assets下的Scenes文件夹  –&gt; create  –&gt;  Scene 创建游戏场景，默认会存在一个<code>SampleScene</code>场景</p></blockquote><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221103150252534.png"></p><h3 id="4-4-五个窗口面板的作用"><a href="#4-4-五个窗口面板的作用" class="headerlink" title="4.4 五个窗口面板的作用"></a>4.4 五个窗口面板的作用</h3><p>在Unity中，有五个主要的面板</p><ol><li><p>Scene              场景面板，显示当前场景的样子</p><p>鼠标中键：平移视角</p><p>鼠标右键：旋转视角（环顾四周），围绕自身旋转</p><p>Alt+鼠标左键：渲染视角，围绕当前视角前方位置</p></li><li><p>Game              游戏面板，场景运行的时候的样子</p></li><li><p>Hierarchy       层级面板</p><ul><li><p>展示当前<code>场景Scene</code>有哪些游戏物体</p></li><li><p>会根据点击不同的<code>场景Scene</code>进行转换</p></li><li><p>Main Camera        相机</p></li><li><p>Directional light    太阳</p></li></ul></li><li><p>Project            工程面板，存放工程的各种资源</p><ul><li>Assets      存放资源</li><li>Packages 保存插件</li></ul></li><li><p>Inspector        检视面板（也可以叫属性面板）</p><ul><li>展示当前<code>游戏物体GameObject</code>有哪些<code>组件Component</code></li></ul></li></ol><blockquote><p>一个场景包含多个游戏物体，每个游戏物体包含多个组件</p></blockquote><p>你可以自定义Unity的布局，然后点击右上角，Save Layout，现在我使用的是tall，如下图所示</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221103150938476.png"></p><h3 id="4-5-Unity中的基本模型和场景操作"><a href="#4-5-Unity中的基本模型和场景操作" class="headerlink" title="4.5 Unity中的基本模型和场景操作"></a>4.5 Unity中的基本模型和场景操作</h3><p><strong>场景基本操作</strong></p><blockquote><p>聚焦：双击游戏物体 或者 F</p><p>放大缩小视野：鼠标滚轮</p><p>围绕物体旋转：Alt+鼠标左键</p><p>使用MoveTool下 移动物体</p></blockquote><p><strong>视野分类</strong></p><blockquote><p><strong>Persp</strong> 透视视野     <strong>ISO</strong>平行视野</p><p>在不同视野下：关于鼠标右键的不同</p></blockquote><h3 id="4-6-世界坐标系和局部坐标系"><a href="#4-6-世界坐标系和局部坐标系" class="headerlink" title="4.6 世界坐标系和局部坐标系"></a>4.6 世界坐标系和局部坐标系</h3><p><strong>坐标系</strong>：x左右 y上下 z前后</p><p><strong>局部坐标系</strong>：父物体和子物体</p><p><strong>单位：</strong>Unity里面的坐标是以米为单位的</p><h3 id="4-7-工具栏"><a href="#4-7-工具栏" class="headerlink" title="4.7 工具栏"></a>4.7 工具栏</h3><p><strong>四个工具</strong>:Q W E R</p><p><strong>Q：</strong>视图工具（使用鼠标中键可以临时切换到这个工具）</p><blockquote><p>可以随意移动视图</p></blockquote><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104101322839.png"></p><p><strong>W：</strong>移动工具</p><blockquote><p>可以通过XYZ三个坐标系移动</p></blockquote><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104101400797.png"></p><p><strong>E：</strong>旋转工具</p><blockquote><p> 可以通过控制三个圆圈的线控制XYZ坐标的旋转          </p></blockquote><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104101506400.png"></p><p><strong>R：</strong>缩放工具</p><blockquote><p>通过控制XY坐标轴进行放大缩小</p></blockquote><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104101555584.png"></p><p><strong>Rect Tool</strong>                一般开发2D游戏使用</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104101644667.png"></p><p><strong>Transform Tool</strong>     WRE同时调用，坐标轴，旋转球，缩放</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104101658245.png"></p><p>在将碰撞之前我们需要知道<code>Mesh Renderer</code>用于控制游戏物体渲染之后的样子，<code>Mesh Collider</code>用于控制游戏物体的碰撞检测</p><p><strong>Collider Tool</strong> 碰撞工具</p><blockquote><p>可扩大缩小碰撞检测的范围(对应Inspector中的Box Collider属性)</p></blockquote><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104102105097.png"></p><p><strong>切换工具</strong></p><ul><li><p><strong>位置工具</strong>：</p><ul><li>Pivot原点(游戏物体中心) </li><li><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104102950567.png"></li><li>Center中心(Collider中心)</li><li><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104103031040.png"></li></ul></li><li><p>局部和全局坐标切换：Local - Global</p></li></ul><p>步移工具</p><blockquote><p>需要设置为全局坐标Global，每次移动一格，Ctrl快捷键每次移动过0.25格</p></blockquote><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104103412284.png"></p><h3 id="4-8-创建地面"><a href="#4-8-创建地面" class="headerlink" title="4.8 创建地面"></a>4.8 创建地面</h3><p>首先创建一个主场景<code>MainScene</code></p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104104215906.png" alt="image-20221104104215906"></p><p>然后创建Plane，默认大小为10X10</p><blockquote><p>右键Hierarchy中的MainScene –&gt;  GameObject –&gt;  3D Object –&gt;  Plane</p></blockquote><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104104506066.png"></p><p>修改<code>Plane-&gt;Transform-&gt;Scale</code>属性XZ放大2倍</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104104624649.png" alt="image-20221104104624649"></p><p>这样地面的大小改为了20X20</p><p>之后在Assets文件夹下新建一个<code>Folder</code>，名为<code>Materials</code>（用于放置所有的材质），在这个文件夹下新建一个<code>Material</code>（用于控制游戏物体的样子，所拥有的材质），名为<code>Ground</code></p><blockquote><p> 我们可以通过移动直接把Ground拖到Plane上，在Scene，Hierarchy，Inspector等等场景均可以</p></blockquote><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104105659011.png"></p><p>然后我们可以通过修改Ground的Albedo属性修改地面的颜色</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104105746048.png"></p><blockquote><p>三者关系</p></blockquote><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104110118948.png"></p><p>Shader需要学的东西比较多点，3D游戏或者大作</p><h3 id="4-9-游戏物体的基本组件和渲染模型和碰撞模型"><a href="#4-9-游戏物体的基本组件和渲染模型和碰撞模型" class="headerlink" title="4.9 游戏物体的基本组件和渲染模型和碰撞模型"></a>4.9 游戏物体的基本组件和渲染模型和碰撞模型</h3><p><strong>基本组件</strong></p><p><strong>Transform</strong>：变换组件，位置、旋转、缩放。</p><p><strong>Mesh Filter</strong>：网格</p><p><strong>Meth Render</strong>：网格渲染（这个组件会使用材质进行渲染）</p><p><strong>Collider</strong>：碰撞检测</p><p><strong>为什么渲染模型和碰撞模型要分开？</strong></p><p>因为游戏当中运动和碰撞都是需要计算机来计算的，这时候网格越复杂，检测起来运算起来就越复杂，用简化的模型去计算碰撞检测</p><blockquote><p>一般我们让美术做两套建模，一套精细的用于渲染，一套简化的用于碰撞检测</p></blockquote><p>将Plane更名为Ground用来表示地面，然后创建一个3D Object-&gt;Sphere用来表示小球，小球就是我们的主角，我们可以把他更名为Player表示玩家，然后我们也给小球添加一个材质Materials来控制它的颜色</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104112558454.png"></p><p>然后我们可以修改材质的Smoothness属性可以修改小球的光滑程度，当Smoothness为1时效果如下图所示</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104112658661.png"></p><p>当然这里我们把小球的Smoothness设置为0，表示最粗糙的程度</p><h3 id="4-10-游戏引擎的作用"><a href="#4-10-游戏引擎的作用" class="headerlink" title="4.10 游戏引擎的作用"></a>4.10 游戏引擎的作用</h3><p>渲染DX(DirectX) OpenGL(移动端渲染)</p><p>碰撞检测，我们只需要做碰撞之后的事情即可，不需要我们自己检测</p><h3 id="4-11-书写第一个代码（脚本）"><a href="#4-11-书写第一个代码（脚本）" class="headerlink" title="4.11 书写第一个代码（脚本）"></a>4.11 书写第一个代码（脚本）</h3><p>首先我们先尝试运行，我们可以发现小球停在半空中</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104141948671.png"></p><p>如果我们想让小球像现实世界一样受到重力的影响，我们该怎么做呢？</p><blockquote><p>答案是添加一个<strong>刚体组件Rigidbody</strong>，<strong>刚体组件的作用：</strong>模拟物理效果（重力、摩擦力、弹力、动力等），可以通过刚体控制小球的运动。</p></blockquote><p>添加的过程是</p><blockquote><p>点击小球Player –&gt; Inspector场景下底部Add Component添加组件 –&gt; 搜索Rigidbody 添加即可</p></blockquote><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104142521962.png"></p><p>然后我们再运行，就可以发现小球正常落到地面上了</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104142601105.png"></p><p>之后我们就可以开始编写脚本了，首先在Project面板的Assets文件夹下新建一个Scripts文件夹，用于存放脚本，将之前创建的NewBehaviourScript脚本存放进去</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104142752372.png"></p><p>这时候我们的脚本和游戏物体是没有关联的，如果我们想为<code>Player小球</code>添加<code>NewBehaviourScript脚本</code>，只需要把<code>NewBehaviourScript脚本</code>拖拽到<code>Player小球</code>上即可</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104143042875.png"></p><p>双击<code>NewBehaviourScript脚本</code>打开VS，添加两句简单的代码，用于输出日志(给开发者看的，不是给玩家看的)</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104143944479.png"></p><p>然后回到Unity运行结果如下</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104144120959.png"></p><p>我们可以发现<code>游戏开始了</code>只运行了一次，而<code>游戏正在运行</code>则一直在运行，所以我们可以把游戏的初始化工作放到Start()方法里，而把游戏中一直需要不断做的放到Update()方法里</p><p>为了更清楚的显示在刚才执行的过程中运行了几次Update()，我们可以点击<code>Collapse</code></p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104144336041.png"></p><blockquote><p>需要注意的一点是，类名和脚本名需保持一致</p></blockquote><h3 id="4-12-通过刚体控制小球运动"><a href="#4-12-通过刚体控制小球运动" class="headerlink" title="4.12 通过刚体控制小球运动"></a>4.12 通过刚体控制小球运动</h3><p>可以在脚本中添加代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewBehaviourScript</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name">Rigidbody</span> Rd <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">//如果这么写在Unity中不会显示Rd,去掉后面的getset后才显示，不过不影响运行结果</span>    <span class="token comment">// Start is called before the first frame update</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Rd <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取组件</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Update is called once per frame</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Rd<span class="token punctuation">.</span><span class="token function">AddForce</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加力，Vector3指三维向量，向左施加一个1N的力</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回到Unity运行之后小球就会一直向右移动</p><p><strong>方法总结</strong></p><p>第一种方法 - 通过代码获取</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token class-name">Rigidbody</span> rd<span class="token punctuation">;</span>rd <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二种方法 - 通过拖拽（不推荐）</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token class-name">Rigidbody</span> rd<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>给小球添加力</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">rd<span class="token punctuation">.</span><span class="token function">AddForce</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向右1N</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">rd<span class="token punctuation">.</span><span class="token function">AddForce</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向右5N</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>知识点1：</strong>方法调用 </p><p>x.AddForce 也可以叫做调用指令，调用指令的时候需要通过（）传递参数。</p><p>小明你去买点菠菜。 小明.买(菠菜)     小明.买菠菜()</p><p><strong>知识点2：</strong>三维向量  (x,y,z) </p><p>Vector3.forward 等于 （0,0,1）</p><p>向量两个要素（方向，长度）  （0,0,1）  （0,0,4）</p><p><strong>知识点3：</strong>一些常用的向量</p><p>Vector3.right  Vector3.left   Vector3.forward  Vector3.back  Vector3.up Vector3.down</p><p><strong>知识点4：</strong>怎么创建向量</p><p>new Vector3(x,y,z)</p><blockquote><p>通过这种方法小球的运动是慢慢加快的，就和现实中一样，一个物体受到一个力由静止做加速运动</p></blockquote><h3 id="4-13-监听键盘并控制小球运动"><a href="#4-13-监听键盘并控制小球运动" class="headerlink" title="4.13 监听键盘并控制小球运动"></a>4.13 监听键盘并控制小球运动</h3><p>首先我们在Update()方法中添加如下两行代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">float</span></span> h <span class="token operator">=</span> Input<span class="token punctuation">.</span><span class="token function">GetAxis</span><span class="token punctuation">(</span><span class="token string">"Horizontal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后回到Unity进行监听，默认为0</p><p>尝试按A键并保持，我们发现当我们按A键时，不是立即输出-1，而是从0过度到-1，保持之后会一直在-1，松开之后会从-1过度到0</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104154511522.png"></p><p>如果我们按D则相反为1</p><p>接下来我们修改代码如下</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221104154900545.png"></p><p>回到Unity运行，我们发现小球可以根据AD键进行左右移动了</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewBehaviourScript</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Rigidbody</span> Rd<span class="token punctuation">;</span>    <span class="token comment">// Start is called before the first frame update</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Rd <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取组件</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Update is called once per frame</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">float</span></span> h <span class="token operator">=</span> Input<span class="token punctuation">.</span><span class="token function">GetAxis</span><span class="token punctuation">(</span><span class="token string">"Horizontal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//A-1 D1</span>        <span class="token class-name"><span class="token keyword">float</span></span> v <span class="token operator">=</span> Input<span class="token punctuation">.</span><span class="token function">GetAxis</span><span class="token punctuation">(</span><span class="token string">"Vertical"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//WS</span>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>           Rd<span class="token punctuation">.</span><span class="token function">AddForce</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上代码我们就可以通过WASD和方向键共8个键控制小球移动了</p><h3 id="4-14-控制相机跟随移动"><a href="#4-14-控制相机跟随移动" class="headerlink" title="4.14 控制相机跟随移动"></a>4.14 控制相机跟随移动</h3><p>让小球刚好贴到体面上，且位于中心只要设置**XYZ(0,0.5,0)**，</p><p>Y是上下，0.5是小球的半径，意思就是小球的中心点向上半径的位置</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221105211006126.png"></p><p>将Main Camera设置如下，主要用到了WE工具</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221107151709917.png"></p><p>然后在Main Camera添加一个C#脚本，名为FollowTarget，将Plyaer通过拖拽添加进去</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221107151843141.png" alt="image-20221107151843141"></p><p>FollowTarget代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FollowTarget</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Transform</span> playerTransform<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Vector3</span> offset<span class="token punctuation">;</span>    <span class="token comment">// Start is called before the first frame update</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        offset <span class="token operator">=</span> transform<span class="token punctuation">.</span>position <span class="token operator">-</span> playerTransform<span class="token punctuation">.</span>position<span class="token punctuation">;</span> <span class="token comment">//计算小球与相机的偏移量</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Update is called once per frame</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        transform<span class="token punctuation">.</span>position <span class="token operator">=</span> playerTransform<span class="token punctuation">.</span>position <span class="token operator">+</span> offset<span class="token punctuation">;</span> <span class="token comment">//设计相机的位置</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-15-添加墙"><a href="#4-15-添加墙" class="headerlink" title="4.15 添加墙"></a>4.15 添加墙</h3><p>现在因为没有墙，所以小球会滚出地面</p><p>使用Cube即可</p><blockquote><p>右键Hierarchy中的MainScene –&gt;  GameObject –&gt;  3D Object –&gt;  Cute</p></blockquote><p>修改Cute名称为Wall，设置Transform如下，并添加一个material</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221107153235476.png"></p><p>Ctrl+D复制Wall，添加效果如下</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221107153419787.png"></p><p>这样小球就不会滚出地面了</p><h3 id="4-16-创建可捡起物和创建预制体（Prefab）"><a href="#4-16-创建可捡起物和创建预制体（Prefab）" class="headerlink" title="4.16 创建可捡起物和创建预制体（Prefab）"></a>4.16 创建可捡起物和创建预制体（Prefab）</h3><p>为了可读性更高，我们可以将游戏物体进行归类</p><blockquote><p>右键Hierarchy中的MainScene –&gt;  GameObject –&gt;  Create Empty</p></blockquote><p>创建一个名为env（环境英文的缩写）的空物体，将地面啊，墙之类的放进去</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221107153948669.png"></p><blockquote><p>为什么做成预制体？</p></blockquote><p><strong>因为一个游戏中可能有很多相同或者类似的东西，如果不使用预制体，而一个一个创建的话，当你需要修改这些类似的东西的时候就需要一个一个的去修改很麻烦。</strong></p><p>我们现在就需要把可捡起物Food设置为预制体</p><p>使用Cube即可</p><blockquote><p>右键Hierarchy中的MainScene –&gt;  GameObject –&gt;  3D Object –&gt;  Cute</p></blockquote><p>将其重命名为Food，并添加一个材质Material，名为Food，效果如下</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221107155506898.png"></p><p>之后创建一个预制体</p><p>在Assets文件夹下新建一个名为Prefabs的文件夹用于存放预制体，然后将Food直接拖进去即可，效果如下</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221107155719372.png"></p><p>复制可捡起物，效果如下</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221107155958266.png"></p><blockquote><p>怎么修改预制体？</p></blockquote><p><strong>如果想修改预制体，只需要点击Prefabs的Food，修改右边的Inspector窗口下的属性即可</strong></p><p>如果想通过子物品修改预制体的属性，可通过</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221107160404705.png"></p><h3 id="4-17-控制可捡起物体旋转和学习文档查阅"><a href="#4-17-控制可捡起物体旋转和学习文档查阅" class="headerlink" title="4.17 控制可捡起物体旋转和学习文档查阅"></a>4.17 控制可捡起物体旋转和学习文档查阅</h3><p>控制可捡起物旋转，给预制体添加一个Food脚本</p><p>添加代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">transform<span class="token punctuation">.</span><span class="token function">Rotate</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span>up<span class="token punctuation">,</span>Space<span class="token punctuation">.</span>World<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行之后你就会发现所有的Food都进行了旋转</p><p>文档查阅</p><blockquote><p>Help菜单栏 –&gt; 点击Unity Manual/Scripting Reference</p></blockquote><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221108152346190.png"></p><h3 id="4-18-通过检测碰撞-检测碰撞到食物"><a href="#4-18-通过检测碰撞-检测碰撞到食物" class="headerlink" title="4.18 通过检测碰撞=检测碰撞到食物"></a>4.18 通过检测碰撞=检测碰撞到食物</h3><p>小球与Cube的碰撞，碰撞后小球吃掉Food(Cube)</p><p>Unity已经帮我们写好了碰撞检测的代码</p><p><strong>检测碰撞</strong></p><p>1、系统事件（消息，方法）</p><blockquote><p>系统调用（发送）</p><p>示例：</p><p>OnCollisionEnter 碰撞开始</p><p>OnCollisionStay   持续碰撞</p><p>OnCollisionExit    碰撞结束</p><p>测试碰撞是三个事件</p></blockquote><p>由于小球是要吃掉Cube的所以，这里我们只需要用到OnCollisionEnter </p><blockquote><p> 区分游戏物体有两种方式:名字和标签Tag，均可以重复</p></blockquote><p>如何给预制体Food添加一个名为Tag的标签?</p><blockquote><p>Tag –&gt; Add Tag –&gt; + –&gt; 设置名字 –&gt; save</p></blockquote><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221108154212675.png"></p><p><strong>通过标签Tag区分游戏物体比名字更好。</strong></p><p>2、获取到碰撞的物体名字</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnCollisionEnter</span><span class="token punctuation">(</span><span class="token class-name">Collision</span> collision<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">string</span></span> name <span class="token operator">=</span> collision<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>name<span class="token punctuation">;</span>    Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>知识点</p><p>GameObject Component</p><p>component.gameObject</p><p>component.gameObject.name</p><p>component.name</p></blockquote><p>3、添加标签，通过标签区分某一类物体（食物、敌人）</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnCollisionEnter</span><span class="token punctuation">(</span><span class="token class-name">Collision</span> collision<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>collision<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>tag <span class="token operator">==</span> <span class="token string">"Food"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Destroy</span><span class="token punctuation">(</span>collision<span class="token punctuation">.</span>collider<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过这种实现的方式，小球吃方块的时候会顿一下。</p></blockquote><h3 id="4-19-通过触发检测，吃食物"><a href="#4-19-通过触发检测，吃食物" class="headerlink" title="4.19 通过触发检测，吃食物"></a>4.19 通过触发检测，吃食物</h3><p>触发器本质是一个碰撞器</p><blockquote><p>勾选上Box Collider下的Is Trigger就可以穿过这个游戏物体</p></blockquote><p>将预制体Food的碰撞器修改为触发器</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221108160742719.png"></p><p>添加触发检测代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnTriggerEnter</span><span class="token punctuation">(</span><span class="token class-name">Collider</span> other<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>other<span class="token punctuation">.</span>tag <span class="token operator">==</span> <span class="token string">"Food"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Destroy</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过这种实现的方式，小球吃方块的时候就不会顿一下了。</p></blockquote><h3 id="4-20-通过UI-User-Interface-显示得分"><a href="#4-20-通过UI-User-Interface-显示得分" class="headerlink" title="4.20 通过UI(User Interface)显示得分"></a>4.20 通过UI(User Interface)显示得分</h3><p>UI是2D的，创建UI的Text</p><blockquote><p>右键MainScene –&gt; GameObject –&gt; UI –&gt; Legacy –&gt; Text</p></blockquote><p>然后创建后显示的效果不是很好，切换为2D，将Text拖到右上角</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221108163409038.png"></p><p>游戏运行时Text显示的大致方位和这里显示的是差不多的</p><p>修改Text为分数：0</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221108163606078.png"></p><p>回到小球的脚本NewBehaviourScript，添加代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">UnityEngine<span class="token punctuation">.</span>UI</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Text</span> scoreText<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> score<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnTriggerEnter</span><span class="token punctuation">(</span><span class="token class-name">Collider</span> other<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>other<span class="token punctuation">.</span>tag <span class="token operator">==</span> <span class="token string">"Food"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">Destroy</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>            score<span class="token operator">++</span><span class="token punctuation">;</span>            scoreText<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">"分数："</span> <span class="token operator">+</span> score<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将Text拖拽进去</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221108163952585.png"></p><p>运行效果如下</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221108164037766.png"></p><h3 id="4-2-1-显示游戏胜利"><a href="#4-2-1-显示游戏胜利" class="headerlink" title="4.2.1 显示游戏胜利"></a>4.2.1 显示游戏胜利</h3><p>在创建一个Text UI游戏物体即可，添加到地面中间，一开始设置Enable=False，吃光所有方块后显示Win!</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221108165226489.png"></p><p>回到小球的脚本NewBehaviourScript，添加代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token class-name">GameObject</span> winText<span class="token punctuation">;</span><span class="token comment">//我一开始设置为Text找了半天问题</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnTriggerEnter</span><span class="token punctuation">(</span><span class="token class-name">Collider</span> other<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>other<span class="token punctuation">.</span>tag <span class="token operator">==</span> <span class="token string">"Food"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">Destroy</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>            score<span class="token operator">++</span><span class="token punctuation">;</span>            scoreText<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">"分数："</span> <span class="token operator">+</span> score<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span> winText<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加个判断即可</p><p>之后同样的加WinTextUI拖拽进去</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221108165519674.png"></p><p>因为我一开始定义为<code>public Text winText</code>导致出错，重新拖拽</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221108171710497.png"></p><h3 id="4-2-2-游戏打包发布"><a href="#4-2-2-游戏打包发布" class="headerlink" title="4.2.2 游戏打包发布"></a>4.2.2 游戏打包发布</h3><blockquote><p> File –&gt; Build Settings  –&gt; 设置（选择平台等） –&gt; Build</p></blockquote><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221108172243054.png"></p><p>选择文件夹</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221108172425758.png"></p><p>打包完成后效果如下</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221108173031927.png"></p><p>点击RollABall.exe即可运行游戏</p><p>游戏默认是全屏的，我们可以在刚才Build前设置游戏的分辨率，这是默认的效果</p><p><img src="/images/Unity%E5%85%A5%E9%97%A8/image-20221108173200580.png"></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RollABall </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp连接SQLServer详解</title>
      <link href="/2022/11/01/CSharp%E8%BF%9E%E6%8E%A5SQLServer%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/11/01/CSharp%E8%BF%9E%E6%8E%A5SQLServer%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="1-ADO-NET"><a href="#1-ADO-NET" class="headerlink" title="1. ADO.NET"></a>1. ADO.NET</h2><p>首先是微软官方对ADO.NET的定义如下：</p><ul><li>ADO.NET 是一组向 .NET Framework 程序员公开数据访问服务的类。 ADO.NET 为创建分布式数据共享应用程序提供了一组丰富的<strong>组件</strong>。 它<strong>提供了对关系数据、XML 和应用程序数据的访问</strong>，因此是 .NET Framework 中不可缺少的一部分。 ADO.NET 支持多种开发需求，包括创建由应用程序、工具、语言或 Internet 浏览器使用的前端数据库客户端和中间层业务对象。</li></ul><p><strong>ADO.NET类都位于<code>System.Data.dll</code>中，并与 <code>System.Xml.dll</code> 中的 XML 类集成</strong></p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data?view=netframework-4.7.2&f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(System.Data);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)&rd=true">System.Data</a> 提供对表示 ADO.NET 体系结构的类的访问权限。 通过 ADO.NET，可以生成可有效管理多个数据源的数据的组件。</p><h2 id="2-ADO-NET中主要的类"><a href="#2-ADO-NET中主要的类" class="headerlink" title="2 ADO.NET中主要的类"></a>2 ADO.NET中主要的类</h2><h3 id="2-1-数据库连接类Connection："><a href="#2-1-数据库连接类Connection：" class="headerlink" title="2.1 数据库连接类Connection："></a>2.1 <strong>数据库连接类Connection：</strong></h3><p>如果连接<code>SQLServer</code>数据库，可以使用<code>SqlConnetion</code>类。在使用<code>SqlConnection</code>类是要引用一个<code>System.Data.SqlClient</code>的命名空间。</p><ul><li>如果使用的是VS中自带的SQL SERVER数据库，可以直接通过服务器资源管理器 –&gt; 数据连接 –&gt;你所创建的数据库 –&gt; 属性中的连接字符串 获取得到连接字符串</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Data<span class="token punctuation">.</span>SqlClient</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">BookShopTuto</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Books</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>    <span class="token punctuation">&#123;</span>    <span class="token class-name">SqlConnection</span> Con <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span><span class="token string">@"Data Source=.;Initial Catalog=WhiteBookShopDb;Integrated Security=True;Pooling=False"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果使用的是SSMS的<strong>SQL Server身份验证</strong>可以使用如下语句</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">SqlConnection</span> Con <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span><span class="token string">@"Data Source=.;Initial Catalog=Student;User ID=sa;Password=123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>这是连接数据库的字符串，<code>Data Source</code> 是数据源，<code>Initial Catalog</code>是数据库的名称，<code>User ID</code>是登录数据的用户名，<code>Password</code>是登录数据库的密码。</strong></p><ul><li>如果使用的是SSMS的<strong>Windows身份验证</strong>可以使用如下语句</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">SqlConnection</span> Con <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span><span class="token string">@"Data Source=.;Initial Catalog=Student;Integrated Security=true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>如果Integrated Security=true表示可以在不知道数据库用户名和密码的情况下时，依然可以连接数据库，如果Integrated Security=false,或者不写，表示一定要输入正确的数据库登录名和密码。</strong></p><h3 id="2-2-数据库命令类Command："><a href="#2-2-数据库命令类Command：" class="headerlink" title="2.2 数据库命令类Command："></a>2.2 <strong>数据库命令类Command：</strong></h3><p>如果连接的是<code>SQLServer</code>数据库，可以使用<code>SqlCommand</code>。数据库命令类主要执行对数据库的操作，比如<strong>插入、删除、修改</strong>等。</p><p>例如我想对DataGirdView某一行选中的数据进行删除</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Data<span class="token punctuation">.</span>SqlClient</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">BookShopTuto</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Books</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>    <span class="token punctuation">&#123;</span>    <span class="token class-name">SqlConnection</span> Con <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span><span class="token string">@"Data Source=.;Initial Catalog=WhiteBookShopDb;Integrated Security=True;Pooling=False"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DeleteBtn_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">"信息缺失！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span>                <span class="token punctuation">&#123;</span>                    Con<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name"><span class="token keyword">string</span></span> query <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"delete from BookTb1 where BId = </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">key</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>                    <span class="token class-name">SqlCommand</span> cmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlCommand</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> Con<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里用到了SqlCommand</span>                    cmd<span class="token punctuation">.</span><span class="token function">ExecuteNonQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行</span>                    MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">"书籍信息删除成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Con<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">Populate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注解：</strong></p><ol><li>上面的key表示一个DataGirdView中单元格关联的值，就是指选中的那一行，可以不管</li><li><code>SqlCommand</code>表示要对 SQL Server 数据库执行的<strong>一个</strong> Transact-SQL 语句或存储过程</li><li>上面使用的是<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.sqlclient.sqlcommand.-ctor?view=netframework-4.7.2#system-data-sqlclient-sqlcommand-ctor(system-string-system-data-sqlclient-sqlconnection)">SqlCommand(String, SqlConnection)</a>，第一个参数表示一个 Transact-SQL 语句或存储过程，用字符串表示，第二个参数表示数据库连接类的变量</li><li><code>ExecuteNonQuery()方法</code>表示完成Transact-SQL 语句的执行</li><li>后面的Populate() 和 Reset() 两个方法不需要理解</li></ol><h3 id="2-3-数据库读取类DataReader："><a href="#2-3-数据库读取类DataReader：" class="headerlink" title="2.3 数据库读取类DataReader："></a>2.3 <strong>数据库读取类DataReader：</strong></h3><p>​        <strong>如果连接<code>SQLServer</code>数据库，可以使用<code>SqlDataReader</code>。数据库读取类是数据库命令类在执行了查询操作后返回的结果的数据类型。数据库读取类只是数据库的连接状态处于打开状态时才能使用，当数据库关闭时数据库读取类中就不能够再取值了。</strong></p><h3 id="2-4-数据集类DataSet："><a href="#2-4-数据集类DataSet：" class="headerlink" title="2.4 数据集类DataSet："></a>2.4 <strong>数据集类DataSet：</strong></h3><p>​        <strong>数据集相当于一个虚拟数据库，每一个数据集中包括了多张数据表。即使数据库的连接处于断开状态，还是可以从数据集中继续存取记录，只是数据是存放在数据集中的，并没有存放在数据库中。</strong></p><ul><li><strong>DataSet的构造器</strong></li></ul><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.dataset.-ctor?view=netframework-4.7.2#system-data-dataset-ctor">DataSet()</a></th><th>初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.dataset?view=netframework-4.7.2">DataSet</a> 类的新实例。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.dataset.-ctor?view=netframework-4.7.2#system-data-dataset-ctor(system-string)">DataSet(String)</a></td><td>使用给定名称初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.dataset?view=netframework-4.7.2">DataSet</a> 类的新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.dataset.-ctor?view=netframework-4.7.2#system-data-dataset-ctor(system-runtime-serialization-serializationinfo-system-runtime-serialization-streamingcontext)">DataSet(SerializationInfo, StreamingContext)</a></td><td>用序列化数据初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.dataset?view=netframework-4.7.2">DataSet</a> 类的新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.dataset.-ctor?view=netframework-4.7.2#system-data-dataset-ctor(system-runtime-serialization-serializationinfo-system-runtime-serialization-streamingcontext-system-boolean)">DataSet(SerializationInfo, StreamingContext, Boolean)</a></td><td>用序列化数据初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.dataset?view=netframework-4.7.2">DataS</a></td></tr></tbody></table><ul><li><p>info</p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.serializationinfo?view=netframework-4.7.2">SerializationInfo</a></p></li></ul><p>数据集的序列化数据。</p><ul><li><p>context</p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.streamingcontext?view=netframework-4.7.2">StreamingContext</a></p></li></ul><p>有关序列化流的上下文信息。</p><ul><li><p>ConstructSchema</p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.boolean?view=netframework-4.7.2">Boolean</a></p></li></ul><h3 id="2-5-数据适配类DataAdapter："><a href="#2-5-数据适配类DataAdapter：" class="headerlink" title="2.5 数据适配类DataAdapter："></a>2.5 <strong>数据适配类DataAdapter：</strong></h3><p>​        <strong>如果连接<code>SQLServer</code>数据库，可以使用<code>SqlDataAdapter</code>。数据适配器DataAdapter经常和数据集DataSet一起使用，通过<font color="red">数据适配器可以把数据库中的数据存放到数据集中</font>，数据适配器可以说是数据集和数据库之间的一个桥梁。</strong></p><p>以下方法表示将数据显示到datagirdview控件上</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//显示datagirdview数据</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Populate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Con<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">string</span></span> query <span class="token operator">=</span> <span class="token string">"select * from BookTb1"</span><span class="token punctuation">;</span>    <span class="token class-name">SqlDataAdapter</span> sda <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlDataAdapter</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> Con<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数据适配器</span>    <span class="token class-name">SqlCommandBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlCommandBuilder</span><span class="token punctuation">(</span>sda<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">var</span></span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DataSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数据集</span>    sda<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将数据存到数据集中</span>    BookGDV<span class="token punctuation">.</span>DataSource <span class="token operator">=</span> ds<span class="token punctuation">.</span>Tables<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    Con<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font size="5"><strong>注解：</strong></font></p><ul><li><p><code>DataAdepter</code>对象是一种用来充当<code>DataSet</code>对象与实际数据源之间桥梁的对象，<strong>只要有<code>DataSet</code>对象就有<code>DataAdepter</code>对象</strong></p></li><li><p><strong>它的工作步骤：一种时通过command对象执行sql语句，从数据源中检索数据，并将检索到的结果填充到DataSet对象中。另一种时把用户对DataSet对象作出的更改写入到数据源中。</strong></p></li><li><p><strong>SqlDataAdapter的构造器</strong></p></li></ul><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.sqlclient.sqldataadapter.-ctor?view=netframework-4.7.2#system-data-sqlclient-sqldataadapter-ctor">SqlDataAdapter()</a></th><th>初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.sqlclient.sqldataadapter?view=netframework-4.7.2">SqlDataAdapter</a> 类的新实例。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.sqlclient.sqldataadapter.-ctor?view=netframework-4.7.2#system-data-sqlclient-sqldataadapter-ctor(system-data-sqlclient-sqlcommand)">SqlDataAdapter(SqlCommand)</a></td><td>初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.sqlclient.sqldataadapter?view=netframework-4.7.2">SqlDataAdapter</a> 类的新实例，用指定的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.sqlclient.sqlcommand?view=netframework-4.7.2">SqlCommand</a> 作为 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.sqlclient.sqldataadapter.selectcommand?view=netframework-4.7.2#system-data-sqlclient-sqldataadapter-selectcommand">SelectCommand</a> 的属性。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.sqlclient.sqldataadapter.-ctor?view=netframework-4.7.2#system-data-sqlclient-sqldataadapter-ctor(system-string-system-data-sqlclient-sqlconnection)">SqlDataAdapter(String, SqlConnection)</a></td><td>使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.sqlclient.sqldataadapter?view=netframework-4.7.2">SqlDataAdapter</a> 和 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.sqlclient.sqldataadapter.selectcommand?view=netframework-4.7.2#system-data-sqlclient-sqldataadapter-selectcommand">SelectCommand</a> 对象初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.sqlclient.sqlconnection?view=netframework-4.7.2">SqlConnection</a> 类的一个新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.sqlclient.sqldataadapter.-ctor?view=netframework-4.7.2#system-data-sqlclient-sqldataadapter-ctor(system-string-system-string)">SqlDataAdapter(String, String)</a></td><td>用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.sqlclient.sqldataadapter?view=netframework-4.7.2">SqlDataAdapter</a> 和一个连接字符串初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.sqlclient.sqldataadapter.selectcommand?view=netframework-4.7.2#system-data-sqlclient-sqldataadapter-selectcommand">SelectCommand</a> 类的一个新实例。</td></tr></tbody></table><ul><li>上述代码用了第三种构造器</li><li><strong>填充DataSet数据集</strong> Fill用于填充 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.dataset?view=netframework-4.7.2">DataSet</a> 或 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.datatable?view=netframework-4.7.2">DataTable</a>。<br>FILL方法的3种重载形式<br>int Fill(DataSet dataset):添加或更新参数所指定的dataset数据集，返回值时受影响的行数。<br>int Fill(DataTable datable):将数据填充到一个数据表中。<br>int Fill(DataSet dataset,string tableName):填充指定的Dataset数据集中的指定表。</li><li><a href="https://blog.csdn.net/ABC13222880223/article/details/81942403">SqlCommandBuilder的用法</a><ul><li><code>SqlCommandBuilder</code> 用来为 <font color="red"><strong>SqlDataAdapter</strong></font> 自动产生SQL语句 ，批量更新<code>DataSet</code>， 不用再为<code>SqlDataAdapter </code>写好 InsertCommand，DeleteCommand，UpdateCommand等Sql语句.如果对<code>DataSet</code>（<strong>注意是内存里</strong>）的修改（比如，遍历ds里的Tittle表修改某些字段，或者绑定到<code>datagridview</code>修改）可以通过Update<strong>自动更新到数据库</strong>。当你不为SqlDataAdapter 指定SqlCommandBuilder的时候，你就必须手动为 SqlDataAdapter 写好 InsertCommand，DeleteCommand，UpdateCommand语句，否则是无法调用Update方法来更新的。</li></ul></li></ul><h2 id="3-简单的小例子"><a href="#3-简单的小例子" class="headerlink" title="3. 简单的小例子"></a>3. 简单的小例子</h2><p>需求是把 TransactionTb1 的相关记录显示到 dataGridView 控件中。</p><p>代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">SqlConnection</span> Con <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span><span class="token string">@"Data Source=.\sqlexpress;Initial Catalog=ATMDb;Integrated Security=True"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//首先需要定义一个数据库连接的变量</span>         <span class="token keyword">try</span>         <span class="token punctuation">&#123;</span>             Con<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//打开数据库的连接</span>             <span class="token class-name"><span class="token keyword">string</span></span> query <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"select * from TransactionTb1 where AccNum = </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Acc</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>             <span class="token comment">//定义一个T-SQL语句</span>             <span class="token class-name">SqlCommand</span> cmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlCommand</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> Con<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//SqlCommand表示要对 SQL Server 数据库执行的一个 T-SQL 语句或存储过程</span>             <span class="token class-name">SqlDataAdapter</span> sda <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlDataAdapter</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">SqlCommandBuilder</span> scmb<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlCommandBuilder</span><span class="token punctuation">(</span>sda<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">DataSet</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DataSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             sda<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span>             GDV<span class="token punctuation">.</span>DataSource <span class="token operator">=</span> ds<span class="token punctuation">.</span>Tables<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>             Con<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//关闭数据库的连接</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SqlCommandBuilder 类</p><p>自动生成用于协调通过关联的 SQL Server 数据库对 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.data.dataset?view=netframework-4.8">DataSet</a> 所做更改的单表命令</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">SqlDataAdapter</span> sda <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlDataAdapter</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DataSet</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DataSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sda<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过 SqlCommand 对象执行 T-SQL 语句，从数据源中检索数据，并将检索到的结果填充到 DataSet 对象中。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://learn.microsoft.com/zh-cn/dotnet/framework/data/adonet/">MSDN ADO.NET</a></li><li><a href="https://learn.microsoft.com/zh-cn/dotnet/framework/data/adonet/sql/linq/">MSDN LINQ to SQL</a></li><li><a href="https://blog.csdn.net/u014677855/article/details/81562428">学习ADO.NET技术（一）</a></li><li><a href="https://blog.csdn.net/u011555996/article/details/78979401">C#连接sqlServer数据库详解</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL Server </tag>
            
            <tag> ADO.NET </tag>
            
            <tag> LINQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DotNet常用中间件</title>
      <link href="/2022/10/30/DotNet%E5%B8%B8%E7%94%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2022/10/30/DotNet%E5%B8%B8%E7%94%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>常常能听到中间件这个东西，但是对中间件还是不够了解</p><p>转自：<a href="https://blog.csdn.net/weixin_44227858/article/details/107781881">https://blog.csdn.net/weixin_44227858/article/details/107781881</a></p><h2 id="什么是中间件"><a href="#什么是中间件" class="headerlink" title="什么是中间件"></a>什么是中间件</h2><p>中间件是介于操作系统和应用软件之间，为应用软件提供服务功能的软件，有消息中间件，交易中间件，应用服务器等。由于介于两种软件之间，所以，称为中间件。</p><p><strong>简单讲，中间件就是非业务的技术类组件。</strong></p><h2 id="使用中间件的好处"><a href="#使用中间件的好处" class="headerlink" title="使用中间件的好处"></a>使用中间件的好处</h2><p>具体地说，中间件屏蔽了底层操作系统的复杂性，使程序开发人员面对一个简单而统一的开发环境，减少程序设计的复杂性，将注意力集中在自己的业务上，不必再为程序在不同系统软件上的移植而重复工作，从而大大减少了技术上的负担。</p><p>中间件带给应用系统的，不只是开发的简便、开发周期的缩短，也减少了系统的维护、运行和管理的工作量，还减少了计算机总体费用的投入。</p><h2 id="Net常见的中间件"><a href="#Net常见的中间件" class="headerlink" title=".Net常见的中间件"></a>.Net常见的中间件</h2><p>Log4Net、NLog（日志记录）<br>Unity、Ninject（IOC容器）<br>EF框架、NHibernate（ORM框架）<br>Quartz.NET（开源的作业调度框架）<br>Socket（通讯）、Redis（缓存）</p>]]></content>
      
      
      <categories>
          
          <category> .Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Middleware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何用CSharp反射来确定一个类型是否实现了一个接口</title>
      <link href="/2022/10/28/%E5%A6%82%E4%BD%95%E7%94%A8CSharp%E5%8F%8D%E5%B0%84%E6%9D%A5%E7%A1%AE%E5%AE%9A%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%9E%8B%E6%98%AF%E5%90%A6%E5%AE%9E%E7%8E%B0%E4%BA%86%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3/"/>
      <url>/2022/10/28/%E5%A6%82%E4%BD%95%E7%94%A8CSharp%E5%8F%8D%E5%B0%84%E6%9D%A5%E7%A1%AE%E5%AE%9A%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%9E%8B%E6%98%AF%E5%90%A6%E5%AE%9E%E7%8E%B0%E4%BA%86%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h2><p>Question: <a href="https://stackoverflow.com/questions/4963160/how-to-determine-if-a-type-implements-an-interface-with-c-sharp-reflection">How to determine if a type implements an interface with C# reflection</a>？</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMyInterface</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyType</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMyInterface</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// should yield 'true'</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyType</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token comment">/* ????? */</span><span class="token function">MODELS_INTERFACE</span><span class="token punctuation">(</span>IMyInterface<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-解决问题"><a href="#2-解决问题" class="headerlink" title="2. 解决问题"></a>2. 解决问题</h2><ol><li><code>typeof(IMyInterface).IsAssignableFrom(typeof(MyType))</code></li><li><code>typeof(MyType).GetInterfaces().Contains(typeof(IMyInterface))</code></li><li>With C# 6 you can use <code>typeof(MyType).GetInterface(nameof(IMyInterface)) != null</code></li><li><code>typeof(MyType).GetInterface(&quot;IMyInterface&quot;) != null</code></li></ol><p>我的测试代码如下，使用<code>ImplementItest</code>type实现了<code>Itest</code>接口</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">interface</span> <span class="token class-name">Itest</span><span class="token punctuation">&#123;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ImplementItest</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Itest</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-第一种方法"><a href="#2-1-第一种方法" class="headerlink" title="2.1 第一种方法"></a>2.1 第一种方法</h3><p>使用第一种方法，<code>typeof(IMyInterface).IsAssignableFrom(typeof(MyType))</code>，运行结果如下</p><p><img src="/images/%E5%A6%82%E4%BD%95%E7%94%A8CSharp%E5%8F%8D%E5%B0%84%E6%9D%A5%E7%A1%AE%E5%AE%9A%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%9E%8B%E6%98%AF%E5%90%A6%E5%AE%9E%E7%8E%B0%E4%BA%86%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3/image-20221028103701922.png"></p><p>没有问题，只不过第一次运行的时候很慢</p><h3 id="2-2-第二种方法"><a href="#2-2-第二种方法" class="headerlink" title="2.2 第二种方法"></a>2.2 第二种方法</h3><p>使用第二种方法<code>typeof(MyType).GetInterfaces().Contains(typeof(IMyInterface))</code>，需要引入<code>using System.Linq;</code></p><p><img src="/images/%E5%A6%82%E4%BD%95%E7%94%A8CSharp%E5%8F%8D%E5%B0%84%E6%9D%A5%E7%A1%AE%E5%AE%9A%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%9E%8B%E6%98%AF%E5%90%A6%E5%AE%9E%E7%8E%B0%E4%BA%86%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3/image-20221028104233987.png"></p><h3 id="2-3-第三种方法"><a href="#2-3-第三种方法" class="headerlink" title="2.3 第三种方法"></a>2.3 第三种方法</h3><p>使用第三种方法<code>typeof(MyType).GetInterface(nameof(IMyInterface)) != null</code></p><p><img src="/images/%E5%A6%82%E4%BD%95%E7%94%A8CSharp%E5%8F%8D%E5%B0%84%E6%9D%A5%E7%A1%AE%E5%AE%9A%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%9E%8B%E6%98%AF%E5%90%A6%E5%AE%9E%E7%8E%B0%E4%BA%86%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3/image-20221028104417832.png"></p><h3 id="2-4-第四种方法"><a href="#2-4-第四种方法" class="headerlink" title="2.4 第四种方法"></a>2.4 第四种方法</h3><p>使用第四种方法<code>typeof(MyType).GetInterface(&quot;IMyInterface&quot;) != null</code></p><p><img src="/images/%E5%A6%82%E4%BD%95%E7%94%A8CSharp%E5%8F%8D%E5%B0%84%E6%9D%A5%E7%A1%AE%E5%AE%9A%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%9E%8B%E6%98%AF%E5%90%A6%E5%AE%9E%E7%8E%B0%E4%BA%86%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3/image-20221028104608499.png"></p>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Interface </tag>
            
            <tag> Reflection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书店管理系统设计与开发</title>
      <link href="/2022/10/28/%E4%B9%A6%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/"/>
      <url>/2022/10/28/%E4%B9%A6%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="1-导读"><a href="#1-导读" class="headerlink" title="1. 导读"></a>1. 导读</h2><p>根据B站视频<a href="https://www.bilibili.com/video/BV1xP411n7NV/?p=3&vd_source=794a7fc718885ad84490c05351dcf216">书店管理系统设计与开发 Visual Studio C# SQL Server</a>做的项目，UP使用的是VS2022，我目前还是使用VS2019，不会存在什么问题。框架采用的是.NET Framework4.7.2，是一个采用WinForm的客户端程序。</p><h2 id="2-系统加载界面设计"><a href="#2-系统加载界面设计" class="headerlink" title="2. 系统加载界面设计"></a>2. 系统加载界面设计</h2><p>创建项目文件BookShopTuto</p><p><img src="/images/%E4%B9%A6%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/image-20221028093509305.png"></p><p>创建完之后，首先调整窗体边框为无边框，<code>FormBorderStyle</code></p><p><img src="/images/%E4%B9%A6%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/image-20221029165300518.png"></p><p>调整加载页大小Size，以及窗体颜色BackColor</p><p>修改窗体名字为Splash</p><p>添加一个Label</p><p><img src="/images/%E4%B9%A6%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/image-20221029170941598.png"></p><p>如上图即为加载页面</p><ul><li>3个Label<ul><li>小白书店管理系统</li><li>加载中……</li><li>%</li></ul></li><li>一个图片框picturebox</li><li>一个进度条ProgressBar</li></ul><h2 id="3-用户登录界面设计"><a href="#3-用户登录界面设计" class="headerlink" title="3. 用户登录界面设计"></a>3. 用户登录界面设计</h2><p>添加一个窗体Login，修改窗体启动位置<code>StartPosition</code>为<code>CenterScreen</code>，边框<code>FormBorderStyle</code>为<code>null</code>，修改背景颜色BackColor为<code>Indigo</code></p><p>添加面板控件<code>panel</code>，将面板分为两个区域</p><p><img src="/images/%E4%B9%A6%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/image-20221029173901086.png"></p><p>简单设计如上</p><ul><li>面板控件<code>panel</code>分为2个面板<ul><li>左侧的面板为3个label</li><li>右侧的面板为窗体登录框<ul><li>5个Label<ul><li>X，设置一个Click事件，代码如下<code>Application.Exit();</code></li><li>小白书店</li><li>用户名</li><li>密码</li><li>管理员</li></ul></li><li>一个图片框</li><li>两个TextBox，用来输入账号密码</li><li>一个按钮Button</li></ul></li></ul></li></ul><h2 id="4-书籍管理界面显示与设计"><a href="#4-书籍管理界面显示与设计" class="headerlink" title="4. 书籍管理界面显示与设计"></a>4. 书籍管理界面显示与设计</h2><p>添加一个窗体Books</p><p>combobox书目类型</p><p><img src="/images/%E4%B9%A6%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/image-20221029193916903.png"></p><p>主要设计如下，因为没有原图，图片都没有加，不过这都不是重点</p><p><img src="/images/%E4%B9%A6%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/image-20221029195358633.png"></p><p>简要分析下：</p><p>和登录界面一样分为左右两块</p><p>左边有：</p><ul><li>5个图片框pic</li><li>5个label</li><li>5个panel<ul><li>1块整体</li><li>4块小的<ul><li>书籍，背景绿色代表选中状态</li><li>用户</li><li>账户管理</li><li>退出</li></ul></li></ul></li></ul><p>右边有就不分析了也差不多，右上角也是一个用来表示退出的label</p><p><strong>上图登录应为保存</strong></p><h2 id="5-用户管理界面和账户管理界面"><a href="#5-用户管理界面和账户管理界面" class="headerlink" title="5. 用户管理界面和账户管理界面"></a>5. 用户管理界面和账户管理界面</h2><p>添加一个窗体Users，和前面的设置的差不多，需要注意的是<strong>需要调整窗体的Size值与Books窗体相同，BackColor也要相同</strong>，为了方便可以直接将Books中的所有控件赋值到Users窗体中，毕竟左侧是几乎完全相同的panel</p><p>设计大致如下，和上面的书籍界面差不多</p><p><img src="/images/%E4%B9%A6%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/image-20221029201205024.png"></p><p>接下来是用户管理界面</p><p><img src="/images/%E4%B9%A6%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/image-20221031084136179.png"></p><p>主要由三块panel组成</p><h2 id="6-创建数据库"><a href="#6-创建数据库" class="headerlink" title="6. 创建数据库"></a>6. 创建数据库</h2><p>UP主是直接在VS上创建数据库，VS2019的操作是服务器资源管理器–&gt;数据连接–&gt;创建新SQL SERVER数据库</p><p>首先创建用户数据表UserTb1</p><p><img src="/images/%E4%B9%A6%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/image-20221031085246404.png"></p><p>UId为标识列，标识种子为500，标识增量为11</p><p>然后创建书籍数据表BookTb1</p><p><img src="/images/%E4%B9%A6%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/image-20221031090551687.png"></p><p>BId为标识列，标识种子为100，标识增量为1</p><p>最后创建订单数据表BillTb1</p><p><img src="/images/%E4%B9%A6%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/image-20221031090743501.png"></p><p>BillId为标识列，标识种子为1000，标识增量为1</p><h2 id="7-系统加载界面功能实现"><a href="#7-系统加载界面功能实现" class="headerlink" title="7. 系统加载界面功能实现"></a>7. 系统加载界面功能实现</h2><p>主要使用Timer控件实现进度条的加载</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Splash</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token function">Splash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name"><span class="token keyword">int</span></span> startPos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">timer1_Tick</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        startPos<span class="token operator">++</span><span class="token punctuation">;</span>        Myprogress<span class="token punctuation">.</span>Value <span class="token operator">=</span> startPos<span class="token punctuation">;</span>        PercentageLbl<span class="token punctuation">.</span>Text <span class="token operator">=</span> startPos<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Myprogress<span class="token punctuation">.</span>Value <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Myprogress<span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            timer1<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Login</span> log <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Splash_Load</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        timer1<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-书籍界面管理功能实现"><a href="#8-书籍界面管理功能实现" class="headerlink" title="8. 书籍界面管理功能实现"></a>8. 书籍界面管理功能实现</h2><p>首先创建一个SqlConnection的对象</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">SqlConnection</span> Con <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span><span class="token string">@"Data Source=.;Initial Catalog=WhiteBookShopDb;Integrated Security=True;Pooling=False"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>连接字符串可通过右键服务器名称–&gt;属性的方式查到</p><p><img src="/images/%E4%B9%A6%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/image-20221031093904071.png"></p><h3 id="8-1-保存功能"><a href="#8-1-保存功能" class="headerlink" title="8.1 保存功能"></a>8.1 保存功能</h3><p>保存功能如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SaveBtn_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>BTitleTb<span class="token punctuation">.</span>Text<span class="token operator">==</span><span class="token string">""</span> <span class="token operator">||</span> BautTb<span class="token punctuation">.</span>Text<span class="token operator">==</span><span class="token string">""</span> <span class="token operator">||</span> QtyTb<span class="token punctuation">.</span>Text<span class="token operator">==</span><span class="token string">""</span> <span class="token operator">||</span> PriceTb<span class="token punctuation">.</span>Text<span class="token operator">==</span><span class="token string">""</span> <span class="token operator">||</span> BCatCb<span class="token punctuation">.</span>SelectedIndex <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">"信息缺失！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span>        <span class="token punctuation">&#123;</span>            Con<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> query <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"insert into BookTb1 values('</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">BTitleTb<span class="token punctuation">.</span>Text</span><span class="token punctuation">&#125;</span></span><span class="token string">','</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">BautTb<span class="token punctuation">.</span>Text</span><span class="token punctuation">&#125;</span></span><span class="token string">','</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">BCatCb<span class="token punctuation">.</span>SelectedItem</span><span class="token punctuation">&#125;</span></span><span class="token string">','</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">QtyTb<span class="token punctuation">.</span>Text</span><span class="token punctuation">&#125;</span></span><span class="token string">','</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">PriceTb<span class="token punctuation">.</span>Text</span><span class="token punctuation">&#125;</span></span><span class="token string">')"</span></span><span class="token punctuation">;</span>            <span class="token class-name">SqlCommand</span> cmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlCommand</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> Con<span class="token punctuation">)</span><span class="token punctuation">;</span>            cmd<span class="token punctuation">.</span><span class="token function">ExecuteNonQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">"书籍信息保存成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Con<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//这两个方法是后面加的</span>            <span class="token function">Populate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2-设置数据表格控件"><a href="#8-2-设置数据表格控件" class="headerlink" title="8.2 设置数据表格控件"></a>8.2 设置数据表格控件</h3><p>编写一个函数用于显示datagirdview数据</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//显示datagirdview数据</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Populate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Con<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">string</span></span> query <span class="token operator">=</span> <span class="token string">"select * from BookTb1"</span><span class="token punctuation">;</span>    <span class="token class-name">SqlDataAdapter</span> sda <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlDataAdapter</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> Con<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SqlCommandBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlCommandBuilder</span><span class="token punctuation">(</span>sda<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">var</span></span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DataSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sda<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span>    BookGDV<span class="token punctuation">.</span>DataSource <span class="token operator">=</span> ds<span class="token punctuation">.</span>Tables<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    Con<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时将上述方法添加到Books类中的构造方法中，以运行时直接显示表格的数据</p><p><img src="/images/%E4%B9%A6%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/image-20221031103710206.png"></p><p>对数据表格控件BookGDV进行修改如下，以显示更好的效果，</p><p>将AutoSizeColumnsMode设置为Fill，调整列宽，使所有列的宽度正好填充控件的显示区域，只需要水平滚动保证列宽在</p><p><img src="/images/%E4%B9%A6%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/image-20221031100141186.png"></p><p>将RowHeaderVisible设置为False，不显示行号</p><p><img src="/images/%E4%B9%A6%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/image-20221031100230649.png"></p><p>将SelectionMode设置为FullRowSelect，整行选定</p><p>将ReadOnly设置为Ture，表示表格只读</p><p>将CellBorderStyle设置为SingleHorizontal，单元格划线使用水平单线边框</p><p>将GirdColor设置GrayText，灰色</p><p>设置RowsDefaultCellStyle中的外观SelectionBackColor，设置选中行标题颜色</p><p><strong>我们可以发现一个问题，就是表格在加载时显示的列标题为数据库中的字段名称，如何将标题行设置为中文?</strong></p><p>点击BookDGV右上角的小三角–&gt;编辑列–&gt;添加–&gt;设置页眉文本</p><p>添加如下</p><p><img src="/images/%E4%B9%A6%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/image-20221031102146185.png"></p><p>之后将标题与字段进行绑定</p><p><img src="/images/%E4%B9%A6%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/image-20221031102250880.png"></p><p>之后设置EnableHeaderVisualStyles设置为False，将原本的表头不显示</p><p>设置ColumnHeadersDefaultCellStyle，将BackColor设置为indigo，表示将表头的颜色设置为紫色，然后将ForeColor设置为White</p><p>设置完之后，显示效果如下</p><p><img src="/images/%E4%B9%A6%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/image-20221031103106130.png"></p><p>发现书籍类型搞错了，应该设置为SelectedItem</p><h3 id="8-3-选定类目功能"><a href="#8-3-选定类目功能" class="headerlink" title="8.3 选定类目功能"></a>8.3 选定类目功能</h3><p>需要使用到下拉框的SelectionChangeCommitted事件</p><p>编写一个方法进行过滤</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//根据书目类型进行过滤</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Con<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">string</span></span> query <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"select * from BookTb1 where BCat ='</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">CatCbSearch<span class="token punctuation">.</span>SelectedItem<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">'"</span></span><span class="token punctuation">;</span>    <span class="token class-name">SqlDataAdapter</span> sda <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlDataAdapter</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> Con<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SqlCommandBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlCommandBuilder</span><span class="token punctuation">(</span>sda<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">var</span></span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DataSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sda<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span>    BookGDV<span class="token punctuation">.</span>DataSource <span class="token operator">=</span> ds<span class="token punctuation">.</span>Tables<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    Con<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CatCbSearch_SelectionChangeCommitted</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-重置功能"><a href="#8-4-重置功能" class="headerlink" title="8.4 重置功能"></a>8.4 重置功能</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    BTitleTb<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    BautTb<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    BCatCb<span class="token punctuation">.</span>SelectedIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    QtyTb<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    PriceTb<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ResetBtn_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-5-删除功能"><a href="#8-5-删除功能" class="headerlink" title="8.5 删除功能"></a>8.5 删除功能</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DeleteBtn_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">"信息缺失！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span>        <span class="token punctuation">&#123;</span>            Con<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> query <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"delete * from BookTb1 where BId = '</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">key</span><span class="token punctuation">&#125;</span></span><span class="token string">'"</span></span><span class="token punctuation">;</span>            <span class="token class-name">SqlCommand</span> cmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlCommand</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> Con<span class="token punctuation">)</span><span class="token punctuation">;</span>            cmd<span class="token punctuation">.</span><span class="token function">ExecuteNonQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">"书籍信息删除成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Con<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Populate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码都比较简单</p><h2 id="9-打印订单"><a href="#9-打印订单" class="headerlink" title="9. 打印订单"></a>9. 打印订单</h2><p>可以使用printDocument控件和printPreviewDialog控件</p><p><img src="/images/%E4%B9%A6%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/image-20221031161350842.png"></p><p>同时将它们进行连接</p><p><img src="/images/%E4%B9%A6%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/image-20221031161332980.png"></p><p><img src="/images/%E4%B9%A6%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/image-20221101102632387.png"></p><p>不然Total的值会变成0，也就是说必须先把数据添加到BillTb1表中，之后才能进行打印订单</p>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL Server </tag>
            
            <tag> VS </tag>
            
            <tag> CSharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决StackOverFlow打开慢，实现快速访问</title>
      <link href="/2022/10/28/%E8%A7%A3%E5%86%B3StackOverFlow%E6%89%93%E5%BC%80%E6%85%A2%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E8%AE%BF%E9%97%AE/"/>
      <url>/2022/10/28/%E8%A7%A3%E5%86%B3StackOverFlow%E6%89%93%E5%BC%80%E6%85%A2%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>我经常搜索关于<code>CSharp</code>的问题搜到<code>StackVverFlow</code>，但是<code>StackVverFlow</code>打开很慢，常常需要等几分钟才行。</p><h2 id="2-StackVverFlow-介绍"><a href="#2-StackVverFlow-介绍" class="headerlink" title="2. StackVverFlow 介绍"></a>2. StackVverFlow 介绍</h2><p>Stack Overflow是一个与程序相关的IT技术问答网站。用户可以在网站免费提交问题，浏览问题，索引相关内容，在创建主页的时候使用简单的HTML。在问题页面，不会弹出任何广告，销售信息，JavaScript 窗口等。</p><h2 id="3-回顾下CDN"><a href="#3-回顾下CDN" class="headerlink" title="3. 回顾下CDN"></a>3. 回顾下CDN</h2><p>CDN 是构建在数据网络上的一种分布式的内容分发网。 <a href="https://baike.baidu.com/item/CDN?fromModule=lemma_inlink">CDN</a> 的作用是采用<a href="https://baike.baidu.com/item/%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/9711212?fromModule=lemma_inlink">流媒体服务器</a>集群技术，克服单机系统输出带宽及并发能力不足的缺点，可极大提升<a href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F/479832?fromModule=lemma_inlink">系统</a>支持的<a href="https://baike.baidu.com/item/%E5%B9%B6%E5%8F%91%E6%B5%81/7395601?fromModule=lemma_inlink">并发流</a>数目，减少或避免单点失效带来的不良影响。</p><p>CDN 利用全局<a href="https://baike.baidu.com/item/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%8A%80%E6%9C%AF?fromModule=lemma_inlink">负载均衡技术</a>将用户的访问指向离用户最近的工作正常的<a href="https://baike.baidu.com/item/%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8?fromModule=lemma_inlink">流媒体服务器</a>上，由流媒体服务器直接响应用户的请求。服务器中如果没有用户要访问的内容，会根据配置自动从原服务器抓取相应的内容并提供给用户。 IPTV 可利用 CDN 为用户提供 VOD 业务，通过 CDN 把视频内容分发到靠近用户端的 CDN 节点后，可以在一定程度上保证端到端的服务质量。</p><h2 id="4-解决问题，替换Google-CDN"><a href="#4-解决问题，替换Google-CDN" class="headerlink" title="4. 解决问题，替换Google CDN"></a>4. 解决问题，替换Google CDN</h2><p>但是我们打开<code>StackOverFlow</code>时发现，访问的速度特别的慢，其实这并不是<code>StackOverFlow</code>的网站被墙了，而是这个网站请求了谷歌的资源，谷歌被墙导致的。接下来我们来解决这个问题！</p><p><code>GitHub</code>有大牛开发出了插件，将<code>Google CDN</code> 替换成国内中科大的了。具体地址为：<a href="https://github.com/justjavac/ReplaceGoogleCDN%EF%BC%8C%E6%88%91%E4%BB%AC%E7%82%B9%E5%87%BB%E8%BF%99%E4%B8%AA%E5%9C%B0%E5%9D%80%E8%BF%9B%E5%85%A5%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%9D%A5%E5%88%B0%E5%A6%82%E4%B8%8B%E7%95%8C%E9%9D%A2%EF%BC%9A">https://github.com/justjavac/ReplaceGoogleCDN，我们点击这个地址进入，可以来到如下界面：</a><br><img src="/images/%E8%A7%A3%E5%86%B3StackOverFlow%E6%89%93%E5%BC%80%E6%85%A2%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E8%AE%BF%E9%97%AE/image-20221028084602302.png"></p><p>点击上图的Clone or dowmload，再点击Dowmload ZIP 下载至任意位置；<br>然后将压缩包解压得到如下文件：</p><p><img src="/images/%E8%A7%A3%E5%86%B3StackOverFlow%E6%89%93%E5%BC%80%E6%85%A2%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E8%AE%BF%E9%97%AE/image-20221028084710106.png"></p><p>接着我们打开Chorme，打开扩展程序，将<code>extension-v2</code>添加进去，如下我是已经添加好了</p><p><img src="/images/%E8%A7%A3%E5%86%B3StackOverFlow%E6%89%93%E5%BC%80%E6%85%A2%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E8%AE%BF%E9%97%AE/image-20221028084752201.png"></p><p>整个流程步骤就是这样，这时我们再把stack overflow打开，速度就变得飞快了！</p><h2 id="5-使用Github账户登录StackOverFlow"><a href="#5-使用Github账户登录StackOverFlow" class="headerlink" title="5.  使用Github账户登录StackOverFlow"></a>5.  使用Github账户登录StackOverFlow</h2><p><strong>Stack Overflow requires cookies for authentication – are your browser cookies enabled for ……</strong></p><p>如果你使用的是<code>Google</code>浏览器，<code>Ctrl+Shift+n</code>，开启<code>chrome</code>的<code>无痕浏览模式</code>，重新最后一个注册步骤既可</p><h2 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6. 参考资料"></a>6. 参考资料</h2><ol><li> <a href="https://blog.csdn.net/weixin_44928884/article/details/106273796">解决StackOverFlow打开慢，实现快速访问（图文步骤详细说明）</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> StackOverFlow </tag>
            
            <tag> Google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在VS2019上传项目到GitHub？</title>
      <link href="/2022/10/27/%E5%A6%82%E4%BD%95%E5%9C%A8VS2019%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub%EF%BC%9F/"/>
      <url>/2022/10/27/%E5%A6%82%E4%BD%95%E5%9C%A8VS2019%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-创建解决方案"><a href="#1-创建解决方案" class="headerlink" title="1. 创建解决方案"></a>1. 创建解决方案</h2><p>我这里使用的是之前坦克大战的解决方案</p><p><img src="/images/%E5%A6%82%E4%BD%95%E5%9C%A8VS2019%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub%EF%BC%9F/image-20221027151606095.png"></p><h2 id="2-创建存储库"><a href="#2-创建存储库" class="headerlink" title="2. 创建存储库"></a>2. 创建存储库</h2><p>在解决方案上右键，点击创建Git存储库</p><p><img src="/images/%E5%A6%82%E4%BD%95%E5%9C%A8VS2019%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub%EF%BC%9F/image-20221027151740163.png"></p><p>第一次使用时，需要登录<a href="https://so.csdn.net/so/search?q=GitHub&spm=1001.2101.3001.7020">GitHub</a>账户，有时网络有点慢，稍等一下就好了</p><p><img src="/images/%E5%A6%82%E4%BD%95%E5%9C%A8VS2019%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub%EF%BC%9F/image-20221027151819877.png"></p><p>登录成功，如下图所示</p><p><img src="/images/%E5%A6%82%E4%BD%95%E5%9C%A8VS2019%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub%EF%BC%9F/image-20221027151915243.png"></p><p>填写说明，可以把<strong>专用存储库</strong>去除勾选，这样大家都可以访问</p><p>填写好信息，点击<strong>创建并推送</strong></p><p><img src="/images/%E5%A6%82%E4%BD%95%E5%9C%A8VS2019%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub%EF%BC%9F/image-20221027152040107.png"></p><h2 id="3-推送到GitHub"><a href="#3-推送到GitHub" class="headerlink" title="3. 推送到GitHub"></a>3. 推送到GitHub</h2><p>可以在看到已经成功被推送到<code>Github</code>上了</p><p><img src="/images/%E5%A6%82%E4%BD%95%E5%9C%A8VS2019%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub%EF%BC%9F/image-20221027152224231.png"></p><h2 id="4-修改文件并推送"><a href="#4-修改文件并推送" class="headerlink" title="4. 修改文件并推送"></a>4. 修改文件并推送</h2><p>随便做一些修改，例如添加一段代码<code>Console.WriteLine(123);</code></p><p><img src="/images/%E5%A6%82%E4%BD%95%E5%9C%A8VS2019%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub%EF%BC%9F/image-20221027152421752.png"></p><p>可以在解决方案下看到<code>Program.cs</code>有一个<font color="red">红色的勾勾</font>,表示已经被修改</p><p><img src="/images/%E5%A6%82%E4%BD%95%E5%9C%A8VS2019%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub%EF%BC%9F/image-20221027152517349.png"></p><p>现在可以右键提交到GitHub</p><p><img src="/images/%E5%A6%82%E4%BD%95%E5%9C%A8VS2019%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub%EF%BC%9F/image-20221027152702511.png"></p><p>填写说明并提交，点击全部提交，再点击推送</p><p><img src="/images/%E5%A6%82%E4%BD%95%E5%9C%A8VS2019%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub%EF%BC%9F/image-20221027152845506.png"></p><h2 id="5-如何从GitHub上拉取代码呢"><a href="#5-如何从GitHub上拉取代码呢" class="headerlink" title="5.  如何从GitHub上拉取代码呢"></a>5.  如何从GitHub上拉取代码呢</h2><p>打开VS2019，直接点击<strong>克隆存储库</strong></p><p><img src="/images/%E5%A6%82%E4%BD%95%E5%9C%A8VS2019%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub%EF%BC%9F/image-20221027153039347.png"></p><p>在GitHub项目上复制链接</p><p><img src="/images/%E5%A6%82%E4%BD%95%E5%9C%A8VS2019%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub%EF%BC%9F/image-20221027153122145.png"></p><p>粘贴到输入框中，并选择路径，点击克隆</p><p><img src="/images/%E5%A6%82%E4%BD%95%E5%9C%A8VS2019%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub%EF%BC%9F/image-20221027153216120.png"></p><h2 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6. 参考资料"></a>6. 参考资料</h2><ol><li> <a href="https://blog.csdn.net/weixin_38211198/article/details/118345307">【GitHub】如何在VS2019上传项目到GitHub？（超详细教程）</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VS </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharpXML</title>
      <link href="/2022/10/26/CSharpXML/"/>
      <url>/2022/10/26/CSharpXML/</url>
      
        <content type="html"><![CDATA[<h2 id="1-XML概念"><a href="#1-XML概念" class="headerlink" title="1. XML概念"></a>1. XML概念</h2><h3 id="1-1-什么是XML？"><a href="#1-1-什么是XML？" class="headerlink" title="1.1 什么是XML？"></a>1.1 <strong>什么是XML？</strong></h3><p>XML(EXtensible Markup Language)：可扩展标记语言，它用于传输和存储数据。</p><ul><li>XML 指可扩展标记语言（EXtensible Markup Language）。</li><li>XML 是一种很像HTML的标记语言。</li><li>XML 的设计宗旨是传输数据，而不是显示数据。</li><li>XML 标签没有被预定义。您需要自行定义标签。</li><li>XML 被设计为具有自我描述性。</li><li>XML 是 W3C 的推荐标准。</li></ul><h3 id="1-2-XML的作用："><a href="#1-2-XML的作用：" class="headerlink" title="1.2 XML的作用："></a>1.2 <strong>XML的作用：</strong></h3><p>纯文本，兼容性强。</p><h3 id="1-3-和HTML的区别："><a href="#1-3-和HTML的区别：" class="headerlink" title="1.3 和HTML的区别："></a>1.3 <strong>和HTML的区别：</strong></h3><p><strong>xml</strong>： 主要用来处理、存储数据。无规定标签，可扩展。其焦点是数据的内容。</p><p><strong>html</strong>：对数据的显示和描述。 语法标签固定。其焦点是数据的外观。</p><p>HTML 旨在显示信息，而 XML 旨在传输信息。</p><h3 id="1-4-XML语法特点"><a href="#1-4-XML语法特点" class="headerlink" title="1.4 XML语法特点:"></a>1.4 <strong>XML语法特点:</strong></h3><ol><li>区分大小写。</li><li>只能有一个根节点。</li><li>标签成对出现。</li><li>属性用双引号。</li><li>没有预定标签，用什么写什么</li><li>文档声明：&lt;?xml version=”..” encoding=”…”&gt;</li><li>注释： <!--  --></li><li>CDATA: 原意文本 &lt;![CDATA[..] ] &gt;</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li> <a href="https://www.cnblogs.com/zhangyuhao/p/10578943.html">C# XML入门</a></li><li> <a href="https://www.baidu.com/link?url=6rDR2OF_egRHcilHjGFQ-ep7lylSynyfmixgZOKlHXEy60jhyBzTKkxsaV-PALyIzIxjYmAq1X7M7qMcJyaMiasso8ZbQf8g-NtbsWADb1i&wd=&eqid=a089ea840000904e000000046358aa06">C#操作XML方法详解</a></li><li> <a href="http://t.zoukankan.com/qtiger-p-15573740.html">C#基础知识之XML</a></li><li> <a href="https://www.runoob.com/xml/xml-tutorial.html">XML教程</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Socket</title>
      <link href="/2022/10/25/Socket/"/>
      <url>/2022/10/25/Socket/</url>
      
        <content type="html"><![CDATA[<h2 id="1-网络基础"><a href="#1-网络基础" class="headerlink" title="1. 网络基础"></a>1. 网络基础</h2><h3 id="1-1-什么是TCP-IP、UDP？"><a href="#1-1-什么是TCP-IP、UDP？" class="headerlink" title="1.1 什么是TCP/IP、UDP？"></a>1.1 什么是TCP/IP、UDP？</h3><p>​     TCP/IP（Transmission Control Protocol/Internet Protocol）即传输控制协议/网间协议，是一个工业标准的协议集，它是为广域网（WANs）设计的。<br>​     UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是属于TCP/IP协议族中的一种。</p><p>这里有一张图，表明了这些协议的关系。</p><p><img src="/images/Socket/socket1.jpg"></p><p>TCP/IP协议族包括引用层、运输层、网络层、链路层。现在你知道TCP/IP与UDP的关系了吧。</p><p>它和OSI的七层结构以及对于协议族不同，下图简单表示：</p><p><img src="/images/Socket/31091631-deb0a3c23d0a4c2095729372552a1ca5.png"></p><p><img src="/images/Socket/31092119-05d4a9066476445d869c4b89f0200c2f.png"></p><h3 id="1-2-Socket在哪里呢？"><a href="#1-2-Socket在哪里呢？" class="headerlink" title="1.2 Socket在哪里呢？"></a>1.2 Socket在哪里呢？</h3><p> 在图1中，我们没有看到Socket的影子，那么它到底在哪里呢？还是用图来说话，一目了然。</p><p><img src="/images/Socket/socket2.jpg"></p><h3 id="1-3-Socket（套接字）是什么呢？"><a href="#1-3-Socket（套接字）是什么呢？" class="headerlink" title="1.3 Socket（套接字）是什么呢？"></a>1.3 Socket（套接字）是什么呢？</h3><p>Socket在英文中是插口，插座的意思，在编程中将Socket翻译为套接字</p><p>Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。</p><p>网络中的进程是通过socket来通信的，那什么是socket呢？socket起源于Unix，而Unix/Linux基本哲学之一就是“一切皆文件”，都可以用“打开open –&gt; 读写write/read –&gt; 关闭close”模式来操作。</p><p>​    <strong>socket一词的起源</strong></p><p><code>在组网领域的首次使用是在1970年2月12日发布的文献[IETF RFC33](http://datatracker.ietf.org/doc/rfc33/)中发现的，撰写者为Stephen Carr、Steve Crocker和Vint Cerf。根据美国计算机历史博物馆的记载，Croker写道：“命名空间的元素都可称为套接字接口。一个套接字接口构成一个连接的一端，而一个连接可完全由一对套接字接口规定。”计算机历史博物馆补充道：“这比BSD的套接字接口定义早了大约12年。”</code></p><h4 id="1-3-1-为什么翻译为套接字？"><a href="#1-3-1-为什么翻译为套接字？" class="headerlink" title="1.3.1 为什么翻译为套接字？"></a>1.3.1 为什么翻译为套接字？</h4><p><strong>未解之谜</strong> 英文选的词Socket是非常好理解的，但是中文翻译就显得很糟糕</p><p><a href="https://www.baidu.com/link?url=MhBbGbUZqV8iiz_qs_3zI3S6L3_VFVl_SGoa61YUzepCeYxOSv2epfkKLF1VbuvlPIHaXBJon7DrN_lC12begq&amp;wd=&amp;eqid=931b8895001c10c50000000463578c0f">https://www.baidu.com/link?url=MhBbGbUZqV8iiz_qs_3zI3S6L3_VFVl_SGoa61YUzepCeYxOSv2epfkKLF1VbuvlPIHaXBJon7DrN_lC12begq&amp;wd=&amp;eqid=931b8895001c10c50000000463578c0f</a></p><p> 1）翻译分析<br>      用过socket的都知道socket是一个网络传输的工具，但是按照英文翻译过来叫做“<strong>插座</strong>”，要是结合使用环境硬翻译过来的话我觉得叫“<strong>网络插座</strong>”这样也还是可以理解，但是这样名字叫起来不是那么顺口而且也有点太白话了点。不过我觉得这么叫也是有好处的，至少这样一听起来比较清楚能明白它是一个工具。</p><p>2）功能分析<br>        至于为什么叫“<strong>套接字</strong>”我觉得这个应该要结合实际开发来看，下图简单地表现了一个消息发送的过程，如果对网络协议清楚的可能一眼就会明白，“socket”其实就是帮助我们套接不同网络层协议的的工具，所以把“套接字”补全我们可以叫“套接首部字符串的工具”，这样从语义上就更加强调了它是一个工具而并不是一种字符。但是作为一个资深的开发人员自然要卖个关子，这样显得更有<strong>逼格</strong>。</p><p>​        如果你还是刚入门的小白不明白为什么非要套接那么多首部，1）TCP的首部就不多说了，这个主要是用来确定消息完整的方式。2）如果不理解IP首部，那就思考以下，如果用户A同时给两个用户发十条消息，那么路由器怎样知道每条消息到底是发给谁。3）ICMP首部，你可以想象以下当用户A同时连接了两个路由器，虽然你有目标用户B的IP地址，但是你的消息要发给那个路由器呢？（ICMP，它是TCP/IP协议族的一个子协议）。有了这几个问题我相信你会对网络四层模型理解得更透彻。如果想要了解每个协议的首部具体有什么内容可以留言。</p><p><img src="/images/Socket/20200713173150966.png"></p><p><strong>其他理解如下</strong></p><p><code>两台计算机通过socket想插头与插座那样连接在一起，故称”套接“ 应用程序通过类似文件标识符的一个标识字对socket进行操作，故称”字“</code></p><p><img src="/images/Socket/v2-aa1887a38cd432c8ba85a07b2be2e4c1_720w.webp"></p><p><img src="/images/Socket/v2-ec4fee50f6d32c0b5f66fb59cd4f6ec7_720w.webp"></p><h3 id="1-4-你会使用它们吗？"><a href="#1-4-你会使用它们吗？" class="headerlink" title="1.4 你会使用它们吗？"></a>1.4 你会使用它们吗？</h3><p>前人已经给我们做了好多的事了，网络间的通信也就简单了许多，但毕竟还是有挺多工作要做的。以前听到Socket编程，觉得它是比较高深的编程知识，但是只要弄清Socket编程的工作原理，神秘的面纱也就揭开了。<br> 一个生活中的场景。你要打电话给一个朋友，先拨号，朋友听到电话铃声后提起电话，这时你和你的朋友就建立起了连接，就可以讲话了。等交流结束，挂断电话结束此次交谈。  生活中的场景就解释了这工作原理，也许TCP/IP协议族就是诞生于生活中，这也不一定。</p><p><img src="/images/Socket/socket3.jpg"></p><h3 id="1-5-TCP-IP的三次握手"><a href="#1-5-TCP-IP的三次握手" class="headerlink" title="1.5 TCP/IP的三次握手"></a>1.5 TCP/IP的三次握手</h3><p>现阶段socket通信使用TCP、UDP协议，相对应UDP来说，TCP则是比较安全稳定的协议了。首先讲述TCP/IP的三次握手，在握手基础上延伸socket通信的基本过程。</p><p>下面介绍对于应届生毕业面试来说是非常熟悉的，同时也是最臭名昭著的三次握手：</p><ol><li>客户端发送syn报文到服务器端，并置发送序号为x。</li><li>服务器端接收到客户端发送的请求报文，然后向客户端发送syn报文，并且发送确认序号x+1，并置发送序号为y。</li><li>客户端受到服务器发送确认报文后，发送确认信号y+1，并置发送序号为z。至此客户端和服务器端建立连接。</li></ol><p><img src="/images/Socket/31093719-34ccd74b68c646859b6b9ddd8620217f.png"></p><p><strong>在此基础上，socket连接过程：</strong></p><p>服务器监听：服务器端socket并不定位具体的客户端socket，而是处于等待监听状态，实时监控网络状态。</p><p>客户端请求：客户端clientSocket发送连接请求，目标是服务器的serverSocket。为此，clientSocket必须知道serverSocket的地址和端口号，进行扫描发出连接请求。</p><p>连接确认：当服务器socket监听到或者是受到客户端socket的连接请求时，服务器就响应客户端的请求，建议一个新的socket，把服务器socket发送给客户端，一旦客户端确认连接，则连接建立。</p><p>注：在连接确认阶段：服务器socket即使在和一个客户端socket建立连接后，还在处于监听状态，仍然可以接收到其他客户端的连接请求，这也是一对多产生的原因。</p><p>下图简单说明连接过程：</p><p><img src="/images/Socket/31094824-4da0e57daf3f45e2b909752aaea375c4.jpg"></p><h3 id="1-6-网络中进程之间如何通信？"><a href="#1-6-网络中进程之间如何通信？" class="headerlink" title="1.6 网络中进程之间如何通信？"></a>1.6 网络中进程之间如何通信？</h3><p>本地的进程间通信（IPC）有很多种方式，但可以总结为下面4类：</p><ul><li>消息传递（管道、FIFO、消息队列）</li><li>同步（互斥量、条件变量、读写锁、文件和写记录锁、信号量）</li><li>共享内存（匿名的和具名的）</li><li>远程过程调用（Solaris门和Sun RPC）</li></ul><p>但这些都不是本文的主题！我们要讨论的是网络中进程之间如何通信？首要解决的问题是如何唯一标识一个进程，否则通信无从谈起！在本地可以通过进程PID来唯一标识一个进程，但是在网络中这是行不通的。其实TCP/IP协议族已经帮我们解决了这个问题，网络层的“<strong>ip地址</strong>”可以唯一标识网络中的主机，而传输层的“<strong>协议+端口</strong>”可以唯一标识主机中的应用程序（进程）。这样利用三元组（ip地址，协议，端口）就可以标识网络的进程了，网络中的进程通信就可以利用这个标志与其它进程进行交互。</p><p>使用TCP/IP协议的应用程序通常采用应用编程接口：UNIX BSD的套接字（socket）和UNIX System V的TLI（已经被淘汰），来实现网络进程之间的通信。就目前而言，几乎所有的应用程序都是采用socket，而现在又是网络时代，网络中进程通信是无处不在，这就是我为什么说“一切皆socket”。</p><h3 id="1-7-Port端口号"><a href="#1-7-Port端口号" class="headerlink" title="1.7 Port端口号"></a>1.7 Port端口号</h3><ol><li>在编程里，端口是一种“逻辑连接位置”，特别是在<a href="https://baike.baidu.com/item/%E5%9B%A0%E7%89%B9%E7%BD%91%E5%8D%8F%E8%AE%AE?fromModule=lemma_inlink">因特网协议</a><a href="https://baike.baidu.com/item/TCP%2FIP/214077?fromModule=lemma_inlink">TCP/IP</a>中，客户端程序被分派计算机上特殊服务程序的一种方式。</li><li>所谓的端口，就好像是门牌号一样，<a href="https://baike.baidu.com/item/%E5%AE%A2%E6%88%B7%E7%AB%AF/101081?fromModule=lemma_inlink">客户端</a>可以通过ip地址找到对应的<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/3369401?fromModule=lemma_inlink">服务器端</a>，但是服务器端是有很多端口的，每个<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/5985445?fromModule=lemma_inlink">应用程序</a>对应一个端口号，通过类似门牌号的端口号，客户端才能真正的访问到该服务器。为了对端口进行区分，将每个端口进行了编号，这就是端口号 。</li><li>一个IP地址的端口通过<code>16bit</code>进行编号，最多可以有<code>65536</code>个端口。</li><li>端口号小于256的定义为常用端口，服务器一般都是通过常用端口号来识别的。任何TCP/IP实现所提供的服务都用1—1023之间的端口号，是由ICANN来管理的；端口号从1024—49151是被注册的端口，也成为“用户端口”，被IANA指定为特殊服务使用 </li><li><a href="https://baike.baidu.com/item/%E5%AE%A2%E6%88%B7%E7%AB%AF?fromModule=lemma_inlink">客户端</a>只需保证该端口号在本机上是唯一的就可以了。<a href="https://baike.baidu.com/item/%E5%AE%A2%E6%88%B7%E7%AB%AF/101081?fromModule=lemma_inlink">客户端</a>端口号因存在时间很短暂又称临时端口号</li><li>大多数TCP/IP实现给临时端口号分配1024—5000之间的端口号。大于5000的端口号是为其他服务器预留的</li></ol><h2 id="2-Socket-对象"><a href="#2-Socket-对象" class="headerlink" title="2. Socket 对象"></a>2. Socket 对象</h2><h3 id="2-1-Socket-类"><a href="#2-1-Socket-类" class="headerlink" title="2.1 Socket 类"></a>2.1 Socket 类</h3><p><strong>定义</strong></p><ul><li><p>命名空间:</p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets?view=netframework-4.7.2">System.Net.Sockets</a></p></li><li><p>程序集:</p><p>System.dll</p></li></ul><p><strong>实现 Berkeley 套接字接口。</strong></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Socket</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDisposable</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>继承</p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.object?view=netframework-4.7.2">Object</a>Socket</p></li><li><p>实现</p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.idisposable?view=netframework-4.7.2">IDisposable</a></p></li></ul><p> 无论是服务器还是客户端，都要创建一个 <strong>Socket</strong> 对象，创建方法一致。</p><h3 id="2-2-Socket-构造函数"><a href="#2-2-Socket-构造函数" class="headerlink" title="2.2 Socket 构造函数"></a>2.2 Socket 构造函数</h3><h4 id="2-2-1-以下是常见的-Socket-对象创建实例"><a href="#2-2-1-以下是常见的-Socket-对象创建实例" class="headerlink" title="2. 2.1 以下是常见的 Socket 对象创建实例"></a>2. 2.1 以下是常见的 <strong>Socket</strong> 对象创建实例</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">Socket</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Socket</span><span class="token punctuation">(</span>AddressFamily<span class="token punctuation">.</span>InterNetwork<span class="token punctuation">,</span> SocketType<span class="token punctuation">.</span>Stream<span class="token punctuation">,</span> ProtocolType<span class="token punctuation">.</span>Tcp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//监控 ip4 地址，套接字类型为 TCP ，协议类型为 TCP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socket.-ctor?view=netframework-4.7.2#system-net-sockets-socket-ctor(system-net-sockets-socketinformation)">Socket(SocketInformation)</a></th><th>使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socket?view=netframework-4.7.2">Socket</a> 返回的指定的值初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socket.duplicateandclose?view=netframework-4.7.2#system-net-sockets-socket-duplicateandclose(system-int32)">DuplicateAndClose(Int32)</a> 类的新实例。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socket.-ctor?view=netframework-4.7.2#system-net-sockets-socket-ctor(system-net-sockets-sockettype-system-net-sockets-protocoltype)">Socket(SocketType, ProtocolType)</a></td><td>使用指定的地址族、套接字类型和协议初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socket?view=netframework-4.7.2">Socket</a> 类的新实例。 如果操作系统支持 IPv6，此构造函数将创建双模式套接字;否则，它将创建 IPv4 套接字。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socket.-ctor?view=netframework-4.7.2#system-net-sockets-socket-ctor(system-net-sockets-addressfamily-system-net-sockets-sockettype-system-net-sockets-protocoltype)">Socket(AddressFamily, SocketType, ProtocolType)</a></td><td>使用指定的地址族、套接字类型和协议初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socket?view=netframework-4.7.2">Socket</a> 类的新实例。</td></tr></tbody></table><p>第一个构造函数<strong>，SocketInformation</strong> 对象保存的是</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token function">Socket</span><span class="token punctuation">(</span>SocketType<span class="token punctuation">,</span> ProtocolType<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实质上跟第二个构造函数是一样的。<strong>就好像你可以直接把( 一个苹果 , 一个梨)直接放进篮子，也可以先给 水果包装好 再放进篮子里。</strong></p><p><strong>下面将解释所有参数的意义。</strong></p><h4 id="2-2-2-SocketType-枚举"><a href="#2-2-2-SocketType-枚举" class="headerlink" title="2.2.2 SocketType 枚举"></a>2.2.2 SocketType 枚举</h4><p>指定 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socket?view=netframework-4.7.2">Socket</a> 类的实例表示的套接字类型。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">SocketType</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font size="5"><b>字段</b></font></p><table><thead><tr><th><strong>SocketType</strong></th><th><strong>值</strong></th><th><strong>对应的ProtocolType</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>Unknown</td><td>-1</td><td>Unknown</td><td>指定未知的 Socket 类型。</td></tr><tr><td>Stream（使用字节流）</td><td>1</td><td>Tcp</td><td>支持可靠、双向、基于连接的字节流，而不重复数据，也不保留边界。</td></tr><tr><td>Dgram（使用数据报）</td><td>2</td><td>Udp</td><td>支持无连接、面向消息、以可靠方式发送的消息，并保留数据中的消息边界。</td></tr><tr><td>Raw</td><td>3</td><td>Icmp、lgmp</td><td>支持对基础传输协议的访问。</td></tr><tr><td>Rdm</td><td>4</td><td></td><td>支持无连接、面向消息、以可靠方式发送的消息，并保留数据中的消息边界。</td></tr><tr><td>Seqpacket</td><td>5</td><td></td><td>在网络上提供排序字节流的面向连接且可靠的双向传输。</td></tr></tbody></table><p>如需了解更详细的资料，请查阅Microsoft文档</p><p>地址： <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets.sockettype?view=netframework-4.7.2">https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets.sockettype?view=netframework-4.7.2</a></p><h4 id="2-2-3-ProtocolType-枚举"><a href="#2-2-3-ProtocolType-枚举" class="headerlink" title="2.2.3 ProtocolType 枚举"></a>2.2.3 ProtocolType 枚举</h4><p>指定 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socket?view=netframework-4.7.2">Socket</a> 类支持的协议。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ProtocolType</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font size="5"><b>字段</b></font></p><table><thead><tr><th>Ggp</th><th>3</th><th>网关到网关协议。</th></tr></thead><tbody><tr><td>Icmp</td><td>1</td><td>网际消息控制协议。</td></tr><tr><td>IcmpV6</td><td>58</td><td>用于 IPv6 的 Internet 控制消息协议。</td></tr><tr><td>Idp</td><td>22</td><td>Internet 数据报协议。</td></tr><tr><td>Igmp</td><td>2</td><td>网际组管理协议。</td></tr><tr><td>IP</td><td>0</td><td>网际协议。</td></tr><tr><td>IPSecAuthenticationHeader</td><td>51</td><td>IPv6 身份验证头。 有关详细信息，请参阅 <a href="https://www.ietf.org/">https://www.ietf.org</a> 上的 RFC 2292，第 2.2.1 节。</td></tr><tr><td>IPSecEncapsulatingSecurityPayload</td><td>50</td><td>IPv6 封装式安全措施负载头。</td></tr><tr><td>IPv4</td><td>4</td><td>Internet 协议版本 4。</td></tr><tr><td>IPv6</td><td>41</td><td>Internet 协议版本 6 (IPv6)。</td></tr><tr><td>IPv6DestinationOptions</td><td>60</td><td>IPv6 目标选项头。</td></tr><tr><td>IPv6FragmentHeader</td><td>44</td><td>IPv6 片段头。</td></tr><tr><td>IPv6HopByHopOptions</td><td>0</td><td>IPv6 逐跳选项头。</td></tr><tr><td>IPv6NoNextHeader</td><td>59</td><td>IPv6 No Next 头。</td></tr><tr><td>IPv6RoutingHeader</td><td>43</td><td>IPv6 路由头。</td></tr><tr><td>Ipx</td><td>1000</td><td>Internet 数据包交换协议。</td></tr><tr><td>ND</td><td>77</td><td>网络磁盘协议（非正式）。</td></tr><tr><td>Pup</td><td>12</td><td>PARC 通用数据包协议。</td></tr><tr><td>Raw</td><td>255</td><td>原始 IP 数据包协议。</td></tr><tr><td>Spx</td><td>1256</td><td>顺序包交换协议。</td></tr><tr><td>SpxII</td><td>1257</td><td>顺序包交换协议第 2 版。</td></tr><tr><td>Tcp</td><td>6</td><td>传输控制协议。</td></tr><tr><td>Udp</td><td>17</td><td>用户数据报协议。</td></tr><tr><td>Unknown</td><td>-1</td><td>未知协议。</td></tr><tr><td>Unspecified</td><td>0</td><td>未指定的协议。</td></tr></tbody></table><h4 id="2-2-4-AddressFamily-枚举"><a href="#2-2-4-AddressFamily-枚举" class="headerlink" title="2.2.4 AddressFamily 枚举"></a>2.2.4 AddressFamily 枚举</h4><p>指定 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socket?view=netframework-4.7.2">Socket</a> 类的实例可以使用的寻址方案。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">AddressFamily</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font size="5"><b>字段</b></font></p><table><thead><tr><th>AppleTalk</th><th>16</th><th>AppleTalk 地址。</th></tr></thead><tbody><tr><td>Atm</td><td>22</td><td>本机 ATM 服务地址。</td></tr><tr><td>Banyan</td><td>21</td><td>Banyan 地址。</td></tr><tr><td>Ccitt</td><td>10</td><td>CCITT 协议（如 X.25）的地址。</td></tr><tr><td>Chaos</td><td>5</td><td>MIT CHAOS 协议的地址。</td></tr><tr><td>Cluster</td><td>24</td><td>Microsoft 群集产品的地址。</td></tr><tr><td>DataKit</td><td>9</td><td>Datakit 协议的地址。</td></tr><tr><td>DataLink</td><td>13</td><td>直接数据链接接口地址。</td></tr><tr><td>DecNet</td><td>12</td><td>DECnet 地址。</td></tr><tr><td>Ecma</td><td>8</td><td>欧洲计算机制造商协会 (ECMA) 地址。</td></tr><tr><td>FireFox</td><td>19</td><td>FireFox 地址。</td></tr><tr><td>HyperChannel</td><td>15</td><td>NSC Hyperchannel 地址。</td></tr><tr><td>Ieee12844</td><td>25</td><td>IEEE 1284.4 工作组地址。</td></tr><tr><td>ImpLink</td><td>3</td><td>ARPANET IMP 地址。</td></tr><tr><td>InterNetwork</td><td>2</td><td>IP 版本 4 的地址。</td></tr><tr><td>InterNetworkV6</td><td>23</td><td>IP 版本 6 的地址。</td></tr><tr><td>Ipx</td><td>6</td><td>IPX 或 SPX 地址。</td></tr><tr><td>Irda</td><td>26</td><td>IrDA 地址。</td></tr><tr><td>Iso</td><td>7</td><td>ISO 协议的地址。</td></tr><tr><td>Lat</td><td>14</td><td>LAT 地址。</td></tr><tr><td>Max</td><td>29</td><td>MAX 地址。</td></tr><tr><td>NetBios</td><td>17</td><td>NetBios 地址。</td></tr><tr><td>NetworkDesigners</td><td>28</td><td>支持网络设计器 OSI 网关的协议的地址。</td></tr><tr><td>NS</td><td>6</td><td>Xerox NS 协议的地址。</td></tr><tr><td>Osi</td><td>7</td><td>OSI 协议的地址。</td></tr><tr><td>Pup</td><td>4</td><td>PUP 协议的地址。</td></tr><tr><td>Sna</td><td>11</td><td>IBM SNA 地址。</td></tr><tr><td>Unix</td><td>1</td><td>Unix 本地到主机地址。</td></tr><tr><td>Unknown</td><td>-1</td><td>未知的地址族。</td></tr><tr><td>Unspecified</td><td>0</td><td>未指定的地址族。</td></tr><tr><td>VoiceView</td><td>18</td><td>VoiceView 地址。</td></tr></tbody></table><h2 id="3-Bind-绑定与-Connect-连接"><a href="#3-Bind-绑定与-Connect-连接" class="headerlink" title="3. Bind() 绑定与 Connect() 连接"></a>3. Bind() 绑定与 Connect() 连接</h2><p><strong>Bind()</strong> 用于绑定 <strong>IPEndPoint</strong> 对象，在服务端使用。</p><p><strong>Connect()</strong> 在客户端使用，用于连接服务端。</p><p>创建 <strong>Socket</strong> 对象后，接着 <strong>绑定本地Socket / 连接服务端</strong>。</p><p> <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socket.bind?f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(System.Net.Sockets.Socket.Bind);k(DevLang-csharp)&rd=true&view=net-6.0">Socket.Bind(EndPoint) 方法</a></p><ul><li><p>命名空间:</p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets?view=net-6.0">System.Net.Sockets</a></p></li><li><p>程序集:</p><p>System.Net.Sockets.dll</p></li></ul><p>使 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socket?view=net-6.0">Socket</a> 与一个本地终结点相关联。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> Bind <span class="token punctuation">(</span><span class="token class-name">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>EndPoint</span> localEP<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Socket</span><span class="token punctuation">(</span>AddressFamily<span class="token punctuation">.</span>InterNetwork<span class="token punctuation">,</span> SocketType<span class="token punctuation">.</span>Stream<span class="token punctuation">,</span> ProtocolType<span class="token punctuation">.</span>Tcp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">IPAddress</span> ip <span class="token operator">=</span> IPAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>socket<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPEndPoint</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token number">2300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注解：</strong></p><ol><li><p>你将在在本地创建 <strong>IPEndPoint</strong> 对象，拥有此 <strong>ip:post</strong> 的访问权限。目的是绑定本地机器的某个端口，所有经过此端口的数据就归你管了。</p></li><li><p><code> IPAddress类</code>提供 Internet 协议 (IP) 地址。在命名空间<code>using System.Net;</code>下</p></li><li><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.ipendpoint.-ctor?view=net-6.0#system-net-ipendpoint-ctor(system-int64-system-int32)">IPEndPoint(Int64, Int32)</a></th><th>用指定的地址和端口号初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.ipendpoint?view=net-6.0">IPEndPoint</a> 类的新实例。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.ipendpoint.-ctor?view=net-6.0#system-net-ipendpoint-ctor(system-net-ipaddress-system-int32)">IPEndPoint(IPAddress, Int32)</a></td><td>用指定的地址和端口号初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.ipendpoint?view=net-6.0">IPEndPoint</a> 类的新实例。</td></tr></tbody></table></li></ol><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socket.connect?f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(System.Net.Sockets.Socket.Connect);k(DevLang-csharp)&rd=true&view=net-6.0">Socket.Connect 方法</a></p><ul><li><p>命名空间:</p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets?view=net-6.0">System.Net.Sockets</a></p></li><li><p>程序集:</p><p>System.Net.Sockets.dll</p></li></ul><p> 与远程主机建立连接。<strong>Connect()</strong> 有四个重载方法，不必关注，只需知道，必需提供 IP 和 Post 两个值。</p><p>使用方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">IPAddress</span> iP <span class="token operator">=</span> IPAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">IPEndPoint</span> iPEndPoint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPEndPoint</span><span class="token punctuation">(</span>iP<span class="token punctuation">,</span> <span class="token number">2300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Socket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Socket</span><span class="token punctuation">(</span>AddressFamily<span class="token punctuation">.</span>InterNetwork<span class="token punctuation">,</span> SocketType<span class="token punctuation">.</span>Stream<span class="token punctuation">,</span> ProtocolType<span class="token punctuation">.</span>Tcp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建与远程主机的连接</span>serverSocket<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>iPEndPoint<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Listen-监听请求连接-和-Accept-接收连接请求"><a href="#4-Listen-监听请求连接-和-Accept-接收连接请求" class="headerlink" title="4. Listen() 监听请求连接 和 Accept() 接收连接请求"></a>4. Listen() 监听请求连接 和 Accept() 接收连接请求</h2><p>代码示例</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//创建终结点（EndPoint）</span><span class="token class-name">IPAddress</span> ip <span class="token operator">=</span> IPAddress<span class="token punctuation">.</span>Any<span class="token punctuation">;</span><span class="token comment">//本地所有IP</span><span class="token class-name">IPEndPoint</span> ipe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPEndPoint</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//8000表示端口port</span><span class="token comment">//创建 socket 并开始监听</span><span class="token class-name">Socket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Socket</span><span class="token punctuation">(</span>AddressFamily<span class="token punctuation">.</span>InterNetwork<span class="token punctuation">,</span> SocketType<span class="token punctuation">.</span>Stream<span class="token punctuation">,</span> ProtocolType<span class="token punctuation">.</span>Tcp<span class="token punctuation">)</span><span class="token punctuation">;</span>serverSocket<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>ipe<span class="token punctuation">)</span><span class="token punctuation">;</span>serverSocket<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开始监听</span><span class="token comment">//接受到client连接，为此连接建立新的socket，并接受信息</span><span class="token class-name">Socket</span> temp <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为新建连接创建新的socket</span><span class="token comment">//关闭连接</span>temp<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注解：</strong></p><ol><li> <code>IPAddress.Any</code>提供一个 IP 地址，指示服务器必须侦听所有网络接口上的客户端活动。 此字段为只读。</li><li> <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socket.listen?f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(System.Net.Sockets.Socket.Listen);k(DevLang-csharp)&rd=true&view=net-6.0">Socket.Listen方法</a> 将 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socket?view=net-6.0">Socket</a> 置于侦听状态。<code>public void Listen (int backlog);``backlog</code>表示挂起连接队列的最大长度。</li><li><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socket.accept?f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(System.Net.Sockets.Socket.Accept);k(DevLang-csharp)&rd=true&view=net-6.0">Socket.Accept 方法</a> 为新建连接创建新的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socket?view=net-6.0">Socket</a>。<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socket.accept?view=net-6.0">Accept</a> 同步从侦听套接字的连接请求队列中提取第一个挂起的连接请求，然后创建并返回一个新 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socket?view=net-6.0">Socket</a>请求。</li><li>注意的是，每次建立连接是一个 <strong>Accept()</strong> 对象，如果你要进行 服务器-客户端互相通讯，应使用同一个 <strong>Accept()</strong> 对象。每个 <strong>Accept</strong> 对象都是 从客户端请求建立开始的，期间只要使用同一个 <strong>Accept</strong> 对象，都可以进行数据传输。</li></ol><h2 id="5-接收-发送信息-Receive-与-Send"><a href="#5-接收-发送信息-Receive-与-Send" class="headerlink" title="5. 接收/发送信息 Receive() 与 Send()"></a>5. 接收/发送信息 Receive() 与 Send()</h2><ul><li>Receive() 接收信息</li><li>Send() 发送信息</li></ul><p>在服务端和客户端都使用这两个方法。</p><p>使用示例</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">string</span></span> recvStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> recvBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">int</span></span> bytes<span class="token punctuation">;</span>bytes <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">Receive</span><span class="token punctuation">(</span>recvBytes<span class="token punctuation">,</span> recvBytes<span class="token punctuation">.</span>Length<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从客户端接受信息</span>recvStr <span class="token operator">+=</span> Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>recvBytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>send()跟Receive()用法相似，</p><p> 示例代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">string</span></span> str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> a <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>send <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>发送/接收 都是使用 byte[] 字节流，所以接收时要进行转换。</p><h2 id="6-释放资源"><a href="#6-释放资源" class="headerlink" title="6. 释放资源"></a>6. 释放资源</h2><p>有 <strong>Accept</strong> 释放和 <strong>Socket</strong> 的释放。</p><p><strong>Accept</strong> 是连接对象，一个 <strong>Socket</strong> 可能有数十个 Accept 连接。</p><p>使用 <strong>Shutdown( )</strong> 方法可以 禁止 <strong>Asscpt</strong> 对象的操作(禁用某个 <strong>Socket</strong> 对象 的发送和接收)。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> Shutdown <span class="token punctuation">(</span><span class="token class-name">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Sockets<span class="token punctuation">.</span>SocketShutdown</span> how<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>SocketShutdown</strong> 是一个 enum 类型。</p><p>实例</p><pre class="line-numbers language-none"><code class="language-none">temp.Shutdown(SocketShutdown.Receive);&#x2F;&#x2F;禁止接收 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th>值</th><th>使用</th><th>描述</th></tr></thead><tbody><tr><td>发送</td><td>Send</td><td>禁止对此发送<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socket?view=netframework-4.7.2">Socket</a>。</td></tr><tr><td>接收</td><td>Receive</td><td>禁用对此接收<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socket?view=netframework-4.7.2">Socket</a>。</td></tr><tr><td>消息和传送</td><td>Both</td><td>禁用发送和接收对此<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socket?view=netframework-4.7.2">Socket</a>。</td></tr></tbody></table><p> <strong>close()</strong></p><p>会直接释放资源，<strong>Accept</strong> 和 <strong>Socket</strong> 对象都可以使用。使用后对象将彻底释放。</p><h2 id="7-最简单的socket通信"><a href="#7-最简单的socket通信" class="headerlink" title="7. 最简单的socket通信"></a>7. 最简单的socket通信</h2><h3 id="7-1-Server服务器端"><a href="#7-1-Server服务器端" class="headerlink" title="7.1 Server服务器端"></a>7.1 Server服务器端</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//端口</span>         <span class="token class-name"><span class="token keyword">int</span></span> port <span class="token operator">=</span> <span class="token number">6000</span><span class="token punctuation">;</span>         <span class="token comment">//ip地址</span>         <span class="token class-name"><span class="token keyword">string</span></span> host <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>         <span class="token class-name">IPAddress</span> ip <span class="token operator">=</span> IPAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//将网络终结点表示为 IP 地址和端口号。</span>         <span class="token class-name">IPEndPoint</span> ipe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPEndPoint</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//寻址方案AddressFamily为IP4，嵌套字类型SocketType为Tcp，协议类型ProtocolType为Tcp</span>         <span class="token class-name">Socket</span> sSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Socket</span><span class="token punctuation">(</span>AddressFamily<span class="token punctuation">.</span>InterNetwork<span class="token punctuation">,</span> SocketType<span class="token punctuation">.</span>Stream<span class="token punctuation">,</span> ProtocolType<span class="token punctuation">.</span>Tcp<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//Bind() 用于绑定 IPEndPoint 对象，在服务端使用。</span>         sSocket<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>ipe<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//监听</span>         sSocket<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"监听已经打开，请等待"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//receive message</span>         <span class="token comment">//从侦听套接字的连接请求队列中提取第一个挂起的连接请求，创建并返回</span>         <span class="token class-name">Socket</span> serverSocket <span class="token operator">=</span> sSocket<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"连接已建立"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name"><span class="token keyword">string</span></span> recStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>         <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> recByte <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment">//接收信息，返回收到的字节数到bytes</span>         <span class="token class-name"><span class="token keyword">int</span></span> bytes <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">Receive</span><span class="token punctuation">(</span>recByte<span class="token punctuation">,</span> recByte<span class="token punctuation">.</span>Length<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//将收到的字节转变为字符</span>         recStr <span class="token operator">+=</span> Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>recByte<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"服务器端获得信息:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">recStr</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//send message</span>         <span class="token class-name"><span class="token keyword">string</span></span> sendStr <span class="token operator">=</span> <span class="token string">"send to client :hello"</span><span class="token punctuation">;</span>         <span class="token comment">//将字符转变为字节</span>         <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> sendByte <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>sendStr<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//向Client客户端发送信息</span>         serverSocket<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>sendByte<span class="token punctuation">,</span> sendByte<span class="token punctuation">.</span>Length<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         serverSocket<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         sSocket<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-Client客户端"><a href="#7-2-Client客户端" class="headerlink" title="7.2 Client客户端"></a>7.2 Client客户端</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//设置端口和服务器端一样</span><span class="token class-name"><span class="token keyword">int</span></span> port <span class="token operator">=</span> <span class="token number">6000</span><span class="token punctuation">;</span>         <span class="token class-name"><span class="token keyword">string</span></span> host <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span><span class="token comment">//服务器端ip地址</span>         <span class="token class-name">IPAddress</span> ip <span class="token operator">=</span> IPAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">IPEndPoint</span> ipe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPEndPoint</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Socket</span> clientSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Socket</span><span class="token punctuation">(</span>AddressFamily<span class="token punctuation">.</span>InterNetwork<span class="token punctuation">,</span> SocketType<span class="token punctuation">.</span>Stream<span class="token punctuation">,</span> ProtocolType<span class="token punctuation">.</span>Tcp<span class="token punctuation">)</span><span class="token punctuation">;</span>         clientSocket<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>ipe<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//send message</span>         <span class="token class-name"><span class="token keyword">string</span></span> sendStr <span class="token operator">=</span> <span class="token string">"send to server : hello,ni hao"</span><span class="token punctuation">;</span>         <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> sendBytes <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>sendStr<span class="token punctuation">)</span><span class="token punctuation">;</span>         clientSocket<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>sendBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//receive message</span>         <span class="token class-name"><span class="token keyword">string</span></span> recStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>         <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> recBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token class-name"><span class="token keyword">int</span></span> bytes <span class="token operator">=</span> clientSocket<span class="token punctuation">.</span><span class="token function">Receive</span><span class="token punctuation">(</span>recBytes<span class="token punctuation">,</span> recBytes<span class="token punctuation">.</span>Length<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         recStr <span class="token operator">+=</span> Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>recBytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>recStr<span class="token punctuation">)</span><span class="token punctuation">;</span>         clientSocket<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述服务器端和客户端建立通信，在互相发送一次信息后通信便结束。</p><h3 id="7-3-使用-内网-局域网测试"><a href="#7-3-使用-内网-局域网测试" class="headerlink" title="7.3 使用(内网)局域网测试"></a>7.3 使用(内网)局域网测试</h3><p>打开<code>cmd</code>输入<code>ipconfig</code>查看网络配置，我连接的WIFI，使用的IPv4地址如下</p><p><img src="/images/Socket/image-20221026111558431.png"></p><p>打开两个VS，一个用作客户端，一个用作服务器端，如下图所示</p><p><img src="/images/Socket/image-20221026112422871.png"></p><p>同时运行，运行效果如下图所示</p><p><img src="/images/Socket/image-20221026112538546.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li> <a href="https://www.cnblogs.com/whuanle/p/10375526.html">C# Socket编程 笔记，Socket 详解，入门简单</a></li><li> <a href="https://zhuanlan.zhihu.com/p/260139078">用大白话解释什么是Socket</a></li><li> <a href="https://www.cnblogs.com/wangcq/p/3520400.html">Socket通信原理</a></li><li><a href="https://www.cnblogs.com/ysyn/p/3399351.html">.net平台下C#socket通信</a></li><li> <a href="https://blog.csdn.net/LLLLL__/article/details/121001692">C#中的Socket</a></li><li> <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socket?view=netframework-4.7.2">MSDN Socket 类</a></li><li> <a href="https://blog.csdn.net/qq_34950682/article/details/107321012">什么是套接字，为什么称“Socket“为套接字</a></li><li>  <a href="https://www.baidu.com/link?url=MhBbGbUZqV8iiz_qs_3zI3S6L3_VFVl_SGoa61YUzepCeYxOSv2epfkKLF1VbuvlPIHaXBJon7DrN_lC12begq&wd=&eqid=931b8895001c10c50000000463578c0f">Socket 为什么要翻译成套接字？</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharpMultithreading</title>
      <link href="/2022/10/22/CSharpMultithreading/"/>
      <url>/2022/10/22/CSharpMultithreading/</url>
      
        <content type="html"><![CDATA[<h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h2><h3 id="1-1-进程"><a href="#1-1-进程" class="headerlink" title="1.1 进程"></a>1.1 进程</h3><p>首先打开任务管理器，查看当前运行的进程：</p><p><img src="/images/CSharpMultithreading/image-20221022153657044.png"></p><p>从任务管理器里面可以看到当前所有正在运行的进程。那么究竟什么是进程呢？</p><p><code>进程（Process）</code>是Windows系统中的一个基本概念，它包含着一个运行程序所需要的资源。<strong>一个正在运行的应用程序在操作系统中被视为一个进程，进程可以包括一个或多个线程。</strong>线程是操作系统分配处理器时间的基本单元，在进程中可以有多个线程同时执行代码。进程之间是相对独立的，一个进程无法访问另一个进程的数据（除非利用分布式计算方式），一个进程运行的失败也不会影响其他进程的运行，Windows系统就是利用进程把工作划分为多个独立的区域的。进程可以理解为一个程序的基本边界。是应用程序的一个运行例程，是应用程序的一次动态执行过程。</p><h3 id="1-2-线程"><a href="#1-2-线程" class="headerlink" title="1.2 线程"></a>1.2 线程</h3><p>在任务管理器里面查询当前总共运行的线程数：</p><p><img src="/images/CSharpMultithreading/image-20221022155600935.png"></p><p><code>线程（Thread）</code>是进程中的基本执行单元，是操作系统分配CPU时间的基本单位，一个进程可以包含若干个线程，在进程入口执行的<strong>第一个线程被视为这个进程的主线程</strong>。在.NET应用程序中，都是以Main()方法作为入口的，当调用此方法时系统就会自动创建一个主线程。线程主要是由CPU寄存器、调用栈和线程本地存储器（Thread Local Storage，TLS）组成的。CPU寄存器主要记录当前所执行线程的状态，调用栈主要用于维护线程所调用到的内存与数据，TLS主要用于存放线程的状态信息。</p><h3 id="1-3-多线程"><a href="#1-3-多线程" class="headerlink" title="1.3 多线程"></a>1.3 多线程</h3><p>多线程的优点：可以同时完成多个任务；可以使程序的响应速度更快；可以让占用大量处理时间的任务或当前没有进行处理的任务定期将处理时间让给别的任务；可以随时停止任务；可以设置每个任务的优先级以优化程序性能。</p><p>那么可能有人会问：<strong>为什么可以多线程执行呢？</strong>总结起来有下面两方面的原因：</p><ol><li><strong>CPU运行速度太快，硬件处理速度跟不上</strong>，所以操作系统进行分时间片管理。这样，从宏观角度来说是多线程并发的，因为CPU速度太快，察觉不到，看起来是同一时刻执行了不同的操作。但是从微观角度来讲，同一时刻只能有一个线程在处理。</li><li>目前电脑都是多核多CPU的，一个CPU在同一时刻只能运行一个线程，但是多个CPU在同一时刻就可以运行多个线程。</li></ol><p>然而，多线程虽然有很多优点，但是也必须认识到多线程可能存在影响系统性能的不利方面，才能正确使用线程。<strong>不利方面主要有如下几点</strong>：</p><ol><li>线程也是程序，所以线程需要占用内存，<strong>线程越多，占用内存也越多</strong>。</li><li>多线程<strong>需要协调和管理</strong>，所以需要占用CPU时间以便跟踪线程。</li><li>线程之间对共享资源的访问会相互影响，必须解决<strong>争用共享资源</strong>的问题。</li><li>线程太多会导致控制太复杂，最终<strong>可能造成很多程序缺陷</strong>。</li></ol><h3 id="1-4-线程池"><a href="#1-4-线程池" class="headerlink" title="1.4 线程池"></a>1.4 线程池</h3><p>.NET Framework的<code>ThreadPool</code>类提供一个线程池，该线程池可用于执行任务、发送工作项、处理异步 I/O、代表其他线程等待以及处理计时器。那么什么是线程池？线程池其实就是一个存放线程对象的“池子(pool)”，他提供了一些基本方法，如：设置pool中最小/最大线程数量、把要执行的方法排入队列等等。<code>ThreadPool</code>是一个静态类，因此可以直接使用，不用创建对象。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPool</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说得简单一点，每新建一个线程都需要占用内存空间和其他资源，而新建了那么多线程，有很多在休眠，或者在等待资源释放；又有许多线程只是周期性的做一些小工作，如刷新数据等等，太浪费了，划不来，实际编程中大量线程突发，然后在短时间内结束的情况很少见。于是，就提出了线程池的概念。线程池中的线程执行完指定的方法后并不会自动消除，而是以挂起状态返回线程池，如果应用程序再次向线程池发出请求，那么处以挂起状态的线程就会被激活并执行任务，而不会创建新线程，这就节约了很多开销。只有当线程数达到最大线程数量，系统才会自动销毁线程。因此，使用线程池可以避免大量的创建和销毁的开支，具有更好的性能和稳定性，其次，开发人员把线程交给系统管理，可以集中精力处理其他任务。</p><h3 id="1-5-线程的组成："><a href="#1-5-线程的组成：" class="headerlink" title="1.5 线程的组成："></a>1.5 线程的组成：</h3><p>（1）CPU<a href="https://so.csdn.net/so/search?q=%E5%AF%84%E5%AD%98%E5%99%A8&spm=1001.2101.3001.7020">寄存器</a>：记录当前线程的执行状态。<br>（2）调用栈：保护线程所调用到的内存和数据。<br>（3）线程本地存储器（TLS）：存放线程的状态信息。</p><h2 id="2-C-多线程"><a href="#2-C-多线程" class="headerlink" title="2. C# 多线程"></a>2. C# 多线程</h2><p><code>当启动一个可执行程序时，将创建一个主线程。在默认的情况下，C#程序具有一个线程，此线程执行程序中以Main方法开始和结束的代码，Main（）方法直接或间接执行的每一个命令都有默认线程（主线程）执行，当Main（）方法返回时此线程也将终止。</code></p><p>在刘老师的课提到<code>Thread</code>是一种比较古老的方式，而<code>Task</code>相对于<code>Thread</code>会高级一些</p><h3 id="2-1-什么是thread"><a href="#2-1-什么是thread" class="headerlink" title="2.1 什么是thread"></a>2.1 什么是thread</h3><p>当我们提及多线程的时候会想到thread和threadpool，这都是异步操作，threadpool其实就是thread的集合，具有很多优势，不过在任务多的时候全局队列会存在竞争而消耗资源。</p><p>thread默认为前台线程，主程序必须等线程跑完才会关闭，而threadpool相反。</p><p><strong>总结：</strong>threadpool确实比thread性能优，但是两者都没有很好的api区控制，如果线程执行无响应就只能等待结束，从而诞生了task任务。</p><h3 id="2-2-什么是task"><a href="#2-2-什么是task" class="headerlink" title="2.2 什么是task"></a>2.2 什么是task</h3><p><strong>task简单地看就是任务，那和thread有什么区别呢？</strong></p><p>Task的背后的实现也是使用了线程池线程，但它的性能优于ThreadPoll,因为它使用的不是线程池的全局队列，而是使用的本地队列，使线程之间的资源竞争减少。</p><p>同时Task提供了丰富的API来管理线程、控制。</p><p>但是相对前面的两种耗内存，Task依赖于CPU对于多核的CPU性能远超前两者，单核的CPU三者的性能没什么差别。</p><h3 id="2-3-Thread的使用"><a href="#2-3-Thread的使用" class="headerlink" title="2.3 Thread的使用"></a>2.3 Thread的使用</h3><p>一个进程可以创建一个或多个线程以执行与该进程关联的部分程序代码。在C#中，线程是使用<code>Thread类</code>处理的，该类在<code>System.Threading命名空间</code>中。使用<code>Thread类</code>创建线程时，只需要提供线程入口，线程入口告诉程序让这个线程做什么。<strong>通过实例化一个<code>Thread类</code>的对象就可以创建一个线程</strong>。创建新的<code>Thread对象</code>时，将创建新的托管线程。<code>Thread类</code>接收一个<code>ThreadStart委托</code>或<code>ParameterizedThreadStart委托</code>的构造函数，该委托包装了调用<code>Start方法</code>时由新线程调用的方法，示例代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建线程</span>thread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//启动线程                                            </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面代码实例化了一个<code>Thread对象</code>，并指明将要调用的方法<code>method()</code>，然后启动线程。<code>ThreadStart委托</code>中作为参数的方法不需要参数，并且没有返回值。<code>ParameterizedThreadStart委托</code>一个对象作为参数，利用这个参数可以很方便地向线程传递参数，示例代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">Thread</span> thread<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ParameterizedThreadStart</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建线程</span>thread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//启动线程                                           </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-3-1-创建多线程的步骤"><a href="#2-3-1-创建多线程的步骤" class="headerlink" title="2.3.1 创建多线程的步骤"></a>2.3.1 创建多线程的步骤</h4><ol><li>编写线程所要执行的方法</li><li>实例化Thread类，并传入一个指向线程所要执行方法的委托。（这时线程已经产生，但还没有运行）</li><li>调用Thread实例的Start方法，标记该线程可以被CPU执行了，但具体执行时间由CPU决定</li></ol><p>一个简单的示例</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Multithreading</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//2.实例化Thread类，并传入一个指向线程所要执行方法的委托</span>            <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3.调用Thread实例的Start方法</span>            thread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//1.编写线程所要执行的方法DoHomework()</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Student </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string"> doing homework </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string"> hours."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-2-System-Threading-Thread类"><a href="#2-3-2-System-Threading-Thread类" class="headerlink" title="2.3.2 System.Threading.Thread类"></a>2.3.2 System.Threading.Thread类</h4><p>创建和控制线程，设置其优先级并获取其状态。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>ConstrainedExecution<span class="token punctuation">.</span>CriticalFinalizerObject</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Thread类是是控制线程的基础类，位于System.Threading命名空间下，具有4个重载的构造函数：</p><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread.-ctor?view=net-6.0#system-threading-thread-ctor(system-threading-parameterizedthreadstart)">Thread(ParameterizedThreadStart)</a></th><th>初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread?view=net-6.0">Thread</a> 类的新实例，指定允许对象在线程启动时传递给线程的委托。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread.-ctor?view=net-6.0#system-threading-thread-ctor(system-threading-threadstart)">Thread(ThreadStart)</a></td><td>初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread?view=net-6.0">Thread</a> 类的新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread.-ctor?view=net-6.0#system-threading-thread-ctor(system-threading-parameterizedthreadstart-system-int32)">Thread(ParameterizedThreadStart, Int32)</a></td><td>初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread?view=net-6.0">Thread</a> 类的新实例，指定允许对象在线程启动时传递给线程的委托，并指定线程的最大堆栈大小。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread.-ctor?view=net-6.0#system-threading-thread-ctor(system-threading-threadstart-system-int32)">Thread(ThreadStart, Int32)</a></td><td>初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread?view=net-6.0">Thread</a> 类的新实例，指定线程的最大堆栈大小。</td></tr></tbody></table><h4 id="2-3-3-ThreadStart委托"><a href="#2-3-3-ThreadStart委托" class="headerlink" title="2.3.3 ThreadStart委托"></a>2.3.3 ThreadStart委托</h4><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.threadstart?view=net-6.0">ThreadStart</a>是一个无参的、返回值为void的委托。委托定义如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ThreadStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我上面使用的就是<code>ThreadStart委托</code>创建的线程，<code>ThreadStart委托</code>既可以运行静态的方法，也可以运行实例方法</p><p>如果为了简单，<code>Lambda表达式</code>来为<code>Thread</code>的构造方法赋值</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"我是通过Lambda表达式创建的委托"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-3-4-ParameterizedThreadStart委托"><a href="#2-3-4-ParameterizedThreadStart委托" class="headerlink" title="2.3.4 ParameterizedThreadStart委托"></a>2.3.4 ParameterizedThreadStart委托</h4><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.parameterizedthreadstart?view=net-6.0">ParameterizedThreadStart</a>是一个有参的、返回值为void的委托，定义如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ParameterizedThreadStart</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">?</span></span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表示在 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread?view=net-6.0">Thread</a> 上执行的方法。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Multithreading</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ParameterizedThreadStart</span><span class="token punctuation">(</span>Program<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token number">344</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Program</span> program <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Program</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span> threadInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span>program<span class="token punctuation">.</span>DoMoreHomework<span class="token punctuation">)</span><span class="token punctuation">;</span>            threadInstance<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token string">"8yyy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//静态方法</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoHomework</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> obj<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Static thread procedure. Data='</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">obj</span><span class="token punctuation">&#125;</span></span><span class="token string">'"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//实例方法</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoMoreHomework</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> obj<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Instance thread procedure. Data='</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">obj</span><span class="token punctuation">&#125;</span></span><span class="token string">'"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><pre class="line-numbers language-none"><code class="language-none">Instance thread procedure. Data&#x3D;&#39;8yyy&#39;Static thread procedure. Data&#x3D;&#39;344&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><font color="red">注意：<code>ParameterizedThreadStart委托</code>的参数类型必须是<code>Object</code>的。如果使用的是不带参数的委托，不能使用带参数的Start方法运行线程，否则系统会抛出异常。但使用带参数的委托，可以使用thread.Start()来运行线程，这时所传递的参数值为null。</font></p><p>可以发现上述代码中<code>Thread threadInstance = new Thread(program.DoMoreHomework);</code>没有使用显式的<code>ParameterizedThreadStart</code>构造函数调用，这是因为C# 编译器会自动从方法<code>DoMoreHomework</code>的签名推断<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.parameterizedthreadstart?view=net-6.0">ParameterizedThreadStart</a>委托，并调用正确的构造函数。</p><h4 id="2-3-5-Thread线程常用的属性"><a href="#2-3-5-Thread线程常用的属性" class="headerlink" title="2.3.5 Thread线程常用的属性"></a>2.3.5 Thread线程常用的属性</h4><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread.currentculture?view=net-6.0#system-threading-thread-currentculture">CurrentCulture</a></th><th>获取或设置当前线程的区域性。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread.currentprincipal?view=net-6.0#system-threading-thread-currentprincipal">CurrentPrincipal</a></td><td>获取或设置线程的当前负责人（对基于角色的安全性而言）。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread.currentthread?view=net-6.0#system-threading-thread-currentthread">CurrentThread</a></td><td>获取当前正在运行的线程。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread.currentuiculture?view=net-6.0#system-threading-thread-currentuiculture">CurrentUICulture</a></td><td>获取或设置资源管理器使用的当前区域性以便在运行时查找区域性特定的资源。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread.executioncontext?view=net-6.0#system-threading-thread-executioncontext">ExecutionContext</a></td><td>获取 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.executioncontext?view=net-6.0">ExecutionContext</a> 对象，该对象包含有关当前线程的各种上下文的信息。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread.isalive?view=net-6.0#system-threading-thread-isalive">IsAlive</a></td><td>获取指示当前线程的执行状态的值。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread.isbackground?view=net-6.0#system-threading-thread-isbackground">IsBackground</a></td><td>获取或设置一个值，该值指示某个线程是否为后台线程。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread.isthreadpoolthread?view=net-6.0#system-threading-thread-isthreadpoolthread">IsThreadPoolThread</a></td><td>获取指示线程是否属于托管线程池的值。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread.managedthreadid?view=net-6.0#system-threading-thread-managedthreadid">ManagedThreadId</a></td><td>获取当前托管线程的唯一标识符。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread.name?view=net-6.0#system-threading-thread-name">Name</a></td><td>获取或设置线程的名称。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread.priority?view=net-6.0#system-threading-thread-priority">Priority</a></td><td>获取或设置指示线程的调度优先级的值。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread.threadstate?view=net-6.0#system-threading-thread-threadstate">ThreadState</a></td><td>获取一个值，该值包含当前线程的状态。</td></tr></tbody></table><p><code>ManagedThreadId</code>是确认线程的唯一标识符，程序在大部分情况下都是通过<code>Thread.ManagedThreadId</code>来辨别线程的。而<code>Name</code>是一个可变值，在默认时候，<code>Name</code>为一个空值 <code>Null</code>，开发人员可以通过程序设置线程的名称，但这只是一个辅助功能。</p><h4 id="2-3-6-线程的优先级"><a href="#2-3-6-线程的优先级" class="headerlink" title="2.3.6 线程的优先级"></a>2.3.6 线程的优先级</h4><p>当线程之间争夺CPU时间时，CPU按照线程的优先级给予服务。高优先级的线程可以完全阻止低优先级的线程执行。.NET为线程设置了<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.threadpriority?view=net-6.0">Priority</a>属性来定义线程执行的优先级别，里面包含5个选项，其中Normal是默认值。除非系统有特殊要求，否则不应该随便设置线程的优先级别。</p><table><thead><tr><th>AboveNormal</th><th>3</th><th>可以将 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread?view=net-6.0">Thread</a> 安排在具有 <code>Highest</code> 优先级的线程之后，在具有 <code>Normal</code> 优先级的线程之前。</th></tr></thead><tbody><tr><td>BelowNormal</td><td>1</td><td>可以将 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread?view=net-6.0">Thread</a> 安排在具有 <code>Normal</code> 优先级的线程之后，在具有 <code>Lowest</code> 优先级的线程之前。</td></tr><tr><td>Highest</td><td>4</td><td>可以将 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread?view=net-6.0">Thread</a> 安排在具有任何其他优先级的线程之前。</td></tr><tr><td>Lowest</td><td>0</td><td>可以将 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread?view=net-6.0">Thread</a> 安排在具有任何其他优先级的线程之后。</td></tr><tr><td>Normal</td><td>2</td><td>可以将 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread?view=net-6.0">Thread</a> 安排在具有 <code>AboveNormal</code> 优先级的线程之后，在具有 <code>BelowNormal</code> 优先级的线程之前。 默认情况下，线程具有 <code>Normal</code> 优先级。</td></tr></tbody></table><h4 id="2-3-7-线程的状态"><a href="#2-3-7-线程的状态" class="headerlink" title="2.3.7 线程的状态"></a>2.3.7 线程的状态</h4><p>通过<code>ThreadState属性</code>可以检测线程是处于Unstarted（初始值）、Sleeping、Running 等等状态，它比 IsAlive 属性能提供更多的特定信息。</p><p>前面说过，一个应用程序域中可能包括多个上下文，而通过<code>CurrentContext</code>可以获取线程当前的上下文。</p><p><code>CurrentThread</code>是最常用的一个属性，它是用于获取当前运行的线程。</p><h4 id="2-3-8-System-Threading-Thread的方法"><a href="#2-3-8-System-Threading-Thread的方法" class="headerlink" title="2.3.8 System.Threading.Thread的方法"></a>2.3.8 System.Threading.Thread的方法</h4><p>Thread 中包括了多个方法来控制线程的创建、挂起、停止、销毁，以后来的例子中会经常使用。</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>Abort()</td><td>终止本线程。<strong>已过时</strong></td></tr><tr><td>GetDomain()</td><td>返回当前线程正在其中运行的当前域。</td></tr><tr><td>GetDomainId()</td><td>返回唯一的应用程序域标识符。</td></tr><tr><td>Interrupt()</td><td>中断处于 WaitSleepJoin 线程状态的线程。</td></tr><tr><td>Join()</td><td>在继续执行标准的 COM 和 <code>SendMessage</code> 消息泵处理期间，阻止调用线程，直到由该实例表示的线程终止。</td></tr><tr><td>Resume()</td><td>继续运行已挂起的线程。 <strong>已过时</strong></td></tr><tr><td>Start()</td><td>执行本线程。</td></tr><tr><td>Suspend()</td><td>挂起当前线程，如果当前线程已属于挂起状态则此不起作用。 <strong>已过时</strong></td></tr><tr><td>Sleep()</td><td>把正在运行的线程挂起一段时间。</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//获取正在运行的线程</span><span class="token class-name">Thread</span> thread <span class="token operator">=</span> Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">;</span><span class="token comment">//设置线程的名字</span>thread<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"主线程"</span><span class="token punctuation">;</span><span class="token comment">//获取当前线程的唯一标识符</span><span class="token class-name"><span class="token keyword">int</span></span> id <span class="token operator">=</span> thread<span class="token punctuation">.</span>ManagedThreadId<span class="token punctuation">;</span><span class="token comment">//获取当前线程的状态</span><span class="token class-name">ThreadState</span> state <span class="token operator">=</span> thread<span class="token punctuation">.</span>ThreadState<span class="token punctuation">;</span><span class="token comment">//获取当前线程的优先级</span><span class="token class-name">ThreadPriority</span> priority <span class="token operator">=</span> thread<span class="token punctuation">.</span>Priority<span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">string</span></span> strMsg <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$" Thread ID:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">id</span><span class="token punctuation">&#125;</span></span><span class="token string">\n "</span></span> <span class="token operator">+</span>    <span class="token interpolation-string"><span class="token string">$"Thread Name:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">thread<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">\n "</span></span> <span class="token operator">+</span>    <span class="token interpolation-string"><span class="token string">$"Thread State:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">state</span><span class="token punctuation">&#125;</span></span><span class="token string">\n "</span></span> <span class="token operator">+</span>    <span class="token interpolation-string"><span class="token string">$"Thread Priority:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">priority</span><span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>strMsg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/CSharpMultithreading/image-20221023144709084.png"></p><h4 id="2-3-9-前台线程和后台线程"><a href="#2-3-9-前台线程和后台线程" class="headerlink" title="2.3.9 前台线程和后台线程"></a>2.3.9 前台线程和后台线程</h4><p><code>前台线程</code>：只有所有的前台线程都结束，应用程序才能结束。<strong>默认情况下创建的线程都是前台线程</strong><br><code>后台线程</code>：只要所有的前台线程结束，后台线程自动结束。通过Thread.IsBackground设置后台线程。必须在调用Start方法之前设置线程的类型，否则一旦线程运行，将无法改变其类型。</p><p><strong>通过BeginXXX方法运行的线程都是后台线程。</strong></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Multithreading</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//演示前台、后台线程</span>            <span class="token class-name">BackGroundTest</span> backGround1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BackGroundTest</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建前台线程</span>            <span class="token class-name">Thread</span> fThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>backGround1<span class="token punctuation">.</span>RunLoop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//给线程命名</span>            fThread<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"前台线程"</span><span class="token punctuation">;</span>            <span class="token class-name">BackGroundTest</span> backGround2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BackGroundTest</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建后台线程</span>            <span class="token class-name">Thread</span> bThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>backGround2<span class="token punctuation">.</span>RunLoop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bThread<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"后台线程"</span><span class="token punctuation">;</span>            <span class="token comment">//设置为后台线程</span>            bThread<span class="token punctuation">.</span>IsBackground <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment">//启动线程</span>            fThread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bThread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">BackGroundTest</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> Count<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">BackGroundTest</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Count <span class="token operator">=</span> count<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RunLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//获取当前线程的名称</span>            <span class="token class-name"><span class="token keyword">string</span></span> threadName <span class="token operator">=</span> Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>Name<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">threadName</span><span class="token punctuation">&#125;</span></span><span class="token string">计数：</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">threadName</span><span class="token punctuation">&#125;</span></span><span class="token string">完成计数"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：前台线程执行完，后台线程未执行完，程序自动结束。</p><p><img src="/images/CSharpMultithreading/image-20221023150140779.png"></p><p>把bThread.IsBackground = true注释掉，运行结果：主线程执行完毕后(Main函数)，程序并未结束，而是要等所有的前台线程结束以后才会结束。</p><p><font color="red">后台线程一般用于处理不重要的事情，应用程序结束时，后台线程是否执行完成对整个应用程序没有影响。如果要执行的事情很重要，需要将线程设置为前台线程。</font></p><h4 id="2-3-10-线程同步-Lock-，解决资源访问冲突问题"><a href="#2-3-10-线程同步-Lock-，解决资源访问冲突问题" class="headerlink" title="2.3.10 线程同步(Lock)，解决资源访问冲突问题"></a>2.3.10 线程同步(Lock)，解决资源访问冲突问题</h4><p><strong>所谓同步：是指在某一时刻只有一个线程可以访问变量。</strong><br>如果不能确保对变量的访问是同步的，就会产生错误。<br>c#为同步访问变量提供了一个非常简单的方式，即使用c#语言的<code>关键字Lock</code>，它可以把一段代码定义为互斥段，互斥段在一个时刻内只允许一个线程进入执行，而其他线程必须等待。在c#中，关键字Lock定义如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token function">Lock</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  statement_block<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这在之前做坦克大战的时候用到过</p><p><code>expression</code>代表你希望跟踪的对象：</p><ul><li>如果你想保护一个类的实例，一般地，你可以使用this；</li><li>如果你想保护一个静态变量（如互斥代码段在一个静态方法内部），一般使用类名就可以了</li></ul><p>而statement_block就算互斥段的代码，这段代码在一个时刻内只可能被一个线程执行。</p><p>以书店卖书为例</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">BookShop</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">BookShop</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BookShop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建两个线程同时访问Sale方法</span>            <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>Sale<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>Sale<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//启动线程</span>            t1<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">BookShop</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//剩余图书数量</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> tmp <span class="token operator">=</span> num<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//判断是否有书，如果有就可以卖</span>            <span class="token punctuation">&#123;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                num <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"售出一本图书，还剩余&#123;0&#125;本"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"没有了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/CSharpMultithreading/image-20221023151006840.png"></p><p><strong>从运行结果可以看出，两个线程同步访问共享资源，没有考虑同步的问题，结果不正确。</strong></p><p>考虑线程同步，改进后的代码：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">lock</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">int</span></span> tmp <span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//判断是否有书，如果有就可以卖</span>        <span class="token punctuation">&#123;</span>            Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            num <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"售出一本图书，还剩余&#123;0&#125;本"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"没有了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/CSharpMultithreading/image-20221023151157139.png"></p><h4 id="2-3-11-跨线程访问-使用回调方法"><a href="#2-3-11-跨线程访问-使用回调方法" class="headerlink" title="2.3.11 跨线程访问(使用回调方法)"></a>2.3.11 跨线程访问(使用回调方法)</h4><p>使用WinForm，创建如下</p><p><img src="/images/CSharpMultithreading/image-20221023151740906.png"></p><p>点击“测试”，创建一个线程，从0循环到10000给文本框赋值，代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">btn_Test_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//创建一个线程去执行这个方法:创建的线程默认是前台线程</span>            <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//Start方法标记这个线程就绪了，可以随时被执行，具体什么时候执行这个线程，由CPU决定</span>            <span class="token comment">//将线程设置为后台线程</span>            thread<span class="token punctuation">.</span>IsBackground <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            thread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><p><img src="/images/CSharpMultithreading/image-20221023151856348.png"></p><p><strong>产生错误的原因：textBox1是由主线程创建的，thread线程是另外创建的一个线程，在.NET上执行的是托管代码，C#强制要求这些代码必须是线程安全的，即不允许跨线程访问Windows窗体的控件。</strong></p><p>解决方案：</p><p>1、在窗体的加载事件中，将C#内置控件(Control)类的<code>CheckForIllegalCrossThreadCalls</code>属性设置为false，屏蔽掉C#编译器对跨线程调用的检查。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form1_Load</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//取消跨线程的访问</span>        Control<span class="token punctuation">.</span>CheckForIllegalCrossThreadCalls <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用上述的方法虽然可以保证程序正常运行并实现应用的功能，但是在实际的软件开发中，做如此设置是不安全的（不符合.NET的安全规范），在产品软件的开发中，此类情况是不允许的。如果要在遵守.NET安全标准的前提下，实现从一个线程成功地访问另一个线程创建的空间，要使用C#的方法回调机制。</p><p>2、使用回调函数callback</p><p>回调实现的一般过程：</p><p> C#的方法回调机制，也是建立在委托基础上的，下面给出它的典型实现过程。</p><p>（1）、定义、声明回调。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//定义回调</span><span class="token keyword">private</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoSomeCallBack</span><span class="token punctuation">(</span><span class="token class-name">Type</span> para<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//声明回调</span><span class="token class-name">DoSomeCallBack</span> doSomaCallBack<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，这里定义声明的“回调”（doSomaCallBack）其实就是一个委托。</p><p>（2）、初始化回调方法。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">doSomeCallBack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">DoSomeCallBack</span><span class="token punctuation">(</span>DoSomeMethod<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所谓“初始化回调方法”实际上就是实例化刚刚定义了的委托，这里作为参数的DoSomeMethod称为“<strong>回调方法</strong>”，它封装了对另一个线程中目标对象（窗体控件或其他类）的操作代码。</p><p>（3）、触发对象动作</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name">Opt</span> obj<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>doSomeCallBack<span class="token punctuation">,</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中<code>Opt obj为目标操作对象</code>，在此假设它是某控件，故调用其<code>Invoke方法</code>。Invoke方法签名为：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">object</span></span> Control<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token class-name">Delegate</span> method<span class="token punctuation">,</span><span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它的第一个参数为委托类型，可见“触发对象动作”的本质，就是把<code>委托doSomeCallBack</code>作为参数传递给控件的<code>Invoke方法</code>，这与委托的使用方式是一模一样的。</p><p>最终作用于对象Opt obj的代码是置于回调方法体DoSomeMethod()中的，如下所示：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoSomeMethod</span><span class="token punctuation">(</span><span class="token class-name">type</span> para<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">//方法体</span>    <span class="token return-type class-name">Opt</span> obj<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span>para<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不用回调，而是直接在程序中使用“<code>Opt obj.someMethod(para);</code>”，则当<code>对象Opt obj</code>不在本线程（跨线程访问）时就会发生上面所示的错误。</p><p>从以上回调实现的一般过程可知：C#的回调机制，实质上是委托的一种应用。在C#网络编程中，回调的应用是非常普遍的，有了方法回调，就可以在.NET上写出线程安全的代码了。</p><p>使用方法回调，实现给文本框赋值：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">namespace</span> <span class="token namespace">MultiThreadDemo</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Form1</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token function">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//定义回调</span>        <span class="token keyword">private</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">setTextValueCallBack</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//声明回调</span>        <span class="token keyword">private</span> <span class="token class-name">setTextValueCallBack</span> setCallBack<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">btn_Test_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//实例化回调</span>            setCallBack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">setTextValueCallBack</span><span class="token punctuation">(</span>SetValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建一个线程去执行这个方法:创建的线程默认是前台线程</span>            <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//Start方法标记这个线程就绪了，可以随时被执行，具体什么时候执行这个线程，由CPU决定</span>            <span class="token comment">//将线程设置为后台线程</span>            thread<span class="token punctuation">.</span>IsBackground <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            thread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//使用回调</span>                textBox1<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>setCallBack<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/// &lt;summary></span>        <span class="token comment">/// 定义回调使用的方法</span>        <span class="token comment">/// &lt;/summary></span>        <span class="token comment">/// &lt;param name="value">&lt;/param></span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-异步编程Task的使用"><a href="#2-4-异步编程Task的使用" class="headerlink" title="2.4 异步编程Task的使用"></a>2.4 异步编程Task的使用</h3><p>异步的好处在于非阻塞(调用线程不会暂停执行去等待子线程完成)，因此我们把一些不需要立即使用结果、较耗时的任务设为异步执行，可以提高程序的运行效率。<code>.net4.0</code>在<code>ThreadPool</code>的基础上推出了<code>Task</code>类，微软极力推荐使用<code>Task</code>来执行异步任务，现在C#类库中的异步方法基本都用到了<code>Task</code>；<code>.net5.0</code>推出了<code>async/await</code>，让异步编程更为方便。</p><p><code>Thread</code>线程是用来创建并发的一种低级别工具，它具有一些限制，尤其是：</p><ul><li>虽然开始线程的时候可以方便的传入数据，但是当join的时候很难从线程获得返回值。</li><li>可能需要设置一些共享字段。</li><li>如果操作抛出异常，铺货和传播该异常都很麻烦</li><li>无法告诉线程在结束时开始另外的工作，你必须进行join操作（在进程中阻塞当前的线程）</li><li>很难使用较小的并发（<code>concurrent</code>）来组件大型的并发</li></ul><p><code>Task</code>类可以很好的解决上述问题，它是一个高级抽象：它代表了一个并发操作（<code>concurrent</code>），该操作可能有<code>Thread</code>支持，或不由<code>Thread</code>支持。</p><ul><li><code>Task</code>是可组合的（可使用<code>continuation</code>把他们穿成链）。</li><li><code>Tasks</code>可以使用线程池来减少启动延迟。</li><li>使用<code>TaskCompletionSource</code>，<code>Tasks</code>可以利用回调的方式，在等待I/O绑定操作时完全避免使用线程。</li></ul><p><code>Task</code>是在<code>ThreadPool</code>的基础上推出的，我们简单了解下<code>ThreadPool</code>。<code>ThreadPool</code>中有若干数量的线程，如果有任务需要处理时，会从线程池中获取一个空闲的线程来执行任务，任务执行完毕后线程不会销毁，而是被线程池回收以供后续任务使用。当线程池中所有的线程都在忙碌时，又有新任务要处理时，线程池才会新建一个线程来处理该任务，如果线程数量达到设置的最大值，任务会排队，等待其他任务释放线程后再执行。线程池能减少线程的创建，节省开销，看一个<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.threadpool?f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(System.Threading.ThreadPool);k(DevLang-csharp)&rd=true&view=net-6.0">ThreadPool</a>的栗子吧</p><p><img src="/images/CSharpMultithreading/image-20221024141306942.png"></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//ThreadPool执行任务</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ThreadPool<span class="token punctuation">.</span><span class="token function">QueueUserWorkItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">WaitCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"第</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">obj</span><span class="token punctuation">&#125;</span></span><span class="token string">个执行任务"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/CSharpMultithreading/image-20221024141747495.png"></p><p><strong>注解：</strong></p><ol><li> <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.threadpool.queueuserworkitem?f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(System.Threading.ThreadPool.QueueUserWorkItem);k(DevLang-csharp)&rd=true&view=net-6.0">ThreadPool.QueueUserWorkItem 方法</a></li></ol><p>   将方法排入队列以便执行。 此方法在有线程池线程变得可用时执行。</p><ol start="2"><li><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.threadpool.queueuserworkitem?view=net-6.0#system-threading-threadpool-queueuserworkitem(system-threading-waitcallback-system-object)">QueueUserWorkItem(WaitCallback, Object)</a></p><p>将方法排入队列以便执行，并指定包含该方法所用数据的对象。 此方法在有线程池线程变得可用时执行。</p></li><li><p><code>ThreadPool</code>相对于<code>Thread</code>来说可以减少线程的创建，有效减小系统开销；但是<code>ThreadPool</code>不能控制线程的执行顺序，我们也不能获取线程池内线程取消/异常/完成的通知，即我们不能有效监控和控制线程池中的线程。</p></li></ol><h4 id="2-4-1-Task创建和运行"><a href="#2-4-1-Task创建和运行" class="headerlink" title="2.4.1 Task创建和运行"></a>2.4.1 Task创建和运行</h4><p>我们知道了<code>ThreadPool</code>的弊端：我们不能控制线程池中线程的执行顺序，也不能获取线程池内线程取消/异常/完成的通知。net4.0在<code>ThreadPool</code>的基础上推出了<code>Task</code>，<code>Task</code>拥有线程池的优点，同时也解决了使用线程池不易控制的弊端。</p><p>使用<code>Task</code>需要引入</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先看一下怎么去创建并运行一个<code>Task</code>，<code>Task</code>的创建和执行方式有如下三种：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">TaskExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//1.new方式实例化一个Task，需要通过Start方法启动</span>            <span class="token class-name">Task</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>            <span class="token punctuation">&#123;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"hello, task1的线程ID为</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            task<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.Task.Factory.StartNew(Action action)创建和启动一个Task</span>            <span class="token class-name">Task</span> task2 <span class="token operator">=</span> Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>            <span class="token punctuation">&#123;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"hello, task2的线程ID为</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"> Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3.Task.Run(Action action)将任务放在线程池队列，返回并启动一个Task</span>            <span class="token class-name">Task</span> task3 <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>            <span class="token punctuation">&#123;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"hello, task3的线程ID为</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"> Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"执行主线程！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/CSharpMultithreading/image-20221024143429866.png"></p><p>我们看到先打印主线程的cw语句<code>&quot;执行主线程&quot;</code>，然后再打印各个任务，说明了<code>Task</code><strong>不会阻塞主线程</strong>。上边的例子<code>Task</code>都没有返回值，我们也可以创建有返回值的<code>~task</code>，用法和没有返回值的基本一致,我们简单修改一下上边的例子，代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">TaskExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">////1.new方式实例化一个Task，需要通过Start方法启动</span>            <span class="token class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token interpolation-string"><span class="token string">$"hello, task1的ID为</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            task<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">////2.Task.Factory.StartNew(Func func)创建和启动一个Task</span>            <span class="token class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> task2 <span class="token operator">=</span> Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">StartNew</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token interpolation-string"><span class="token string">$"hello, task2的ID为</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"> Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">////3.Task.Run(Func func)将任务放在线程池队列，返回并启动一个Task</span>            <span class="token class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> task3 <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Run</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token interpolation-string"><span class="token string">$"hello, task3的ID为</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"> Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>task3<span class="token punctuation">.</span>Result<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"执行主线程！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>Result<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>task2<span class="token punctuation">.</span>Result<span class="token punctuation">)</span><span class="token punctuation">;</span>                        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意这样写<code>task3.Resut</code>获取结果时会阻塞线程，即如果<code>task</code>没有执行完成，会等待<code>task</code>执行完成获取到<code>Result</code>，然后再执行后边的代码，运行结果如下</strong></p><p><img src="/images/CSharpMultithreading/image-20221024144518036.png"></p><p><strong>注解：</strong></p><ul><li><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task?view=net-6.0">Task</a> 可以通过多种方式创建实例。 从 .NET Framework 4.5 开始，最常见的方法是调用静态<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task.run?view=net-6.0">Run</a>方法。 此方法 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task.run?view=net-6.0">Run</a> 提供了一种使用默认值启动任务的简单方法，而无需其他参数。 以下示例使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task.run?view=net-6.0#system-threading-tasks-task-run(system-action)">Run(Action)</a> 该方法启动循环的任务，然后显示循环迭代数：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span><span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                                  <span class="token comment">// Just loop.</span>                                  <span class="token class-name"><span class="token keyword">int</span></span> ctr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                  <span class="token keyword">for</span> <span class="token punctuation">(</span>ctr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ctr <span class="token operator">&lt;=</span> <span class="token number">1000000</span><span class="token punctuation">;</span> ctr<span class="token operator">++</span><span class="token punctuation">)</span>                                  <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                                  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Finished &#123;0&#125; loop iterations"</span><span class="token punctuation">,</span>                                                    ctr<span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> <strong>Task.Run</strong> 方法将在线程池上运行的指定工作排队，并返回该工作的任务或 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task-1?view=net-6.0">Task</a> 句柄。 </li></ul></li><li><p>一种替代方法，也是在 .NET Framework 4 中启动任务的最常见方法是静态<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.taskfactory.startnew?view=net-6.0">TaskFactory.StartNew</a>方法。 该 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task.factory?view=net-6.0">Task.Factory</a> 属性返回对象 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.taskfactory?view=net-6.0">TaskFactory</a> 。 使用此方法的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.taskfactory.startnew?view=net-6.0">TaskFactory.StartNew</a> 重载可以指定参数以传递给任务创建选项和任务计划程序。 以下示例使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.taskfactory.startnew?view=net-6.0">TaskFactory.StartNew</a> 该方法启动任务。 它在功能上等效于上一示例中的代码。</p></li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span><span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>      <span class="token class-name">Task</span> t <span class="token operator">=</span> Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                                  <span class="token comment">// Just loop.</span>                                  <span class="token class-name"><span class="token keyword">int</span></span> ctr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                  <span class="token keyword">for</span> <span class="token punctuation">(</span>ctr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ctr <span class="token operator">&lt;=</span> <span class="token number">1000000</span><span class="token punctuation">;</span> ctr<span class="token operator">++</span><span class="token punctuation">)</span>                                  <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                                  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Finished &#123;0&#125; loop iterations"</span><span class="token punctuation">,</span>                                                    ctr<span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      t<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-2-使用task-RunSynchronously-同步执行Task"><a href="#2-4-2-使用task-RunSynchronously-同步执行Task" class="headerlink" title="2.4.2 使用task.RunSynchronously()同步执行Task"></a>2.4.2 使用task.RunSynchronously()同步执行Task</h4><p>上边的所有栗子中Task的执行都是<strong>异步</strong>的，不会阻塞主线程。有些场景下我们想让Task<strong>同步</strong>执行怎么办呢？Task提供了 <code>task.RunSynchronously()</code>用于同步执行Task任务，代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           <span class="token class-name">Task</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>           <span class="token punctuation">&#123;</span>               Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"执行Task结束!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//同步执行，task会阻塞主线程</span>           task<span class="token punctuation">.</span><span class="token function">RunSynchronously</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"执行主线程结束！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-3-Task的构造方法"><a href="#2-4-3-Task的构造方法" class="headerlink" title="2.4.3 Task的构造方法"></a>2.4.3 Task的构造方法</h4><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task.-ctor?view=net-6.0#system-threading-tasks-task-ctor(system-action)">Task(Action)</a></th><th>使用指定的操作初始化新的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task?view=net-6.0">Task</a>。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task.-ctor?view=net-6.0#system-threading-tasks-task-ctor(system-action-system-threading-cancellationtoken)">Task(Action, CancellationToken)</a></td><td>使用指定的操作和 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task?view=net-6.0">Task</a> 初始化新的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.cancellationtoken?view=net-6.0">CancellationToken</a>。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task.-ctor?view=net-6.0#system-threading-tasks-task-ctor(system-action-system-threading-tasks-taskcreationoptions)">Task(Action, TaskCreationOptions)</a></td><td>使用指定的操作和创建选项初始化新的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task?view=net-6.0">Task</a>。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task.-ctor?view=net-6.0#system-threading-tasks-task-ctor(system-action((system-object))-system-object)">Task(Action, Object)</a></td><td>使用指定的操作和状态初始化新的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task?view=net-6.0">Task</a>。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task.-ctor?view=net-6.0#system-threading-tasks-task-ctor(system-action-system-threading-cancellationtoken-system-threading-tasks-taskcreationoptions)">Task(Action, CancellationToken, TaskCreationOptions)</a></td><td>使用指定的操作和创建选项初始化新的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task?view=net-6.0">Task</a>。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task.-ctor?view=net-6.0#system-threading-tasks-task-ctor(system-action((system-object))-system-object-system-threading-cancellationtoken)">Task(Action, Object, CancellationToken)</a></td><td>使用指定的操作、状态和选项初始化新的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task?view=net-6.0">Task</a>。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task.-ctor?view=net-6.0#system-threading-tasks-task-ctor(system-action((system-object))-system-object-system-threading-tasks-taskcreationoptions)">Task(Action, Object, TaskCreationOptions)</a></td><td>使用指定的操作、状态和选项初始化新的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task?view=net-6.0">Task</a>。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task.-ctor?view=net-6.0#system-threading-tasks-task-ctor(system-action((system-object))-system-object-system-threading-cancellationtoken-system-threading-tasks-taskcreationoptions)">Task(Action, Object, CancellationToken, TaskCreationOptions)</a></td><td>使用指定的操作、状态和选项初始化新的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task?view=net-6.0">Task</a>。</td></tr></tbody></table><p>我们可以看到<code>Task</code>所有的构造函数都有一个委托</p><h4 id="2-4-4-Task的阻塞方法-Wait-WaitAll-WaitAny"><a href="#2-4-4-Task的阻塞方法-Wait-WaitAll-WaitAny" class="headerlink" title="2.4.4 Task的阻塞方法(Wait/WaitAll/WaitAny)"></a>2.4.4 Task的阻塞方法(Wait/WaitAll/WaitAny)</h4><p>使用Thread时，我们知道用<code>thread.Join()</code>方法即可阻塞主线程。看一个例子：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ThreadJoin</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span> th1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"线程1执行完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            th1<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span> th2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"线程2执行完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            th2<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//阻塞主线程</span>            th1<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            th2<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"主线程执行完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/CSharpMultithreading/image-20221024150035695.png"></p><p><strong>Thread的Join方法可以阻塞调用线程，但是有一些弊端：</strong></p><ol><li><p>如果我们要实现很多线程的阻塞时，<strong>每个线程都要调用一次Join方法</strong>；</p></li><li><p>如果我们想让所有的线程执行完毕(或者任一线程执行完毕)时，立即解除阻塞，使用Join方法不容易实现。Task提供了 <strong>Wait/WaitAny/WaitAll</strong> 方法，可以更方便地控制线程阻塞。</p></li></ol><ul><li><code>task.Wait()</code> 表示等待<code>task</code>执行完毕，功能类似于<code>thead.Join()；</code> </li><li><code>Task.WaitAll(Task[] tasks) </code>表示只有所有的task都执行完成了再解除阻塞；</li><li><code>Task.WaitAny(Task[] tasks)</code>表示只要有一个task执行完毕就解除阻塞</li></ul><p>看一个例子：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">TaskWait</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Task</span> task1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"线程1执行完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            task1<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Task</span> task2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"线程2执行完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            task2<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//阻塞主线程。task1,task2都执行完毕再执行主线程</span>            <span class="token comment">//执行【task1.Wait();task2.Wait();】可以实现相同功能</span>            Task<span class="token punctuation">.</span><span class="token function">WaitAll</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> task1<span class="token punctuation">,</span> task2 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"主线程执行完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/CSharpMultithreading/image-20221024150518436.png"></p><h4 id="2-4-5-Task的延续操作-WhenAny-WhenAll-ContinueWith"><a href="#2-4-5-Task的延续操作-WhenAny-WhenAll-ContinueWith" class="headerlink" title="2.4. 5 Task的延续操作(WhenAny/WhenAll/ContinueWith)"></a>2.4. 5 Task的延续操作(WhenAny/WhenAll/ContinueWith)</h4><p>上边的<code>Wait/WaitAny/WaitAll</code>方法<code>返回值为void</code>，这些方法单纯的实现阻塞线程。我们现在想让所有<code>task</code>执行完毕(或者任一task执行完毕)后，开始执行后续操作，怎么实现呢？这时就可以用到<code>WhenAny/WhenAll</code>方法了，这些方法执行完成返回一个task实例。 </p><ul><li><code>task.WhenAll(Task[] tasks) </code>表示所有的task都执行完毕后再去执行后续的操作</li><li><code>task.WhenAny(Task[] tasks) </code>表示任一task执行完毕后就开始执行后续操作。</li></ul><p>看一个例子：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">TaskWhen</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Task</span> task1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"线程1执行完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            task1<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Task</span> task2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"线程2执行完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            task2<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//task1，task2执行完了后执行后续操作</span>            Task<span class="token punctuation">.</span><span class="token function">WhenAll</span><span class="token punctuation">(</span>task1<span class="token punctuation">,</span> task2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"执行后续操作完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"主线程执行完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/CSharpMultithreading/image-20221024151158917.png"></p><p>我们看到<code>WhenAll/WhenAny方法</code>不会阻塞主线程，当使用<code>WhenAll方法</code>时所有的<code>task</code>都执行完毕才会执行后续操作；如果把栗子中的<code>WhenAll</code>替换成<code>WhenAny</code>，则只要有一个线程执行完毕就会开始执行后续操作，这里不再演示。</p><p>上边的栗子也可以通过 <code>Task.Factory.ContinueWhenAll(Task[] tasks, Action continuationAction)</code>和 <code>Task.Factory.ContinueWhenAny(Task[] tasks, Action continuationAction)</code> 来实现 ，修改上边栗子代码如下，执行结果不变。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//通过TaskFactroy实现</span>Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">ContinueWhenAll</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> task1<span class="token punctuation">,</span> task2 <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"执行后续操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-6-Task的任务取消-CancellationTokenSource"><a href="#2-4-6-Task的任务取消-CancellationTokenSource" class="headerlink" title="2.4.6 Task的任务取消(CancellationTokenSource)"></a>2.4.6 Task的任务取消(CancellationTokenSource)</h4><p>在<code>Task</code>前我们执行任务采用的是<code>Thread</code>,<code>Thread</code>怎么取消任务呢？</p><ul><li>一般流程是：设置一个变量来控制任务是否停止，如设置一个<code>变量isStop</code>，然后线程轮询查看<code>isStop</code>，如果<code>isStop</code>为true就停止，代码如下：</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">bool</span></span> isStop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">int</span></span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//开启一个线程执行任务</span>    <span class="token class-name">Thread</span> th1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>isStop<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"第</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token operator">++</span>index</span><span class="token punctuation">&#125;</span></span><span class="token string">次执行，线程运行中..."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    th1<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//五秒后取消任务执行</span>    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    isStop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/CSharpMultithreading/image-20221024151653688.png"></p><p>Task中有一个专门的类 <code>CancellationTokenSource </code>来取消任务执行，还是使用上边的例子，我们修改代码如下，程序运行的效果不变。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">CancellationTokenSource</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CancellationTokenSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">//开启一个task执行任务</span>            <span class="token class-name">Task</span> task1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>              <span class="token punctuation">&#123;</span>                  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>source<span class="token punctuation">.</span>IsCancellationRequested<span class="token punctuation">)</span>                  <span class="token punctuation">&#123;</span>                      Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"第</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token operator">++</span>index</span><span class="token punctuation">&#125;</span></span><span class="token string">次执行，线程运行中..."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            task1<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//五秒后取消任务执行</span>            Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//source.Cancel()方法请求取消任务，IsCancellationRequested会变成true</span>            source<span class="token punctuation">.</span><span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>CancellationTokenSource</code>的功能不仅仅是取消任务执行，我们可以使用 <code>source.CancelAfter(5000)</code>实现5秒后自动取消任务，也可以通过 <code>source.Token.Register(Action action)</code>注册取消任务触发的回调函数，即任务被取消时注册的<code>action</code>会被执行。 看一个栗子：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">TaskWhen</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">CancellationTokenSource</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CancellationTokenSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//注册任务取消的事件</span>            source<span class="token punctuation">.</span>Token<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"任务被取消！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello,My name is 8yyy."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">//开启一个task执行任务</span>            <span class="token class-name">Task</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>             <span class="token punctuation">&#123;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>source<span class="token punctuation">.</span>IsCancellationRequested<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"第</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token operator">++</span>index</span><span class="token punctuation">&#125;</span></span><span class="token string">次执行，线程运行中..."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            task<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//延时取消，效果等同于Thread.Sleep(5000);source.Cancel();</span>            source<span class="token punctuation">.</span><span class="token function">CancelAfter</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下，第5次执行在取消回调后打印，这是因为，执行取消的时候第5次任务已经通过了while()判断，任务已经执行中了：</p><p><img src="/images/CSharpMultithreading/image-20221024152419527.png"></p><h3 id="2-5-死锁问题Deadlock"><a href="#2-5-死锁问题Deadlock" class="headerlink" title="2.5 死锁问题Deadlock"></a>2.5 死锁问题Deadlock</h3><p>通过前面的学习，我们可以知道Lock可以解决线程访问资源冲突的问题</p><h4 id="2-5-1-死锁简介"><a href="#2-5-1-死锁简介" class="headerlink" title="2.5.1 死锁简介"></a>2.5.1 死锁简介</h4><p>在多道程序设计环境下，多个进程可能竞争一定数量的资源，一个进程申请资源，如果资源不可用，那么进程进入等待状态。如果所申请的资源被其他等待进程占有，那么该等待的进程有可能无法改变状态，这种情况下称之为<strong>死锁</strong>。</p><h4 id="2-5-2-死锁条件"><a href="#2-5-2-死锁条件" class="headerlink" title="2.5.2 死锁条件"></a>2.5.2 死锁条件</h4><ol><li>非抢占：资源不能被抢占</li><li>互斥：至少有一个资源必须处在非共享模式，即一次只能有一个进程使用，如果另一进程申请该资源，那么申请进程必须延迟直到该资源释放为止。</li><li>占有并等待：一个进程必须占有至少一个资源，并等待另一个资源，而该资源为其他进程所占有。</li><li>循环等待：有一组进程{P0,P1,…Pn},P0等待的资源被P1占有，P1等待的资源被P2占有，Pn-1等待的资源被Pn占有，Pn等待的资源被P0占有。</li></ol><p>形成死锁必须要满足这四个条件。那么违背这几个条件中的任何一个就不会形成死锁，这种方式成为 死锁预防，而死锁避免是动态的检测分配资源的状态是否安全。</p><h4 id="2-5-3-死锁示例代码"><a href="#2-5-3-死锁示例代码" class="headerlink" title="2.5.3 死锁示例代码"></a>2.5.3 死锁示例代码</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DeadLock</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">StateObject</span> state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StateObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>ChangeState1<span class="token punctuation">)</span><span class="token punctuation">;</span>                t1<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>ChangeState2<span class="token punctuation">)</span><span class="token punctuation">;</span>                t2<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">StateObject</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">object</span></span> _lock1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">object</span></span> _lock2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ChangeState1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">lock</span> <span class="token punctuation">(</span>_lock1<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId <span class="token operator">+</span><span class="token string">"拿到了第一把锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">lock</span> <span class="token punctuation">(</span>_lock2<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId <span class="token operator">+</span> <span class="token string">"拿到了第二把锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ChangeState2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">lock</span> <span class="token punctuation">(</span>_lock2<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId <span class="token operator">+</span> <span class="token string">"拿到了第二把锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">lock</span> <span class="token punctuation">(</span>_lock1<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId <span class="token operator">+</span> <span class="token string">"拿到了第一把锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/CSharpMultithreading/image-20221024211337725.png"></p><p><code>线程6</code>占用了资源并等待<code>线程 5</code> 占用的资源释放，<code>线程 5</code> 不肯释放自己的资源并等待<code>线程 6</code> 释放占用的资源，在这样一种谁也不肯让步的情形下，死锁产生。</p><p><strong>上述死锁的解决方案是在编程的开始设计阶段，设定<code>锁定顺序</code></strong>,即让<code>ChangeState1</code>和<code>ChangeState2</code>的锁定顺序一样，设置如下</p><p><img src="/images/CSharpMultithreading/image-20221024211816254.png"></p><p>查看运行效果</p><p><img src="/images/CSharpMultithreading/image-20221024211844541.png"></p><h4 id="2-5-4-死锁的解决方法"><a href="#2-5-4-死锁的解决方法" class="headerlink" title="2.5.4 死锁的解决方法"></a>2.5.4 死锁的解决方法</h4><ol><li><p>我们可以通过对锁加时效性，或者死锁检测来处理。</p></li><li><p>Monitor.TryEnter()方法。虽然这种方法可以解决死锁问题，但是最好还是不要出现死锁这种情况。</p></li></ol><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.monitor.tryenter?f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(System.Threading.Monitor.TryEnter);k(DevLang-csharp)&rd=true&view=net-6.0">Monitor.TryEnter 方法</a></p><p>定义</p><ul><li><p>命名空间:</p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading?view=net-6.0">System.Threading</a></p></li><li><p>程序集:</p><p>System.Threading.dll</p></li></ul><p>尝试获取指定对象的排他锁。</p><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.monitor.tryenter?view=net-6.0#system-threading-monitor-tryenter(system-object-system-timespan-system-boolean@)">TryEnter(Object, TimeSpan, Boolean)</a></th><th>在指定的一段时间内尝试获取指定对象上的排他锁，并自动设置一个值，指示是否获得了该锁。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.monitor.tryenter?view=net-6.0#system-threading-monitor-tryenter(system-object-system-int32-system-boolean@)">TryEnter(Object, Int32, Boolean)</a></td><td>在指定的毫秒数内尝试获取指定对象上的排他锁，并自动设置一个值，指示是否获取了该锁。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.monitor.tryenter?view=net-6.0#system-threading-monitor-tryenter(system-object-system-timespan)">TryEnter(Object, TimeSpan)</a></td><td>在指定的时间内尝试获取指定对象上的排他锁。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.monitor.tryenter?view=net-6.0#system-threading-monitor-tryenter(system-object-system-boolean@)">TryEnter(Object, Boolean)</a></td><td>尝试获取指定对象上的排他锁，并自动设置一个值，指示是否获取了该锁。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.monitor.tryenter?view=net-6.0#system-threading-monitor-tryenter(system-object)">TryEnter(Object)</a></td><td>尝试获取指定对象的排他锁。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.monitor.tryenter?view=net-6.0#system-threading-monitor-tryenter(system-object-system-int32)">TryEnter(Object, Int32)</a></td><td>在指定的毫秒数内尝试获取指定对象上的排他锁。</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">MonitorTryEnter</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">object</span></span> lock1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">object</span></span> lock2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">LockTooMuch</span><span class="token punctuation">(</span>lock1<span class="token punctuation">,</span> lock2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//先使用第一把锁，再使用第二把锁</span>            <span class="token keyword">lock</span> <span class="token punctuation">(</span>lock2<span class="token punctuation">)</span>    <span class="token comment">//先使用第二把锁，然后请求使用第一把锁失败，锁2释放，未造成死锁</span>            <span class="token punctuation">&#123;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Monitor.TryEnter allow not to get stuck,returning false after a specified timer is elapsed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Monitor<span class="token punctuation">.</span><span class="token function">TryEnter</span><span class="token punctuation">(</span>lock1<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Acquired a protected resource succesfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Timerout cquiring a resource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">LockTooMuch</span><span class="token punctuation">(</span>lock1<span class="token punctuation">,</span> lock2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//先使用第一把锁，再使用第二把锁</span>            <span class="token keyword">lock</span> <span class="token punctuation">(</span>lock2<span class="token punctuation">)</span>    <span class="token comment">//先使用第二把锁，然后请求使用第一把锁失败，锁二未释放，造成死锁</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This will be deadlock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">lock</span> <span class="token punctuation">(</span>lock1<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Acquired a protected resource succesfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LockTooMuch</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> Lock1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> Lock2<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">lock</span> <span class="token punctuation">(</span>Lock1<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">lock</span> <span class="token punctuation">(</span>Lock2<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码运行如下</p><pre class="line-numbers language-none"><code class="language-none">Monitor.TryEnter allow not to get stuck,returning false after a specified timer is elapsedTimerout cquiring a resourceThis will be deadlock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到运行顺序如下图所示</p><p><img src="/images/CSharpMultithreading/image-20221025090006474.png"></p><p><code>Monitor.TryEnter()</code>方法是检查锁对象在指定时间内是否释放资源，如果释放则返回true否则false</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LockTooMuch</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> Lock1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> Lock2<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">lock</span> <span class="token punctuation">(</span>Lock1<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">lock</span> <span class="token punctuation">(</span>Lock2<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们先来分析一下<code>LockTooMuch方法</code>，这个方法是首先获取第一把锁，然后将线程挂起一秒后获取第二把锁。</p><p><strong>这个部分的锁死的代码，也就意味着解锁的顺序，lock1等待lock2执行完毕才会解锁lock1。</strong></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">         <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">LockTooMuch</span><span class="token punctuation">(</span>lock1<span class="token punctuation">,</span> lock2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//先使用第一把锁，再使用第二把锁            </span><span class="token keyword">lock</span> <span class="token punctuation">(</span>lock2<span class="token punctuation">)</span>    <span class="token comment">//先使用第二把锁，然后请求使用第一把锁失败，锁二释放，未造成死锁</span>         <span class="token punctuation">&#123;</span>             Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Monitor.TryEnter allow not to get stuck,returning false after a specified timer is elapsed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>Monitor<span class="token punctuation">.</span><span class="token function">TryEnter</span><span class="token punctuation">(</span>lock1<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token punctuation">&#123;</span>                 Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Acquired a protected resource succesfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>             <span class="token keyword">else</span>             <span class="token punctuation">&#123;</span>                 Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Timerout cquiring a resource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>然后我们再来查看一下上面这段代码，这段代码先创建了一条分支线程，然后在<strong>分支线程先使用第一把锁，再使用第二把锁  <strong>，然后我们</strong>在主线程先使用了第二把锁，等待请求使用第一把锁</strong>，然后使用Thread创建的分支线程和主线程是<strong>同时进行</strong>的，也就是说存在着<strong>竞争关系</strong>。</li><li>这意味着，主线程使用了Lock2，请求使用Lock1，而分支线程使用了Lock1，请求使用Lcok2。</li><li><code>主线程</code>占用了Lock2并等待<code>分支线程</code> 占用的lock1释放，<code>分支线程</code> 不肯释放自己的lcok1并等待<code>主线程</code> 释放占用的资源lock2，在这样一种谁也不肯让步的情形下，死锁就可能产生。</li><li>然后在上述代码因为使用了<code>Monitor.TryEnter(lock1, 5000)</code>表示如果在5秒内尝试获取第二把锁，为获取到则释放lock2，这样就避免了死锁</li><li>所以上述代码将输出<code>Console.WriteLine(&quot;Monitor.TryEnter allow not to get stuck,returning false after a specified timer is elapsed&quot;);</code>以及<code>Console.WriteLine(&quot;Timerout cquiring a resource&quot;);</code></li></ol><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">LockTooMuch</span><span class="token punctuation">(</span>lock1<span class="token punctuation">,</span> lock2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//先使用第一把锁，再使用第二把锁</span><span class="token keyword">lock</span> <span class="token punctuation">(</span>lock2<span class="token punctuation">)</span>    <span class="token comment">//先使用第二把锁，然后请求使用第一把锁失败，锁二未释放，造成死锁</span><span class="token punctuation">&#123;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This will be deadlock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">lock</span> <span class="token punctuation">(</span>lock1<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Acquired a protected resource succesfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>然后我们在看一下上述代码，和上一个代码差不多，只不过没有使用<code>Monitor.TryEnter()方法</code></li><li>这意味着，主线程使用了Lock2，请求使用Lock1，而分支线程使用了Lock1，请求使用Lcok2，互不退让最后造成了死锁</li><li>所以上述代码将输出<code>Console.WriteLine(&quot;This will be deadlock&quot;);</code></li></ol><h2 id="3-同步-sync-和异步-async"><a href="#3-同步-sync-和异步-async" class="headerlink" title="3. 同步(sync)和异步(async)"></a>3. 同步(sync)和异步(async)</h2><p>同步和异步的概念在之前刘老师<code>委托的高级使用</code>中已经学过了，在这再复习一下</p><p>同步和异步是对方法执行顺序的描述。</p><p>同步：等待上一行完成计算之后，才会进入下一行。</p><p>例如：请同事吃饭，同事说很忙，然后就等着同事忙完，然后一起去吃饭。</p><p>异步：不会等待方法的完成，会直接进入下一行，是非阻塞的。</p><p>例如：请同事吃饭，同事说很忙，那同事先忙，自己去吃饭，同事忙完了他自己去吃饭。</p><p>下面通过一个例子讲解同步和异步的区别</p><p>1、新建一个winform程序，上面有两个按钮，一个同步方法、一个异步方法，在**属性里面把输出类型改成控制台应用程序(项目—&gt;底部(项目名)属性(p)—&gt;应用程序—&gt;输出类型)**，这样可以看到输出结果，代码如下：</p><p><img src="/images/CSharpMultithreading/image-20221024085904671.png"></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>ComponentModel</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Data</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">BeginInvoke</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Form1</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token function">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//同步方法</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">btnSync_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"****************btnSync_Click Start "</span></span> <span class="token operator">+</span>                <span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"00"</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string"> "</span></span> <span class="token operator">+</span>                <span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss.fff"</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">***************"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> k <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> m <span class="token operator">=</span> j <span class="token operator">+</span> k<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name"><span class="token keyword">string</span></span> name <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"btnSync_Click_</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoSomethingLong</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//异步方法</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">btnAsync_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"***************btnAsync_Click Start "</span></span> <span class="token operator">+</span>                <span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> action <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>DoSomethingLong<span class="token punctuation">;</span>            <span class="token comment">//调用委托(间接同步调用)</span>            action<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token string">"btnsync_Click_1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//隐式异步调用</span>            action<span class="token punctuation">.</span><span class="token function">BeginInvoke</span><span class="token punctuation">(</span><span class="token string">"btnsync_Click_2"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"***************btnAsync_Click End    "</span></span> <span class="token operator">+</span>                <span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoSomethingLong</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"****************DoSomethingLong </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">name</span><span class="token punctuation">&#125;</span></span><span class="token string"> "</span></span> <span class="token operator">+</span>                <span class="token interpolation-string"><span class="token string">$"Start </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"00"</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string"> "</span></span> <span class="token operator">+</span>                <span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss.fff"</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">***************"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">long</span></span> lResult <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                lResult <span class="token operator">+=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"****************DoSomethingLong </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">name</span><span class="token punctuation">&#125;</span></span><span class="token string">   "</span></span> <span class="token operator">+</span>                <span class="token interpolation-string"><span class="token string">$"End </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"00"</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string"> "</span></span> <span class="token operator">+</span>                <span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss.fff"</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">lResult</span><span class="token punctuation">&#125;</span></span><span class="token string">***************"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在刘老师的课中知道，异步调用分为隐式异步调用以及显式异步调用，上面代码中使用<code>BeginInvoke</code>的方法称为隐式异步调用，而显式异步调用则是使用<code>thread</code>和<code>task</code></p><p>使用同步的调用的效果如下</p><p><img src="/images/CSharpMultithreading/image-20221024090505832.png"></p><p>从上面的截图中能够很清晰的看出：同步方法是等待上一行代码执行完毕之后才会执行下一行代码。</p><p>点击异步，结果如下：</p><p><img src="/images/CSharpMultithreading/image-20221024090736904.png"></p><p>从上面的截图中看出：当执行到<code>action.BeginInvoke(&quot;btnAsync_Click_2&quot;,null,null);</code>这句代码的时候，程序并没有等待这段代码执行完就执行了下面的<code>End</code>，没有阻塞程序的执行。</p><p>在刚才的测试中，如果点击同步，这时winform界面不能拖到，界面卡住了，是因为主线程(即UI线程)在忙于计算。</p><p>点击异步的时候，界面不会卡住，这是因为主线程已经结束，计算任务交给子线程去做。</p><p>在仔细检查上面两个截图，可以看出异步的执行速度比同步执行速度要快。同步方法执行完将近0.2秒，异步方法执行完将近0.1秒。</p><p>在看下面的一个例子，修改异步的方法，也和同步方法一样执行循环，修改后的代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//异步方法</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">btnAsync_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"***************btnAsync_Click Start "</span></span> <span class="token operator">+</span>        <span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> action <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>DoSomethingLong<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">string</span></span> name <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"btnAsync_Click_</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        action<span class="token punctuation">.</span><span class="token function">BeginInvoke</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"***************btnAsync_Click End    "</span></span> <span class="token operator">+</span>        <span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/CSharpMultithreading/image-20221024091456517.png"></p><p>从截图中能够看出：<strong>同步方法执行是有序的，异步方法执行是无序的</strong>。异步方法无序包括启动无序和结束无序。启动无序是因为同一时刻向操作系统申请线程，操作系统收到申请以后，返回执行的顺序是无序的，所以启动是无序的。结束无序是因为虽然线程执行的是同样的操作，但是每个线程的耗时是不同的，所以结束的时候不一定是先启动的线程就先结束。从上面同步方法中可以清晰的看出：btnSync_Click_0执行时间耗时不到0.3秒，而btnSync_Click_4执行时间耗时达到了0.3秒。可以想象体育比赛中的跑步，每位运动员听到发令枪起跑的顺序不同，每位运动员花费的时间不同，最终到达终点的顺序也不同。</p><p><strong>总结一下同步方法和异步方法的区别：</strong></p><p>1、同步方法由于主线程忙于计算，所以会卡住界面。（当然上述的例子可能不会发生这样的情况，因为数据量小，目前计算机的性能不足以卡住，如果数量大大了，需要执行的时间长了可能会卡住，但是我试了把for循环改为1到50000000仍不会卡住）</p><p>   异步方法由于主线程执行完了，其他计算任务交给子线程去执行，所以不会卡住界面，用户体验性好。</p><p>2、同步方法由于只有一个线程在计算，所以执行速度慢。</p><p>   异步方法由多个线程并发运算，所以执行速度快，但并不是线性增长的（资源可能不够）。多线程也不是越多越好，只有多个独立的任务同时运行，才能加快速度。</p><p>3、同步方法是有序的。</p><p>   异步多线程是无序的：启动无序，执行时间不确定，所以结束也是无序的。一定不要通过等待几毫秒的形式来控制线程启动/执行时间/结束。</p><h2 id="4-回调"><a href="#4-回调" class="headerlink" title="4. 回调"></a>4. 回调</h2><p>我们知道异步多线程是无序的，那我们有没有什么办法可以解决无序的问题呢？办法当然是有的，那就是使用回调，.NET框架已经帮我们实现了回调：</p><p><img src="/images/CSharpMultithreading/image-20221024092421620.png"></p><p><code>BeginInvoke</code>的第二个参数就是一个回调，那么<code>AsyncCallback</code>究竟是什么呢？点击查看<code>AsyncCallback</code>的定义：</p><p><img src="/images/CSharpMultithreading/image-20221024092608444.png"></p><p>发现<code>AsyncCallback</code>就是一个委托，参数类型是<code>IAsyncResult</code>，明白了<code>AsyncCallback</code>是什么以后，将上面的代码进行如下的改造：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//异步方法</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">btnAsync_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"***************btnAsync_Click Start "</span></span> <span class="token operator">+</span>        <span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> action <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>DoSomethingLong<span class="token punctuation">;</span>    <span class="token class-name">AsyncCallback</span> callback <span class="token operator">=</span> p <span class="token operator">=></span> <span class="token punctuation">&#123;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"到这里计算已经完成了。</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"00"</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">。"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">string</span></span> name <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"btnAsync_Click"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    action<span class="token punctuation">.</span><span class="token function">BeginInvoke</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"***************btnAsync_Click End    "</span></span> <span class="token operator">+</span>        <span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/CSharpMultithreading/image-20221024093227257.png"></p><p>上面的截图中可以看出，这就是我们想要的效果，而且打印是子线程输出的，但是程序究竟是怎么实现的呢？我们可以进行如下的猜想：</p><p>程序执行到<code>BeginInvoke</code>的时候，会申请一个基于线程池的线程，这个线程会完成委托的执行(在这里就是执行<code>DoSomethingLong()方法</code>)，在委托执行完以后，这个线程又会去执行<code>callback</code>回调的委托，执行<code>callback委托</code>需要一个<code>IAsyncResult</code>类型的参数，这个<code>IAsyncResult</code>类型的参数是如何来的呢？鼠标右键放到<code>BeginInvoke</code>上面，查看返回值：</p><p>发现<code>BeginInvoke</code>的返回值就是<code>IAsyncResult</code>类型的。那么这个返回值是不是就是<code>callback委托</code>的参数呢？显然是的，上面查看<code>AsyncCallback</code>的定义的时候已经看到了</p><p><img src="/images/CSharpMultithreading/image-20221024100721755.png"></p><p>现在我们可以使用回调解决异步多线程无序的问题了。</p><p>获取委托异步调用的返回值</p><p>使用<code>EndInvoke</code>可以获取委托异步调用的返回值，请看下面的例子：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">btnAsyncReturnVlaue_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Day<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"func.Invoke()=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">func<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//委托的异步调用</span>    <span class="token class-name">IAsyncResult</span> asyncResult <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token function">BeginInvoke</span><span class="token punctuation">(</span>p <span class="token operator">=></span>   <span class="token punctuation">&#123;</span>       Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>AsyncState<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"异步调用返回值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//输出委托异步调用的返回值</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"func.EndInvoke(asyncResult)=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">func<span class="token punctuation">.</span><span class="token function">EndInvoke</span><span class="token punctuation">(</span>asyncResult<span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/CSharpMultithreading/image-20221024101634746.png"></p><p>注解：</p><ol><li>Func<int>属于一个无参且返回值为int的委托，存储的是一个返回当月天数的第几天，比如现在是10月24日，返回的结果为24</int></li><li><img src="/images/CSharpMultithreading/image-20221024101803599.png">，这里使用的构造方法为一个回调方法，一个object类型的对象</li><li><img src="/images/CSharpMultithreading/image-20221024101916974.png"></li><li><img src="/images/CSharpMultithreading/image-20221024102306414.png"></li></ol><h2 id="5-异步方法-async-await"><a href="#5-异步方法-async-await" class="headerlink" title="5. 异步方法(async/await)"></a>5. 异步方法(async/await)</h2><p>在C#5.0中出现的async和await ，让异步编程变得更简单。我们看一个获取文件内容的栗子：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">string</span></span> content <span class="token operator">=</span> <span class="token function">GetContentAsync</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span>CurrentDirectory <span class="token operator">+</span> <span class="token string">@"/test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Result<span class="token punctuation">;</span>            <span class="token comment">//调用同步方法</span>            <span class="token comment">//string content = GetContent(Environment.CurrentDirectory + @"/test.txt");</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//异步读取文件内容</span>        <span class="token keyword">async</span> <span class="token keyword">static</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> <span class="token function">GetContentAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> filename<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>                        <span class="token class-name">FileStream</span> fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>fs<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//ReadAync方法异步读取内容，不阻塞线程</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"开始读取文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> len <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">ReadAsync</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> result <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//同步读取文件内容</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetContent</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> filename<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">FileStream</span> fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>fs<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//Read方法同步读取内容，阻塞线程</span>            <span class="token class-name"><span class="token keyword">int</span></span> len <span class="token operator">=</span>  fs<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> result <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test.txt内容是【hello world！】执行结果为：hello world</p><p>上边的栗子也写出了同步读取的方式，将main函数中的注释去掉即可同步读取文件内容。我们可以看到异步读取代码和同步读取代码基本一致。async/await让异步编码变得更简单，我们可以像写同步代码一样去写异步代码。注意一个小问题：异步方法中方法签名返回值为Task，代码中的返回值为T。上边栗子中GetContentAsync的签名返回值为Task，而代码中返回值为string。牢记这一细节对我们分析异步代码很有帮助。</p><p>异步方法签名的返回值有以下三种：</p><p>① Task：如果调用方法想通过调用异步方法获取一个T类型的返回值，那么签名必须为Task；</p><p>② Task:   如果调用方法不想通过异步方法获取一个值，仅仅想追踪异步方法的执行状态，那么我们可以设置异步方法签名的返回值为Task;</p><p>③ void:   如果调用方法仅仅只是调用一下异步方法，不和异步方法做其他交互，我们可以设置异步方法签名的返回值为void，这种形式也叫做“调用并忘记”。</p><p><strong>通过上边的介绍，我们知道async/await是基于Task的，而Task是对ThreadPool的封装改进，主要是为了更有效的控制线程池中的线程(ThreadPool中的线程，我们很难通过代码控制其执行顺序，任务延续和取消等等)；ThreadPool基于Thread的，主要目的是减少Thread创建数量和管理Thread的成本。async/await Task是C#中更先进的，也是微软大力推广的特性，我们在开发中可以尝试使用Task来替代Thread/ThreadPool，处理本地IO和网络IO任务是尽量使用async/await来提高任务执行效率。</strong></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li> <a href="https://www.cnblogs.com/dotnet261010/p/6159984.html">C#多线程</a>*</li><li> <a href="https://www.jb51.net/article/250950.htm">c#中task与thread的区别及使用讲解</a></li><li> <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread?f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(System.Threading.Thread);k(DevLang-csharp)&rd=true&view=net-6.0">MSDN Thread类</a></li><li> <a href="https://www.cnblogs.com/yinjun98/p/12307014.html">C# Task和async/await详解</a>*</li><li> <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task?view=net-6.0">MSDN Task类</a></li><li> <a href="http://www.qb5200.com/article/481892.html">C#多线程之死锁</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Multithreading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于CSharp变量中的下划线</title>
      <link href="/2022/10/21/%E5%85%B3%E4%BA%8ECSharp%E5%8F%98%E9%87%8F%E4%B8%AD%E7%9A%84%E4%B8%8B%E5%88%92%E7%BA%BF/"/>
      <url>/2022/10/21/%E5%85%B3%E4%BA%8ECSharp%E5%8F%98%E9%87%8F%E4%B8%AD%E7%9A%84%E4%B8%8B%E5%88%92%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p>之前我一直以为在C#中所有私有private成员都需要加下划线，今天特意去搜了搜。</p><h2 id="其中一种解释"><a href="#其中一种解释" class="headerlink" title="其中一种解释"></a>其中一种解释</h2><p>下划线只是一个约定而已。因此，每个人的使用总是有些不同。这是我对两种语言的理解:</p><p>在C++中，下划线通常表示私有(private)成员变量。</p><p>在C#中，我通常看到它仅在<strong>定义公共(public)属性的基础私有(private)成员变量</strong>时使用。其他私有(private)成员变量将没有下划线。</p><h2 id="下划线优势"><a href="#下划线优势" class="headerlink" title="下划线优势"></a>下划线优势</h2><ul><li>自然区分字段和参数，或字段和属性</li><li>可省略this限定符</li></ul><h2 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h2><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token comment">// 私有字段命名</span><span class="token keyword">namespace</span> <span class="token namespace">_001_PrivateFieldNaming</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 常规方式</span>    <span class="token keyword">class</span> <span class="token class-name">Normal</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 根据C#命名规则</span>        <span class="token comment">// - private字段，必须遵循camel方式</span>        <span class="token comment">// - protected字段，可根据个人喜好任选camel或Pascal方式</span>        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> Y<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Z <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token function">Normal</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>            Y <span class="token operator">=</span> y<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Method</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span> <span class="token operator">=></span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">></span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 建议方式</span>    <span class="token keyword">class</span> <span class="token class-name">Suggestion</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 差异1：</span>        <span class="token comment">// - private字段命名，首字母采用下划线</span>        <span class="token comment">// - protected字段套用此方式后，与属性自然区分</span>        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> _x<span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> _y<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Z <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token comment">// 差异2：</span>        <span class="token comment">// - 构造器中，自然区分字段与参数，无需this</span>        <span class="token keyword">public</span> <span class="token function">Suggestion</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _x <span class="token operator">=</span> x<span class="token punctuation">;</span>            _y <span class="token operator">=</span> y<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 差异3：</span>        <span class="token comment">// - 方法中，自然区分字段与参数，无需this</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Method</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span> <span class="token operator">=></span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>_x <span class="token operator">></span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1.<a href="https://www.lmlphp.com/user/151296/article/item/3425493/">c# - 命名约定-C++和C#变量中的下划线</a></p><p>2.<a href="https://www.jianshu.com/p/ece11a785679">C#private字段的命名风格</a></p>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 下划线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharpReflection</title>
      <link href="/2022/10/20/CSharpReflection/"/>
      <url>/2022/10/20/CSharpReflection/</url>
      
        <content type="html"><![CDATA[<h2 id="反射-C"><a href="#反射-C" class="headerlink" title="反射 (C#)"></a>反射 (C#)</h2><p><strong>反射提供描述程序集、模块和类型的对象（<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.type">Type</a> 类型）</strong>。 可以使用反射动态地创建类型的实例，将类型绑定到现有对象，或从现有对象中获取类型，然后调用其方法或访问器字段和属性。 如果代码中使用了特性，可以利用反射来访问它们。</p><h3 id="反射的简单实例"><a href="#反射的简单实例" class="headerlink" title="反射的简单实例"></a>反射的简单实例</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// Using GetType to obtain type information:</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token class-name">Type</span> type <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出为：<code>System.Int32</code>。</p><p>上面这个实例在平常编程中经常用到，现在才知道原来这就是一个简单的反射</p><p><strong>注意：请确保在 .cs 文件顶部添加 <code>using System;</code> 和 <code>using System.Reflection;</code>。</strong></p><h3 id="反射在以下情况下很有用"><a href="#反射在以下情况下很有用" class="headerlink" title="反射在以下情况下很有用"></a>反射在以下情况下很有用</h3><ul><li>需要访问程序元数据中的特性时。 </li><li>检查和实例化程序集中的类型。</li><li>在运行时构建新类型。</li><li>执行后期绑定，访问在运行时创建的类型上的方法。</li></ul><h2 id="反射的典型用法"><a href="#反射的典型用法" class="headerlink" title="反射的典型用法"></a>反射的典型用法</h2><p>反射的典型用法如下所示：</p><ul><li>使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.reflection.assembly">Assembly</a> 来定义和加载程序集，加载程序集清单中列出的模块，以及在此程序集中定位一个类型并创建一个它的实例。</li><li>使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.reflection.module">Module</a> 发现信息，如包含模块的程序集和模块中的类。 还可以获取所有全局方法或模块上定义的其它特定的非全局方法。</li><li>使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.reflection.constructorinfo">ConstructorInfo</a> 发现信息，如名称、参数、访问修饰符（如 <code>public</code> 或 <code>private</code>）和构造函数的实现详细信息（如 <code>abstract</code> 或 <code>virtual</code>）。 使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.type">Type</a> 的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.type.getconstructors">GetConstructors</a> 或 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.type.getconstructor">GetConstructor</a> 方法来调用特定构造函数。</li><li>使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.reflection.methodinfo">MethodInfo</a> 发现信息，如名称、返回类型、参数、访问修饰符（如 <code>public</code> 或 <code>private</code>）和方法的实现详细信息（如 <code>abstract</code> 或 <code>virtual</code>）。 使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.type">Type</a> 的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.type.getmethods">GetMethods</a> 或 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.type.getmethod">GetMethod</a> 方法来调用特定方法。</li><li>使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.reflection.fieldinfo">FieldInfo</a> 发现信息，如名称、访问修饰符（如 <code>public</code> 或 <code>private</code>）和一个字段的实现详细信息 （如 <code>static</code>）；并获取或设置字段值。</li><li>使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.reflection.eventinfo">EventInfo</a> 发现信息（如名称、事件处理程序的数据类型、自定义特性、声明类型以及事件的反射的类型），并添加或删除事件处理程序。</li><li>使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.reflection.propertyinfo">PropertyInfo</a> 发现信息（如名称、数据类型、声明类型，反射的类型和属性的只读或可写状态），并获取或设置属性值。</li><li>使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.reflection.parameterinfo">ParameterInfo</a> 发现信息，如参数的名称、数据类型、参数是输入参数还是输出参数以及参数在方法签名中的位置。</li><li>使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.reflection.customattributedata">CustomAttributeData</a> 在于应用程序域的仅反射上下文中工作时发现有关自定义特性的信息。 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.reflection.customattributedata">CustomAttributeData</a> 使你能够检查特性，而无需创建它们的实例。 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.reflection.emit">System.Reflection.Emit</a> 命名空间的类提供一种专用形式的反射，使你能够在运行时生成类型。</li></ul><h2 id="反射用到的主要类"><a href="#反射用到的主要类" class="headerlink" title="反射用到的主要类"></a>反射用到的主要类</h2><p><strong>System.Type</strong> 类–通过这个类可以访问任何给定数据类型的信息。<br><strong>System.Reflection.Assembly</strong> 类–它可以用于访问给定程序集的信息,或者把这个程序集加载到程序中。<br><strong>System.Type</strong> 类:<strong>System.Type</strong> 类对于反射起着核心的作用。但它是一个抽象的基类,Type有与每种数据类型对应的派生类,我们使用这个派生类的对象的方法、字段、属性来查找有关该类型的所有信息。</p><h2 id="Type-类"><a href="#Type-类" class="headerlink" title="Type 类"></a>Type 类</h2><p><strong>表示类型声明</strong>：类类型、接口类型、数组类型、值类型、枚举类型、类型参数、泛型类型定义，以及开放或封闭构造的泛型类型。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Type</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">System<span class="token punctuation">.</span>Reflection<span class="token punctuation">.</span>MemberInfo</span><span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Reflection<span class="token punctuation">.</span>IReflect</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p><code>Type</code> 是功能的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.reflection?view=net-6.0">System.Reflection</a> 根，是访问元数据的主要方式。 使用的成员获取有关类型声明、类型 (的成员（例如类) 的构造函数、方法、字段、属性和事件）以及部署类的模块和程序集的信息。 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.type?view=net-6.0">Type</a>代码无需任何权限，即使用反射获取有关类型及其成员的信息，而不考虑其访问级别。 代码无需任何权限，即使用反射来访问公共成员，或者访问级别会使这些成员在正常编译期间可见的其他成员。 但是，为了使代码使用反射来访问通常不可访问的成员，例如私有或内部方法，或者类不继承的类型的受保护字段，代码必须具有 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.security.permissions.reflectionpermission?view=net-6.0">ReflectionPermission</a> 。 请参阅 <a href="https://learn.microsoft.com/zh-cn/dotnet/framework/reflection-and-codedom/security-considerations-for-reflection">反射的安全注意事项</a>。</p><p><code>Type</code> 是允许多个实现的<strong>抽象</strong>基类。 系统将始终提供派生类 <code>RuntimeType</code> 。 在反射中，以”运行时”一词开头的所有类仅在系统中每个对象创建一次，并支持比较操作。</p><p>tag: <code>元数据指有关程序及其类型的数据</code></p><ul><li>备注<ul><li>在多线程方案中，不要锁定 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.type?view=net-6.0">Type</a> 对象以同步对数据 <code>static</code> 的访问。 你无法控制的其他代码也可能锁定类类型。 这可能会导致死锁。 相反，通过锁定私有对象来同步对静态数据 <code>static</code> 的访问。</li><li>派生类可以访问调用代码基类的受保护成员。 此外，允许访问调用代码的程序集的程序集成员。 通常，如果允许在早期绑定代码中访问 ，则还允许在后期绑定代码中访问 。</li><li>扩展其他接口的接口不继承扩展接口中定义的方法。</li></ul></li></ul><h3 id="使用type获取给定类型的三种常用方式"><a href="#使用type获取给定类型的三种常用方式" class="headerlink" title="使用type获取给定类型的三种常用方式"></a>使用type获取给定类型的三种常用方式</h3><p>例如我想获取string类型的type</p><ul><li>第一种是使用C# typeof 运算符<ul><li><code>Type t = typeof(string); </code></li></ul></li><li>第二种是使用对象GetType()方法<ul><li><code>string s = &quot;8yyy&quot;;</code></li><li><code>Type t = s.GetType();</code>       </li></ul></li><li>第三种是调用Type类的静态方法GetType()<ul><li><code>Type t = Type.GetType(&quot;System.String&quot;);</code></li></ul></li></ul><h4 id="通过获取的类型探索类型的结构"><a href="#通过获取的类型探索类型的结构" class="headerlink" title="通过获取的类型探索类型的结构"></a>通过获取的类型探索类型的结构</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"8yyy"</span><span class="token punctuation">;</span>         <span class="token class-name">Type</span> t <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> gm <span class="token keyword">in</span> t<span class="token punctuation">.</span><span class="token function">GetMembers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">gm<span class="token punctuation">.</span>MemberType</span><span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">gm<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/CSharpReflection/image-20221021110951197.png"></p><p>可以去微软的MSDN文档查看<code>String</code>类</p><p><img src="/images/CSharpReflection/image-20221021111037671.png"></p><p>可以看到Empty是属于String类的字段，而Chars和Length则属于String类的属性</p><h3 id="反射的具体使用"><a href="#反射的具体使用" class="headerlink" title="反射的具体使用"></a>反射的具体使用</h3><h4 id="1-先定义一个简单的类"><a href="#1-先定义一个简单的类" class="headerlink" title="(1)先定义一个简单的类"></a>(1)先定义一个简单的类</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Reflection</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Test</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> a<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> m<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            a <span class="token operator">=</span> m<span class="token punctuation">;</span>            b <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"调用构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"生成一个对象成功:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">a</span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">b</span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Name</span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Age</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-查看类中的构造方法"><a href="#2-查看类中的构造方法" class="headerlink" title="(2)查看类中的构造方法"></a>(2)查看类中的构造方法</h4><p>我们可以根据对象进而查看内部的构造函数以及参数。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//调用无参的构造方法</span>    <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取test的类型type</span>    <span class="token class-name">Type</span> t <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取test的所有构造方法存到ci数组中</span>    <span class="token class-name">ConstructorInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> ci <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">GetConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//遍历所有构造方法，打印构造方法的所有参数</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> c <span class="token keyword">in</span> ci<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//获取构造方法的参数存到ps数组中</span>        <span class="token class-name">ParameterInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> ps <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">GetParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历所有参数并打印</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> pi <span class="token keyword">in</span> ps<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"pi.ParameterType:      </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">pi<span class="token punctuation">.</span>ParameterType<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">\npi.ParameterType.Name: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">pi<span class="token punctuation">.</span>ParameterType<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注</strong></p><ul><li>**ConstructorInfo **类<ul><li>发现类构造函数的属性，并提供对构造函数元数据的访问权限。</li></ul></li><li> <strong>Type.GetConstructors</strong> 方法</li><li>获取当前 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.type?view=net-6.0">Type</a> 的构造函数。</li><li><strong>GetConstructors()</strong> 返回为当前 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.type?view=net-6.0">Type</a> 定义的<strong>所有公共构造函数</strong>。</li><li> **ParameterInfo **类</li><li>发现参数的属性并提供对参数元数据的访问权限</li><li><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.reflection.parameterinfo.parametertype?view=net-6.0#system-reflection-parameterinfo-parametertype">ParameterType</a>属性 获取该参数的 <code>Type</code></li><li> <strong>MethodBase.GetParameters</strong> 方法</li><li>当在派生类中重写时，获取指定的方法或构造函数的<strong>参数</strong>。</li></ul><p>运行结果如下</p><p><img src="/images/CSharpReflection/image-20221021113649725.png"></p><p>下图是Test类的构造函数</p><p><img src="/images/CSharpReflection/image-20221021113731217.png"></p><h4 id="3-使用构造方法动态生成对象"><a href="#3-使用构造方法动态生成对象" class="headerlink" title="(3)使用构造方法动态生成对象"></a>(3)使用构造方法动态生成对象</h4><p>我们使用构造函数动态创建一个新的对象,如下代码所示:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">Type</span> t <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Test</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//参数数组，第一个参数是string，第二参数是int</span>         <span class="token class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> pt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Type</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         pt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>         pt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//根据参数类型获取构造方法，有可能有多个构造方法</span>         <span class="token class-name">ConstructorInfo</span> ci <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">GetConstructor</span><span class="token punctuation">(</span>pt<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span></span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token string">"8yyy"</span><span class="token punctuation">,</span><span class="token number">8</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>         <span class="token comment">//调用构造方法，传递参数为obj</span>         <span class="token class-name"><span class="token keyword">object</span></span> o <span class="token operator">=</span> ci<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">(</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注解：</strong></p><ul><li><code>object</code>是<code>System.Object</code>在<code>.Net</code>中的别名，等价于<code>Object</code>，应该就和<code>String</code>及<code>string</code>是一样的</li><li><strong>Invoke(Object[])</strong><ul><li>调用由具有指定参数的实例反映的构造函数，为不常用的参数提供默认值。</li></ul></li><li><strong>GetConstructor(Type[])</strong><ul><li>搜索其参数与指定数组中的类型匹配的公共实例构造函数。</li></ul></li></ul><p>运行效果如下</p><p><img src="/images/CSharpReflection/image-20221021140506093.png"></p><h4 id="4-用Activator生成对象"><a href="#4-用Activator生成对象" class="headerlink" title="(4)用Activator生成对象"></a>(4)用Activator生成对象</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">Type</span> t <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Test</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法1，指定Type和具体的参数</span><span class="token class-name"><span class="token keyword">object</span></span> o1 <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"8yyy"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法2,和第一种差不多，只不过参数由参数数组存储</span><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span></span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token string">"hello,8yyy"</span><span class="token punctuation">,</span><span class="token number">666</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">object</span></span> o2 <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法3，只指定Type,使用类型的无参数构造函数创建指定类型的实例。</span><span class="token class-name"><span class="token keyword">object</span></span> o3 <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span>o1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span>o2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span>o3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注解：</p><ul><li><p> <strong>Activator 类</strong></p></li><li><p>包含特定的方法，用以在本地或从远程创建对象类型，或获取对现有远程对象的引用。 此类不能被继承。</p></li><li><p><code>CreateInstance</code>方法用于创建实例即对象</p><ul><li><img src="/images/CSharpReflection/image-20221021141636560.png"></li></ul></li></ul><p>运行效果如下</p><p><img src="/images/CSharpReflection/image-20221021141938821.png"></p><h4 id="5-查看类中的属性"><a href="#5-查看类中的属性" class="headerlink" title="(5)查看类中的属性"></a>(5)查看类中的属性</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">Type</span> t <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Test</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PropertyInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> pis <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> pi <span class="token keyword">in</span> pis<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>pi<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/CSharpReflection/image-20221021142329167.png"></p><p>回到<code>Test</code>类中查看代码，可以看到就这两个属性</p><p><img src="/images/CSharpReflection/image-20221021142416025.png"></p><h4 id="6-查看类中的public方法"><a href="#6-查看类中的public方法" class="headerlink" title="(6)查看类中的public方法"></a>(6)查看类中的public方法</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">Type</span> t <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Test</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">MethodInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> mis <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">GetMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> mi <span class="token keyword">in</span> mis<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">mi<span class="token punctuation">.</span>ReturnType</span><span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">mi<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下</p><p><img src="/images/CSharpReflection/image-20221021142739153.png"></p><p>从这也再一次验证了一点属性是一种语法糖，编译器自动给我们封装了get以及set方法</p><h4 id="7-查看类中的public字段"><a href="#7-查看类中的public字段" class="headerlink" title="(7)查看类中的public字段"></a>(7)查看类中的public字段</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">Type</span> t <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Test</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FieldInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> fis <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">GetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> fi <span class="token keyword">in</span> fis<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">fi<span class="token punctuation">.</span>FieldType</span><span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">fi<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/CSharpReflection/image-20221021143506858.png"></p><h4 id="8-用反射生成对象-并调用属性、方法和字段进行操作"><a href="#8-用反射生成对象-并调用属性、方法和字段进行操作" class="headerlink" title="(8)用反射生成对象,并调用属性、方法和字段进行操作"></a>(8)用反射生成对象,并调用属性、方法和字段进行操作</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">Type</span> t <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Test</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个无参的实例</span><span class="token class-name"><span class="token keyword">object</span></span> obj <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取得a字段</span><span class="token class-name">FieldInfo</span> fiA <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">GetField</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给a字段赋值</span>fiA<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"8yyy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取得Name属性</span><span class="token class-name">PropertyInfo</span> piName <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给Name属性赋值</span>piName<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取得Age属性</span><span class="token class-name">PropertyInfo</span> piAge <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">"Age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给Age属性赋值</span>piAge<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token number">888</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取得Show方法</span><span class="token class-name">MethodInfo</span> miShow <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"Show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用Show方法</span>miShow<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/CSharpReflection/image-20221021144349596.png"></p><h4 id="9-System-Reflection-Assembly介绍"><a href="#9-System-Reflection-Assembly介绍" class="headerlink" title="(9)System.Reflection.Assembly介绍"></a>(9)System.Reflection.Assembly介绍</h4><p>Assembly类可以获得程序集的信息，也可以动态的加载程序集，以及在程序集中查找类型信息，并创建该类型的实例。使用Assembly类可以降低程序集之间的耦合，有利于软件结构的合理化。</p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.reflection.assembly?view=net-6.0">Assembly 类</a> 表示一个程序集，它是一个可重用、无版本冲突并且可自我描述的公共语言运行时应用程序构建基块。</p><p>简单示例</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Reflection</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Assembly</span> ass <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Program</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Assembly Full Name:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">ass<span class="token punctuation">.</span>FullName</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">;</span>            <span class="token comment">//AssemblyName完整描述程序集的唯一标识,可用于解析全名</span>            <span class="token class-name">AssemblyName</span> assemblyName <span class="token operator">=</span> ass<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取或设置程序集的简单名称</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"\nAssemblyName: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">assemblyName<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取或设置程序集的主版本号、次版本号、内部版本号和修订号。</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Version: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">assemblyName<span class="token punctuation">.</span>Version<span class="token punctuation">.</span>Major</span><span class="token punctuation">&#125;</span></span><span class="token string">.</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">assemblyName<span class="token punctuation">.</span>Version<span class="token punctuation">.</span>Minor</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取最初指定的程序集的位置，已过时</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"\nAssembly CodeBase: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">ass<span class="token punctuation">.</span>CodeBase</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/CSharpReflection/image-20221021154325356.png"></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//通过程序集的名称反射</span><span class="token class-name">Assembly</span> ass <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"Reflection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取Test类型</span><span class="token class-name">Type</span> t <span class="token operator">=</span> ass<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">"Reflection.Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">object</span></span> o <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"8yyy"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">MethodInfo</span> mi <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"Show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mi<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="/images/CSharpReflection/image-20221021155130954.png"></p><p><strong>通过DLL文件全名反射其中的所有类型</strong></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//通过程序集的名称反射获取当前程序dll的路径</span><span class="token class-name">Assembly</span> a <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"Reflection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>CodeBase<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过DLL文件全名反射其中的所有类型</span><span class="token class-name">Assembly</span> ass <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">LoadFrom</span><span class="token punctuation">(</span><span class="token string">@"G:\blog\test\.net core console\test2\test\Reflection\bin\Debug\netcoreapp3.1\Reflection.dll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取程序集的所有类型</span><span class="token class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> tps <span class="token operator">=</span> ass<span class="token punctuation">.</span><span class="token function">GetTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> t <span class="token keyword">in</span> tps<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><p><img src="/images/CSharpReflection/image-20221021160138766.png"></p><h4 id="10-System-Reflection-Assembly使用（出现BUG未解决）"><a href="#10-System-Reflection-Assembly使用（出现BUG未解决）" class="headerlink" title="(10)System.Reflection.Assembly使用（出现BUG未解决）"></a>(10)System.Reflection.Assembly使用（出现BUG未解决）</h4><p>假设你要反射一个DLL中的类，并且没有引用它，我们可以像下面这样操作</p><p><img src="/images/CSharpReflection/image-20221021212230326.png"></p><p>解决方案如下</p><p><img src="/images/CSharpReflection/image-20221021212434000.png"></p><p><code>MyClass</code>代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">namespace</span> <span class="token namespace">test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> _name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span>  Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"My name is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Name</span><span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>能正确加载程序集</p><p><img src="/images/CSharpReflection/image-20221021212629774.png"></p><p>但是无法创建类的实例</p><p>试了很多次都会提示<code>Constructor on type &#39;test.MyClass&#39; not found</code></p><pre class="line-numbers language-none"><code class="language-none">Unhandled exception. System.MissingMethodException: Constructor on type &#39;test.MyClass&#39; not found.   at System.RuntimeType.CreateInstanceImpl(BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture)   at System.Activator.CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes)   at System.Reflection.Assembly.CreateInstance(String typeName, Boolean ignoreCase, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes)   at System.Reflection.Assembly.CreateInstance(String typeName)   at Reflection.Program.Main(String[] args) in G:\blog\test\.net core console\test2\test\Reflection\Program.cs:line 14<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>网上搜了很久，似乎也有人会这样，认为这是一个BUG</p><p><a href="https://blog.csdn.net/CONSOLE11/article/details/113850549">https://blog.csdn.net/CONSOLE11/article/details/113850549</a></p><p>这说明C#中使用反射，在项目中不引用程序集也可以构造程序集中的类，<strong>只要将程序集文件（DLL文件）放在和项目所生成文件相同的文件夹（一般是bin目录）下即可</strong>。</p><p>再尝试下</p><ol><li>首先将<code>test.dll</code>放入到<code>Reflection</code>的dll文件所在的目录内</li><li>如下图所示</li><li><img src="/images/CSharpReflection/image-20221021224216182.png"></li><li>修改代码中的程序集路径，如下图所示</li><li><img src="/images/CSharpReflection/image-20221021224335397.png" alt="、"></li><li>运行，结果如下</li><li><img src="/images/CSharpReflection/image-20221021224429777.png"></li><li>发现还是有问题，回去看了下好像.pdb文件也需要复制，如下图所示</li><li><img src="/images/CSharpReflection/image-20221021224647730.png"></li><li>重新运行测试，然仍爆出同样的异常</li></ol><p>PS:发现一件事，只需要把把<code>test.MyClass</code>改成创建<code>test.Program</code>的实例就不会爆出异常，只不过显示创建的对象为<code>null</code></p><p><img src="/images/CSharpReflection/image-20221021225652640.png"></p><p>obj null</p><h4 id="11-反射当前项目中的类"><a href="#11-反射当前项目中的类" class="headerlink" title="(11)反射当前项目中的类"></a>(11)反射当前项目中的类</h4><p>将<code>MyClass</code>类的复制到当前项目中</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Reflection</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//加载程序集</span>            <span class="token class-name">Assembly</span> assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">GetExecutingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建类的实例</span>            <span class="token class-name"><span class="token keyword">object</span></span> obj <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span><span class="token string">"Reflection.MyClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>MyClass<span class="token punctuation">)</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> _name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span>  Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"My name is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Name</span><span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/CSharpReflection/image-20221021214032278.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1.<a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/reflection?source=recommendations">反射 (C#)</a></p><p>2.<a href="https://learn.microsoft.com/zh-cn/dotnet/framework/reflection-and-codedom/reflection">.NET 中的反射</a></p><p>3.<a href="https://zhuanlan.zhihu.com/p/41282759">C#反射机制</a></p>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reflection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2022/10/17/test/"/>
      <url>/2022/10/17/test/</url>
      
        <content type="html"><![CDATA[<p>testtesttesttesttesttesttesttesttesttesttest</p><p>testtesttesttesttesttesttesttesttesttesttest</p><p>testtesttesttesttesttesttesttesttesttesttest</p><p>testtesttesttesttesttesttesttesttesttesttest</p><p>testtesttesttesttesttesttesttesttesttesttest</p><p>testtesttesttesttesttesttesttesttesttesttest</p><p><img src="/images/test/run.jpg"></p><p><img src="/images/test/image-20221021084132269.png" alt="image-20221021084132269"></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
            <tag> light </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DataGrip 数据库备份</title>
      <link href="/2022/10/17/mysql-export-restore/"/>
      <url>/2022/10/17/mysql-export-restore/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL备份"><a href="#MySQL备份" class="headerlink" title="MySQL备份"></a>MySQL备份</h2><p>例如，我要备份my-oa这个数据库</p><p><img src="/images/mysql-export-restore/image-20230209134530040.png" alt="数据库"></p><p>右键数据库名 –》 import/Export –》 Export with ‘mysqldump’</p><p><img src="/images/mysql-export-restore/image-20230209134717476.png"></p><p>设置如下，其中Path to mysqldump需要自己设置</p><ul><li>Out path是自己需要备份的位置，可以自己设置路径及文件名</li><li>如果只需要表结构不需要备份数据可以在”my_oa”前加 <code>-d </code></li></ul><p><img src="/images/mysql-export-restore/image-20230209134902533.png"></p><p>直接点击Run即可，<code>mysqldump process finished</code>表示导出完成</p><p><img src="/images/mysql-export-restore/image-20230209135328783.png"></p><p>然后可以去文件夹查看文件</p><p><img src="/images/mysql-export-restore/image-20230209135445679.png"></p><h2 id="MySQL还原"><a href="#MySQL还原" class="headerlink" title="MySQL还原"></a>MySQL还原</h2><p>需要新建一个数据库用于还原，例如<code>restoremy_oa</code></p><p><img src="/images/mysql-export-restore/image-20230209135551175.png"></p><p>右键刚才创建的数据库，点击<code>Restore with &#39;mysql&#39;</code></p><p><img src="/images/mysql-export-restore/image-20230209135717271.png"></p><p>选择好文件和路径，Run即可还原成功</p><p><img src="/images/mysql-export-restore/image-20230209135847188.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>坦克大战</title>
      <link href="/2022/10/16/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/"/>
      <url>/2022/10/16/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.sikiedu.com/course/935">SIKI</a>学院的一个实战，本游戏开发基于一些基本的WinForm知识，更好的体会面向对象编程。</p><p>虽然WinForm不适合做游戏开发，但可以通过这个实例了解游戏开发的思想。</p><h2 id="1-设置窗体的生成位置"><a href="#1-设置窗体的生成位置" class="headerlink" title="1. 设置窗体的生成位置"></a>1. 设置窗体的生成位置</h2><p>设置窗体居中</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>StartPosition <span class="token operator">=</span> FormStartPosition<span class="token punctuation">.</span>CenterScreen<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>自由设置窗体位置</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>StartPosition <span class="token operator">=</span> FormStartPosition<span class="token punctuation">.</span>Manual<span class="token punctuation">;</span><span class="token comment">//Manual0窗体的位置由 Location 属性确定。</span><span class="token keyword">this</span><span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221016095057993.png"></p><h2 id="2-GDI-Graphics-Device-Interface-图形设备接口"><a href="#2-GDI-Graphics-Device-Interface-图形设备接口" class="headerlink" title="2. GDI Graphics Device Interface 图形设备接口"></a>2. GDI Graphics Device Interface 图形设备接口</h2><h3 id="2-1-绘制一条直线"><a href="#2-1-绘制一条直线" class="headerlink" title="2.1 绘制一条直线"></a>2.1 绘制一条直线</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form1_Paint</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">PaintEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Graphics</span> g <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">CreateGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Pen</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Pen</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Black<span class="token punctuation">)</span><span class="token punctuation">;</span>            g<span class="token punctuation">.</span><span class="token function">DrawLine</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.graphics?view=netframework-4.7.2&f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(System.Drawing.Graphics);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)&rd=true">Graphics</a> </p><p>​    封装一个 GDI+ 绘图图面。 此类不能被继承。</p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.pen?view=netframework-4.7.2&f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(System.Drawing.Pen);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)&rd=true">Pen</a></p><p>​    定义用于绘制直线和曲线的对象。 此类不能被继承。</p><p>​    构造函数</p><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.pen.-ctor?view=netframework-4.7.2#system-drawing-pen-ctor(system-drawing-brush)">Pen(Brush)</a></th><th>使用指定的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.pen?view=netframework-4.7.2">Pen</a> 初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.brush?view=netframework-4.7.2">Brush</a> 类的新实例。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.pen.-ctor?view=netframework-4.7.2#system-drawing-pen-ctor(system-drawing-brush-system-single)">Pen(Brush, Single)</a></td><td>使用指定的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.pen?view=netframework-4.7.2">Pen</a> 和 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.brush?view=netframework-4.7.2">Brush</a> 初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.pen.width?view=netframework-4.7.2#system-drawing-pen-width">Width</a> 类的新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.pen.-ctor?view=netframework-4.7.2#system-drawing-pen-ctor(system-drawing-color)">Pen(Color)</a></td><td>用指定颜色初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.pen?view=netframework-4.7.2">Pen</a> 类的新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.pen.-ctor?view=netframework-4.7.2#system-drawing-pen-ctor(system-drawing-color-system-single)">Pen(Color, Single)</a></td><td>用指定的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.pen?view=netframework-4.7.2">Pen</a> 和 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.color?view=netframework-4.7.2">Color</a> 属性初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.pen.width?view=netframework-4.7.2#system-drawing-pen-width">Width</a> 类的新实例。</td></tr></tbody></table><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.graphics.drawline?view=netframework-4.7.2&f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(System.Drawing.Graphics.DrawLine);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)&rd=true">Graphics.DrawLine 方法</a></p><p>​    <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.graphics.drawline?view=netframework-4.7.2#system-drawing-graphics-drawline(system-drawing-pen-system-drawing-point-system-drawing-point)">DrawLine(Pen, Point, Point)</a> 绘制一条连接两个 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.point?view=netframework-4.7.2">Point</a> 结构的线。</p><p>​     </p><h3 id="2-2-绘制字符串"><a href="#2-2-绘制字符串" class="headerlink" title="2.2 绘制字符串"></a>2.2 绘制字符串</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">g<span class="token punctuation">.</span><span class="token function">DrawString</span><span class="token punctuation">(</span><span class="token string">"8yyy.github.io"</span><span class="token punctuation">,</span>                 <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Font</span><span class="token punctuation">(</span><span class="token string">"微软雅黑"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SolidBrush</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Red<span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221018090227599.png"></p><p>设置窗体的标题和宽高</p><p>可以在Form1.Designer.cs中的InitializeComponent方法修改</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221018091745419.png"></p><h2 id="3-开发游戏框架"><a href="#3-开发游戏框架" class="headerlink" title="3. 开发游戏框架"></a>3. 开发游戏框架</h2><p><code>Form1.cs</code>代码如下，创建一个线程，<code>GameMainThread</code>方法用于控制游戏的逻辑</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Form1</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Thread</span> _gameMainThread<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>StartPosition <span class="token operator">=</span> FormStartPosition<span class="token punctuation">.</span>CenterScreen<span class="token punctuation">;</span>             _gameMainThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>GameMainThread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _gameMainThread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//控制游戏逻辑的子线程</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GameMainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            GameFramework<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> sleepTime <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                GameFramework<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//60fps</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>sleepTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//休息1/60秒</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form1_FormClosed</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">FormClosedEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _gameMainThread<span class="token punctuation">.</span><span class="token function">Abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//终止线程</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建一个<code>GameFramework</code>类，默认代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">GameFramework</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//Update执行的频率就是我们的帧率FPS</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-游戏类的结构分析"><a href="#4-游戏类的结构分析" class="headerlink" title="4. 游戏类的结构分析"></a>4. 游戏类的结构分析</h2><p>大致结构如下</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221018104533524.png"></p><p>根据上图进行类的创建，如下图所示</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221018104623373.png"></p><p>先创建基类<code>GameObject</code>，代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">GameObject</span>    <span class="token punctuation">&#123;</span>    <span class="token comment">//所有内容都需要坐标</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> X <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Y <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token return-type class-name">Image</span> <span class="token function">GetImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DrawSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Graphics</span> g <span class="token operator">=</span> GameFramework<span class="token punctuation">.</span>g<span class="token punctuation">;</span>            g<span class="token punctuation">.</span><span class="token function">DrawImage</span><span class="token punctuation">(</span><span class="token function">GetImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后创建不可移动的类<code>NotMovething</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//不可移动的物体</span>    <span class="token keyword">class</span> <span class="token class-name">NotMovething</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">GameObject</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Image</span> Img <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">Image</span> <span class="token function">GetImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> Img<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建可移动的类<code>Movething</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//朝向</span>    <span class="token keyword">enum</span> <span class="token class-name">Direction</span>    <span class="token punctuation">&#123;</span>        Up<span class="token punctuation">,</span>        Down<span class="token punctuation">,</span>        Left<span class="token punctuation">,</span>        Right    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Movething</span> <span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">GameObject</span></span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//四个方向</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Bitmap</span> BitmapUp <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Bitmap</span> BitmapDown <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Bitmap</span> BitmapLeft <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Bitmap</span> BitmapRight <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token comment">//移动速度</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Speed <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Direction</span> Dir <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">Image</span> <span class="token function">GetImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Bitmap</span> bitmap <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>Dir<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">:</span>                    bitmap <span class="token operator">=</span> BitmapUp<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">:</span>                    bitmap <span class="token operator">=</span> BitmapDown<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">:</span>                    bitmap <span class="token operator">=</span> BitmapLeft<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Right<span class="token punctuation">:</span>                    bitmap <span class="token operator">=</span> BitmapRight<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//设置透明度</span>            bitmap<span class="token punctuation">.</span><span class="token function">MakeTransparent</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Black<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> bitmap<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-图片资源引入"><a href="#5-图片资源引入" class="headerlink" title="5. 图片资源引入"></a>5. 图片资源引入</h2><p>点击项目文件中的<code>Properties</code>，点击<code>Resources.resx</code>添加资源，添加现有文件，添加图片和音乐，效果如下图所示</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221018110344164.png"></p><h2 id="6-编程设计好的类的代码"><a href="#6-编程设计好的类的代码" class="headerlink" title="6. 编程设计好的类的代码"></a>6. 编程设计好的类的代码</h2><p>给<code>NotMovething</code>添加一个构造方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token function">NotMovething</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">,</span><span class="token class-name">Image</span> img<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            X <span class="token operator">=</span> x<span class="token punctuation">;</span>            Y <span class="token operator">=</span> y<span class="token punctuation">;</span>            Img <span class="token operator">=</span> img<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加一个<code>GameObjectManager</code>类用于绘制<code>NotMovething</code>的内容</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">GameObjectManager</span>    <span class="token punctuation">&#123;</span>                <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>NotMovething<span class="token punctuation">></span></span> _wallList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>NotMovething<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DrawMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _wallList<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                item<span class="token punctuation">.</span><span class="token function">DrawSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">//初始化地图</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CreateMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span>_wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//创建红墙</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">,</span><span class="token class-name">List<span class="token punctuation">&lt;</span>NotMovething<span class="token punctuation">></span></span> wallList<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>                         <span class="token class-name"><span class="token keyword">int</span></span> xPosition <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> yPosition <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> yPosition<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> yPosition<span class="token operator">+</span>count<span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">15</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//一堵红墙由两块wall构成 (xPosition,i) (xPosition+15,i)</span>                <span class="token class-name">NotMovething</span> wall1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotMovething</span><span class="token punctuation">(</span>xPosition<span class="token punctuation">,</span> i <span class="token punctuation">,</span>Resources<span class="token punctuation">.</span>wall<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">NotMovething</span> wall2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotMovething</span><span class="token punctuation">(</span>xPosition<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">)</span><span class="token punctuation">;</span>                wallList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>wall1<span class="token punctuation">)</span><span class="token punctuation">;</span>                wallList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>wall2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<code>GameFramework</code>里添加代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//创建地图只需要初始化一次</span>            GameObjectManager<span class="token punctuation">.</span><span class="token function">CreateMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//Update就是我们的帧率FPS</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//每帧都需要绘制地图</span>            GameObjectManager<span class="token punctuation">.</span><span class="token function">DrawMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如图所示，出现一堵闪烁的红墙</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221018134545386.png"></p><h2 id="7-解决游戏画面闪烁的问题"><a href="#7-解决游戏画面闪烁的问题" class="headerlink" title="7. 解决游戏画面闪烁的问题"></a>7. 解决游戏画面闪烁的问题</h2><p>在Form1中，黑色的画布和墙交替粉刷</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221018134833532.png"></p><p>改变策略</p><ul><li>粉刷黑色画布的时候不要直接绘制在窗体上</li><li>创建一个黑色的图片，把要绘制的所有元素绘制到图片上</li><li>这一帧的图片绘制完，再把这整一个图片绘制到窗体上</li></ul><p>在Form定义一个成员</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Bitmap</span> _tempBmp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码修改如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//GameFramework.g = _g;</span><span class="token comment">//绘制一张图片，和窗体一样大</span>_tempBmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Bitmap</span><span class="token punctuation">(</span><span class="token number">450</span><span class="token punctuation">,</span> <span class="token number">450</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Graphics</span> bmpG <span class="token operator">=</span> Graphics<span class="token punctuation">.</span><span class="token function">FromImage</span><span class="token punctuation">(</span>_tempBmp<span class="token punctuation">)</span><span class="token punctuation">;</span>GameFramework<span class="token punctuation">.</span>g <span class="token operator">=</span> bmpG<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时修改<code>_g</code>字段，声明为静态成员 <code>_windowG</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//private Graphics _g;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Graphics</span> _windowG<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>GameMainThread</code>子线程内修改代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//清空画布，涂刷黑色背景</span>                GameFramework<span class="token punctuation">.</span>g<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Black<span class="token punctuation">)</span><span class="token punctuation">;</span>                GameFramework<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//60fps</span>                _windowG<span class="token punctuation">.</span><span class="token function">DrawImage</span><span class="token punctuation">(</span>_tempBmp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>sleepTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//休息1/60秒</span>            <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行之后就不存在闪烁了</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221018141615375.png"></p><h2 id="8-绘制地图"><a href="#8-绘制地图" class="headerlink" title="8. 绘制地图"></a>8. 绘制地图</h2><p>跟着老师一样绘制地图，发现墙体超过了窗体</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221018142136451.png"></p><p>修改Form1的Size属性<code>615, 600</code>，大致差不多</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221018151714187.png"></p><p>主要代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">GameObjectManager</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//装红墙的列表</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>NotMovething<span class="token punctuation">></span></span> _wallList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>NotMovething<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//装白墙的列表</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>NotMovething<span class="token punctuation">></span></span> _steelList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>NotMovething<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Boss</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">NotMovething</span> _boss<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DrawMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _wallList<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                item<span class="token punctuation">.</span><span class="token function">DrawSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _steelList<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                item<span class="token punctuation">.</span><span class="token function">DrawSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            _boss<span class="token punctuation">.</span><span class="token function">DrawSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">//初始化地图</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CreateMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//创建第一二堵墙</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span>_wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建第三四堵墙，矮一点只需要修改count即可</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//在中间创建一堵白墙</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>steel<span class="token punctuation">,</span> _steelList<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>steel<span class="token punctuation">,</span> _steelList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>steel<span class="token punctuation">,</span> _steelList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建中间的红墙</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建下半部分的红墙</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建第三四堵墙，矮一点只需要修改count即可</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建Boss周围的红墙</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateBoss</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span>Resources<span class="token punctuation">.</span>Boss<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//创建红墙和白墙</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">,</span><span class="token class-name">Image</span> img<span class="token punctuation">,</span><span class="token class-name">List<span class="token punctuation">&lt;</span>NotMovething<span class="token punctuation">></span></span> List<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>                         <span class="token class-name"><span class="token keyword">int</span></span> xPosition <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> yPosition <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> yPosition<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> yPosition<span class="token operator">+</span>count<span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">15</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//一堵红墙由两块wall构成 (xPosition,i) (xPosition+15,i)</span>                <span class="token class-name">NotMovething</span> wall1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotMovething</span><span class="token punctuation">(</span>xPosition<span class="token punctuation">,</span> i <span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">NotMovething</span> wall2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotMovething</span><span class="token punctuation">(</span>xPosition<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>                List<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>wall1<span class="token punctuation">)</span><span class="token punctuation">;</span>                List<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>wall2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//创建Boss</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CreateBoss</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">,</span><span class="token class-name">Image</span> img<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> xPosition <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> yPosition <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>            _boss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotMovething</span><span class="token punctuation">(</span>xPosition<span class="token punctuation">,</span> yPosition<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下：</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221018154744615.png"></p><h2 id="9-创建并绘制我的坦克MyTank"><a href="#9-创建并绘制我的坦克MyTank" class="headerlink" title="9. 创建并绘制我的坦克MyTank"></a>9. 创建并绘制我的坦克MyTank</h2><p>先查看以下<code>Movething</code>类里面的代码，因为<code>MyTank</code>类是继承自<code>Movething</code>类的，然后给<code>MyTank</code>类写个构造方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyTank</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Movething</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token function">MyTank</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> speed<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//初始坐标</span>            X <span class="token operator">=</span> x<span class="token punctuation">;</span>            Y <span class="token operator">=</span> y<span class="token punctuation">;</span>            <span class="token comment">//初始速度</span>            Speed <span class="token operator">=</span> speed<span class="token punctuation">;</span>            <span class="token comment">//初始方向</span>            Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">;</span>            <span class="token comment">//存储四个方向的图片</span>            BitmapDown <span class="token operator">=</span> Resources<span class="token punctuation">.</span>MyTankDown<span class="token punctuation">;</span>            BitmapUp <span class="token operator">=</span> Resources<span class="token punctuation">.</span>MyTankUp<span class="token punctuation">;</span>            BitmapRight <span class="token operator">=</span> Resources<span class="token punctuation">.</span>MyTankRight<span class="token punctuation">;</span>            BitmapLeft <span class="token operator">=</span> Resources<span class="token punctuation">.</span>MyTankLeft<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后也是在<code>GameObjectManager</code>类里写一个创建MyTank并印刷到图片上的代码</p><p>CreateMyTank() 和 DrawMyTank()，代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//MyTank</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">MyTank</span> _myTank<span class="token punctuation">;</span><span class="token comment">//创建我的坦克</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CreateMyTank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token number">14</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>    _myTank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyTank</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//印刷</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DrawMyTank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    _myTank<span class="token punctuation">.</span><span class="token function">DrawSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后回到<code>GameFramework</code>类在<code>Star()方法</code>和<code>Update()方法</code>中分别添加上述方法</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221019112714625.png"></p><p>运行效果如下图所示</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221019112753570.png"></p><h3 id="9-1-控制我的坦克的方向"><a href="#9-1-控制我的坦克的方向" class="headerlink" title="9.1 控制我的坦克的方向"></a>9.1 控制我的坦克的方向</h3><p>用WASD移动，按键的监测 KeyDown,KeyUp</p><p>GameFramework承担的是框架的功能</p><p>GameObjectManager承担管理的是游戏的元素</p><p>GameFramework可以当事件的中间站</p><p>在<code>GameFramework</code>中添加如下两个方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">KeyDown</span><span class="token punctuation">(</span><span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">KeyUp</span><span class="token punctuation">(</span><span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Form1.cs代码如下，KeyEventArgs传递给GameFramework</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form1_KeyDown</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     GameFramework<span class="token punctuation">.</span><span class="token function">KeyDown</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form1_KeyUp</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     GameFramework<span class="token punctuation">.</span><span class="token function">KeyUp</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后再把消息由<code>GameFramework</code>转递给<code>GameObjectManager</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">KeyDown</span><span class="token punctuation">(</span><span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     GameObjectManager<span class="token punctuation">.</span><span class="token function">KeyDown</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">KeyUp</span><span class="token punctuation">(</span><span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     GameObjectManager<span class="token punctuation">.</span><span class="token function">KeyUp</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再由<code>GameObjectManager</code>传递给<code>MyTank</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">KeyDown</span><span class="token punctuation">(</span><span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _myTank<span class="token punctuation">.</span><span class="token function">KeyDown</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">KeyUp</span><span class="token punctuation">(</span><span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _myTank<span class="token punctuation">.</span><span class="token function">KeyUp</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MyTank代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">KeyDown</span><span class="token punctuation">(</span><span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>KeyCode<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> Keys<span class="token punctuation">.</span>W<span class="token punctuation">:</span>                    Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">;</span>                    <span class="token comment">//Y -= Speed;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Keys<span class="token punctuation">.</span>S<span class="token punctuation">:</span>                    Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Keys<span class="token punctuation">.</span>A<span class="token punctuation">:</span>                    Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Keys<span class="token punctuation">.</span>D<span class="token punctuation">:</span>                    Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Right<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">KeyUp</span><span class="token punctuation">(</span><span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>                    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就实现了MyTank的方向控制，可以看到上述代码我尝试在这段代码中控制MyTank的移动，实际运行的效果很糟糕，会产生停顿，同时还会穿墙。所以我们不能在<code>KeyDown方法</code>中控制MyTank的移动，需要在<code>Update</code>中控制MyTank的移动。</p><p>在<code>MyTank类</code>定义一个属性</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsMoving <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyTank</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Movething</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsMoving <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token function">MyTank</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> speed<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//初始不可移动</span>            IsMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment">//初始坐标</span>            X <span class="token operator">=</span> x<span class="token punctuation">;</span>            Y <span class="token operator">=</span> y<span class="token punctuation">;</span>            <span class="token comment">//初始速度</span>            Speed <span class="token operator">=</span> speed<span class="token punctuation">;</span>            <span class="token comment">//初始方向</span>            Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">;</span>            <span class="token comment">//四个方向的图片</span>            BitmapDown <span class="token operator">=</span> Resources<span class="token punctuation">.</span>MyTankDown<span class="token punctuation">;</span>            BitmapUp <span class="token operator">=</span> Resources<span class="token punctuation">.</span>MyTankUp<span class="token punctuation">;</span>            BitmapRight <span class="token operator">=</span> Resources<span class="token punctuation">.</span>MyTankRight<span class="token punctuation">;</span>            BitmapLeft <span class="token operator">=</span> Resources<span class="token punctuation">.</span>MyTankLeft<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">KeyDown</span><span class="token punctuation">(</span><span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>KeyCode<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> Keys<span class="token punctuation">.</span>W<span class="token punctuation">:</span>                    Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">;</span>                    IsMoving <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Keys<span class="token punctuation">.</span>S<span class="token punctuation">:</span>                    Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">;</span>                    IsMoving <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Keys<span class="token punctuation">.</span>A<span class="token punctuation">:</span>                    Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">;</span>                    IsMoving <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Keys<span class="token punctuation">.</span>D<span class="token punctuation">:</span>                    Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Right<span class="token punctuation">;</span>                    IsMoving <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">KeyUp</span><span class="token punctuation">(</span><span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>KeyCode<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> Keys<span class="token punctuation">.</span>W<span class="token punctuation">:</span>                    IsMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Keys<span class="token punctuation">.</span>S<span class="token punctuation">:</span>                    IsMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Keys<span class="token punctuation">.</span>A<span class="token punctuation">:</span>                    IsMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Keys<span class="token punctuation">.</span>D<span class="token punctuation">:</span>                    IsMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们就可以在<code>Update()</code>中判断<code>IsMoving</code>是否为True判断是否需要移动了</p><h3 id="9-2-控制我的坦克的移动"><a href="#9-2-控制我的坦克的移动" class="headerlink" title="9.2 控制我的坦克的移动"></a>9.2 控制我的坦克的移动</h3><p>在<code>GameObject类</code>中新增一个<code>Update()方法</code></p><p>我们可以直接把<code>DrawSelf()方法</code>放到<code>Update()方法</code>中，初始代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">DrawSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>之后我们就可以修改<code>GameObjectManager</code>里的代码，Draw的代码均可以注释掉</p><p><code>Ctrl + k + c </code>快速注释选中内容</p><p><code>Ctrl + k + u</code> 快速取消注选中的注释内容</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//添加一个Update方法，里面的内容也由DrawSelf方法直接给位Update方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _wallList<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                item<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _steelList<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                item<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            _boss<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _myTank<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//印刷</span>        <span class="token comment">//public static void DrawMyTank()</span>        <span class="token comment">//&#123;</span>        <span class="token comment">//    _myTank.DrawSelf();</span>        <span class="token comment">//&#125;</span>        <span class="token comment">//public static void DrawMap()</span>        <span class="token comment">//&#123;</span>        <span class="token comment">//    foreach (var item in _wallList)</span>        <span class="token comment">//    &#123;</span>        <span class="token comment">//        item.DrawSelf();</span>        <span class="token comment">//    &#125;</span>        <span class="token comment">//    foreach (var item in _steelList)</span>        <span class="token comment">//    &#123;</span>        <span class="token comment">//        item.DrawSelf();</span>        <span class="token comment">//    &#125;</span>        <span class="token comment">//    _boss.DrawSelf();</span>        <span class="token comment">//&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后再修改<code>GameFramework类</code>里的<code>Update()方法</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//每帧都需要绘制地图</span>            <span class="token comment">//GameObjectManager.DrawMap();</span>            <span class="token comment">//GameObjectManager.DrawMyTank();</span>            GameObjectManager<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>MyTank类</code>里添加方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">_Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>IsMoving <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>Dir<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">:</span>                    Y <span class="token operator">-=</span> Speed<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">:</span>                    Y <span class="token operator">+=</span> Speed<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">:</span>                    X <span class="token operator">-=</span> Speed<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Right<span class="token punctuation">:</span>                    X <span class="token operator">+=</span> Speed<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-3-控制我的坦克不要超出窗体边界"><a href="#9-3-控制我的坦克不要超出窗体边界" class="headerlink" title="9.3 控制我的坦克不要超出窗体边界"></a>9.3 控制我的坦克不要超出窗体边界</h3><p>在<code>MyTank类</code>里添加一个<code>_MoveCheck()</code>方法，然后在移动<code>_Move()</code>之前先判断下，放到<code>Update()方法</code>里</p><p>需要判断两个方面</p><ul><li>检查有没有超出窗体边界，判断四个方向即可</li><li>检查有没有和其他元素发生碰撞            </li></ul><p>这时候我们就需要知道每个元素的宽度和高度，我们在<code>GameObject类</code>里定义2个属性<code>Width</code>和<code>Height</code>，代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Width <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Height <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>NotMovething</code>中是只有一张图片，所以比较好改，添加一个字段<code>_img</code>，将原来最简单的属性<code>Img</code>修改如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token class-name">Image</span> _img<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token return-type class-name">Image</span> Img <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _img<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>     <span class="token keyword">set</span> <span class="token punctuation">&#123;</span>        _img <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        Width <span class="token operator">=</span> _img<span class="token punctuation">.</span>Width<span class="token punctuation">;</span>        Height <span class="token operator">=</span> Img<span class="token punctuation">.</span>Height<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来修改<code>Movething</code>，因为<code>Movething</code>中有四张图，即四个方向，需要根据坦克的方向设置宽高，先将MyTank中初始方向和四个方向的图片的代码进行调换，结果如下：</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221019161344991.png"></p><p>然后修改<code>Movething</code>中的内容如下图所示</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token class-name">Direction</span> _dir<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token return-type class-name">Direction</span> Dir<span class="token punctuation">&#123;</span>    <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _dir<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">set</span> <span class="token punctuation">&#123;</span>        _dir <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token class-name">Bitmap</span> bmp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>Dir<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">:</span>                bmp <span class="token operator">=</span> BitmapUp<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">:</span>                bmp <span class="token operator">=</span> BitmapDown<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">:</span>                bmp <span class="token operator">=</span> BitmapLeft<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Right<span class="token punctuation">:</span>                bmp <span class="token operator">=</span> BitmapRight<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        Width <span class="token operator">=</span> bmp<span class="token punctuation">.</span>Width<span class="token punctuation">;</span>        Height <span class="token operator">=</span> bmp<span class="token punctuation">.</span>Height<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>_MoveChck()主要代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token preprocessor property">#<span class="token directive keyword">region</span> 检查有没有超出窗体边界，判断四个方向即可</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>Dir <span class="token operator">==</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>Y <span class="token operator">-</span> Speed <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>             <span class="token punctuation">&#123;</span>                 IsMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Dir <span class="token operator">==</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>Y <span class="token operator">+</span> Speed <span class="token operator">+</span> Height <span class="token operator">></span> <span class="token number">450</span><span class="token punctuation">)</span>             <span class="token punctuation">&#123;</span>                 IsMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Dir <span class="token operator">==</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>X<span class="token operator">-</span>Speed <span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>             <span class="token punctuation">&#123;</span>                 IsMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">else</span>         <span class="token punctuation">&#123;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>X <span class="token operator">+</span> Speed <span class="token operator">+</span> Height <span class="token operator">></span> <span class="token number">450</span><span class="token punctuation">)</span>             <span class="token punctuation">&#123;</span>                 IsMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>         <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-4-控制我的坦克不要穿墙——碰撞检测"><a href="#9-4-控制我的坦克不要穿墙——碰撞检测" class="headerlink" title="9.4 控制我的坦克不要穿墙——碰撞检测"></a>9.4 控制我的坦克不要穿墙——碰撞检测</h3><p>系统提供的类<code>Rectangle</code></p><ul><li>存储一组整数，共四个，表示一个矩形的位置和大小。</li><li>对于一个矩形，我们只需要知道它左上角的位置，以及它的宽高即可确定</li></ul><p>任意一个游戏物体都存在一个矩形</p><p>在<code>GameObject类</code>中添加一个新的内容<code>GetRectangle()</code>方法，用于返回一个<code>Rectangle</code>对象的引用</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name">Rectangle</span> <span class="token function">GetRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Rectangle</span> rectangle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> Width<span class="token punctuation">,</span> Height<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> rectangle<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>构造函数</strong></p><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.rectangle.-ctor?view=netframework-4.7.2#system-drawing-rectangle-ctor(system-int32-system-int32-system-int32-system-int32)">Rectangle(Int32, Int32, Int32, Int32)</a></th><th>用指定的位置和大小初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.rectangle?view=netframework-4.7.2">Rectangle</a> 类的新实例。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.rectangle.-ctor?view=netframework-4.7.2#system-drawing-rectangle-ctor(system-drawing-point-system-drawing-size)">Rectangle(Point, Size)</a></td><td>用指定的位置和大小初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.rectangle?view=netframework-4.7.2">Rectangle</a> 类的新实例。</td></tr></tbody></table><p>然后我们可以把碰撞检测的代码放到<code>GameObjectManager</code>中，定义如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">NotMovething</span> <span class="token function">IsCollidedWall</span><span class="token punctuation">(</span><span class="token class-name">Rectangle</span> rt<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于子弹碰到墙我们需要知道是那堵墙，所以我们把返回值定义为<code>NotMovething</code>，如果返回值为<code>null</code>则说明没有发生碰撞</p><p><strong>Rectangle.IntersectsWith(Rectangle) 方法</strong></p><ul><li><p>命名空间:</p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing?view=netframework-4.7.2">System.Drawing</a></p></li><li><p>程序集:</p><p>System.Drawing.dll</p></li></ul><p>确定此矩形是否与 <code>rect</code> 相交。</p><p>先写关于红墙的碰撞检测代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">NotMovething</span> <span class="token function">IsCollidedWall</span><span class="token punctuation">(</span><span class="token class-name">Rectangle</span> rt<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//遍历所有的墙</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _wallList<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//判断是否与传递过来的矩形发生碰撞</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">GetRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IntersectsWith</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> item<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221019164122968.png"></p><p>可以运行调试看看，发生存在一个bug，就是碰到红墙之后，我的坦克就都动不了了，这是因为我们用<strong>当前坦克的位置与红墙进行碰撞判断，而不是用移动过后的坦克的位置与红墙进行比较</strong></p><p>我们需要提前判断红墙与移动后的坦克是否存在碰撞的可能</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">Rectangle</span> rectangle <span class="token operator">=</span> <span class="token function">GetRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">switch</span> <span class="token punctuation">(</span>Dir<span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">:</span>                 rectangle<span class="token punctuation">.</span>Y <span class="token operator">-=</span> Speed<span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>             <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">:</span>                 rectangle<span class="token punctuation">.</span>Y <span class="token operator">+=</span> Speed<span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>             <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">:</span>                 rectangle<span class="token punctuation">.</span>X <span class="token operator">-=</span> Speed<span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>             <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Right<span class="token punctuation">:</span>                 rectangle<span class="token punctuation">.</span>X <span class="token operator">+=</span> Speed<span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>GameObjectManager<span class="token punctuation">.</span><span class="token function">IsCollidedWall</span><span class="token punctuation">(</span><span class="token function">GetRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             IsMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>             <span class="token keyword">return</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我一开始想把红墙白墙和Boos的碰撞检测写在一个<code>IsCollided方法</code>里，后来想想是不行，因为这三种元素碰撞后的处理方法是不一样的。</p><p>所以我们需要定义三个碰撞检测的方法，代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">NotMovething</span> <span class="token function">IsCollidedWall</span><span class="token punctuation">(</span><span class="token class-name">Rectangle</span> rt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//遍历所有的红墙</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _wallList<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//判断是否与传递过来的矩形发生碰撞</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">GetRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IntersectsWith</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> item<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">NotMovething</span> <span class="token function">IsCollidedSteel</span><span class="token punctuation">(</span><span class="token class-name">Rectangle</span> rt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//遍历所有的红墙</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _steelList<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//判断是否与传递过来的矩形发生碰撞</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">GetRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IntersectsWith</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> item<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsCollidedBoss</span><span class="token punctuation">(</span><span class="token class-name">Rectangle</span> rt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> _boss<span class="token punctuation">.</span><span class="token function">GetRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IntersectsWith</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-开发敌人坦克的生成"><a href="#10-开发敌人坦克的生成" class="headerlink" title="10. 开发敌人坦克的生成"></a>10. 开发敌人坦克的生成</h2><h3 id="10-1-创建并生成敌人坦克"><a href="#10-1-创建并生成敌人坦克" class="headerlink" title="10.1 创建并生成敌人坦克"></a>10.1 创建并生成敌人坦克</h3><p>一共有四种敌人</p><p>敌人是需要持续生成的，需要一个生成敌人的速度</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> _enemyBurnSpeed <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span><span class="token comment">//60s生成一个敌人</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于<code>IsMoving</code>属性敌人坦克也需要有，所以我们可以把<code>MyTank</code>中的<code>IsMoving</code>属性移动到父类<code>Movething</code>中（后面又说不需要，所以这一步可以不做）</p><p><code>EnemyTank</code>类的代码如下，由于存在四种坦克，每个坦克宽高根据方向有所改变，然后敌人坦克的初始方向是向下的，所以我们需要在构造方法中指明是哪个坦克的图，需要添加4个Bitmap的形参</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">EnemyTank</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Movething</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token function">EnemyTank</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> speed<span class="token punctuation">,</span><span class="token class-name">Bitmap</span> bmpDown<span class="token punctuation">,</span> <span class="token class-name">Bitmap</span> bmpUp<span class="token punctuation">,</span> <span class="token class-name">Bitmap</span> bmpRight<span class="token punctuation">,</span> <span class="token class-name">Bitmap</span> bmpLeft<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            IsMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment">//初始坐标</span>            X <span class="token operator">=</span> x<span class="token punctuation">;</span>            Y <span class="token operator">=</span> y<span class="token punctuation">;</span>            <span class="token comment">//初始速度</span>            Speed <span class="token operator">=</span> speed<span class="token punctuation">;</span>            <span class="token comment">//四个方向的图片</span>            BitmapDown <span class="token operator">=</span> bmpDown<span class="token punctuation">;</span>            BitmapUp <span class="token operator">=</span> bmpUp<span class="token punctuation">;</span>            BitmapRight <span class="token operator">=</span> bmpRight<span class="token punctuation">;</span>            BitmapLeft <span class="token operator">=</span> bmpLeft<span class="token punctuation">;</span>            <span class="token comment">//初始方向</span>            Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是在<code>GameObjectManager</code>中关于敌人坦克的主要代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//EnemyTank</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>EnemyTank<span class="token punctuation">></span></span> _tankList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>EnemyTank<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> _enemyBurnSpeed <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span><span class="token comment">//60s生成一个敌人</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> _enemyBurnCount <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span><span class="token comment">//敌人的计数器</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token range operator">..</span><span class="token range operator">..</span><span class="token range operator">..</span>        <span class="token range operator">..</span><span class="token range operator">..</span><span class="token range operator">..</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _tankList<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        item<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token range operator">..</span><span class="token range operator">..</span><span class="token range operator">..</span>        <span class="token range operator">..</span><span class="token range operator">..</span><span class="token range operator">..</span>            <span class="token function">_EnemyBurn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Point<span class="token punctuation">[</span><span class="token punctuation">]</span></span> _points <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    _points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> _points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//一号敌人左上角</span>    _points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">7</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">;</span> _points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//二号敌人在中间</span>    _points<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">14</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span> _points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//三号敌人在右上角</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_EnemyBurn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    _enemyBurnCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_enemyBurnCount <span class="token operator">&lt;</span> _enemyBurnSpeed<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">//0-2，敌人坦克的初始位置有3个</span>    <span class="token class-name">Random</span> rd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">int</span></span> index <span class="token operator">=</span> rd<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//生成0-2之间的随机值，不包括最大数3</span>    <span class="token class-name">Point</span> position <span class="token operator">=</span> _points<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">int</span></span> enemyType <span class="token operator">=</span> rd<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//四个敌人坦克，所以生成1-4的随机数</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>enemyType<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token function">_CreanteEnemyTank1</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span>X<span class="token punctuation">,</span> position<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token function">_CreanteEnemyTank2</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span>X<span class="token punctuation">,</span> position<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token function">_CreanteEnemyTank3</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span>X<span class="token punctuation">,</span> position<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>            <span class="token function">_CreanteEnemyTank4</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span>X<span class="token punctuation">,</span> position<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    _enemyBurnCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建敌人坦克</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_CreanteEnemyTank1</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">EnemyTank</span> tank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EnemyTank</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>Resources<span class="token punctuation">.</span>GrayDown<span class="token punctuation">,</span>Resources<span class="token punctuation">.</span>GrayUp<span class="token punctuation">,</span>Resources<span class="token punctuation">.</span>GrayRight<span class="token punctuation">,</span>Resources<span class="token punctuation">.</span>GrayLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>    _tankList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>tank<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_CreanteEnemyTank2</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">EnemyTank</span> tank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EnemyTank</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>GreenDown<span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>GreenUp<span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>GreenRight<span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>GreenLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>    _tankList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>tank<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_CreanteEnemyTank3</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">EnemyTank</span> tank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EnemyTank</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>QuickDown<span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>QuickUp<span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>QuickRight<span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>QuickLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>    _tankList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>tank<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_CreanteEnemyTank4</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">EnemyTank</span> tank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EnemyTank</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>SlowDown<span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>SlowUp<span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>SlowRight<span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>SlowLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>    _tankList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>tank<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后把<code>Start()方法</code>添加到<code>GameFramework</code>中的<code>Start()方法</code>里</p><p>运行效果如下图所示</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221019204526933.png"></p><h3 id="10-2-控制敌人坦克的移动AI"><a href="#10-2-控制敌人坦克的移动AI" class="headerlink" title="10.2 控制敌人坦克的移动AI"></a>10.2 控制敌人坦克的移动AI</h3><p>思路是让敌人坦克一直朝某个方向移动，直到撞到障碍物之后往其他方向移动</p><p>我的坦克默认是不移动的，但敌人坦克默认是移动的，即<code>IsMoving = true;</code></p><p><strong>由于敌人坦克是要一直移动的，所以<code>IsMoving </code>其实没有用</strong></p><p>为了严谨我们可以重新把<code>IsMoving</code>剪切回<code>MyTank</code>类中，因为<code>IsMoving</code>实际上还是<code>MyTank</code>类独自拥有的属性，然后在删除<code>EnemyTank</code>类构造方法里的<code>IsMoving</code>属性</p><p>由于移动的代码是差不多的，所以我们可以把MyTank中的<code>_Move</code>，<code>_MoveCheck</code>和<code>Update()</code>复制到EnemyTank中修改</p><p>随机数<code>Random</code>最好设置成成员变量，因为同一个种子可以保证数字的随机</p><p>我们需要创建一个<code>_ChangeDirection</code>方法，让敌人撞到障碍物之前改变方向</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_ChangeDirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">Direction</span> dir <span class="token operator">=</span> <span class="token punctuation">(</span>Direction<span class="token punctuation">)</span>_r<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Direction为0-3</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dir <span class="token operator">==</span> Dir<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            Dir <span class="token operator">=</span> dir<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//更改方向后仍然可能存在障碍物,所以我们需要再执行一次_MoveCheck</span>    <span class="token function">_MoveCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>EnemyTank类完整代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">EnemyTank</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Movething</span></span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">Random</span> _r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">EnemyTank</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> speed<span class="token punctuation">,</span><span class="token class-name">Bitmap</span> bmpDown<span class="token punctuation">,</span> <span class="token class-name">Bitmap</span> bmpUp<span class="token punctuation">,</span> <span class="token class-name">Bitmap</span> bmpRight<span class="token punctuation">,</span> <span class="token class-name">Bitmap</span> bmpLeft<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//初始坐标</span>            X <span class="token operator">=</span> x<span class="token punctuation">;</span>            Y <span class="token operator">=</span> y<span class="token punctuation">;</span>            <span class="token comment">//初始速度</span>            Speed <span class="token operator">=</span> speed<span class="token punctuation">;</span>            <span class="token comment">//四个方向的图片</span>            BitmapDown <span class="token operator">=</span> bmpDown<span class="token punctuation">;</span>            BitmapUp <span class="token operator">=</span> bmpUp<span class="token punctuation">;</span>            BitmapRight <span class="token operator">=</span> bmpRight<span class="token punctuation">;</span>            BitmapLeft <span class="token operator">=</span> bmpLeft<span class="token punctuation">;</span>            <span class="token comment">//初始方向</span>            Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_ChangeDirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">Direction</span> dir <span class="token operator">=</span> <span class="token punctuation">(</span>Direction<span class="token punctuation">)</span>_r<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Direction为0-3</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dir <span class="token operator">==</span> Dir<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    Dir <span class="token operator">=</span> dir<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//更改方向后仍然可能存在障碍物,所以我们需要再执行一次_MoveCheck</span>            <span class="token function">_MoveCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">_MoveCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//移动检查</span>            <span class="token function">_Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_MoveCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token preprocessor property">#<span class="token directive keyword">region</span> 检查有没有超出窗体边界，判断四个方向即可</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Dir <span class="token operator">==</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Y <span class="token operator">-</span> Speed <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token function">_ChangeDirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Dir <span class="token operator">==</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Y <span class="token operator">+</span> Speed <span class="token operator">+</span> Height <span class="token operator">></span> <span class="token number">450</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token function">_ChangeDirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Dir <span class="token operator">==</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>X <span class="token operator">-</span> Speed <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token function">_ChangeDirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>X <span class="token operator">+</span> Speed <span class="token operator">+</span> Height <span class="token operator">></span> <span class="token number">450</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token function">_ChangeDirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>            <span class="token comment">//检查有没有和其他元素发生碰撞</span>            <span class="token class-name">Rectangle</span> rectangle <span class="token operator">=</span> <span class="token function">GetRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>Dir<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">:</span>                    rectangle<span class="token punctuation">.</span>Y <span class="token operator">-=</span> Speed<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">:</span>                    rectangle<span class="token punctuation">.</span>Y <span class="token operator">+=</span> Speed<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">:</span>                    rectangle<span class="token punctuation">.</span>X <span class="token operator">-=</span> Speed<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Right<span class="token punctuation">:</span>                    rectangle<span class="token punctuation">.</span>X <span class="token operator">+=</span> Speed<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>GameObjectManager<span class="token punctuation">.</span><span class="token function">IsCollidedWall</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">_ChangeDirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>GameObjectManager<span class="token punctuation">.</span><span class="token function">IsCollidedSteel</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">_ChangeDirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>GameObjectManager<span class="token punctuation">.</span><span class="token function">IsCollidedBoss</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">_ChangeDirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>Dir<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">:</span>                    Y <span class="token operator">-=</span> Speed<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">:</span>                    Y <span class="token operator">+=</span> Speed<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">:</span>                    X <span class="token operator">-=</span> Speed<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Right<span class="token punctuation">:</span>                    X <span class="token operator">+=</span> Speed<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221019212214616.png"></p><p>由于敌人坦克之间没有进行同类的碰撞检测，所以你可以看到有部分的敌人坦克存在重叠的情况，这是没什么问题的</p><h3 id="10-3-解决资源冲突问题"><a href="#10-3-解决资源冲突问题" class="headerlink" title="10.3 解决资源冲突问题"></a>10.3 解决资源冲突问题</h3><p>当你运行一段事件后会报错，如下图所示</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221019213134135.png"></p><p>当你按方向键不动时，就会一直调用<code>MyTank</code>中的<code>KeyDown</code>方法</p><p>多线程冲突，可以使用加锁解决</p><p>权宜之计是在<code>MyTank</code>中的<code>KeyDown</code>方法加个判断</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020084450795.png"></p><p>可以看到按下W的时候已经加了判断，而按下S还没有</p><p>接下来使用加锁的方式</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020085902038.png"></p><p>对于图片的使用存在两个地方，第一个是按键按下的时候系统处理事件的线程，会得到一个bmp，相关代码如下</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020085254140.png"></p><p>还有一处是在DrawSelf()，会把元素绘制到图片上，这个是放在我们自己写的线程<code>_gameMainThread</code>里，当两个线程同时执行某一个功能，会产生线程冲突</p><p>将<code>GameObject</code>类里的<code>DrawSelf</code>方法添加为<code>virtual</code>方法，让它可以被继承重写</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020085631835.png"></p><p>在<code>Movething</code>类中重写这个方法，加锁</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020085750269.png"></p><h2 id="11-控制子弹的生成"><a href="#11-控制子弹的生成" class="headerlink" title="11. 控制子弹的生成"></a>11. 控制子弹的生成</h2><h3 id="11-1-生成子弹"><a href="#11-1-生成子弹" class="headerlink" title="11.1 生成子弹"></a>11.1 生成子弹</h3><p>先制作<code>MyTank</code>的子弹，方法是在<code>MyTank</code>类的<code>KeyDown</code>里添加一个<code>Keys.Space</code>的响应，如下图所示</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020103247378.png"></p><p>然后在<code>GameObjectManager</code>添加代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">      <span class="token comment">//Bullet</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>Bullet<span class="token punctuation">></span></span> _bulletList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Bullet<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//创建子弹</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CreateBullet</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">,</span><span class="token class-name">Tag</span> tag<span class="token punctuation">,</span><span class="token class-name">Direction</span> dir<span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token class-name">Bullet</span> bullet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Bullet</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>dir<span class="token punctuation">,</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>          _bulletList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>bullet<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token comment">//印刷子弹</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token range operator">..</span><span class="token range operator">..</span><span class="token range operator">..</span>              <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _bulletList<span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              item<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token range operator">..</span><span class="token range operator">..</span><span class="token range operator">..</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>MyTank</code>类里添加一个<code>_Attack</code>方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_Attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//发射子弹</span>            <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>X<span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Y<span class="token punctuation">;</span>            <span class="token comment">//计算子弹位置</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>Dir<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">:</span>                    x <span class="token operator">+=</span> Width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">:</span>                    x <span class="token operator">+=</span> Width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                    y <span class="token operator">+=</span> Height<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">:</span>                    y <span class="token operator">+=</span> Height<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Right<span class="token punctuation">:</span>                    x <span class="token operator">+=</span> Width<span class="token punctuation">;</span>                    y <span class="token operator">+=</span> Height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            GameObjectManager<span class="token punctuation">.</span><span class="token function">CreateBullet</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>Tag<span class="token punctuation">.</span>MyTank<span class="token punctuation">,</span>Dir<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子弹<code>Bullet</code>类代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">enum</span> <span class="token class-name">Tag</span>    <span class="token punctuation">&#123;</span>        MyTank<span class="token punctuation">,</span>        EnemyTank    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Bullet</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Movething</span></span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//辨别子弹是MyTank还是EnemyTank的</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Tag</span> Tag <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token function">Bullet</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> speed<span class="token punctuation">,</span><span class="token class-name">Direction</span>  dir<span class="token punctuation">,</span><span class="token class-name">Tag</span> tag<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//初始坐标</span>            X <span class="token operator">=</span> x<span class="token punctuation">;</span>            Y <span class="token operator">=</span> y<span class="token punctuation">;</span>            <span class="token comment">//初始速度</span>            Speed <span class="token operator">=</span> speed<span class="token punctuation">;</span>            <span class="token comment">//四个方向的图片</span>            BitmapDown <span class="token operator">=</span> Resources<span class="token punctuation">.</span>BulletDown<span class="token punctuation">;</span>            BitmapUp <span class="token operator">=</span> Resources<span class="token punctuation">.</span>BulletUp<span class="token punctuation">;</span>            BitmapRight <span class="token operator">=</span> Resources<span class="token punctuation">.</span>BulletRight<span class="token punctuation">;</span>            BitmapLeft <span class="token operator">=</span> Resources<span class="token punctuation">.</span>BulletLeft<span class="token punctuation">;</span>            Dir <span class="token operator">=</span> dir<span class="token punctuation">;</span>            Tag <span class="token operator">=</span> Tag<span class="token punctuation">;</span>            <span class="token comment">//由于子弹本身存在宽高的空白区域，导致显示问题，所以需要减去宽高</span>            X <span class="token operator">-=</span> Width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            Y <span class="token operator">-=</span> Height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DrawSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">DrawSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020103652431.png"></p><p>可以看到我发射了三枚子弹，只是目前子弹还无法移动</p><h3 id="11-2-控制子弹的移动和超出边界销毁"><a href="#11-2-控制子弹的移动和超出边界销毁" class="headerlink" title="11.2 控制子弹的移动和超出边界销毁"></a>11.2 控制子弹的移动和超出边界销毁</h3><p>子弹的移动和敌人的类似的，只不过相对来说会简单一些，因为子弹的移动只需要朝一个方向即可，将敌人移动的代码复制到<code>Bullet</code>类</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token function">_MoveCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//移动检查</span>          <span class="token function">_Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_MoveCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token preprocessor property">#<span class="token directive keyword">region</span> 检查有没有超出窗体边界，不需要预判</span>          <span class="token comment">//判断中间的小点，即子弹</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>Dir <span class="token operator">==</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              <span class="token comment">//高度一半，然后子弹是6，加上子弹的一半</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>Y<span class="token operator">+</span>Height<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span><span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>              <span class="token punctuation">&#123;</span>                  IsDestroy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Dir <span class="token operator">==</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>Y <span class="token operator">+</span> Height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">></span> <span class="token number">450</span><span class="token punctuation">)</span>              <span class="token punctuation">&#123;</span>                  IsDestroy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Dir <span class="token operator">==</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>X <span class="token operator">+</span>Width<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>              <span class="token punctuation">&#123;</span>                  IsDestroy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">else</span>          <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>X <span class="token operator">+</span> Width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">></span> <span class="token number">450</span><span class="token punctuation">)</span>              <span class="token punctuation">&#123;</span>                  IsDestroy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token keyword">switch</span> <span class="token punctuation">(</span>Dir<span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">:</span>                  Y <span class="token operator">-=</span> Speed<span class="token punctuation">;</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">:</span>                  Y <span class="token operator">+=</span> Speed<span class="token punctuation">;</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">:</span>                  X <span class="token operator">-=</span> Speed<span class="token punctuation">;</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Right<span class="token punctuation">:</span>                  X <span class="token operator">+=</span> Speed<span class="token punctuation">;</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-3-控制子弹攻击墙和敌人"><a href="#11-3-控制子弹攻击墙和敌人" class="headerlink" title="11.3 控制子弹攻击墙和敌人"></a>11.3 控制子弹攻击墙和敌人</h3><p><code>GameObjectManager</code>类添加代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">      <span class="token comment">//检测销毁子弹</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CheckAndDestroyBullet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token class-name">List<span class="token punctuation">&lt;</span>Bullet<span class="token punctuation">></span></span> needToDestroy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Bullet<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _bulletList<span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>IsDestroy <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>              <span class="token punctuation">&#123;</span>                  needToDestroy<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> needToDestroy<span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              _bulletList<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>            <span class="token comment">//销毁红墙</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DestroyWall</span><span class="token punctuation">(</span><span class="token class-name">NotMovething</span> wall<span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          _wallList<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>wall<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//销毁敌人的坦克</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DestroyEnemyTank</span><span class="token punctuation">(</span><span class="token class-name">EnemyTank</span> enemyTank<span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          _tankList<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>enemyTank<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token range operator">..</span><span class="token range operator">..</span><span class="token range operator">..</span>                        <span class="token function">CheckAndDestroyBullet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//foreach (var item in _bulletList)</span>          <span class="token comment">//&#123;</span>          <span class="token comment">//    item.Update();</span>          <span class="token comment">//&#125;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _bulletList<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              _bulletList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token range operator">..</span><span class="token range operator">..</span><span class="token range operator">..</span>      <span class="token punctuation">&#125;</span><span class="token comment">//检测子弹是否碰到敌人</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">EnemyTank</span> <span class="token function">IsCollidedEnemyTank</span><span class="token punctuation">(</span><span class="token class-name">Rectangle</span> rt<span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _tankList<span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">GetRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IntersectsWith</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">&#123;</span>                  <span class="token keyword">return</span> item<span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Bullet</code>类添加代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">     <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_MoveCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>         <span class="token range operator">..</span><span class="token range operator">..</span><span class="token range operator">..</span>                  <span class="token comment">//检查有没有和其他元素发生碰撞</span>         <span class="token class-name">Rectangle</span> rectangle <span class="token operator">=</span> <span class="token function">GetRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         rectangle<span class="token punctuation">.</span>X <span class="token operator">=</span> X <span class="token operator">+</span> Width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span>         rectangle<span class="token punctuation">.</span>Y <span class="token operator">=</span> Y <span class="token operator">+</span> Height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span>         rectangle<span class="token punctuation">.</span>Height <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>         rectangle<span class="token punctuation">.</span>Width <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>         <span class="token class-name">NotMovething</span> wall <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>         <span class="token comment">//自身销毁，红墙销毁</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>wall<span class="token operator">=</span> GameObjectManager<span class="token punctuation">.</span><span class="token function">IsCollidedWall</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             IsDestroy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>             GameObjectManager<span class="token punctuation">.</span><span class="token function">DestroyWall</span><span class="token punctuation">(</span>wall<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token comment">//碰到钢铁自身销毁</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>GameObjectManager<span class="token punctuation">.</span><span class="token function">IsCollidedSteel</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             IsDestroy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>             <span class="token keyword">return</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token comment">/* 与boos的碰撞检测还没写         if (GameObjectManager.IsCollidedBoss(rectangle) != false)         &#123;                 return;         &#125;*/</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>Tag <span class="token operator">==</span> Tag<span class="token punctuation">.</span>MyTank<span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             <span class="token class-name">EnemyTank</span> enemyTank <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>enemyTank <span class="token operator">=</span> GameObjectManager<span class="token punctuation">.</span><span class="token function">IsCollidedEnemyTank</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>             <span class="token punctuation">&#123;</span>                 IsDestroy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                 GameObjectManager<span class="token punctuation">.</span><span class="token function">DestroyEnemyTank</span><span class="token punctuation">(</span>enemyTank<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020141308104.png"></p><p>可以看到一部分的红墙已经被我销毁了</p><h3 id="11-4-添加爆炸效果"><a href="#11-4-添加爆炸效果" class="headerlink" title="11.4 添加爆炸效果"></a>11.4 添加爆炸效果</h3><p>添加一个新的类<code>Explosion</code>类，主要代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//爆炸效果和Movething以及NotMovthing都不太像</span>   <span class="token comment">//需要绘制几个图片动态的切换</span>   <span class="token keyword">class</span> <span class="token class-name">Explosion</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">GameObject</span></span>   <span class="token punctuation">&#123;</span>       <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _playSpeed <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token comment">//让每一张图片停留2帧</span>              <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _playCount <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//计数器用于处理_playSpeed</span>       <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment">//爆炸效果一共有五张图</span>       <span class="token keyword">private</span> <span class="token class-name">Bitmap<span class="token punctuation">[</span><span class="token punctuation">]</span></span> _bmpArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Bitmap<span class="token punctuation">[</span><span class="token punctuation">]</span></span>       <span class="token punctuation">&#123;</span>           Resources<span class="token punctuation">.</span>EXP1<span class="token punctuation">,</span>           Resources<span class="token punctuation">.</span>EXP2<span class="token punctuation">,</span>           Resources<span class="token punctuation">.</span>EXP3<span class="token punctuation">,</span>           Resources<span class="token punctuation">.</span>EXP4<span class="token punctuation">,</span>           Resources<span class="token punctuation">.</span>EXP5       <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token function">Explosion</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _bmpArray<span class="token punctuation">)</span>           <span class="token punctuation">&#123;</span>               item<span class="token punctuation">.</span><span class="token function">MakeTransparent</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Black<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">//需要爆炸在正中心,取任意图的位置即可</span>           X <span class="token operator">=</span> x <span class="token operator">-</span> _bmpArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>           Y <span class="token operator">=</span> y <span class="token operator">-</span> _bmpArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">Image</span> <span class="token function">GetImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           <span class="token comment">//_index超过4，统一用第五张图</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>_index<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span> _bmpArray<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> _bmpArray<span class="token punctuation">[</span>_index<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           _playCount<span class="token operator">++</span><span class="token punctuation">;</span>           _index <span class="token operator">=</span> <span class="token punctuation">(</span>_playCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> _playSpeed<span class="token punctuation">;</span>           <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>GameObjectManager</code>添加代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//Explosion</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>Explosion<span class="token punctuation">></span></span> _explosionList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Explosion<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建爆炸</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CreateExplosion</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Explosion</span> exp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Explosion</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    _explosionList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//印刷</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token range operator">..</span><span class="token range operator">..</span><span class="token range operator">..</span>                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _explosionList<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        item<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token range operator">..</span><span class="token range operator">..</span><span class="token range operator">..</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>Bullet</code>类的<code>_MoveCheck</code>方法添加代码如下</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020144416449.png"></p><p>运行效果如下</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020144523260.png"></p><p>可以看到爆炸效果已经产生了，不过会一直留在产生炮炸的地方</p><h3 id="11-5-控制爆炸效果的销毁"><a href="#11-5-控制爆炸效果的销毁" class="headerlink" title="11.5 控制爆炸效果的销毁"></a>11.5 控制爆炸效果的销毁</h3><p>当所有图片的帧播放完（5张爆炸图），可以通过索引（_index）判断</p><p>在<code>Explosion</code>类中添加一个属性，用于判断爆炸是否需要销毁</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsNeedDestroy <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>     <span class="token comment">//判断爆炸是否需要销毁</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改构造函数，设置默认不需要销毁</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020145757242.png"></p><p>修改<code>GetImage</code>方法如下，</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020145634849.png"></p><p>然后在<code>GameObjectManager</code>添加一个方法<code>CheckAndDestroyExplosion</code>用于检测销毁爆炸</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//检测销毁爆炸</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CheckAndDestroyExplosion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List<span class="token punctuation">&lt;</span>Explosion<span class="token punctuation">></span></span> needToDestroy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Explosion<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _explosionList<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>IsNeedDestroy <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            needToDestroy<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> needToDestroy<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        _explosionList<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后放到<code>GameObjectManager</code>的<code>Update()</code>方法里</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020150102334.png"></p><p>然后再把<code>CheckAndDestroyExplosion</code>添加到子弹的<code>_MoveCheck</code>方法里</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020150301918.png"></p><p>运行效果如下</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020150335691.png"></p><p>可以看到已经销毁了爆炸的效果</p><h3 id="11-6-控制敌人坦克的攻击"><a href="#11-6-控制敌人坦克的攻击" class="headerlink" title="11.6 控制敌人坦克的攻击"></a>11.6 控制敌人坦克的攻击</h3><p>在<code>EnemyTank</code>类里写入代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> AttackSpeed <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">//控制子弹的发射速度</span><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _attackCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//子弹的计数器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将<code>AttackSpeed</code>属性添加一个默认值到构造方法</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020155457931.png"></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_AttackCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _attackCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>_attackCount <span class="token operator">&lt;</span> AttackSpeed<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token function">_Attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _attackCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_Attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//发射子弹</span>            <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>X<span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Y<span class="token punctuation">;</span>            <span class="token comment">//计算子弹位置</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>Dir<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">:</span>                    x <span class="token operator">+=</span> Width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">:</span>                    x <span class="token operator">+=</span> Width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                    y <span class="token operator">+=</span> Height<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">:</span>                    y <span class="token operator">+=</span> Height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Right<span class="token punctuation">:</span>                    x <span class="token operator">+=</span> Width<span class="token punctuation">;</span>                    y <span class="token operator">+=</span> Height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            GameObjectManager<span class="token punctuation">.</span><span class="token function">CreateBullet</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> Tag<span class="token punctuation">.</span>EnemyTank<span class="token punctuation">,</span> Dir<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个方法从MyTank中复制过来，只需要改下Tag即可</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将<code>_AttackCheck</code>方法添加到Update中</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020155637469.png"></p><p>然后运行调试发生了很离谱的错误，敌人坦克会过个两秒自爆</p><p>找了半天错误发现在<code>Bullet</code>里的构造方法写错了，写成了<code>Tag=Tag;</code>,相当于没有进行赋值</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020155819617.png"></p><p>之后运行调试就正常了，运行效果如下</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020155957351.png"></p><h3 id="11-7-让敌人坦克的AI更智能"><a href="#11-7-让敌人坦克的AI更智能" class="headerlink" title="11.7 让敌人坦克的AI更智能"></a>11.7 让敌人坦克的AI更智能</h3><p>不至于碰到障碍物才转移方向，思路是让敌人坦克每隔特定时间就进行一次转向</p><p>在<code>EnemyTank</code>中添加代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ChangeDirSpeed <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//敌人改变方向的时间</span>      <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _changeDirCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//敌人改变方向的计数器</span>      <span class="token comment">//自动改变方向</span>      <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_AutoChangeDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          _changeDirCount<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>_changeDirCount<span class="token operator">&lt;</span>ChangeDirSpeed<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token function">_ChangeDirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          _changeDirCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时在构造方法中添加敌人改变所需要的时间，目前设置为80帧</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020160901303.png"></p><p>将<code>_AutoChangeDir</code>方法添加到Update中</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020160957166.png"></p><p>运行之后你就会发现敌人会稍微灵活点了，不会只有碰到障碍物才会转其他方向</p><h3 id="11-8-控制敌人子弹对主角的攻击"><a href="#11-8-控制敌人子弹对主角的攻击" class="headerlink" title="11.8 控制敌人子弹对主角的攻击"></a>11.8 控制敌人子弹对主角的攻击</h3><p>在<code>Bullet</code>类的<code>_MoveCheck</code>中添加如下代码</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020205344832.png"></p><p>用于敌人子弹对主角的攻击，同时在<code>IsCollidedMyTank</code>需要写一个<code>IsCollidedMyTank</code>方法用于判断是否产生碰撞测试</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020205529914.png"></p><p>一开始是想用布尔类型的返回值的</p><p>由于敌人坦克的子弹碰撞到我的坦克不是直接销毁的<br>而是要调用我的坦克的成员，比如说血量，所以这里不能用bool类型的返回值</p><p>然后在<code>MyTank</code>类中添加我的坦克默认的HP，同时需要保存默认的坐标，代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> HP <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//设置默认血量</span>      <span class="token comment">//出生点</span>      <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _originalX<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _originalY<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">MyTank</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> speed<span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token range operator">..</span><span class="token range operator">..</span><span class="token range operator">..</span>          HP <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//代表我的坦克受到了攻击</span>      <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TakeDamage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          HP<span class="token operator">--</span><span class="token punctuation">;</span>          <span class="token comment">//回出生点</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>HP <span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              X <span class="token operator">=</span> _originalX<span class="token punctuation">;</span>              Y <span class="token operator">=</span> _originalY<span class="token punctuation">;</span>              HP <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>              Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后最好加个默认的方向<code>Dir = Direction.Up;    </code>，老师的代码中没有加导致效果不太好，方向可能会像左右下</p><h2 id="12-控制游戏的结束"><a href="#12-控制游戏的结束" class="headerlink" title="12. 控制游戏的结束"></a>12. 控制游戏的结束</h2><p>子弹攻击到BOOS即代表游戏的结束</p><ul><li>敌人坦克的子弹攻击到BOOS</li><li>我的坦克的子弹攻击到BOOS</li><li>即子弹攻击到BOOS</li></ul><p>在<code>GameFramework</code>框架中添加如下代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//游戏状态</span>    <span class="token keyword">enum</span> <span class="token class-name">GameState</span>    <span class="token punctuation">&#123;</span>        Running<span class="token punctuation">,</span>        GameOver    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">GameFramework</span>    <span class="token punctuation">&#123;</span>    <span class="token comment">//默认游戏状态为Running</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">GameState</span> _gameState <span class="token operator">=</span> GameState<span class="token punctuation">.</span>Running<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token range operator">..</span><span class="token range operator">..</span><span class="token range operator">..</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>_gameState <span class="token operator">==</span> GameState<span class="token punctuation">.</span>Running<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                GameObjectManager<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token function">_GameOverUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_GameOverUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>             <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">450</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> Resources<span class="token punctuation">.</span>GameOver<span class="token punctuation">.</span>Width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token number">450</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> Resources<span class="token punctuation">.</span>GameOver<span class="token punctuation">.</span>Height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            g<span class="token punctuation">.</span><span class="token function">DrawImage</span><span class="token punctuation">(</span>Resources<span class="token punctuation">.</span>GameOver<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ChangeToGameOver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _gameState <span class="token operator">=</span> GameState<span class="token punctuation">.</span>GameOver<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后回到<code>Bullet</code>类中的<code>_MoveCheck</code>方法内</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">if</span> <span class="token punctuation">(</span>GameObjectManager<span class="token punctuation">.</span><span class="token function">IsCollidedBoss</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                GameFramework<span class="token punctuation">.</span><span class="token function">ChangeToGameOver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加一行<code>GameFramework.ChangeToGameOver();</code>用来表示子弹攻击到BOOS后GAME OVER，运行效果如下</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020212008076.png"></p><h2 id="13-添加音效（游戏结束）"><a href="#13-添加音效（游戏结束）" class="headerlink" title="13.添加音效（游戏结束）"></a>13.添加音效（游戏结束）</h2><p>一共存在五种音效</p><ol><li>hit 敌人坦克打到我的坦克的音效</li><li>add 敌人生成的音效</li><li>start 游戏开始的音效</li><li>fire 子弹发射的音效</li><li>blast 爆炸</li></ol><p>添加一个<code>SoundManager</code>类用于存放音效</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">SoundManager</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SoundPlayer</span> _startPlayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SoundPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SoundPlayer</span> _addPlayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SoundPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SoundPlayer</span> _blastPlayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SoundPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SoundPlayer</span> _firePlayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SoundPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SoundPlayer</span> _hitPlayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SoundPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InitSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _startPlayer<span class="token punctuation">.</span>Stream<span class="token operator">=</span> Resources<span class="token punctuation">.</span>start<span class="token punctuation">;</span>            _addPlayer<span class="token punctuation">.</span>Stream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token keyword">add</span><span class="token punctuation">;</span>            _blastPlayer<span class="token punctuation">.</span>Stream <span class="token operator">=</span> Resources<span class="token punctuation">.</span>blast<span class="token punctuation">;</span>            _firePlayer<span class="token punctuation">.</span>Stream <span class="token operator">=</span> Resources<span class="token punctuation">.</span>fire<span class="token punctuation">;</span>            _hitPlayer<span class="token punctuation">.</span>Stream <span class="token operator">=</span> Resources<span class="token punctuation">.</span>hit<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//游戏开始的音效，只需要在GameFramework中添加一次</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PlayStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _startPlayer<span class="token punctuation">.</span><span class="token function">Play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//增加一个敌人的音效，在GameOjectManager中的EnemyBorn</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PlayAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _addPlayer<span class="token punctuation">.</span><span class="token function">Play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">//爆炸音效，比如子弹攻击到红墙、BOOS或者我的坦克攻击到敌人坦克</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PlayBlast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _blastPlayer<span class="token punctuation">.</span><span class="token function">Play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">//子弹发射的音效</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PlayFire</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _firePlayer<span class="token punctuation">.</span><span class="token function">Play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">//敌人坦克打到我的坦克的音效</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PlayHit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _hitPlayer<span class="token punctuation">.</span><span class="token function">Play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将<code>InitSound</code>和<code>PlayStart</code>方法添加到<code>GameFramework</code>中的<code>Start</code>方法中</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020214536481.png"></p><p>因为这两个方法都只需要在游戏开始时运行一次</p><p>然后将<code>PlayAdd</code>添加到<code>GameObjectManager</code>类中的<code>_EnemyBurn</code>方法中</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020214759121.png"></p><p>将<code>PlayBlast</code>方法添加到<code>Bullet</code>类的<code>_MoveCheck</code>方法中</p><ol><li>红墙碰到子弹会爆炸</li><li>BOOS碰到子弹会爆炸GameOver</li><li>我的坦克发射的子弹碰到敌人坦克，敌人坦克会爆炸</li></ol><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020215141419.png"></p><p>然后敌人子弹碰到我的坦克会产生Hit音效</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020215354179.png"></p><p>我的坦克发射子弹会产生Fire音效</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221020215533792.png"></p><p>到这整个游戏的开发就结束了，存在许多可以优化的问题，比如说音效无法同时生效，然后我因为将坦克的速度设置的大了点，导致产生空气墙的问题（原理是提前进行碰撞测试，因为速度过大，导致会产生空气墙），解决方案是将坦克速度设置的小一点</p>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合类列表List</title>
      <link href="/2022/10/13/%E9%9B%86%E5%90%88%E7%B1%BB%E5%88%97%E8%A1%A8List/"/>
      <url>/2022/10/13/%E9%9B%86%E5%90%88%E7%B1%BB%E5%88%97%E8%A1%A8List/</url>
      
        <content type="html"><![CDATA[<h2 id="List-类"><a href="#List-类" class="headerlink" title="List 类"></a>List<T> 类</T></h2><p>表示可通过索引访问的对象的强类型列表。 提供用于对列表进行搜索、排序和操作的方法。</p><p><img src="/images/%E9%9B%86%E5%90%88%E7%B1%BB%E5%88%97%E8%A1%A8List/list.jpg" alt="list"></p><p>列表的简单示例</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ListExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//遍历myList列表</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ShowList</span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> myList<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> myList<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>item <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//定义一个列表myList</span>            <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> myList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">,</span> <span class="token number">789</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"初始列表："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ShowList</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//添加数据</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"向末尾添加666："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            myList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ShowList</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//插入数据</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"向索引为3的位置添加888："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            myList<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ShowList</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//移除特定对象的第一个匹配项</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"移除第一个456："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            myList<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ShowList</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//输出myList列表的长度</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"myList列表的长度为"</span> <span class="token operator">+</span> myList<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//返回第一个匹配项的从零开始的索引</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"myList列表中第一个789的索引为"</span><span class="token operator">+</span>myList<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token number">789</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><p><img src="/images/%E9%9B%86%E5%90%88%E7%B1%BB%E5%88%97%E8%A1%A8List/image-20221013150053327.png"></p><p>该 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic.list-1?view=net-6.0">List</a> 类是类 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.arraylist?view=net-6.0">ArrayList</a> 的泛型等效项。 它通过使用一个数组实现 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic.ilist-1?view=net-6.0">IList</a> 泛型接口，该数组的大小根据需要<strong>动态增加</strong>。</p><ul><li><p>列表内部数据是使用数组进行从存储，一个空的列表内部会有一个长度为0的数组</p><ul><li>当给列表中添加元素的时候，列表的容量会扩大为4</li><li>如果添加第5个的时候列表的大小会重新设置为8</li><li>如果添加第9个元素，列表容量会扩大为16，依次2倍扩容</li></ul></li><li><p>当列表中的容量发生改变的时候，它会创建一个新的数组，使用Array.Copy()方法将旧数组中的元素复制到新数组中。</p></li><li><p>Capacity是容量，Count是元素个数</p><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic.list-1.capacity?view=net-6.0#system-collections-generic-list-1-capacity">Capacity</a></th><th>获取或设置该内部数据结构在不调整大小的情况下能够容纳的元素总数。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic.list-1.count?view=net-6.0#system-collections-generic-list-1-count">Count</a></td><td>获取 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic.list-1?view=net-6.0">List</a> 中包含的元素数。</td></tr><tr><td>[Item<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic.list-1.item?view=net-6.0#system-collections-generic-list-1-item(system-int32)">Int32]</a></td><td>获取或设置指定索引处的元素。</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>               <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> myListOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> myListTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token number">123</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> myListThree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">,</span> <span class="token number">789</span><span class="token punctuation">,</span><span class="token number">1434</span><span class="token punctuation">,</span><span class="token number">2323</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"myListOne:  </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">myListOne<span class="token punctuation">.</span>Capacity</span><span class="token punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">myListOne<span class="token punctuation">.</span>Count</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"myListTwo:  </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">myListTwo<span class="token punctuation">.</span>Capacity</span><span class="token punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">myListTwo<span class="token punctuation">.</span>Count</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"myListThree:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">myListThree<span class="token punctuation">.</span>Capacity</span><span class="token punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">myListThree<span class="token punctuation">.</span>Count</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">myListOne:  0:0myListTwo:  4:1myListThree:8:5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharpIO详解</title>
      <link href="/2022/10/11/CSharpIO%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/10/11/CSharpIO%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是I-O"><a href="#1-什么是I-O" class="headerlink" title="1. 什么是I/O"></a>1. 什么是I/O</h2><p>I/O 的全称是input/output，翻译过来就是输入/输出。对于一个系统或者计算机来说，键盘、U盘、网络接口、显示器、音响、摄像头等都是IO设备。那么，对于一个程序I/O又是什么呢？</p><p>对于程序而言，I/O就是与外界进行数据交换的方式。借用一句广告词，程序不生产数据，只是数据的搬用工。当然，正如XX还需要对水进行过滤、消毒等工序一样，程序也要对数据进行运算，所以也不完全算是搬用工，严格来讲是加工厂。那么，I/O就是工厂的原料提供商和成品销售商。</p><p><strong>在C# 中，I/O体系整体分为三个部分，后台存储流、装饰器流、流适配器，具体划分如下图所示：</strong></p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/v2-f747eb53b7b2e143ae8836cd49692f62_720w.webp"></p><p>在流与流之间，都是采用字节数据进行交换，所以可以得到一个简单的结论，I/O在程序中表现为字节流，换句话说I/O就是将各种数据转成字节的工具。</p><h3 id="1-1-System-IO-命名空间"><a href="#1-1-System-IO-命名空间" class="headerlink" title="1.1 System.IO 命名空间"></a>1.1 System.IO 命名空间</h3><p>包含允许读写文件和数据流的类型以及提供基本文件和目录支持的类型。</p><h4 id="1-1-1-文件系统类-System-IO-的介绍"><a href="#1-1-1-文件系统类-System-IO-的介绍" class="headerlink" title="1.1.1 文件系统类(System.IO)的介绍"></a>1.1.1 文件系统类(System.IO)的介绍</h4><p>​    文件操作类大都在<code>System.IO</code>命名空间里。<code>FileSystemInfo</code>类是任何文件系统类的基类；<code>FileInfo</code>与<code>File</code>表示文件系统中的文件；<code>DirectoryInfo</code>与<code>Directory</code>表示文件系统中的文件夹；<code>Path</code>表示文件系统中的路径；<code>DriveInfo</code>提供对有关驱动器的信息的访问。<strong>注意，XXXInfo与XXX类的区别是：XXX是静态类，XXXInfo类可以实例化。</strong><br>​    还有个较为特殊的类System.MarshalByRefObject允许在支持远程处理的应用程序中跨应用程序域边界访问对象。 </p><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.binaryreader?view=net-6.0">BinaryReader</a></th><th>用特定的编码将基元数据类型读作二进制值。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.binarywriter?view=net-6.0">BinaryWriter</a></td><td>将二进制中的基元类型写入流并支持用特定的编码写入字符串。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.bufferedstream?view=net-6.0">BufferedStream</a></td><td>将缓冲层添加到另一个流上的读取和写入操作。 此类不能被继承。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.directory?view=net-6.0">Directory</a></td><td>公开用于通过目录和子目录进行创建、移动和枚举的静态方法。 此类不能被继承。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.directoryinfo?view=net-6.0">DirectoryInfo</a></td><td>公开用于创建、移动和枚举目录和子目录的实例方法。 此类不能被继承。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.directorynotfoundexception?view=net-6.0">DirectoryNotFoundException</a></td><td>找不到文件或目录的部件时引发的异常。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.driveinfo?view=net-6.0">DriveInfo</a></td><td>提供对有关驱动器的信息的访问。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.drivenotfoundexception?view=net-6.0">DriveNotFoundException</a></td><td>当尝试访问的驱动器或共享不可用时引发的异常。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.endofstreamexception?view=net-6.0">EndOfStreamException</a></td><td>尝试在流末尾之后读取时引发的异常。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.enumerationoptions?view=net-6.0">EnumerationOptions</a></td><td>提供文件和目录枚举选项。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.erroreventargs?view=net-6.0">ErrorEventArgs</a></td><td>为 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filesystemwatcher.error?view=net-6.0">Error</a> 事件提供数据。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file?view=net-6.0">File</a></td><td>提供用于创建、复制、删除、移动和打开单一文件的静态方法，并协助创建 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 对象。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.fileinfo?view=net-6.0">FileInfo</a></td><td>提供用于创建、复制、删除、移动和打开文件的属性和实例方法，并且帮助创建 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 对象。 此类不能被继承。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.fileloadexception?view=net-6.0">FileLoadException</a></td><td>找到托管程序集但不能加载时引发的异常。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filenotfoundexception?view=net-6.0">FileNotFoundException</a></td><td>尝试访问磁盘上不存在的文件失败时引发的异常。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a></td><td>为文件提供 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.stream?view=net-6.0">Stream</a>，既支持同步读写操作，也支持异步读写操作。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestreamoptions?view=net-6.0">FileStreamOptions</a></td><td>定义各种配置 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a>选项。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filesystemaclextensions?view=net-6.0">FileSystemAclExtensions</a></td><td>提供特定于 Windows 的静态扩展方法用来操作文件和目录的访问控制列表 (ACL) 安全属性。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filesystemeventargs?view=net-6.0">FileSystemEventArgs</a></td><td>为目录事件提供数据：<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filesystemwatcher.changed?view=net-6.0">Changed</a>、<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filesystemwatcher.created?view=net-6.0">Created</a>、<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filesystemwatcher.deleted?view=net-6.0">Deleted</a>。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filesysteminfo?view=net-6.0">FileSystemInfo</a></td><td>为 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.fileinfo?view=net-6.0">FileInfo</a> 和 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.directoryinfo?view=net-6.0">DirectoryInfo</a> 对象提供基类。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filesystemwatcher?view=net-6.0">FileSystemWatcher</a></td><td>侦听文件系统更改通知，并在目录或目录中的文件发生更改时引发事件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.internalbufferoverflowexception?view=net-6.0">InternalBufferOverflowException</a></td><td>内部缓冲区溢出时引发的异常。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.invaliddataexception?view=net-6.0">InvalidDataException</a></td><td>数据流格式无效时引发的异常。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.ioexception?view=net-6.0">IOException</a></td><td>发生 I/O 错误时引发的异常。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.memorystream?view=net-6.0">MemoryStream</a></td><td>创建一个流，其后备存储为内存。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.path?view=net-6.0">Path</a></td><td>对包含文件或目录路径信息的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.string?view=net-6.0">String</a> 实例执行操作。 这些操作是以跨平台的方式执行的。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.pathtoolongexception?view=net-6.0">PathTooLongException</a></td><td>当路径名或完全限定的文件名长度超过系统定义的最大长度时引发的异常。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.randomaccess?view=net-6.0">RandomAccess</a></td><td>提供基于偏移的 API，用于以线程安全的方式读取和写入文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.renamedeventargs?view=net-6.0">RenamedEventArgs</a></td><td>为 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filesystemwatcher.renamed?view=net-6.0">Renamed</a> 事件提供数据。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.stream?view=net-6.0">Stream</a></td><td>提供字节序列的一般视图。 这是一个抽象类。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.streamreader?view=net-6.0">StreamReader</a></td><td>实现一个 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.textreader?view=net-6.0">TextReader</a>，使其以一种特定的编码从字节流中读取字符。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.streamwriter?view=net-6.0">StreamWriter</a></td><td>实现一个 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.textwriter?view=net-6.0">TextWriter</a>，使其以一种特定的编码向流中写入字符。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.stringreader?view=net-6.0">StringReader</a></td><td>实现从字符串进行读取的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.textreader?view=net-6.0">TextReader</a>。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.stringwriter?view=net-6.0">StringWriter</a></td><td>实现用于将信息写入字符串的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.textwriter?view=net-6.0">TextWriter</a>。 信息存储在基础 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.text.stringbuilder?view=net-6.0">StringBuilder</a> 中。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.textreader?view=net-6.0">TextReader</a></td><td>表示可读取有序字符系列的读取器。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.textwriter?view=net-6.0">TextWriter</a></td><td>表示可以编写一个有序字符系列的编写器。 此类为抽象类。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.unmanagedmemoryaccessor?view=net-6.0">UnmanagedMemoryAccessor</a></td><td>提供从托管代码随机访问非托管内存块的能力。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.unmanagedmemorystream?view=net-6.0">UnmanagedMemoryStream</a></td><td>提供从托管代码访问非托管内存块的能力。</td></tr></tbody></table><h4 id="1-1-2-FileInfo与File类"><a href="#1-1-2-FileInfo与File类" class="headerlink" title="1.1.2 FileInfo与File类"></a>1.1.2 FileInfo与File类</h4><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file?view=net-6.0">File</a></th><th>提供用于创建、复制、删除、移动和打开单一文件的静态方法，并协助创建 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 对象。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.fileinfo?view=net-6.0">FileInfo</a></td><td>提供用于创建、复制、删除、移动和打开文件的属性和实例方法，并且帮助创建 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 对象。 此类不能被继承。</td></tr></tbody></table><p>示例如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">FileInfo</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"G:/blog/local/1.txt"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//读取一个文件</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"创建时间:"</span><span class="token operator">+</span>file<span class="token punctuation">.</span>CreationTime<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//输出文件从创建时间</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"路径:"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span>DirectoryName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//输出文件创建的路径</span>            <span class="token class-name">StreamWriter</span> sw <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//打开追加流</span>            sw<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//追加数据</span>            sw<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放资源，关闭文件</span>            <span class="token class-name"><span class="token keyword">string</span></span> path <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"G:/blog/local/2.txt"</span></span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//创建一个文件并写入内容</span>            <span class="token keyword">using</span><span class="token punctuation">(</span><span class="token class-name">StreamWriter</span> sw2 <span class="token operator">=</span> file2<span class="token punctuation">.</span><span class="token function">CreateText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                sw2<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sw2<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//OpenText方法创建使用从现有文本文件中读取的 UTF8 编码的 StreamReader。</span>            <span class="token comment">//打开文件并读入内容</span>            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">StreamReader</span> sr2 <span class="token operator">=</span> file2<span class="token punctuation">.</span><span class="token function">OpenText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name"><span class="token keyword">var</span></span> s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">=</span>sr2<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"2.txt文本的内容为："</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">try</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//GetTempFileName方法在磁盘上创建一个唯一命名的零字节临时文件，并返回该文件的完整路径。</span>                <span class="token class-name"><span class="token keyword">string</span></span> path2 <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">GetTempFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">var</span></span> file3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span>path2<span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"file3文件的路径为："</span><span class="token operator">+</span>file3<span class="token punctuation">.</span>DirectoryName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//永久删除文件file3文件</span>                file3<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//CopyTo方法将现有文件复制到新文件，不允许覆盖现有文件。</span>                file2<span class="token punctuation">.</span><span class="token function">CopyTo</span><span class="token punctuation">(</span>path2<span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"file2文件的路径为："</span><span class="token operator">+</span>file2<span class="token punctuation">.</span>DirectoryName<span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">path</span><span class="token punctuation">&#125;</span></span><span class="token string"> was copied to </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">path2</span><span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//删除新创建的文件</span>                file2<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">path2</span><span class="token punctuation">&#125;</span></span><span class="token string"> was successfully deleted."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"The process failed: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">e<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">创建时间:2022&#x2F;9&#x2F;30 14:14:14路径:G:\blog\local2.txt文本的内容为：Hello2.txt文本的内容为：Worldfile3文件的路径为：C:\Users\8y\AppData\Local\Tempfile2文件的路径为：G:\blog\localG:&#x2F;blog&#x2F;local&#x2F;2.txt was copied to C:\Users\8y\AppData\Local\Temp\tmpE3E7.tmp.C:\Users\8y\AppData\Local\Temp\tmpE3E7.tmp was successfully deleted.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>File</code>类是一个静态类，不允许创建实例，示例如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">string</span></span> path <span class="token operator">=</span> <span class="token string">@"G:/blog/local/1.txt"</span><span class="token punctuation">;</span>        <span class="token comment">//判断文件是否存在</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">// Create a file to write to.</span>            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">StreamWriter</span> sw <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">CreateText</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                sw<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sw<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"And"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sw<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Welcome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">StreamWriter</span> sw <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            sw<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sw<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sw<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Open the file to read from.</span>        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">StreamReader</span> sr <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">OpenText</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">string</span></span> s<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> sr<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">HelloAndWelcome666666666<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-1-3-DirectoryInfo与Directory类"><a href="#1-1-3-DirectoryInfo与Directory类" class="headerlink" title="1.1.3 DirectoryInfo与Directory类"></a>1.1.3 DirectoryInfo与Directory类</h4><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.directory?view=net-6.0">Directory</a></th><th>公开用于通过目录和子目录进行创建、移动和枚举的静态方法。 此类不能被继承。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.directoryinfo?view=net-6.0">DirectoryInfo</a></td><td>公开用于创建、移动和枚举目录和子目录的实例方法。 此类不能被继承。</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// Specify the directories you want to manipulate.</span>        <span class="token class-name">DirectoryInfo</span> di <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DirectoryInfo</span><span class="token punctuation">(</span><span class="token string">@"G:\blog\local\MyDir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">// Determine whether the directory exists.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>di<span class="token punctuation">.</span>Exists<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">// Indicate that the directory already exists.</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"That path exists already."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// Try to create the directory.</span>            di<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The directory was created successfully."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Delete the directory.</span>            di<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The directory was deleted successfully."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The process failed: &#123;0&#125;"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">The directory was created successfully.The directory was deleted successfully.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下面的示例演示如何复制目录及其内容。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CopyAll</span><span class="token punctuation">(</span><span class="token class-name">DirectoryInfo</span> source<span class="token punctuation">,</span><span class="token class-name">DirectoryInfo</span> target<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//FullName获取目录或文件的完整目录。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span>FullName<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> target<span class="token punctuation">.</span>FullName<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//判断目标目录是否存在，不存在则创建</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//复制文件</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> source<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//由于存在转义字符所以用@，不用$</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">@"Copying &#123;0&#125;\&#123;1&#125;"</span><span class="token punctuation">,</span>target<span class="token punctuation">.</span>FullName<span class="token punctuation">,</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            item<span class="token punctuation">.</span><span class="token function">CopyTo</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//Path.Combine将多个字符串组合成一个路径。</span>            <span class="token comment">//Path.Combine(target.ToString(),item.Name)为目标目录/文件</span>            <span class="token comment">//true表示允许覆盖现有文件。</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//复制目录</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> source<span class="token punctuation">.</span><span class="token function">GetDirectories</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">DirectoryInfo</span> nextTargetSubDir <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">CreateSubdirectory</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//CreateSubdirectory在指定路径上创建一个或多个子目录。 指定路径可以是相对于 DirectoryInfo 类的此实例的路径。</span>            <span class="token function">CopyAll</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>nextTargetSubDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">string</span></span> sourceDirectory <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"G:/blog/local/test"</span></span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">string</span></span> targetDirectory <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"G:/blog/local/MyDir"</span></span><span class="token punctuation">;</span>        <span class="token class-name">DirectoryInfo</span> disSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DirectoryInfo</span><span class="token punctuation">(</span>sourceDirectory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DirectoryInfo</span> disTarget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DirectoryInfo</span><span class="token punctuation">(</span>targetDirectory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">CopyAll</span><span class="token punctuation">(</span>disSource<span class="token punctuation">,</span> disTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-1-4-Path类"><a href="#1-1-4-Path类" class="headerlink" title="1.1.4 Path类"></a>1.1.4 Path类</h4><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.path?view=net-6.0">Path</a></th><th>对包含文件或目录路径信息的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.string?view=net-6.0">String</a> 实例执行操作。 这些操作是以跨平台的方式执行的。</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">string</span></span> path1 <span class="token operator">=</span> <span class="token string">@"G:/blog/local/1.txt"</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">string</span></span> path2 <span class="token operator">=</span> <span class="token string">@"G:/blog/local/1"</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">string</span></span> path3 <span class="token operator">=</span> <span class="token string">@"temp"</span><span class="token punctuation">;</span>        <span class="token comment">//Path.HasExtension(string)方法确定路径是否包括文件扩展名。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">HasExtension</span><span class="token punctuation">(</span>path1<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125; has an extension."</span><span class="token punctuation">,</span> path1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Path<span class="token punctuation">.</span><span class="token function">HasExtension</span><span class="token punctuation">(</span>path2<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125; has no extension."</span><span class="token punctuation">,</span> path2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//Path.IsPathRooted()返回一个值，指示文件路径是否包含根。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Path<span class="token punctuation">.</span><span class="token function">IsPathRooted</span><span class="token punctuation">(</span>path3<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The string &#123;0&#125; contains no root information."</span><span class="token punctuation">,</span> path3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//Path.GetFullPath返回指定路径字符串的绝对路径。</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The full path of &#123;0&#125; is &#123;1&#125;."</span><span class="token punctuation">,</span> path3<span class="token punctuation">,</span> Path<span class="token punctuation">.</span><span class="token function">GetFullPath</span><span class="token punctuation">(</span>path3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回当前用户的临时文件夹的路径。</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125; is the location for temporary files."</span><span class="token punctuation">,</span> Path<span class="token punctuation">.</span><span class="token function">GetTempPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在磁盘上创建一个唯一命名的零字节临时文件，并返回该文件的完整路径。</span>        <span class="token comment">//Console.WriteLine("&#123;0&#125; is a file available for use.", Path.GetTempFileName());</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//Path.Combine将多个字符串组合成一个路径。</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span><span class="token string">@"G:\blog\local"</span><span class="token punctuation">,</span> <span class="token string">@"1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Path.DirectorySeparatorChar提供平台特定的字符，该字符用于在反映分层文件系统组织的路径字符串中分隔目录级别。</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"平台特定的字符："</span><span class="token operator">+</span>Path<span class="token punctuation">.</span>DirectorySeparatorChar<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Path.AltDirectorySeparatorChar提供平台特定的替换字符，该替换字符用于在反映分层文件系统组织的路径字符串中分隔目录级别。</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"平台特定的替换字符："</span><span class="token operator">+</span>Path<span class="token punctuation">.</span>AltDirectorySeparatorChar<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">G:\blog\local\1.txt平台特定的字符：\平台特定的替换字符：&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-2-文件的操作"><a href="#1-2-文件的操作" class="headerlink" title="1.2 文件的操作"></a>1.2 文件的操作</h3><h4 id="1-2-1-移动、复制、删除文件"><a href="#1-2-1-移动、复制、删除文件" class="headerlink" title="1.2.1 移动、复制、删除文件"></a>1.2.1 移动、复制、删除文件</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">string</span></span> path <span class="token operator">=</span> <span class="token string">@"G:/blog/local/3.txt"</span><span class="token punctuation">;</span>        File<span class="token punctuation">.</span><span class="token function">WriteAllText</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"2333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//WriteAllText:创建一个新文件，向其中写入指定的字符串，然后关闭文件。 如果目标文件已存在，则覆盖该文件。</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"文件创建成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File<span class="token punctuation">.</span><span class="token function">Move</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">@"G:/blog/local/MyDir/3.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Move:将指定文件移到新位置，提供要指定新文件名的选项。</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"文件移动成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span><span class="token string">@"G:/blog/local/MyDir/3.txt"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Copy(String, String)将现有文件复制到新文件。 不允许覆盖同名的文件。</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"文件复制成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token string">@"G:/blog/local/MyDir/3.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"文件已删除！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221011205015345.png" alt="image-20221011205015345"></p><p algin="center">1.2.1-图1 初始情况</p><p>第一次执行代码后</p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221011205219370.png"></p><p algin="center">1.2.1-图2 创建文件</p><p>按回车继续执行程序</p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221011205304048.png"></p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221011205346231.png"></p><p algin="center">1.2.1-图2 移动文件</p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221011205421575.png"></p><p algin="center">1.2.1-图2 复制文件</p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221011205450759.png"></p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221011205500945.png"></p><p algin="center">1.2.1-图2 删除文件</p><h4 id="1-2-2-判断是文件还是文件夹"><a href="#1-2-2-判断是文件还是文件夹" class="headerlink" title="1.2.2 判断是文件还是文件夹"></a>1.2.2 判断是文件还是文件夹</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">IsFile</span><span class="token punctuation">(</span><span class="token string">@"G:/blog/local"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">IsFile</span><span class="token punctuation">(</span><span class="token string">@"G:/blog/local/1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">IsFile</span><span class="token punctuation">(</span><span class="token string">@"G:/blog/local/xxxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">IsFile</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> path<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"是文件夹！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"是文件！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"路径不存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><pre class="line-numbers language-none"><code class="language-none">是文件夹！是文件！路径不存在！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-3-读写文件与数据流"><a href="#1-3-读写文件与数据流" class="headerlink" title="1.3 读写文件与数据流"></a>1.3 读写文件与数据流</h3><h4 id="1-3-1-读文件"><a href="#1-3-1-读文件" class="headerlink" title="1.3.1 读文件"></a>1.3.1 读文件</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">string</span></span> path <span class="token operator">=</span> <span class="token string">@"G:/blog/local/1.txt"</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> b <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllBytes</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//byte无符号的 8 位整数，字节数组存储的是ASCII码</span>        <span class="token comment">//File.ReadAllBytes打开一个二进制文件，将文件的内容读入一个字节数组，然后关闭该文件。</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ReadAllBytes读二进制:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> s <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllLines</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ReadAllLines读所有行:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> s<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">string</span></span> str <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllText</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ReadAllText读所有文本:\n"</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">ReadAllBytes读二进制:HelloAndWelcome666666666ReadAllLines读所有行:HelloAndWelcome666666666ReadAllText读所有行:HelloAndWelcome666666666<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.readallbytes?view=net-6.0#system-io-file-readallbytes(system-string)">ReadAllBytes(String)</a></th><th>打开一个二进制文件，将文件的内容读入一个字节数组，然后关闭该文件。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.readallbytesasync?view=net-6.0#system-io-file-readallbytesasync(system-string-system-threading-cancellationtoken)">ReadAllBytesAsync(String, CancellationToken)</a></td><td>以异步形式打开一个二进制文件，将文件的内容读入一个字节数组，然后关闭该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.readalllines?view=net-6.0#system-io-file-readalllines(system-string)">ReadAllLines(String)</a></td><td>打开一个文本文件，读取文件的所有行，然后关闭该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.readalllines?view=net-6.0#system-io-file-readalllines(system-string-system-text-encoding)">ReadAllLines(String, Encoding)</a></td><td>打开一个文件，使用指定的编码读取文件的所有行，然后关闭该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.readalllinesasync?view=net-6.0#system-io-file-readalllinesasync(system-string-system-threading-cancellationtoken)">ReadAllLinesAsync(String, CancellationToken)</a></td><td>以异步形式打开一个文本文件，读取文件的所有行，然后关闭该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.readalllinesasync?view=net-6.0#system-io-file-readalllinesasync(system-string-system-text-encoding-system-threading-cancellationtoken)">ReadAllLinesAsync(String, Encoding, CancellationToken)</a></td><td>以异步形式打开一个文本文件，使用指定的编码读取文件的所有行，然后关闭该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.readalltext?view=net-6.0#system-io-file-readalltext(system-string)">ReadAllText(String)</a></td><td>打开一个文本文件，读取文件中的所有文本，然后关闭此文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.readalltext?view=net-6.0#system-io-file-readalltext(system-string-system-text-encoding)">ReadAllText(String, Encoding)</a></td><td>打开一个文件，使用指定的编码读取文件中的所有文本，然后关闭此文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.readalltextasync?view=net-6.0#system-io-file-readalltextasync(system-string-system-threading-cancellationtoken)">ReadAllTextAsync(String, CancellationToken)</a></td><td>以异步形式打开一个文本文件，读取文件中的所有文本，然后关闭此文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.readalltextasync?view=net-6.0#system-io-file-readalltextasync(system-string-system-text-encoding-system-threading-cancellationtoken)">ReadAllTextAsync(String, Encoding, CancellationToken)</a></td><td>以异步形式打开一个文本文件，使用指定的编码读取文件的所有文本，然后关闭该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.readlines?view=net-6.0#system-io-file-readlines(system-string)">ReadLines(String)</a></td><td>读取文件的行。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.readlines?view=net-6.0#system-io-file-readlines(system-string-system-text-encoding)">ReadLines(String, Encoding)</a></td><td>读取具有指定编码的文件的行。</td></tr></tbody></table><h4 id="1-3-2-写文件"><a href="#1-3-2-写文件" class="headerlink" title="1.3.2 写文件"></a>1.3.2 写文件</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">string</span></span> path <span class="token operator">=</span> <span class="token string">@"G:/blog/local/1.txt"</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        File<span class="token punctuation">.</span><span class="token function">WriteAllBytes</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"WriteAllBytes写入字节数组成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> str <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"2333"</span><span class="token punctuation">,</span><span class="token string">"666"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        File<span class="token punctuation">.</span><span class="token function">WriteAllLines</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> str<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"WriteAllLines写入字符串集合成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">string</span></span> s <span class="token operator">=</span> <span class="token string">"666666666666"</span><span class="token punctuation">;</span>        File<span class="token punctuation">.</span><span class="token function">WriteAllText</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> s<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入字符串</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"WriteAllText写入指定的字符串成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><p>第一步，写入字节数组</p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221012163308250.png"></p><p>第二步，写入字符串集合</p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221012163331407.png"></p><p>第三步，写入指定的字符串</p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221012163422303.png"></p><table><thead><tr><th>[WriteAllBytes(String, Byte<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.writeallbytes?view=net-6.0#system-io-file-writeallbytes(system-string-system-byte())">])</a></th><th>创建一个新文件，在其中写入指定的字节数组，然后关闭该文件。 如果目标文件已存在，则覆盖该文件。</th></tr></thead><tbody><tr><td>[WriteAllBytesAsync(String, Byte<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.writeallbytesasync?view=net-6.0#system-io-file-writeallbytesasync(system-string-system-byte()-system-threading-cancellationtoken)">], CancellationToken)</a></td><td>以异步形式创建一个新文件，在其中写入指定的字节数组，然后关闭该文件。 如果目标文件已存在，则覆盖该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.writealllines?view=net-6.0#system-io-file-writealllines(system-string-system-collections-generic-ienumerable((system-string)))">WriteAllLines(String, IEnumerable)</a></td><td>创建一个新文件，向其中写入一个字符串集合，然后关闭该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.writealllines?view=net-6.0#system-io-file-writealllines(system-string-system-collections-generic-ienumerable((system-string))-system-text-encoding)">WriteAllLines(String, IEnumerable, Encoding)</a></td><td>使用指定的编码创建一个新文件，向其中写入一个字符串集合，然后关闭该文件。</td></tr><tr><td>[WriteAllLines(String, String<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.writealllines?view=net-6.0#system-io-file-writealllines(system-string-system-string())">])</a></td><td>创建一个新文件，在其中写入指定的字节数组，然后关闭该文件。</td></tr><tr><td>[WriteAllLines(String, String<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.writealllines?view=net-6.0#system-io-file-writealllines(system-string-system-string()-system-text-encoding)">], Encoding)</a></td><td>创建一个新文件，使用指定编码在其中写入指定的字符串数组，然后关闭该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.writealllinesasync?view=net-6.0#system-io-file-writealllinesasync(system-string-system-collections-generic-ienumerable((system-string))-system-threading-cancellationtoken)">WriteAllLinesAsync(String, IEnumerable, CancellationToken)</a></td><td>以异步形式创建一个新文件，在其中写入指定的行，然后关闭该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.writealllinesasync?view=net-6.0#system-io-file-writealllinesasync(system-string-system-collections-generic-ienumerable((system-string))-system-text-encoding-system-threading-cancellationtoken)">WriteAllLinesAsync(String, IEnumerable, Encoding, CancellationToken)</a></td><td>以异步形式创建一个新文件，使用指定编码在其中写入指定的行，然后关闭该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.writealltext?view=net-6.0#system-io-file-writealltext(system-string-system-string)">WriteAllText(String, String)</a></td><td>创建一个新文件，向其中写入指定的字符串，然后关闭文件。 如果目标文件已存在，则覆盖该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.writealltext?view=net-6.0#system-io-file-writealltext(system-string-system-string-system-text-encoding)">WriteAllText(String, String, Encoding)</a></td><td>创建一个新文件，使用指定编码向其中写入指定的字符串，然后关闭文件。 如果目标文件已存在，则覆盖该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.writealltextasync?view=net-6.0#system-io-file-writealltextasync(system-string-system-string-system-threading-cancellationtoken)">WriteAllTextAsync(String, String, CancellationToken)</a></td><td>以异步形式创建一个新文件，在其中写入指定的字符串，然后关闭该文件。 如果目标文件已存在，则覆盖该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.writealltextasync?view=net-6.0#system-io-file-writealltextasync(system-string-system-string-system-text-encoding-system-threading-cancellationtoken)">WriteAllTextAsync(String, String, Encoding, CancellationToken)</a></td><td>以异步形式创建一个新文件，使用指定编码在其中写入指定的字符串，然后关闭该文件。 如果目标文件已存在，则覆盖该文件。</td></tr></tbody></table><h4 id="1-3-3-数据流"><a href="#1-3-3-数据流" class="headerlink" title="1.3.3 数据流"></a>1.3.3 数据流</h4><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.stream?view=net-6.0">Stream</a> 所有流的<strong>抽象基类</strong>。 流是字节序列的抽象，例如文件、输入/输出设备、进程中通信管道或 TCP/IP 套接字。 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.stream?view=net-6.0">Stream</a>类及其派生类提供这些不同类型的输入和输出的一般视图，并将程序员与操作系统和基础设备的具体详细信息隔离开来。</p><p>流涉及三个基本操作：</p><ul><li>可以从流中读取。 读取是将数据从流传输到数据结构（如字节数组）中。</li><li>可以写入流。 写入是指将数据从数据结构传输到流中。</li><li>流可以支持查找。 查找是指查询和修改流中的当前位置。 查找功能取决于流具有的后备存储的类型。 例如，网络流没有当前位置的统一概念，因此通常不支持查找。</li></ul><p>因为流的特性，可能并不是所有的流都支持这三种操作，所以Stream提供了三个属性，以方便确认流是否支持这三种操作：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">public abstract bool CanRead &#123; get; &#125; // 获取指示当前流是否支持读取的值public abstract bool CanWrite &#123; get; &#125; // 获取指示当前流是否支持写入功能的值public abstract bool CanSeek &#123; get; &#125; // 获取指示当前流是否支持查找功能的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上这三个属性均由子类根据自身特性确认是否支持读取、写入、查找，可能三个属性不会都为true，但绝对不会都为false。</p><p><strong>下面是一些常见的流：</strong></p><ul><li><strong>FileStream 用来操作文件的流</strong><ul><li>为文件提供 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.stream?view=net-6.0">Stream</a>，既支持同步读写操作，也支持异步读写操作。</li><li><code>public class FileStream : System.IO.Stream</code></li></ul></li><li><strong>MemoryStream 操作内存的流</strong></li><li><strong>BufferedStream 缓存流，用来增强其他流的操作性能</strong></li><li>NetworkStream 使用网络套接字进行操作的流</li><li>PipeStream 通过匿名和命名管道进行读取和写入</li><li>CryptoStream 用于将数据流链接到加密转换</li></ul><p><strong>数据流类的层次结构：</strong></p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/051413373995825.png"></p><h4 id="1-3-4-使用FileStream读写二进制文件"><a href="#1-3-4-使用FileStream读写二进制文件" class="headerlink" title="1.3.4 使用FileStream读写二进制文件"></a>1.3.4 使用FileStream读写二进制文件</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">string</span></span> path <span class="token operator">=</span> <span class="token string">@"G:/blog/local/3.txt"</span><span class="token punctuation">;</span>        <span class="token comment">////以写文件的方式创建文件</span>        <span class="token class-name">FileStream</span> fileStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>CreateNew<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Write<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用指定的路径、创建模式和读/写权限初始化 FileStream 类的新实例。</span>        <span class="token class-name"><span class="token keyword">string</span></span> str <span class="token operator">=</span> <span class="token string">"8yyy"</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>Unicode<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在派生类中重写时，将一组字符编码为一个字节序列。</span>        fileStream<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>        fileStream<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//释放由 Stream 对象使用的所有资源。</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"写入数据成功！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//以读文件的方式打开文件</span>        fileStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Read<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>bytes<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>        fileStream<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> temp<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"读取数据："</span> <span class="token operator">+</span> Encoding<span class="token punctuation">.</span>Unicode<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileStream<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><p>第一步写入文件</p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221012170028003.png"></p><p>第二步读取文件里的内容</p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221012170049344.png"></p><p><strong>FileStream</strong> 类 构造函数</p><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.-ctor?view=net-6.0#system-io-filestream-ctor(microsoft-win32-safehandles-safefilehandle-system-io-fileaccess)">FileStream(SafeFileHandle, FileAccess)</a></th><th>使用指定的读/写权限为指定的文件句柄初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 类的新实例。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.-ctor?view=net-6.0#system-io-filestream-ctor(microsoft-win32-safehandles-safefilehandle-system-io-fileaccess-system-int32)">FileStream(SafeFileHandle, FileAccess, Int32)</a></td><td>使用指定的读/写权限和缓冲区大小为指定的文件句柄初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 类的新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.-ctor?view=net-6.0#system-io-filestream-ctor(microsoft-win32-safehandles-safefilehandle-system-io-fileaccess-system-int32-system-boolean)">FileStream(SafeFileHandle, FileAccess, Int32, Boolean)</a></td><td>使用指定的读/写权限、缓冲区大小和同步或异步状态为指定的文件句柄初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 类的新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.-ctor?view=net-6.0#system-io-filestream-ctor(system-string-system-io-filemode)">FileStream(String, FileMode)</a></td><td>使用指定的路径和创建模式初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 类的新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.-ctor?view=net-6.0#system-io-filestream-ctor(system-string-system-io-filemode-system-io-fileaccess)">FileStream(String, FileMode, FileAccess)</a></td><td>使用指定的路径、创建模式和读/写权限初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 类的新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.-ctor?view=net-6.0#system-io-filestream-ctor(system-string-system-io-filemode-system-io-fileaccess-system-io-fileshare)">FileStream(String, FileMode, FileAccess, FileShare)</a></td><td>使用指定的路径、创建模式、读/写权限和共享权限创建 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 类的新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.-ctor?view=net-6.0#system-io-filestream-ctor(system-string-system-io-filemode-system-io-fileaccess-system-io-fileshare-system-int32)">FileStream(String, FileMode, FileAccess, FileShare, Int32)</a></td><td>用指定的路径、创建模式、读/写及共享权限和缓冲区大小初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 类的新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.-ctor?view=net-6.0#system-io-filestream-ctor(system-string-system-io-filemode-system-io-fileaccess-system-io-fileshare-system-int32-system-boolean)">FileStream(String, FileMode, FileAccess, FileShare, Int32, Boolean)</a></td><td>使用指定的路径、创建模式、读/写和共享权限、缓冲区大小和同步或异步状态初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 类的新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.-ctor?view=net-6.0#system-io-filestream-ctor(system-string-system-io-filemode-system-io-fileaccess-system-io-fileshare-system-int32-system-io-fileoptions)">FileStream(String, FileMode, FileAccess, FileShare, Int32, FileOptions)</a></td><td>使用指定的路径、创建模式、读/写和共享权限、其他 FileStreams 可以具有的对此文件的访问权限、缓冲区大小和附加文件选项初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 类的新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.-ctor?view=net-6.0#system-io-filestream-ctor(system-string-system-io-filestreamoptions)">FileStream(String, FileStreamOptions)</a></td><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a>使用指定的路径、创建模式、读/写和共享权限、缓冲区大小、附加文件选项、预先分配大小以及其他 FileStreams 对同一文件的访问权限来初始化类的新实例。</td></tr></tbody></table><p>  <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.-ctor?view=net-6.0#system-io-filestream-ctor(system-string-system-io-filemode-system-io-fileaccess)">FileStream(String, FileMode, FileAccess)</a></p><p>使用指定的路径、创建模式和读/写权限初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 类的新实例。</p><ul><li>path <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.string?view=net-6.0">String</a></li></ul><p>当前 <code>FileStream</code> 对象将封装的文件的相对路径或绝对路径。</p><ul><li>mode <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filemode?view=net-6.0">FileMode</a></li></ul><p>用于确定文件的打开或创建方式的枚举值之一。</p><ul><li>access <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.fileaccess?view=net-6.0">FileAccess</a></li></ul><p>枚举值的按位组合，这些枚举值确定 <code>FileStream</code> 对象访问文件的方式。 该常数还可以确定由 <code>FileStream</code> 对象的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.canread?view=net-6.0#system-io-filestream-canread">CanRead</a> 和 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.canwrite?view=net-6.0#system-io-filestream-canwrite">CanWrite</a> 属性返回的值。 如果 <code>path</code> 指定磁盘文件，则 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.canseek?view=net-6.0#system-io-filestream-canseek">CanSeek</a> 为 <code>true</code>。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">fileStream<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>public override void Write (byte[] buffer, int offset, int count);</code></p><ul><li>buffer <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.byte?view=net-6.0">Byte</a>[]</li></ul><p>包含要写入该流的数据的缓冲区。</p><ul><li>offset <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.int32?view=net-6.0">Int32</a></li></ul><p><code>array</code> 中的从零开始的字节偏移量，从此处开始将字节复制到该流。</p><ul><li>count <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.int32?view=net-6.0">Int32</a></li></ul><p>最多写入的字节数。</p><h4 id="1-3-5-StreamWriter与StreamReader"><a href="#1-3-5-StreamWriter与StreamReader" class="headerlink" title="1.3.5 StreamWriter与StreamReader"></a>1.3.5 StreamWriter与StreamReader</h4><p>使用StreamWriter/StreamReader就不用担心文本文件的编码方式，所以它们很适合读写文本文件。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">string</span></span> path <span class="token operator">=</span> <span class="token string">@"G:/blog/local/4.txt"</span><span class="token punctuation">;</span>        <span class="token class-name">FileStream</span> fileStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>CreateNew<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Write<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StreamWriter</span> sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamWriter</span><span class="token punctuation">(</span>fileStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//StreamWriter 除非另外指定，否则默认为使用实例 UTF8Encoding 。</span>        sw<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"8yyy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sw<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"StreamWriter写入数据成功！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Read<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StreamReader</span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>fileStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"读取数据:"</span> <span class="token operator">+</span> sr<span class="token punctuation">.</span><span class="token function">ReadToEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sr<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221012190711396.png"></p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221012190728353.png"></p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.streamwriter?view=net-6.0">StreamWriter</a> 专用于特定编码的字符输出，而从派生的类 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.stream?view=net-6.0">Stream</a> 则设计用于字节输入和输出。</p><p>  <font size="6"> <b>重要</b></font></p><p><strong>此类型实现 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.idisposable?view=net-6.0">IDisposable</a> 接口。 在使用完类型后，您应直接或间接释放类型。 若要直接释放类型，请在 <code>try</code>/<code>catch</code> 块中调用其 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.idisposable.dispose?view=net-6.0">Dispose</a> 方法。 若要间接释放类型，请使用 <code>using</code>（在 C# 中）或 <code>Using</code>（在 Visual Basic 中）等语言构造。 有关详细信息，请参阅 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.idisposable?view=net-6.0">IDisposable</a> 接口主题中的“使用实现 IDisposable 的对象”一节。</strong></p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.streamwriter?view=net-6.0">StreamWriter</a> 除非另外指定，否则<strong>默认为使用实例 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.text.utf8encoding?view=net-6.0">UTF8Encoding</a></strong>  的此实例 <code>UTF8Encoding</code> 在构造时没有字节顺序标记 (BOM) ，因此其 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.text.encoding.getpreamble?view=net-6.0">GetPreamble</a> 方法返回一个空字节数组。 此构造函数的默认 UTF-8 编码对无效字节引发异常。 此行为不同于属性中的编码对象提供的行为 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.text.encoding.utf8?view=net-6.0">Encoding.UTF8</a> 。 若要指定一个 BOM 并确定无效字节是否引发了异常，请使用接受编码对象作为参数的构造函数，例如 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.streamwriter.-ctor?view=net-6.0#system-io-streamwriter-ctor(system-string-system-boolean-system-text-encoding)">StreamWriter(String, Boolean, Encoding)</a> 或 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.streamwriter.-ctor?view=net-6.0">StreamWriter</a> 。</p><p><strong>默认情况下， <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.streamwriter?view=net-6.0">StreamWriter</a> 不是线程安全的。</strong> <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.textwriter.synchronized?view=net-6.0">TextWriter.Synchronized</a>有关线程安全包装，请参阅。</p><p>有关常见 i/o 任务的列表，请参阅 <a href="https://learn.microsoft.com/zh-cn/dotnet/standard/io/common-i-o-tasks">常见 I/o 任务</a>。</p><h4 id="1-4-映射内存的文件"><a href="#1-4-映射内存的文件" class="headerlink" title="1.4.映射内存的文件"></a>1.4.映射内存的文件</h4><h4 id="1-4-1-MemoryMappedFile类-NET4新增"><a href="#1-4-1-MemoryMappedFile类-NET4新增" class="headerlink" title="1.4.1 MemoryMappedFile类(.NET4新增)"></a>1.4.1 MemoryMappedFile类(.NET4新增)</h4><p>表示内存映射文件。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemoryMappedFile</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDisposable</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    应用程序需要频繁地或随机地访问文件时，最好使用MemoryMappedFile类(映射内存的文件)。使用这种方式允许把文件的一部分或者全部加载到一段虚拟内存上，这些文件内容会显示给应用程序，就好像这个文件包含在应用程序的主内存中一样。</p><p><font size="6"> <b>注解</b></font></p><p>内存映射文件将文件的内容映射到应用程序的逻辑地址空间。 内存映射文件使程序员能够处理非常大的文件，因为内存可以同时管理，并且它们允许完全随机访问文件，而无需进行查找。 还可以跨多个进程共享内存映射文件。</p><p>这些 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.memorymappedfiles.memorymappedfile.createfromfile?view=net-6.0">CreateFromFile</a> 方法从指定的路径或 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 磁盘上的现有文件创建内存映射文件。 取消映射文件时，更改会自动传播到磁盘。</p><p>这些 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.memorymappedfiles.memorymappedfile.createnew?view=net-6.0">CreateNew</a> 方法创建未映射到磁盘上现有文件的内存映射文件;并且适用于创建共享内存以用于进程间通信 (IPC) 。</p><p>内存映射文件可以与可选名称相关联，该名称允许与其他进程共享内存映射文件。</p><p>可以创建内存映射文件的多个视图，包括文件部分的视图。 可以将文件的同一部分映射到多个地址以创建并发内存。 若要让两个视图一直处于并发状态，必须通过同一个内存映射文件创建它们。 使用两个视图创建同一文件的两个文件映射不提供并发。</p><p>参考：</p><p>1.<a href="https://zhuanlan.zhihu.com/p/144216991#:~:text=%E5%9C%A8C%23,%E4%B8%AD%EF%BC%8CI%2FO%E4%BD%93%E7%B3%BB%E6%95%B4%E4%BD%93%E5%88%86%E4%B8%BA%E4%B8%89%E4%B8%AA%E9%83%A8%E5%88%86%EF%BC%8C%E5%90%8E%E5%8F%B0%E5%AD%98%E5%82%A8%E6%B5%81%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E6%B5%81%E3%80%81%E6%B5%81%E9%80%82%E9%85%8D%E5%99%A8%EF%BC%8C%E5%85%B7%E4%BD%93%E5%88%92%E5%88%86%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%EF%BC%9A">C# 基础知识系列- 14 IO篇之入门IO</a></p><p>2.<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io?f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(System.IO);k(DevLang-csharp)&rd=true&view=net-6.0">MSDN文档</a></p><p>3.<a href="https://blog.csdn.net/q247538614/article/details/70765973">C#文件IO流详解</a></p>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&lt;&lt;CLR via c#&gt;&gt;第四版笔记</title>
      <link href="/2022/10/08/CLR-via-CSharp/"/>
      <url>/2022/10/08/CLR-via-CSharp/</url>
      
        <content type="html"><![CDATA[<p>COM 是一个独立于平台的分布式面向对象的系统，用于创建可交互的二进制软件组件。 COM 是 Microsoft OLE (复合文档的基础技术，) 和ActiveX (支持 Internet 的组件) 技术。</p><p>顾名思义，<strong>公共语言运行时(Common Language Runtime，CLR)<strong>是一个可由多种编程语言使用的“运行时”。</strong>CLR 的核心功能(比如内存管理、程序集加载、安全性、异常处理和线程同步）</strong>可由面向CLR的所有语言使用。例如，“运行时”使用异常来报告错误；因此，面向它的任何语言都能够通过异常来报告错误。</p><p>面向CLR的语言编译器如下：</p><p>Microsoft创建：C++/CLI、C#、Visual Basic、F#、Iron Python、 Iron Ruby 以及一个中间语言汇编器（IL）。</p><p>公司和大学等机构创建：Ada、APL、Caml、COBOL、Eiffel、Forth、Fortran、Haskell、Lexicon、LISP、LOGO、Lua、Mercury、ML、Mondrian、Oberon、Pascal、Perl、PHP、Prolog、RPG、Scheme、Smaltak、Tcl/Tk。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CLR via c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp In Depth 笔记</title>
      <link href="/2022/10/04/CSharp-In-Depth-%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/04/CSharp-In-Depth-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/CSharp-In-Depth-%E7%AC%94%E8%AE%B0/csharpindepth.jpeg" alt="csharpindepth"></p>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp中常见的数据结构</title>
      <link href="/2022/10/03/CSharp%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2022/10/03/CSharp%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/CSharp%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/DataStructure.jpeg"></p><p>数据结构：<br>                1.Set集合，纯粹的容器，无需存储，就是一个容器<br>                2.线型结构：在存储的时候，一对一存储<br>                3.树形结构：表达式目录树（二叉树）、菜单结构：一对多<br>                4.图形结构：扩扑图、网状结构（地图开发，用的上）</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token number">1</span><span class="token punctuation">.</span>线程结构    <span class="token number">1</span><span class="token punctuation">.</span>线程结构：Array<span class="token operator">/</span>ArrayList<span class="token operator">/</span>List<span class="token operator">/</span>LinkedList<span class="token operator">/</span>Queue<span class="token operator">/</span>Stack<span class="token operator">/</span>HastSet<span class="token operator">/</span>SortedSer<span class="token operator">/</span>Hashtable<span class="token operator">/</span>SortedList                Dictionaty<span class="token operator">/</span>SortedDictionary    <span class="token number">2</span><span class="token punctuation">.</span>数组：内存连续储存，节约空间，可以索引访问，读取快，增删慢        Array<span class="token punctuation">:</span>在内存上连续分配的，而且元素类型是一样的          可以坐标访问，读取快<span class="token operator">--</span><span class="token operator">-</span>增减慢，长度不变     ArrayList<span class="token punctuation">:</span>在以前的开发中使用不较多，不定长度，连续分配的              元素没有限制，任何元素都是当成Object处理，如果是值类型，会有装箱操作              读取快，增删慢     List：是Array，内存上都是连续摆放，不定长度，泛型，保证类型安全，避免装箱拆箱 性能也比ArrayList高          读取快，增删慢   以上特点：读取快，增删相对慢     <span class="token number">3</span><span class="token punctuation">.</span>非连续摆放，存储数据<span class="token operator">+</span>地址，找数据的话就只能顺序查找，读取慢，增删快        <span class="token number">1</span><span class="token punctuation">.</span>LinkedList<span class="token punctuation">:</span>泛型的特点：链表，元素不连续分配，每个元素都有记录前后节点，节点值可以重复                     能不能以下标访问：不能没找元素只能遍历，查找不方便                     增删 就比较方便            <span class="token class-name">LinkedList<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> node123 <span class="token operator">=</span> linkedList<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>得到节点                <span class="token number">2</span><span class="token punctuation">.</span>Queue 就是链表  先进先出 放任务延迟执行，A不断写入日志任务   B不断获取任务去执行            <span class="token class-name">Queue</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            queue<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加数据</span>            queue<span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取并移除数据</span>         <span class="token number">3</span><span class="token punctuation">.</span>Stack 就是链表  先进先出  解析表达式目录树，先产出的数据后使用，                操作记录为命令，撤销的时候是倒序                 <span class="token class-name">Stack</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加数据</span>                stack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取并移除数据</span>   <span class="token number">2</span><span class="token punctuation">.</span>Set纯粹的集合，容器，东西丢进去，唯一性，无序的        <span class="token number">1</span><span class="token punctuation">.</span>集合：hash分布，元素间没有关系，动态增加容量，去重                统计用户IP：IP投票  交叉并补<span class="token operator">--</span><span class="token operator">-</span>二次好友<span class="token operator">/</span>间接关注<span class="token operator">/</span>粉丝合集        <span class="token number">2</span><span class="token punctuation">.</span> 排序的集合：去重 而且排序                统计排名 <span class="token operator">--</span> 没统计一个就丢进集合里                IComparer<span class="token operator">&lt;</span>T<span class="token operator">></span> comparer 自定义对象的排序，就用这个指定  <span class="token number">3</span><span class="token punctuation">.</span>Hashtable  Key<span class="token operator">-</span><span class="token keyword">value</span>  体积可以动态增加  拿着Key计算一个地址，然后放入Key<span class="token operator">-</span><span class="token keyword">value</span>                <span class="token keyword">object</span> <span class="token operator">-</span> 装箱拆箱   如果不同的key得到相同的地址，第二个在前面地址上<span class="token operator">+</span><span class="token number">1</span> 浪费了空间，Hashtable是基于数组实现                  <span class="token number">4</span><span class="token punctuation">.</span>线程安全        ConcurrentQueue  线程安全版本的Queue        ConcurrentStack 线程安全版本的Stack        ConcurrentBag   线程安全的对象集合        ConcurrentDictionary    线程安全的Dictionary        BlockingCollection<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Charp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOTNETCORE</title>
      <link href="/2022/09/19/DOTNETCore/"/>
      <url>/2022/09/19/DOTNETCore/</url>
      
        <content type="html"><![CDATA[<h2 id="Part1-3-NET-Standard"><a href="#Part1-3-NET-Standard" class="headerlink" title="Part1-3 .NET Standard"></a>Part1-3 .NET Standard</h2><p>Net Standard只是一个标准，不是实现</p><p><img src="/images/DOTNETCore/image-20220929181328537.png"></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">FileStream</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">.</span>Location<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>FileStream(文件流) 这个类主要用于<a href="https://so.csdn.net/so/search?q=%E4%BA%8C%E8%BF%9B%E5%88%B6&spm=1001.2101.3001.7020">二进制</a>文件中读写，也可以使用它读写任何文件。</p></li><li><p>Assembly是Type的一个属性</p><ul><li>表示一个程序集，它是一个可重用、无版本冲突并且可自我描述的公共语言运行时应用程序构建基块。</li></ul></li><li><p>同样打印FileStream的位置，在.NET Framework和.Net Core里的结果不同</p></li><li><p>ILSpy 反编译器</p><ul><li>可以使用ILSpy反编译器验证.NET Standard只是标准，不是实现</li><li><img src="/images/DOTNETCore/image-20220930095806352.png"></li></ul></li><li><p>.NET Standard只是规范，一个.NET Standard类库可以被支持其版本的 .NET Framework、.NET Core、XAMARIN等引用。而.NET Core类库、.NET Framework类库则不可以。如果编写一个公用的类库，尽量选择.NET Standard，并且尽量用低版本</p><ul><li>.NET Standard也存在版本，与.NET Framework、.NET Core版本存在对应图</li><li><img src="/images/DOTNETCore/image-20220930100710855.png"></li></ul></li></ul><h2 id="Part1-6-NET项目结构及程序发布"><a href="#Part1-6-NET项目结构及程序发布" class="headerlink" title="Part1-6 .NET项目结构及程序发布"></a>Part1-6 .NET项目结构及程序发布</h2><p>WSL:Windows subsystem for linux</p><p>Sandbox</p><p>发布配置文件设置建议独立部署</p><h2 id="Part2-1-NuGet"><a href="#Part2-1-NuGet" class="headerlink" title="Part2-1 NuGet"></a>Part2-1 NuGet</h2><p>趋势</p><p>Linux：apt 、 yum</p><p>Javascript：npm</p><p>Java：Maven、Gradle</p><p>Python：pip</p><p>.NET ：<a href="https://www.nuget.org/">NuGet</a>（niuget） <a href="https://www.nuget.org/">https://www.nuget.org</a></p><ul><li>查看一个包先看<code>Dependencies</code>支持的版本</li><li>不全是开源的，有一部分是商用的<ul><li>看官网是否收费，比如说Purchase，word file</li><li>一般github的就是开源的</li></ul></li><li><code>This package has no dependencies</code>一般是属于比较老的包，只支持.NET Framework</li></ul><p>使用程序包管理控制台下载包</p><ul><li><p>工具 –&gt; NuGet 包管理器 –&gt; 程序包管理器控制台</p></li><li><p><img src="/images/DOTNETCore/image-20220930112223131.png"></p></li><li><p>在NuGet官网随便找一个包下载，如<code>MySql.Data</code></p></li><li><p><img src="/images/DOTNETCore/image-20220930112434163.png"></p></li><li><p>将<code>Package Manager</code>下面的代码复制到VS的<code>程序包管理控制台</code>下</p></li><li><p><code>NuGet\Install-Package MySql.Data -Version 8.0.30</code></p><ul><li>不带<code>-Version</code>下载最新稳定版</li></ul></li><li><p><img src="/images/DOTNETCore/image-20220930112605725.png"></p></li><li><p>你还可以选择<code>默认项目</code>选择下载到哪个项目里</p></li><li><p>安装完之后你就可以到<code>public</code>解决方案下的<code>依赖项</code>的<code>包</code>里看到<code>MySql.Data</code></p></li><li><p><img src="/images/DOTNETCore/image-20220930112926826.png"></p></li><li><p>之后是卸载操作，可以在<code>程序包管理控制台</code>直接输入如下语句卸载</p><pre class="line-numbers language-none"><code class="language-none">UnInstall-Package MySql.Data(这里的名字就是下图中&lt;ItemGroup&gt;里PackageReference中的Include)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><img src="/images/DOTNETCore/image-20220930113055901.png"></p></li><li><p>或者在项目文件里直接移除如下代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;ItemGroup&gt;  &lt;PackageReference Include&#x3D;&quot;MySql.Data&quot; Version&#x3D;&quot;8.0.30&quot; &#x2F;&gt;&lt;&#x2F;ItemGroup&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Part2-4-异步编程"><a href="#Part2-4-异步编程" class="headerlink" title="Part2-4 异步编程"></a>Part2-4 异步编程</h2><h3 id="Part2-4-3-异步编程"><a href="#Part2-4-3-异步编程" class="headerlink" title="Part2-4-3 异步编程"></a>Part2-4-3 异步编程</h3><ul><li><p>小例子：点餐</p><ul><li>同步点餐：服务员记录点菜</li><li>异步点餐：菜单</li><li>异步点餐不一定能提升单个客户点餐速度</li></ul></li><li><p>传统多线程开发太麻烦。</p><p>C#关键字：async（esinke）、await。</p><p>async、await不等于“多线程”</p></li></ul><h3 id="Part2-4-4-async、await基本使用"><a href="#Part2-4-4-async、await基本使用" class="headerlink" title="Part2-4-4 async、await基本使用"></a>Part2-4-4 async、await基本使用</h3><ul><li><p>“异步方法”：用async关键字修饰的方法</p><ul><li><ol><li>异步方法的返回值一般是Task<T>，T是真正的返回值类型，Task<int>。惯例：异步方法名字以Async结尾。</int></T></li></ol></li><li><ol start="2"><li>即使方法没有返回值，也最好把返回值声明为非泛型的Task。</li></ol></li><li><p>3)调用异步方法时，一般在方法前加上await，这样拿到的返回值就是泛型指定的T类型；</p></li><li><p>4)异步方法的“传染性”：一个方法中如果有await调用，则这个方法也必须修饰为async</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//没有返回值的方法</span><span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token class-name"><span class="token keyword">string</span></span> fileName <span class="token operator">=</span> <span class="token string">"d:/1.txt"</span><span class="token punctuation">;</span>   File<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>   File<span class="token punctuation">.</span><span class="token function">WriteAllTextAsync</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"hello async"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name"><span class="token keyword">string</span></span> s <span class="token operator">=</span> <span class="token keyword">await</span> File<span class="token punctuation">.</span><span class="token function">ReadAllTextAsync</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>   Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>举例同步方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">string</span></span> fileName <span class="token operator">=</span> <span class="token string">@"G:\8yyy's blog\local\1.txt"</span><span class="token punctuation">;</span>            File<span class="token punctuation">.</span><span class="token function">WriteAllText</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"hello,world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> s <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllText</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>File.WriteAllText 方法</strong><ul><li>创建一个新文件，向其中写入指定的字符串，然后关闭文件。 如果目标文件已存在，则覆盖该文件。</li><li><code>public static void WriteAllText (string path, string? contents);</code><ul><li><code>path</code> 要写入的文件</li><li><code>contents</code> 要写入的字符串</li></ul></li></ul></li><li><strong>File.ReadAllText 方法</strong><ul><li>打开一个文本文件，读取文件中的所有文本，然后关闭此文件。</li><li><code>public static string ReadAllText(string path)</code><ul><li><code>path</code> 要写入的文件</li></ul></li></ul></li></ul></li><li><p>使用异步方法</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">string</span></span> fileName <span class="token operator">=</span> <span class="token string">@"G:\8yyy's blog\local\1.txt"</span><span class="token punctuation">;</span>            <span class="token keyword">await</span> File<span class="token punctuation">.</span><span class="token function">WriteAllTextAsync</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"hello,aysnc!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> s <span class="token operator">=</span> <span class="token keyword">await</span> File<span class="token punctuation">.</span><span class="token function">ReadAllTextAsync</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>File.WriteAllTextAsync 方法</strong></p><ul><li>以异步形式创建一个新文件，在其中写入指定的字符串，然后关闭该文件。 如果目标文件已存在，则覆盖该文件。</li><li>本质是独占式写入</li><li><code>public static Task WriteAllTextAsync(string path, string contents, CancellationToken cancellationToken = default);</code></li><li>调用异步方法时，一般在方法前加上await</li><li>这里即使不加上await也不会报错，原因是加入的字符产太短了，如果加上很长的字符串，就会产生异常<code>System.IO.IOException</code></li></ul></li><li><p><strong>File.ReadAllTextAsync 方法</strong></p><ul><li>以异步形式打开一个文本文件，读取文件中的所有文本，然后关闭此文件。</li></ul></li></ul></li></ul></li></ul><h3 id="Part2-4-5-编写异步方法"><a href="#Part2-4-5-编写异步方法" class="headerlink" title="Part2-4-5 编写异步方法"></a>Part2-4-5 编写异步方法</h3><ul><li><p>示例1，不带返回值的异步方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Http</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">AwaitAsync</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">await</span> <span class="token function">DownloadHtmlAsync</span><span class="token punctuation">(</span><span class="token string">"https://www.youzack.com"</span><span class="token punctuation">,</span> <span class="token string">@"G:\8yyy's blog\local\1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">DownloadHtmlAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> fileName<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//这是一种比较粗鲁的写法</span>            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">HttpClient</span> httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name"><span class="token keyword">string</span></span> html <span class="token operator">=</span> <span class="token keyword">await</span> httpClient<span class="token punctuation">.</span><span class="token function">GetStringAsync</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">await</span> File<span class="token punctuation">.</span><span class="token function">WriteAllTextAsync</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行完using里面的代码后，将new的对象释放</li><li><strong>HttpClient 类</strong><ul><li>提供一个类，用于发送 HTTP 请求并从 URI 标识的资源接收 HTTP 响应。</li></ul></li><li><strong>HttpClient.GetStringAsync 方法</strong><ul><li>将 GET 请求发送到指定 URI 并在异步操作中以字符串的形式返回响应正文。</li></ul></li></ul></li><li><p>改为带返回值的异步方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> length <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">DownloadHtmlAsync</span><span class="token punctuation">(</span><span class="token string">"https://www.youzack.com"</span><span class="token punctuation">,</span> <span class="token string">@"G:\8yyy's blog\local\1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token function">DownloadHtmlAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> fileName<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//这是一种比较粗鲁的写法</span>            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">HttpClient</span> httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name"><span class="token keyword">string</span></span> html <span class="token operator">=</span> <span class="token keyword">await</span> httpClient<span class="token punctuation">.</span><span class="token function">GetStringAsync</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">await</span> File<span class="token punctuation">.</span><span class="token function">WriteAllTextAsync</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> html<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果同样的功能，既有同步方法，又有异步方法，那么首先使用异步方法。.NET5中，很多框架中的方法也都支持异步：Main、WinForm事件处理函数。</p><ul><li>WinForm中不能使用Task，只能使用void处理事件</li></ul></li><li><p>对于不支持的异步方法怎么办？Wait()（无返回值）；Result（有返回值）。风险：死锁。尽量不用。</p></li></ul><h2 id="Part2-4-6-async、await原理揭秘"><a href="#Part2-4-6-async、await原理揭秘" class="headerlink" title="Part2-4-6 async、await原理揭秘"></a>Part2-4-6 async、await原理揭秘</h2><ul><li><p>反编译使用dll，跨平台</p></li><li><p>用<code>ILSpy</code>反编译<code>dll</code>(.exe只是windows下的启动器)成C# 4.0版本，就能看到容易理解的底层IL代码。</p><ul><li>什么是IL代码？ <ul><li>IL,也称为CIL,MSI,是.NET框架中中间语言(Intermediate Language)的缩写。</li></ul></li></ul></li><li><p><code>await</code>、<code>async</code>是“语法糖”，最终编译成“状态机调用”。</p></li><li><p>总结：<code>async</code>的方法会被C#编译器编译成一个类，会主要根据<code>await</code>调用进行切分为多个状态，对<code>async</code>方法的调用会被拆分为对<code>MoveNext</code>的调用。</p></li><li><p>用<code>await</code>看似是“等待”，经过编译后，其实没有“wait”。</p></li><li><p>为什么要把一个<code>async</code>方法拆分为多个状态然后分为多次调用？</p><p>“异步的可以避免线程等待耗时操作” 但是<code>await</code>还是等待呀？</p><ul><li><p><code>await</code>调用的等待期间，<code>.NET</code>会把当前的线程返回给线程池，等异步方法调用执行完毕后，框架会从线程池再取出来一个线程执行后续的代码。</p></li><li><p><code>Thread.CurrentThread.ManagedThreadId</code>获得当前线程Id。</p><p><strong>验证：在耗时异步(写入大字符串)操作前后分别打印线程Id</strong></p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"xxxxxxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">await</span> File<span class="token punctuation">.</span><span class="token function">WriteAllTextAsync</span><span class="token punctuation">(</span><span class="token string">@"G:\8yyy's blog\local\1.txt"</span><span class="token punctuation">,</span> stringBuilder<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>线程的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread.managedthreadid?view=net-6.0">ManagedThreadId</a> 属性值用于唯一标识其进程中的线程。</p></li><li><p><strong>StringBuilder 类</strong></p><ul><li>表示可变字符字符串。 此类不能被继承。</li><li>尽管 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.text.stringbuilder?view=net-6.0">StringBuilder</a> <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.string?view=net-6.0">String</a> 和 都表示字符序列，但实现方式不同。 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.string?view=net-6.0">String</a> 是一种不可变类型。 也就是说，似乎要修改 对象的每个 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.string?view=net-6.0">String</a> 操作实际上都创建了一个新字符串。</li><li><strong>StringBuilder.Append 方法</strong><ul><li>向此实例追加指定对象的字符串表示形式。</li></ul></li></ul></li><li><p>输出结果不同，当然也有概率还是相同的。所以异步调用时分配给你的<strong>线程可能是不同的</strong></p><ul><li><strong>细节：如果写入内容少，会发现线程Id不变。</strong><ul><li><strong>优化：到要等待的时候，如果发现已经执行结束了，那就没必要再切换线程了，剩下的代码就继续在之前的线程上继续执行了。</strong></li></ul></li><li>取决于你电脑的性能</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> .Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .Net Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刘铁猛《C#语言入门详解》笔记</title>
      <link href="/2022/09/02/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/09/02/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="0-导读"><a href="#0-导读" class="headerlink" title="0. 导读"></a>0. 导读</h2><p>根据<a href="https://www.bilibili.com/video/BV13b411b7Ht?spm_id_from=333.788.top_right_bar_window_custom_collection.content.click&vd_source=794a7fc718885ad84490c05351dcf216">B站视频</a>刘铁猛《C#语言入门详解》做的笔记。</p><h3 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h3><ul><li>完整讲述C#语言在实际软件开发中的应用</li><li>采用知识讲述加实际程序的形式</li></ul><h3 id="C-语言简介"><a href="#C-语言简介" class="headerlink" title="C#语言简介"></a>C#语言简介</h3><p><strong>怎样编写程序和程序语言的选择</strong></p><p>​    编辑 -&gt; 编译 -&gt; 调试 -&gt; 发布</p><p><strong>编程的学习路径</strong></p><ul><li>纵向  ：语言 -&gt; 类库 -&gt; 框架</li><li>横向  ：命令行程序，桌面程序，设备（平板/手机）程序，Web（网站/服务）程序，游戏…</li></ul><p><strong>学习资料</strong></p><ul><li><a href="https://docs.microsoft.com/zh-cn/visualstudio/get-started/csharp/?view=vs-2022">Visual Studio 教程 | C#</a></li><li><a href="https://pan.baidu.com/s/1H4MFrhR3LOu2a3HaAq2qag">C# Language Specification</a></li><li>离线MSDN文档</li></ul><hr><h2 id="1-第一个程序：Hello-World"><a href="#1-第一个程序：Hello-World" class="headerlink" title="1. 第一个程序：Hello,World!"></a>1. 第一个程序：Hello,World!</h2><h3 id="1-1-Solutoin与Project"><a href="#1-1-Solutoin与Project" class="headerlink" title="1.1 Solutoin与Project"></a>1.1 Solutoin与Project</h3><ul><li>Solution是针对客户需求的总的<strong>解决方案</strong>。举例：汽车经销商需要一套销售软件</li><li>Project(<strong>项目</strong>)解决具体的某个问题</li></ul><h3 id="1-2-在Console输出Hello-World"><a href="#1-2-在Console输出Hello-World" class="headerlink" title="1.2 在Console输出Hello,World!"></a>1.2 在Console输出Hello,World!</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello,World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-在Windows-Forms输出Hello-World"><a href="#1-3-在Windows-Forms输出Hello-World" class="headerlink" title="1.3 在Windows Forms输出Hello,World!"></a>1.3 在Windows Forms输出Hello,World!</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>ComponentModel</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Data</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Form1</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token function">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">buttonShowHello_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            textBoxShowHello<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"Hello,World!"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-在WPF输出Hello-World"><a href="#1-4-在WPF输出Hello-World" class="headerlink" title="1.4 在WPF输出Hello,World!"></a>1.4 在WPF输出Hello,World!</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Controls</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Data</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Documents</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Input</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Media</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Media<span class="token punctuation">.</span>Imaging</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Navigation</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Shapes</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">test</span><span class="token punctuation">&#123;</span>    <span class="token comment">/// &lt;summary></span>    <span class="token comment">/// Interaction logic for MainWindow.xaml</span>    <span class="token comment">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">MainWindow</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Window</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>               <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ButtonShowHello_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            textBoxShowHello<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"Hello,World!"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-在ASP-NET-Web-Forms输出Hello-World"><a href="#1-5-在ASP-NET-Web-Forms输出Hello-World" class="headerlink" title="1.5 在ASP.NET Web Forms输出Hello,World!"></a>1.5 在ASP.NET Web Forms输出Hello,World!</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token operator">&lt;</span><span class="token operator">%</span>@ <span class="token class-name">Page</span> Language<span class="token operator">=</span><span class="token string">"C#"</span> AutoEventWireup<span class="token operator">=</span><span class="token string">"true"</span> CodeBehind<span class="token operator">=</span><span class="token string">"Default.aspx.cs"</span> Inherits<span class="token operator">=</span><span class="token string">"WebApplication1.Default"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span><span class="token class-name">html</span> xmlns<span class="token operator">=</span><span class="token string">"http://www.w3.org/1999/xhtml"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token class-name">head</span> runat<span class="token operator">=</span><span class="token string">"server"</span><span class="token operator">></span><span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"Content-Type"</span> content<span class="token operator">=</span><span class="token string">"text/html; charset=utf-8"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>   <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span>World<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-6-在ASP-NET-MVC输出Hello-World"><a href="#1-6-在ASP-NET-MVC输出Hello-World" class="headerlink" title="1.6 在ASP.NET MVC输出Hello,World!"></a>1.6 在ASP.NET MVC输出Hello,World!</h3><p>一种架构，取代了Web Forms.</p><p>将.NET Framework框加版本,设置为4.5或者4.5以上版本</p><p>views -&gt; Home -&gt; Index.cshtml  <code>&lt;h2&gt;Hello,World!&lt;/h2&gt;</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">@<span class="token punctuation">&#123;</span>    ViewBag<span class="token punctuation">.</span>Title <span class="token operator">=</span> <span class="token string">"Home Page"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>h2<span class="token operator">></span>Hello<span class="token punctuation">,</span>World<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"jumbotron"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>ASP<span class="token punctuation">.</span>NET<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"lead"</span><span class="token operator">></span>ASP<span class="token punctuation">.</span>NET <span class="token keyword">is</span> <span class="token class-name">a</span> free web framework <span class="token keyword">for</span> building great Web sites <span class="token keyword">and</span> Web applications <span class="token keyword">using</span> HTML<span class="token punctuation">,</span> CSS <span class="token keyword">and</span> JavaScript<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token class-name">a</span> href<span class="token operator">=</span><span class="token string">"https://asp.net"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-primary btn-lg"</span><span class="token operator">></span>Learn more <span class="token operator">&amp;</span>raquo<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"row"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"col-md-4"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span>Getting started<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>            ASP<span class="token punctuation">.</span>NET MVC gives you <span class="token class-name">a</span> powerful<span class="token punctuation">,</span> patterns<span class="token operator">-</span>based way to build <span class="token keyword">dynamic</span> websites that            enables a clean separation of concerns <span class="token keyword">and</span> gives you full control over markup            <span class="token keyword">for</span> enjoyable<span class="token punctuation">,</span> agile development<span class="token punctuation">.</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-default"</span> href<span class="token operator">=</span><span class="token string">"https://go.microsoft.com/fwlink/?LinkId=301865"</span><span class="token operator">></span>Learn more <span class="token operator">&amp;</span>raquo<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"col-md-4"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span>Get more libraries<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>NuGet <span class="token keyword">is</span> <span class="token class-name">a</span> free Visual Studio extension that makes it easy <span class="token class-name">to</span> <span class="token keyword">add</span><span class="token punctuation">,</span> <span class="token keyword">remove</span><span class="token punctuation">,</span> <span class="token keyword">and</span> update libraries <span class="token keyword">and</span> tools <span class="token keyword">in</span> Visual Studio projects<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-default"</span> href<span class="token operator">=</span><span class="token string">"https://go.microsoft.com/fwlink/?LinkId=301866"</span><span class="token operator">></span>Learn more <span class="token operator">&amp;</span>raquo<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"col-md-4"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span>Web Hosting<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>You can easily find a web hosting company that offers the right mix of features <span class="token keyword">and</span> price <span class="token keyword">for</span> your applications<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-default"</span> href<span class="token operator">=</span><span class="token string">"https://go.microsoft.com/fwlink/?LinkId=301867"</span><span class="token operator">></span>Learn more <span class="token operator">&amp;</span>raquo<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-7-在Azure-Cloud-Service输出Hello-World"><a href="#1-7-在Azure-Cloud-Service输出Hello-World" class="headerlink" title="1.7 在Azure Cloud Service输出Hello,World!"></a>1.7 在Azure Cloud Service输出Hello,World!</h3><ul><li>将ASP.NET Web角色添加到云服务器解决方案</li><li>MVC</li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906103230967.png"></li></ul><p>和6）一样views -&gt; Home -&gt; Index.cshtml  <code>&lt;h2&gt;Hello,World!&lt;/h2&gt;</code></p><p>老版本的VS需要启动云平台模拟器运行程序</p><h3 id="1-8-在Workflow输出Hello-World"><a href="#1-8-在Workflow输出Hello-World" class="headerlink" title="1.8 在Workflow输出Hello,World!"></a>1.8 在Workflow输出Hello,World!</h3><p>搜索工作流</p><p>在工具箱搜索Writeline，然后在Writeline里输入<code>“Hello,World!”</code></p><h3 id="1-9-在WCF输出Hello-World"><a href="#1-9-在WCF输出Hello-World" class="headerlink" title="1.9 在WCF输出Hello,World!"></a>1.9 在WCF输出Hello,World!</h3><p>第一步，在App_Code -&gt; Iservice.cs里，</p><p>大概在20行左右，添加如下代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">OperationContract</span></span><span class="token punctuation">]</span><span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">sayhello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// TODO: 在此添加您的服务操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二步，在App_Code -&gt; Service.cs里，</p><p>在public class Service : IService中的IService，Ctrl+.，添加接口</p><p>然后在底部会自动添加如下代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">sayhello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将该代码改为如下代码即可</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">sayhello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"Hello,World!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2-初识类与空间名称"><a href="#2-初识类与空间名称" class="headerlink" title="2. 初识类与空间名称"></a>2. 初识类与空间名称</h2><h3 id="2-1-剖析Hello，World程序"><a href="#2-1-剖析Hello，World程序" class="headerlink" title="2.1 剖析Hello，World程序"></a>2.1 剖析Hello，World程序</h3><ul><li><p>初识类（class）与空间名称（namespace）</p><ul><li>类为<img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906202819812.png">的样子，空间名称为{ }</li></ul></li><li><p>类是构成程序的主体</p></li><li><p>名称空间以树型结构组织类（和其他类型）</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello,World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>程序中有2个类，一个是Program(自己写的)，一个是Console(引用的类)</p></li></ul><h3 id="2-2-类库的引用"><a href="#2-2-类库的引用" class="headerlink" title="2.2 类库的引用"></a>2.2 类库的引用</h3><p>Ctrl+Alt+J 对象浏览器，VS会自动根据加载的不同的模板，引用不同的类库</p><h4 id="2-2-1-类库引用是使用名称空间的物理基础"><a href="#2-2-1-类库引用是使用名称空间的物理基础" class="headerlink" title="2.2.1 类库引用是使用名称空间的物理基础"></a>2.2.1 类库引用是使用名称空间的物理基础</h4><ul><li>不同技术类型的项目会默认引用不同的类库</li></ul><h4 id="2-2-2-DLL应用（黑盒引用，无源代码）"><a href="#2-2-2-DLL应用（黑盒引用，无源代码）" class="headerlink" title="2.2.2 DLL应用（黑盒引用，无源代码）"></a>2.2.2 DLL应用（黑盒引用，无源代码）</h4><p>右键依赖项 -&gt; 添加项目引用 -&gt;浏览</p><ul><li>黑盒引用的缺点是如果代码有错，你就只能把错误告诉编写类库的人，让他改之后编译再重新把DLL发给你</li><li>意味存在着很强的依赖关系</li><li>NuGet简介<ul><li>Nuget是一个VS的扩展插件。我们在使用VS开发时，Nuget能把在项目中添加、移除和更新引用的工作变得更加快捷方便。</li><li>右键引用 -&gt; 管理NuGet程序包</li></ul></li></ul><h4 id="2-2-3项目引用（白盒引用，有源代码）"><a href="#2-2-3项目引用（白盒引用，有源代码）" class="headerlink" title="2.2.3项目引用（白盒引用，有源代码）"></a>2.2.3项目引用（白盒引用，有源代码）</h4><ul><li><p>一个项目(Project)可以隶属于不同的解决方案(Solution)</p></li><li><p>现在解决方案test下有一个项目test，里面有一个类Calculator，类里的主要代码如下：</p></li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Tools</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a <span class="token operator">-</span> b <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>然后打开解决方案Sample，里面有个项目sample，右键解决方案sample -&gt; 添加 -&gt; 添加先有项，找到上面的test.csproj</p><p>之后如下图所示</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906202018586.png"></p></li><li><p>这样一个解决方案就有2个项目了，一个叫sample，一个叫test，之后右键在项目sample右键引用，发现test已经在那了</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906202251533.png"></p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906202330829.png"></p></li></ul><ul><li><p>可以看到test在引用里了(底部)</p></li><li><p><code>我这里因为一个项目指向“netcoreapp3.1”，一个项目指向“.NETFramework,Version=v4.7.2”，所以不能引用            </code></p></li><li><p>我这里重新创建了一个项目，名为sample2</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906203222664.png"></p></li><li><p>将sample2的Program.cs的代码改为上述test代码，然后重新打开sample1</p></li><li><p>我发现这样虽然能正常引用类库了，但是因为是.net framework框架，导致不能正常显示console的结果</p></li><li><p>使用.net core console</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906204737434.png"></p></li><li><p>后来我发现都不行，因为我做了一个很大的错误，我都是新建了两个.net framework或者是两个.net core console，其中一个得是类库(classlibrary),如下</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906210110681.png"></p></li><li><p>正常运行了</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906210510077.png"></p></li><li><p>发现结果是错的，这时我们需要在如下代码进行断点调试</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906210557240.png"></p></li><li><p>按<code>F5</code>开始调试</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906210733333.png"></p></li><li><p>result结果为0</p></li><li><p>之后按<code>F11</code>逐语句调试</p></li><li><p>然后执行指针就进入到了类库里的Sub函数，然后就可以发现这个简单的错误了</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906210838383.png"></p></li></ul><p><strong>尝试直接在解决方案里写一个类库，然后引用</strong></p><ul><li><p>右键解决方案，添加一个新项目</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906211748154.png"></p></li><li><p>类库(classlibrary)编译出来的结果就是一个DLL文件</p></li><li><p>修改如下，你会发现类库默认的类就是public类型的</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906212122712.png"></p></li><li><p>编写代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Tools</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a <span class="token operator">-</span> b <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Mul</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Div</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">double</span><span class="token punctuation">.</span>PositiveInfinity<span class="token punctuation">;</span> <span class="token comment">//无穷大</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>之后在项目sample添加项目引用，然后在Program.cs写点代码调试，如下所示：</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906212511088.png"></p></li></ul><h4 id="2-2-4依赖关系"><a href="#2-2-4依赖关系" class="headerlink" title="2.2.4依赖关系"></a>2.2.4依赖关系</h4><ul><li><p>类（或对象）之间的耦合关系</p></li><li><p>优秀的程序追求<code>高内聚，低耦合</code></p><ul><li>高内聚：一些数据、功能，该属于哪个类就该放到哪个类里面</li><li>低耦合：类和类之间的依赖关系尽可能低</li><li>教学程序往往会违反这个原则</li></ul></li><li><p>UML（通用建模语言）类图</p><ul><li>用来展示类和类之间的关系</li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906213301526.png"></li><li>就比如<code>hello,world</code>这个来说，我们自己写的类叫<code>Program类</code>，里面有一个方法叫<code>Main()方法</code>，然后我们在<code>Main()方法</code>里调用了<code>Console类</code>里面的<code>WriteLine()方法</code></li></ul></li></ul><hr><h2 id="3-类、对象、类成员简介"><a href="#3-类、对象、类成员简介" class="headerlink" title="3. 类、对象、类成员简介"></a>3. 类、对象、类成员简介</h2><p><font size="5">类（class）是现实世界事物的模型</font></p><ul><li>类是对现实世界事物进行抽象所得到的结果<ul><li>事物包括”物质”(实体)与”运动”(逻辑)</li><li>建模是一个去伪存真，由表及里的过程</li></ul></li></ul><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220907093936767.png"></p><ul><li>飞行员依赖战斗机</li></ul><h3 id="3-1-类与对象的关系"><a href="#3-1-类与对象的关系" class="headerlink" title="3.1 类与对象的关系"></a>3.1 类与对象的关系</h3><ul><li><p>对象也叫实例，是类经过”实例化”后得到的内存中的实体</p><ul><li>对象和实例是一回事</li><li>“飞机”与”一架飞机”有何区别？天上有(一架)飞机——必须是实例飞，概念是不能飞的</li><li>有些类是不能实例化的，比如”数学”(Math class)，我们不能说”一个数学”</li><li>“可数名词与不可数名词”</li></ul></li><li><p>依照类，我们可以创建对象，这就是<code>实例化</code></p><ul><li>现实世界中常称<code>对象</code>，程序世界中常称<code>实例</code></li><li>两者并无太大区别，常常混用，初学者不必迷惑</li></ul></li><li><p>使用<code>new</code>操作符创建类的实例</p></li><li><p>引用变量与实例的关系</p><ul><li>孩子(引用变量)与气球(实例)</li><li>气球不一定有孩子<code>牵着</code>(相当于赋值符号=)</li><li>多个孩子可以使用各自的绳子牵着同一个气球，也可以都通过一根绳子牵着气球(引用变量指向同一个地址)</li></ul></li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ClassAndInstance</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//new Form();</span>            <span class="token comment">//创建了一个气球，但是没有孩子牵着，就飞走了，内存垃圾收集器很快收回去了，释放掉了</span>            <span class="token class-name">Form</span> myForm1<span class="token punctuation">;</span><span class="token comment">//第一个引用变量，相当于第一个孩子</span>            <span class="token class-name">Form</span> myForm2<span class="token punctuation">;</span><span class="token comment">//第二个引用变量，相当于第一个孩子</span>            myForm1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Form</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            myForm2 <span class="token operator">=</span> myForm1<span class="token punctuation">;</span>    <span class="token comment">//两个引用变量指向同一个对象</span>            myForm1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"My Form"</span><span class="token punctuation">;</span>            myForm2<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"I changed it!"</span><span class="token punctuation">;</span>            myForm1<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220907101852929.png"></p><h3 id="3-2-类的三大成员"><a href="#3-2-类的三大成员" class="headerlink" title="3.2 类的三大成员"></a>3.2 类的三大成员</h3><ul><li><p>属性（Property）</p><ul><li>存储数据，组合起来表示类或对象当前的状态</li></ul></li><li><p>方法（Method）</p><ul><li>由C语言中的函数（Function）进化而来，表示类或对象”能做什么”</li><li>工作中90%的时间是在与方法打交道，因为它是”真正做事”、”构成逻辑”的成员</li></ul></li><li><p>事件（Event）</p><ul><li>类或对象通知其它类或对象的机制，为C#所特有（Java通过其它办法实现这个机制）</li><li>善用事件机制非常重要</li></ul></li><li><p>使用MSDN文档。在VS中，你把光标定位到某个类上，按<code>F1</code>，会自动在浏览器上打开MSDN文档，显示这个类的详细信息</p></li><li><p>某些特殊类或对象在成员方面侧重点不同</p><ul><li>模型类或对象重在<strong>属性</strong>，如EF（Entity Framework）</li><li>工具类或对象重在<strong>方法</strong>，如Math，Console</li><li>通知类或对象重在<strong>事件</strong>，如各种Timer</li></ul></li><li><p>接下来开始写一个实例程序，使用EF数据模型</p></li><li><p>使用.net framework框架，我这里用的4.72的</p></li><li><p>需要用到SQL Server，我这里用的是SSMS 18</p></li><li><p>回到VS，右击项目，添加新建项，如下图所示</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220907105639515.png"></p></li><li><p>添加，选择来自数据库的EF设计器</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220907105723149.png"></p></li><li><p>之后一步一步，跟着视频差不多，最后我选了两张表，结果如下</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220907105846979.png"></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ClassAndInstance</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">ScEntities</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ScEntities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//Sc为数据库名，这里数据库名+Entities</span>                        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">Sc_Student</span> p <span class="token keyword">in</span> proxy<span class="token punctuation">.</span>Sc_Student<span class="token punctuation">)</span>            <span class="token comment">//Sc_Student为Sc数据库里的一张表</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>Sname<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//Sname为Sc_Student里的一个字段名</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//这里的foreach用于显示Sname字段的记录</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>Sc_Student<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//显示记录数</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">cw+tab+tab，可以直接打出Console.WriteLine<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>运行结果如下：</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220907110953735.png"></p></li><li><p>下面举例以方法为侧重的类Math</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ClassAndInstance</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> y <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"x = "</span><span class="token operator">+</span>x<span class="token operator">+</span><span class="token string">"\ny = "</span><span class="token operator">+</span>y <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 运行结果如下：</p> <pre class="line-numbers language-none"><code class="language-none">x &#x3D; 2y &#x3D; 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>下面举例以事件为侧重的类Timer</p></li><li><p>使用WPF应用，为了跟着视频，选择.net framework框架的</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220907112003427.png"></p></li><li><p>新建后之后，拖入一个textbox，命名为timeTextBox</p></li><li><p>之后进入MainWindow.xaml.cs，编写代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Controls</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Data</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Documents</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Input</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Media</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Media<span class="token punctuation">.</span>Imaging</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Navigation</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Shapes</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span> <span class="token comment">//多线程</span><span class="token keyword">namespace</span> <span class="token namespace">EventSample</span><span class="token punctuation">&#123;</span>    <span class="token comment">/// &lt;summary></span>    <span class="token comment">/// MainWindow.xaml 的交互逻辑</span>    <span class="token comment">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">MainWindow</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Window</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">DispatcherTimer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DispatcherTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//设置计时器刻度之间的间隔为1s</span>            timer<span class="token punctuation">.</span>Interval <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//事件处理器</span>            timer<span class="token punctuation">.</span>Tick <span class="token operator">+=</span> Timer_Tick<span class="token punctuation">;</span>            timer<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Timer_Tick</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>timeTextBox<span class="token punctuation">.</span>Text <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行结果如下：</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220907113603979.png"></p></li></ul><h3 id="3-3-静态成员与实例成员"><a href="#3-3-静态成员与实例成员" class="headerlink" title="3.3 静态成员与实例成员"></a>3.3 静态成员与实例成员</h3><ul><li>静态（Static）成员在语义上表示它是”类的成员”<ul><li>例如<code>人类</code>可以看作一个<code>类</code>，<code>人类的数量</code>可以看作这个类的<code>静态成员</code></li><li><code>WriteLine</code>是属于<code>Console</code>这个类的静态方法</li></ul></li><li>实例（非静态）成员在语义上表示它是”对象的成员”<ul><li>例如<code>某个人</code>有<code>身高，体重</code>，某个人是对象，它有实例成员身高和体重</li></ul></li><li>绑定（Binding）指的是编译器如何把成员与类或对象关联起来<ul><li>不可小觑的<code>.</code>操作符——成员访问</li></ul></li></ul><hr><h2 id="4-C-语言基本元素概览，初识类型、变量与方法，算法简介"><a href="#4-C-语言基本元素概览，初识类型、变量与方法，算法简介" class="headerlink" title="4. C#语言基本元素概览，初识类型、变量与方法，算法简介"></a>4. C#语言基本元素概览，初识类型、变量与方法，算法简介</h2><h3 id="4-1-构成C-语言的基本元素"><a href="#4-1-构成C-语言的基本元素" class="headerlink" title="4.1 构成C#语言的基本元素"></a>4.1 构成C#语言的基本元素</h3><ol><li><p>关键字（Keyword）</p></li><li><p>操作符（Operator）</p></li><li><p>标识符（Identifier）</p><ul><li>中文也可以用做标识符（只不过不建议这么使用）</li><li>驼峰命名法：变量名等</li><li>帕斯卡命名卡：类名，名称空间等</li></ul></li><li><p>标点符号</p></li><li><p>文本</p><ul><li>char 卡尔</li><li>只有引用类型才能null（空）</li></ul><p><font size="5"><code>以上五种统称为标记（Token）</code></font></p></li><li><p>注释与空白</p><ul><li>ctrl+k+d，代码格式化</li></ul></li></ol><h3 id="4-2-初识类型、变量与方法"><a href="#4-2-初识类型、变量与方法" class="headerlink" title="4.2 初识类型、变量与方法"></a>4.2 初识类型、变量与方法</h3><ol><li><p>初识类型（Type）</p><ul><li>亦称数据类型（Data Type）<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">var x &#x3D; 3;         Console.WriteLine(x.GetType().Name);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ol><ul><li> var 赋值的变量C#会自动推算出数据类型</li></ul><ol start="2"><li><p>变量是存放数据的地方，简称”数据“</p><ul><li>变量的声明</li><li>变量的使用</li></ul></li><li><p>方法（旧城函数）是处理数据的逻辑，又称”算法“</p><ul><li>方法的声明</li><li>方法的调用</li></ul></li><li><p>程序=数据+算法</p><ul><li>有了变量和方法就可以写有意义的程序了</li><li>ctrl+k+c 快速注释</li><li>ctrl+k+u 快速解注释</li></ul></li><li><p>简单算法，计算1到100的和</p><ul><li><p>第一种使用循环，代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">sample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">SumFrom1ToX</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">SumFrom1ToX</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                res <span class="token operator">+=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第二种使用递归</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">sample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">SumFrom1ToX</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">SumFrom1ToX</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token function">SumFrom1ToX</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>汉诺塔问题</p><p>主要分为A,B,C杆，将A杆中的盘子全部移至C杆，分为三部：</p><p>(1)以C杆为中介，从A杆将1至n-1号盘移至B杆；</p><p>(2)将A杆中剩下的第n号盘移至C杆；</p><p>(3)以A杆为中介；从B杆将1至n-1号盘移至C杆。</p></li></ol><p>代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">sample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">Hanoi</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> <span class="token char">'B'</span><span class="token punctuation">,</span> <span class="token char">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Hanoi</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">char</span></span> a<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">char</span></span> b<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">char</span></span> c<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Move disk </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">n</span><span class="token punctuation">&#125;</span></span><span class="token string"> from </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">a</span><span class="token punctuation">&#125;</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">c</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//第一步，以C杆为中介，从A杆将1至n-1号盘移至B杆</span>                <span class="token function">Hanoi</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> c<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//第二步，将A杆中剩下的第n号盘移至C杆</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Move disk </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">n</span><span class="token punctuation">&#125;</span></span><span class="token string"> from </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">a</span><span class="token punctuation">&#125;</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">c</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//第三步，以A杆为中介；从B杆将1至n-1号盘移至C杆</span>                <span class="token function">Hanoi</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="5-详解类型、变量和对象"><a href="#5-详解类型、变量和对象" class="headerlink" title="5. 详解类型、变量和对象"></a>5. 详解类型、变量和对象</h2><h3 id="5-1-什么是类型（Type）"><a href="#5-1-什么是类型（Type）" class="headerlink" title="5.1 什么是类型（Type）"></a>5.1 什么是类型（Type）</h3><ul><li>数据结构是类型的延申</li><li>又名数据类型（Data Type）<ul><li>性质相同的值的集合，配备了一系列专门针对这些值的操作</li><li>是数据在内存中存储时的“符号”</li><li>小内存容纳大尺寸数据会发生丢失精准度、发生错误</li><li>大内存容纳小尺寸数据会导致浪费</li><li>编程语言的数据类型与数据的数据类型不完全相同<ul><li>例如3/4在编程语言中结果为0，在数学中为0.75</li></ul></li></ul></li><li>强类型编程语言与弱类型编程语言<ul><li>数据受到数据类型的约束，这门编程语言就是强类型编程语言</li><li>C#是一种强类型编程语言</li><li><code>dynamic</code>，C#对弱类型/动态类型的模仿</li></ul></li></ul><h3 id="5-2-类型在C-语言中的作用"><a href="#5-2-类型在C-语言中的作用" class="headerlink" title="5.2 类型在C#语言中的作用"></a>5.2 类型在C#语言中的作用</h3><ul><li><p>一个C#类型中所包含的信息有：</p><ul><li><p>存储此类型变量所需的内存空间大小</p><ul><li>int占4个字节，long占8个字节</li></ul></li><li><p>此类型的值可表示的最大、最小值范围</p><ul><li>例如sbyte 为-128 to 127，占8-bit，最高位为符号位</li><li>byte为 0 to 255，占8-bit</li></ul></li><li><p>此类型所包含的成员（如方法、属性、事件等）</p></li><li><p>此类型由何基类派生而来</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">sample</span><span class="token punctuation">&#123;</span>     <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Type</span> myType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Form</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>myType<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//查看类型的名字</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>myType<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//查看类型的全名</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>myType<span class="token punctuation">.</span>BaseType<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//查看类型的基类</span>            <span class="token class-name">PropertyInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> pInfos <span class="token operator">=</span> myType<span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//能够动态的探知程序运行过程中有那些属性</span>            <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> p <span class="token keyword">in</span> pInfos<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">MethodInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> mInfos <span class="token operator">=</span> myType<span class="token punctuation">.</span><span class="token function">GetMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//能够动态的探知程序运行过程中有那些方法</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> m <span class="token keyword">in</span> mInfos<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>程序运行的时候，此类型的变量分配在内存的什么位置</p><ul><li><p>Stack简介</p><ul><li>给方法调用</li><li>Stack比较小，比较快</li></ul></li><li><p>Stack overflow</p><ul><li><p>算法没写好</p></li><li><p>分配了过多的内存</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StackOverflow</span><span class="token punctuation">&#123;</span>     <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">BadGur</span> bg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BadGur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bg<span class="token punctuation">.</span><span class="token function">BadMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">BadGur</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">BadMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">BadMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//死循环递归</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StackOverflow</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//用到指针需要加上unsafe，同时需要在项目 -> 最底部的项目名属性(P) ->生成 -> 允许不安全代码</span>        <span class="token keyword">static</span> <span class="token keyword">unsafe</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token keyword">stackalloc</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">9999999</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//.NET应用程序的默认堆栈大小为1 MB ,为1024*1024，而9999999显然大于这个数字，造成栈溢出</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Heap简介</p><ul><li>存储对象，实例放在堆里</li><li>Heap比Stack大</li></ul></li><li><p>使用Performance Monitor查看进程的堆内存使用量</p><ul><li><p>Process（进程），一个程序由硬盘加载到内存之后就形成一个进程</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Controls</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Data</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Documents</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Input</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Media</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Media<span class="token punctuation">.</span>Imaging</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Navigation</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Shapes</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HeapSample</span><span class="token punctuation">&#123;</span>    <span class="token comment">/// &lt;summary></span>    <span class="token comment">/// MainWindow.xaml 的交互逻辑</span>    <span class="token comment">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">MainWindow</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Window</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">List<span class="token punctuation">&lt;</span>Window<span class="token punctuation">></span></span> winList<span class="token punctuation">;</span>        <span class="token comment">//window占用的内存多</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Button1_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            winList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Window<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//生成有15000个Window实例的列表</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">15000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">Window</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                winList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Button2_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            winList<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>生成解决方案，ctrl+shift+b</p></li><li><p>ctrl+r运行，输入perfmon打开性能监视器</p></li><li><p>点击<code>红色的X号</code>，再点击<code>绿色的+号</code></p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220908155807969.png"></p></li><li><p>选择process -&gt; private bytes</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220908160109789.png"></p></li><li><p>独享的已分配的当前字节数就是堆内存</p></li><li><p>点击<code>添加</code>，然后<code>确定</code></p></li><li><p>然后回到性能监视器，如下图所示</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220908160238140.png"></p></li><li><p>发现一直在100，原理是已经超过了能表示的最大范围</p></li><li><p>双击底部的<img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220908160328957.png"></p></li><li><p>将图标下垂直比例最大值改为1024</p></li><li><p>然后回到性能监视器，如下图所示</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220908160447751.png"></p></li><li><p>点击<code>Consume Heap Memory</code>按钮，你会发现性能监视器的图示会立刻往上升</p></li><li><p>然后点击<code>Release Heap Memory</code>按钮，你会发现性能监视器的图示并不会马上降下来，因为我们的<code>垃圾收集器</code>认为我们现在的内存还很大，不用马上来收集，会找一个时间来收集，如果你等的事件够久，你会发现它还是会降下来</p></li><li><p>但是在内存收集之前，你连续的点击<code>Consume Heap Memory</code>按钮，内存用量还是会一直上升</p></li></ul></li><li><p>关于内存泄露</p><ul><li>在堆中分配了过多的对象，没有释放</li><li>在C#中没有手动释放内存，都是自动释放内存，所以比较安全，不容易造成内存泄漏</li></ul></li></ul></li><li><p>此类型所允许的操作（运算）</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">double</span></span> res1 <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">//0</span><span class="token class-name"><span class="token keyword">double</span></span> res2 <span class="token operator">=</span> <span class="token number">3.0</span> <span class="token operator">/</span> <span class="token number">4.0</span><span class="token punctuation">;</span><span class="token comment">//0.75</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="5-3-C-语言的数据类型"><a href="#5-3-C-语言的数据类型" class="headerlink" title="5.3 C#语言的数据类型"></a>5.3 C#语言的数据类型</h3><h4 id="5-3-1-C-的五大数据类型"><a href="#5-3-1-C-的五大数据类型" class="headerlink" title="5.3.1 C#的五大数据类型"></a>5.3.1 C#的五大数据类型</h4><ul><li><p>类（Classes）：如Windows,Form,Console,String</p><ul><li>按<code>F12</code>可以转到定义的地方</li></ul></li><li><p>结构体（Structures）:如Int32，Int64，Single，Double</p><ul><li>int就是一个结构体类型</li></ul></li><li><p>枚举（Enumerations）：如HorizontalAlignment，Visibility</p><ul><li><p>枚举类型，里面的数据都是预定义好的</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ConsoleApp1</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Form</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Form</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span>WindowState <span class="token operator">=</span> FormWindowState<span class="token punctuation">.</span>Maximized<span class="token punctuation">;</span>            <span class="token comment">//FormWindowState就是一个枚举类型</span>            f<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>F12转到定义</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">&#123;</span>    <span class="token comment">//</span>    <span class="token comment">// 摘要:</span>    <span class="token comment">//     指定窗体窗口的显示方式。</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ComVisible</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">FormWindowState</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//</span>        <span class="token comment">// 摘要:</span>        <span class="token comment">//     默认大小的窗口。</span>        Normal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token comment">//</span>        <span class="token comment">// 摘要:</span>        <span class="token comment">//     最小化的窗口中。</span>        Minimized <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token comment">//</span>        <span class="token comment">// 摘要:</span>        <span class="token comment">//     最大化的窗口。</span>        Maximized <span class="token operator">=</span> <span class="token number">2</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>接口（Interfaces）</p></li><li><p>委托（Delegates）</p></li></ul><h4 id="5-3-2-C-类型的派生谱系"><a href="#5-3-2-C-类型的派生谱系" class="headerlink" title="5.3.2 C#类型的派生谱系"></a>5.3.2 C#类型的派生谱系</h4><ul><li><p>C#类型的派生谱系是一个树状的系统</p></li><li><p><code>Object</code> （根部，基类型）分为<code>引用类型(Reference Type)</code> 和 <code>值类型(Value Type)</code>，两大数据类型分组</p></li><li><p><code>引用类型(Reference Type)</code>分为三大分支</p><ul><li>类</li><li>接口</li><li>委托</li></ul></li><li><p><code>值类型(Value Type)</code>分为两大分支</p><ul><li>结构体</li><li>枚举</li></ul></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220908163836346.png"></p></li></ul><h3 id="5-4-变量、对象与内存"><a href="#5-4-变量、对象与内存" class="headerlink" title="5.4 变量、对象与内存"></a>5.4 变量、对象与内存</h3><h4 id="5-4-1-什么是变量"><a href="#5-4-1-什么是变量" class="headerlink" title="5.4.1 什么是变量"></a>5.4.1 什么是变量</h4><ul><li><p>表面上来看，变量的用途是存储数据</p></li><li><p>实际上，<font color="blue">变量表示了存储位置，并且每个变量都有一个类型，以决定什么样的值能够存入变量</font></p><ul><li>变量名表示（对应着）变量的值内存中的存储位置</li><li>变量类型就是告诉系统从这个存储位置开始数多少个字节，这段字节来保存这个变量的值</li></ul></li><li><p>变量一共有7种</p><ul><li><p>静态变量</p></li><li><p>实例变量(成员变量，字段)</p></li><li><p>数组元素</p></li><li><p>值参数</p></li><li><p>引用参数</p></li><li><p>输出形参</p></li><li><p>局部变量</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ConsoleApp1</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//数组元素</span>            <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">;</span>                      <span class="token comment">//局部变量</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">student</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> amount<span class="token punctuation">;</span>   <span class="token comment">//静态变量</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> age<span class="token punctuation">;</span>             <span class="token comment">//实例变量</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span><span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">double</span></span> c<span class="token punctuation">)</span>        <span class="token comment">//a为引用参数，b为输出形参，c为值参数</span>        <span class="token punctuation">&#123;</span>            b <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>侠义的变量指局部变量，因为其它种类的变量都有自己的约定名称</p><ul><li>简单地讲，局部变量就是方法体（函数体）里声明的变量</li></ul></li><li><p>变量的声明</p><ul><li><p><font color="blue"> 有效的修饰符组合<del>opt</del> 类型 变量名 初始化器<del>opt</del> </font></p><pre class="line-numbers language-none"><code class="language-none">public int a &#x3D; 100;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>opt表示可有可无的，有效的修饰符组合和初始化器是可选的，类型和变量名是必须的</p></li><li><p>尽量不要写 <code>int a=100,b=200;</code>这种形式，让代码的可读性变差了</p></li></ul></li><li><p><font color="red">变量是以变量名所对应的内存地址为起点，以其数据类型所要求的存储空间为长度的一块内存区域</font></p></li></ul><h4 id="5-4-2-值类型的变量"><a href="#5-4-2-值类型的变量" class="headerlink" title="5.4.2 值类型的变量"></a>5.4.2 值类型的变量</h4><ul><li>值类型没有实例，所谓的“实例”与变量合而为一</li><li>值类型的变量在内存的存储</li><li>小端模式，是指数据的高字节保存在内存的高地址中，而数据的低字节保存在内存的低地址中</li><li><code>ushort us = 1000</code>,占16-bit，换算成二进制是</li><li><code>00000011 11101000</code></li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220908193144801.png"></li><li><font color="8899##">黄色区域为已经被占用的内存</font></li><li><code>short s= -1000</code>,按位取反+1<ul><li>00000011 11101000</li><li>11111100 00010111 按位取反</li><li><code>11111100 00011000</code> +1后的结果</li></ul></li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220908193716094.png"></li></ul><h4 id="5-4-3-引用类型的变量与实例"><a href="#5-4-3-引用类型的变量与实例" class="headerlink" title="5.4.3 引用类型的变量与实例"></a>5.4.3 引用类型的变量与实例</h4><ul><li>引用类型的变量与实例的关系：引用类型变量里存储的数据是对象的地址</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">student</span> stu<span class="token punctuation">;</span>            <span class="token comment">//引用类型，直接分配32bit，用于存放实例的地址，局部变量在栈上分配内存</span>            stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//stu实例化后,在堆上分配32bit+16bit的内存</span>            <span class="token class-name">student</span> stu1 <span class="token operator">=</span> stu<span class="token punctuation">;</span>     <span class="token comment">//引用类型，直接分配32bit，存放stu实例化之后的地址，局部变量在栈上分配内存</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">student</span>     <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">uint</span></span> ID<span class="token punctuation">;</span>        <span class="token comment">//32bit</span>        <span class="token class-name"><span class="token keyword">ushort</span></span> Score<span class="token punctuation">;</span>   <span class="token comment">//16bit</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220908195733520.png"></p></li><li><p>十进制 30000001  -&gt; 二进制 高位 0000 0001 1100 1001 1100 0011 1000 0001 低位</p></li></ul><h4 id="5-4-4局部变量是在stack上分配内存"><a href="#5-4-4局部变量是在stack上分配内存" class="headerlink" title="5.4.4局部变量是在stack上分配内存"></a>5.4.4局部变量是在stack上分配内存</h4><h4 id="5-4-5-变量的默认值"><a href="#5-4-5-变量的默认值" class="headerlink" title="5.4.5 变量的默认值"></a>5.4.5 变量的默认值</h4><ul><li>成员变量在声明后没有赋值，存在默认值0</li><li>本地(局部)变量在声明后没有赋值，不能编译，本地变量一定要有显式赋值</li></ul><h4 id="5-4-6常量"><a href="#5-4-6常量" class="headerlink" title="5.4.6常量"></a>5.4.6常量</h4><ul><li><code>const  int x = 100;</code>,无法二次赋值，必须带初始化器</li></ul><h4 id="5-4-7装箱与拆箱（Boxing-amp-Unboxing）"><a href="#5-4-7装箱与拆箱（Boxing-amp-Unboxing）" class="headerlink" title="5.4.7装箱与拆箱（Boxing &amp; Unboxing）"></a>5.4.7装箱与拆箱（Boxing &amp; Unboxing）</h4><ul><li><p>目前采用较少，有损耗</p></li><li><p>本质上是值类型与引用类型的转换</p></li><li><p>装箱就是从栈上往堆上搬东西，然后栈上再分配4个字节的地址，指向堆的地址</p></li><li><p>例如</p><pre class="line-numbers language-none"><code class="language-none">int x &#x3D; 100;&#x2F;&#x2F;int即int32，占4个字节object obj &#x3D;x;&#x2F;&#x2F;object是所有类型的基类，是引用类型，占4个字节<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220908202330792.png"></p></li><li><p>拆箱就是从堆上往栈搬东西，从堆上oject实例的值，按照我们的要求拆成目标类型的值，存储在栈上</p><pre class="line-numbers language-none"><code class="language-none">int x &#x3D; 100;&#x2F;&#x2F;int即int32，占4个字节object obj &#x3D;x;&#x2F;&#x2F;object是所有类型的基类，是引用类型，占4个字节int y &#x3D; (int)obj;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr></li></ul><h2 id="6-方法的定义、调用与调试"><a href="#6-方法的定义、调用与调试" class="headerlink" title="6. 方法的定义、调用与调试"></a>6. 方法的定义、调用与调试</h2><p>两本书：《CLR via C#》、《C# IN DEPTH》</p><h3 id="6-1-方法的由来"><a href="#6-1-方法的由来" class="headerlink" title="6.1 方法的由来"></a>6.1 方法的由来</h3><h4 id="6-1-1-方法（method）的前身是C-C-语言的函数（function）"><a href="#6-1-1-方法（method）的前身是C-C-语言的函数（function）" class="headerlink" title="6.1.1 方法（method）的前身是C/C++语言的函数（function）"></a>6.1.1 方法（method）的前身是C/C++语言的函数（function）</h4><ul><li>方法是面向对象语言范畴的概念，在非面向对象语言种仍然称为函数</li><li>使用C/C++语言做对比<ul><li>在C语言中printf()，print打印，f是format的意思，就是根据所要的格式进行打印</li><li>C++中<code>std::cout</code>就类似于C#中<code>system.Console</code></li></ul></li></ul><h4 id="6-1-2-永远都是类（或结构体）的成员"><a href="#6-1-2-永远都是类（或结构体）的成员" class="headerlink" title="6.1.2 永远都是类（或结构体）的成员"></a>6.1.2 永远都是类（或结构体）的成员</h4><ul><li><p>C#语言种函数不可能独立于类（或结构体）之外</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ConsoleApp1</span><span class="token punctuation">&#123;</span>    <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><font color="red">严重错误：命名空间不能直接包含字段或方法之类的成员</font></li></ul></li><li><p>只有作为类（或结构体）的成员时才被称为方法</p></li><li><p>C++种是可以的，称为”全局函数”</p></li></ul><h4 id="6-1-3-是类（或结构体）最基本的成员之一"><a href="#6-1-3-是类（或结构体）最基本的成员之一" class="headerlink" title="6.1.3 是类（或结构体）最基本的成员之一"></a>6.1.3 是类（或结构体）最基本的成员之一</h4><ul><li>最基本的成员只有两个——字段与方法（成员变量与成员方法），本质还是数据+算法</li><li>方法表示类（或结构体）“能做什么事情”</li></ul><h4 id="6-1-4-为什么需要方法和函数"><a href="#6-1-4-为什么需要方法和函数" class="headerlink" title="6.1.4 为什么需要方法和函数"></a>6.1.4 为什么需要方法和函数</h4><ul><li><p>目的1：隐藏复杂的逻辑</p></li><li><p>目的2：把大算法分解为小算法</p></li><li><p>目的3：复用（reuse，重用）</p><ul><li>例如把计算圆面积的算法提出来，重复利用计算圆柱和圆锥的体积</li><li>没有复用容易造成程序的隐患，产生bug</li></ul></li><li><p>示例：计算圆面积、圆柱体积、圆锥体积</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">CSharpMethodExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetCircleArea</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> r<span class="token punctuation">)</span>   <span class="token comment">//计算圆的面积</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetCylinderVolume</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> h<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">double</span></span> r<span class="token punctuation">)</span> <span class="token comment">//计算圆柱的体积</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">GetCircleArea</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">*</span> h<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetConeVolume</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> h<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">double</span></span> r<span class="token punctuation">)</span>  <span class="token comment">//计算圆锥的体积</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">GetCylinderVolume</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">GetCylinderVolume</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="6-2-方法的定义与调用"><a href="#6-2-方法的定义与调用" class="headerlink" title="6.2 方法的定义与调用"></a>6.2 方法的定义与调用</h3><h4 id="6-2-1-声明方法的语法详细"><a href="#6-2-1-声明方法的语法详细" class="headerlink" title="6.2.1 声明方法的语法详细"></a>6.2.1 声明方法的语法详细</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetCircleArea</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> r<span class="token punctuation">)</span> <span class="token comment">//函数头  </span><span class="token punctuation">&#123;</span>  <span class="token comment">//函数体</span>     <span class="token keyword">return</span> Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>参见C#语言文档（声明、定义不分家）</li><li>Parameter全程为“formal parameter”形式上的参数，简称“形参”</li><li>形参参与构成算法逻辑</li><li>Parameter是一种变量</li></ul><h4 id="6-2-2-方法的命名规范"><a href="#6-2-2-方法的命名规范" class="headerlink" title="6.2.2 方法的命名规范"></a>6.2.2 方法的命名规范</h4><ul><li>大小写规范</li><li>需要以动词或者动词短语作为名字</li><li>采用帕斯卡命名法，所有单词的首字母都大写，例如<code>GetCircleArea</code>，与JAVA存在区别</li></ul><h4 id="6-2-3-重温静态（static）方法和实例方法"><a href="#6-2-3-重温静态（static）方法和实例方法" class="headerlink" title="6.2.3 重温静态（static）方法和实例方法"></a>6.2.3 重温静态（static）方法和实例方法</h4><ul><li>静态（static）方法，<code>public static double Add()</code></li><li>实例方法就是不加static的方法</li><li>重温静态（static）方法和实例方法，静态方法是和类绑定的，在类第一次加载时就被加载到内存里，直到程序结束才释放，静态类是工具类，不需要创建实例就能用到里面的方法；实例方法是和实例绑定的，在new实例的时候才创建，并且使用完就释放了。所以，为了方便，常用的方法写成静态方法，为了节省内存，大部分方法写成非静态的</li></ul><h4 id="6-2-4-调用方法"><a href="#6-2-4-调用方法" class="headerlink" title="6.2.4 调用方法"></a>6.2.4 调用方法</h4><ul><li>Argument中文C#文档的官方译法为“实际参数”，简称“实参”，可理解为调用方法时的真实条件</li><li>调用方法时的实参的列表与定义方法时的形参的列表一定要匹配</li></ul><h3 id="6-3-构造器（一种特殊的方法）"><a href="#6-3-构造器（一种特殊的方法）" class="headerlink" title="6.3 构造器（一种特殊的方法）"></a>6.3 构造器（一种特殊的方法）</h3><h4 id="6-3-1-构造器（constructor）是类型的成员之一"><a href="#6-3-1-构造器（constructor）是类型的成员之一" class="headerlink" title="6.3.1 构造器（constructor）是类型的成员之一"></a>6.3.1 构造器（constructor）是类型的成员之一</h4><h4 id="6-3-2-侠义的构造器指的是“实例构造器”-instance-constructor"><a href="#6-3-2-侠义的构造器指的是“实例构造器”-instance-constructor" class="headerlink" title="6.3.2 侠义的构造器指的是“实例构造器”(instance constructor)"></a>6.3.2 侠义的构造器指的是“实例构造器”(instance constructor)</h4><h4 id="6-3-3-如何调用构造器"><a href="#6-3-3-如何调用构造器" class="headerlink" title="6.3.3 如何调用构造器"></a>6.3.3 如何调用构造器</h4><ul><li>例如<code>student stu = new student();</code>,()就是构造器</li><li>当你没有给类写构造器时，存在一个默认的无参数的构造器</li><li>只存在一个带参数的构造器，就不能使用无参的构造器</li><li>如果你还想使用无参的构造器，你需要再写一个无参的构造器</li></ul><h4 id="6-3-4-声明构造器"><a href="#6-3-4-声明构造器" class="headerlink" title="6.3.4 声明构造器"></a>6.3.4 声明构造器</h4><ul><li>ctor+tab+tab，自动准备好一个构造器</li></ul><h4 id="6-3-5-构造器的内存原理"><a href="#6-3-5-构造器的内存原理" class="headerlink" title="6.3.5 构造器的内存原理"></a>6.3.5 构造器的内存原理</h4><ul><li><p>栈内存由高地址向低地址进行分配</p></li><li><p>接下来是调用默认的构造器的内存原理</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">CSharpMethodExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> ID<span class="token punctuation">;</span>         <span class="token comment">//占4个字节</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>    <span class="token comment">//string是引用类型，直接占4个字节</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909114008993.png"></p></li><li><p>接下来是调用带参数的构造器的内存原理</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">CSharpMethodExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> ID<span class="token punctuation">;</span>         <span class="token comment">//占4个字节</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>    <span class="token comment">//string是引用类型，直接占4个字节</span>        <span class="token keyword">public</span> <span class="token function">student</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> initID<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> initName<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ID <span class="token operator">=</span> initID<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> initName<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Mr.Okay"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909120619585.png"></li></ul><h3 id="6-4-方法的重载（Overload）"><a href="#6-4-方法的重载（Overload）" class="headerlink" title="6.4 方法的重载（Overload）"></a>6.4 方法的重载（Overload）</h3><h4 id="6-4-1-调用重载方法的实例"><a href="#6-4-1-调用重载方法的实例" class="headerlink" title="6.4.1 调用重载方法的实例"></a>6.4.1 调用重载方法的实例</h4><ul><li>例如cw有17个重载</li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909165403871.png"></li></ul><h4 id="6-4-2-声明带有重载的方法"><a href="#6-4-2-声明带有重载的方法" class="headerlink" title="6.4.2 声明带有重载的方法"></a>6.4.2 声明带有重载的方法</h4><ul><li><p>方法签名（method signature）由方法的名称、类型形参的个数和它的每一个形参（按从左到右的顺序）的类型和种类（值、引用或输出）组成。<font color="red">方法签名不包含返回类型。</font></p><ul><li>签名在现实中表示唯一性</li></ul> <pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F;方法签名不包含返回类型,这样写就无法编译通过class Calculator    &#123;        public int Add(int a,int b)        &#123;            return a + b;        &#125;        public double Add(int a, int b)        &#123;            return a + b;        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F;类型形参class Calculator    &#123;        public int Add(int a,int b)        &#123;            return a + b;        &#125;        public int Add&lt;T&gt;(int a, int b)        &#123;            T t;            return a + b;        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实例构造函数签名由它的每一个形参（按从左到右的顺序）的类型和种类（值、引用或输出）组成</p></li><li><p>重载决策（到底调用哪一个来重载）：用于在给定了参数列表和一组候选函数成员的情况下，选择哪一个最佳函数成员来实施调用</p></li></ul><h3 id="6-5-如何对方法进行debug"><a href="#6-5-如何对方法进行debug" class="headerlink" title="6.5 如何对方法进行debug"></a>6.5 如何对方法进行debug</h3><ul><li>设置断点（breakpoint）<ul><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909171226298.png"></li></ul></li><li>观察方法调用时的call stack<ul><li>先按F5调试，然后再按CTRL+ALT+C 调用堆栈，其实和堆栈帧是一样的 </li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909172252145.png"></li><li>可以看出函数调用的方式</li></ul></li><li>Step-in，Step-over，Step-out<ul><li>Step-in F11 逐语句，每次进一步,最仔细的debug方法</li><li>Step-over F10 逐过程</li><li>Step-out Shift + F11 跳出</li></ul></li><li>观察局部变量的值与变化<ul><li>Locals 局部变量 ctrl+alt+v</li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909173403090.png"></li></ul></li></ul><h3 id="6-6-方法的调用与栈"><a href="#6-6-方法的调用与栈" class="headerlink" title="6.6 方法的调用与栈*"></a>6.6 方法的调用与栈*</h3><ul><li><p>方法调用时栈内存的分配</p><ul><li>对stack frame的分析</li><li>stack frame 指的是一个方法在被调用的时候在栈内存的布局</li><li>栈内存由高字节向低字节发展</li></ul></li><li><p>对以下代码进行分析</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">CSharpMethodExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetCircleArea</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> r<span class="token punctuation">)</span>   <span class="token comment">//计算圆的面积</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetCylinderVolume</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> r<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> h<span class="token punctuation">)</span> <span class="token comment">//计算圆柱的体积</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> a <span class="token operator">=</span> <span class="token function">GetCircleArea</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> a <span class="token operator">*</span> h<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetConeVolume</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> r<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> h<span class="token punctuation">)</span>  <span class="token comment">//计算圆锥的体积</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> cv <span class="token operator">=</span> <span class="token function">GetCylinderVolume</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> cv <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> result <span class="token operator">=</span> Calculator<span class="token punctuation">.</span><span class="token function">GetConeVolume</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//断点</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>这是内存默认的情况</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909195448466.png"></p></li><li><p>我们对<code> double result = Calculator.GetConeVolume(100, 100);</code>进行断点</p></li><li><p>使用F5进行调试，进入如下界面</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909202244944.png"></p></li><li><p>Main方法在栈中占用的stack frame的大小暂时不用管，以下是分配给Main方法之后栈内存的分配情况</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909200306630.png"></p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> result <span class="token operator">=</span> Calculator<span class="token punctuation">.</span><span class="token function">GetConeVolume</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>Main</code>方法是<code>主调者</code>caller，<code>GetConeVolume</code>方法是<code>被调者</code> callee</p></li><li><p>Main方法在调用<code>GetConeVolume</code>方法的时候，需要传两个参数变量，在C#中这两个参数变量归Main方法管</p></li><li><p>100虽然是整型，但是<code>GetConeVolume</code>方法里的两个参数是<code>double</code>型，所以占<code>8个字节</code>的内存</p></li><li><p>在压栈的时候，C#是从左往右进行参数的压栈</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909202317905.png"></p></li><li><p>之后按下F11，我们就进入到了<code>GetConeVolume</code>方法里了</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909202343831.png"></p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetConeVolume</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> r<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> h<span class="token punctuation">)</span>  <span class="token comment">//计算圆锥的体积</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> cv <span class="token operator">=</span> <span class="token function">GetCylinderVolume</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> cv <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>进入<code>GetConeVolume</code>方法里后，我们知道局部变量是需要分配栈内存的，在这里r,h已经<code>Main</code>方法压到了栈里，所以我们只需要给cv分配栈内存，也是double类型的8个字节</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909202644466.png"></p></li><li><p>给cv分配好之后，<code>GetConeVolume</code>方法需要调用<code>GetCylinderVolume</code>方法，而<code>GetCylinderVolume</code>也需要2个double型的参数，还是和之前一样，谁调用谁负责压栈</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909203554249.png"></p></li><li><p>之后按下F11，我们就进入到了<code>GetCylinderVolume</code>方法里了</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909203826886.png"></p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetCylinderVolume</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> r<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> h<span class="token punctuation">)</span> <span class="token comment">//计算圆柱的体积</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> a <span class="token operator">=</span> <span class="token function">GetCircleArea</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> a <span class="token operator">*</span> h<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>进入<code>GetCylinderVolume</code>方法里后，在这里r,h已经被<code>GetConeVolume</code>方法压到了栈里，所以我们只需要给参数变量a进行压栈，也是double类型的8个字节</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909204122550.png"></p></li><li><p>给a参数分配好之后，<code>GetCylinderVolume</code>方法需要调用<code>GetCircleArea</code>方法，而<code>GetCircleArea</code>需要1个double型的参数变量r，还是和之前一样，谁调用谁负责压栈</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909204613369.png"></p></li><li><p>按F11后，我们进入到最后一层调用</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909204719178.png"></p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetCircleArea</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> r<span class="token punctuation">)</span>   <span class="token comment">//计算圆的面积</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>我们发现只有一个局部变量r，而r已经被<code>GetCylinderVolume</code>方法压栈了</p></li><li><p><font color="red">如果一个方法没有局部变量，它仍然占内存，我们上面的内存图只是以局部变量为重点制作的内存图，实际上还有其它地方占内存，比如说我们用完这个方法后，回到之前那个方法，我们需要在栈上保存之前方法的内存地址</font></p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909205257393.png"></p></li><li><p>执行完之后，这个方法会产生一个返回值，返回值一般情况下是存放在CPU的寄存器里面，也有特殊的情况，寄存器存不下然后在栈上开辟内存空间，而这里的double型是肯定可以存下的。</p></li><li><p>之后按几下F11键，调试指针就回到了<code>GetCylinderVolume</code>方法里</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909205837338.png"></p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909210038402.png"></p></li><li><p>而在栈中，框起来的一块进行了出栈操作，对<code>GetCircleArea</code>方法所占内存和它主调函数负责压栈的参数进行清空</p></li><li><p>你会发现调用堆栈里少了最上面的一层，这时候a的值为0是因为返回值还存放在CPU的寄存器里面，你再一下F11就会得到a的值</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909210452029.png"></p></li><li><p>之后继续按F11，调试指针就回到了<code>GetConeVolume</code>方法里</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909210622628.png"></p></li><li><p>你会发现调用堆栈里又少了上面的一层，这时候cv的值为0是因为返回值还存放在CPU的寄存器里面，你再一下F11就会得到cv的值</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909210738227.png"></p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909210829883.png"></p></li><li><p>而在栈中，框起来的一块进行了出栈操作，对<code>GetCylinderVolume</code>方法所占内存和它主调函数负责压栈的参数进行清空</p></li><li><p>这时候继续按几次F11，调试指针就回到了<code>Main</code>方法</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909211551716.png"></p></li><li><p>同样的对框里的内容进行出栈操作</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909211647067.png"></p></li><li><p>之后在按几次F11，随着<code>Main</code>函数执行完，它在内存中所占的内存也被清空</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909211900564.png"></p></li><li><p>这时程序就彻底结束了</p></li><li><p>理解并熟记这块内容，你就已经是很专业的开发人员了</p></li></ul><hr><h2 id="7-操作符详解"><a href="#7-操作符详解" class="headerlink" title="7. 操作符详解"></a>7. 操作符详解</h2><h3 id="7-1-操作符概览"><a href="#7-1-操作符概览" class="headerlink" title="7.1 操作符概览"></a>7.1 操作符概览</h3><ul><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220910092648080.png"></li><li>操作符（operator）也译为运算符</li><li>操作符是用来操作数据的，被操作符操作的数据称为操作数（Operand）</li></ul><h3 id="7-2-操作符的本质"><a href="#7-2-操作符的本质" class="headerlink" title="7.2 操作符的本质"></a>7.2 操作符的本质</h3><ul><li><p>操作符的本质是函数（算法）的简记法</p></li><li><p>操作符不能脱离与它相关联的数据类型</p><ul><li>例如 3/4=0，3.0/4.0=0.75</li></ul></li><li><p>举例</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Operator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Deer"</span><span class="token punctuation">;</span>            p2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Deer's wife"</span><span class="token punctuation">;</span>            <span class="token class-name">List<span class="token punctuation">&lt;</span>Person<span class="token punctuation">></span></span> nation <span class="token operator">=</span> p1 <span class="token operator">+</span> p2<span class="token punctuation">;</span>            <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> p <span class="token keyword">in</span> nation<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Person</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Person<span class="token operator">></span> <span class="token keyword">operator</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p1<span class="token punctuation">,</span><span class="token class-name">Person</span> p2<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">List<span class="token punctuation">&lt;</span>Person<span class="token punctuation">></span></span> people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Person<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            people<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>            people<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">Person</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                child<span class="token punctuation">.</span>name <span class="token operator">=</span> p1<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" &amp; "</span> <span class="token operator">+</span> p2<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"'s child"</span><span class="token punctuation">;</span>                people<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> people<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">DeerDeer&#39;s wifeDeer &amp; Deer&#39;s wife&#39;s childDeer &amp; Deer&#39;s wife&#39;s childDeer &amp; Deer&#39;s wife&#39;s childDeer &amp; Deer&#39;s wife&#39;s childDeer &amp; Deer&#39;s wife&#39;s childDeer &amp; Deer&#39;s wife&#39;s childDeer &amp; Deer&#39;s wife&#39;s childDeer &amp; Deer&#39;s wife&#39;s childDeer &amp; Deer&#39;s wife&#39;s childDeer &amp; Deer&#39;s wife&#39;s childDeer &amp; Deer&#39;s wife&#39;s child<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-操作符的优先级"><a href="#7-3-操作符的优先级" class="headerlink" title="7.3 操作符的优先级"></a>7.3 操作符的优先级</h3><ul><li>可以使用圆括号提高被括起来表达式的优先级</li><li>圆括号可以嵌套</li><li>不像数学里有方括号和花括号，在C#语言里<code>[]</code>与<code>&#123;&#125;</code>有专门的用途</li></ul><h3 id="7-4-同级操作符的运算顺序"><a href="#7-4-同级操作符的运算顺序" class="headerlink" title="7.4 同级操作符的运算顺序"></a>7.4 同级操作符的运算顺序</h3><ul><li><p>除了带有赋值功能的操作符，同优先级操作符都是由左向右进行运算</p></li><li><p>带有赋值功能的操作符的运算顺序都是由右向左</p><ul><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220910095610510.png"></p></li><li><p>例如 x = 3 + 4 + 5</p></li><li><p>顺序1： 3+4</p></li><li><p>顺序2： 7+5</p></li><li><p>顺序3： x=12</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">int</span></span> z <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>x <span class="token operator">+=</span> y <span class="token operator">+=</span> z<span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//600</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//500</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//300</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>与数学运算不同，计算机语言的同优先级运算没有”结合律”</p><ul><li>3+4+5只能理解为Add(Add(3+4),5)不能理解为Add(3,Add(4,5))</li></ul></li></ul><h3 id="7-5-各种操作符的示例"><a href="#7-5-各种操作符的示例" class="headerlink" title="7.5 各种操作符的示例"></a>7.5 各种操作符的示例</h3><ul><li>委托可以把方法当作参数在其他类中使用</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Operator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> myAction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>PrintHello<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//委托</span>            <span class="token function">myAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PrintHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>元素访问操作符，<code>方括号[]</code>里不一定是整数</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Operator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> Student<span class="token punctuation">></span></span> stuDic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> Student<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//字典</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">101</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stu<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"s_"</span> <span class="token operator">+</span> i<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stu<span class="token punctuation">.</span>score <span class="token operator">=</span> i<span class="token punctuation">;</span>                stuDic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">,</span> stu<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Student</span> stu6 <span class="token operator">=</span> stuDic<span class="token punctuation">[</span><span class="token string">"s_6"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>stu6<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果为6</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> score<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-5-1-基本操作符"><a href="#7-5-1-基本操作符" class="headerlink" title="7.5.1 基本操作符"></a>7.5.1 基本操作符</h4><ul><li><p><code>typeof</code>操作符</p></li><li><p><code>typeof</code> 运算符用于获取某个类型的 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.type">System.Type</a> 实例</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Operator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Type</span> t <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>Namespace<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出类型int的名称空间</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出类型int的全名</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//输出类型int的名称</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> mi <span class="token keyword">in</span> t<span class="token punctuation">.</span><span class="token function">GetMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//查看int的方法</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>mi<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">GetMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输出int的方法的个数</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">SystemSystem.Int32Int32CompareToCompareToEqualsEqualsGetHashCodeToStringToStringToStringToStringTryFormatParseParseParseParseParseTryParseTryParseTryParseTryParseGetTypeCodeGetType21<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>default</code>操作符</p></li><li><p>从 C# 7.1 开始，当编译器可以推断表达式类型时，可以使用 <code>default</code> 文本生成类型的默认值。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Operator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//结构体类型</span>            <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//引用类型</span>            <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token type-expression class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>stu<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//枚举类型</span>            <span class="token class-name">Level</span> level <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token type-expression class-name">Level</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Level2</span> level2 <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token type-expression class-name">Level2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>level2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>       <span class="token keyword">enum</span> <span class="token class-name">Level</span>    <span class="token punctuation">&#123;</span>        Low<span class="token punctuation">,</span>        <span class="token comment">//0</span>        Mid<span class="token punctuation">,</span>        <span class="token comment">//1</span>        High        <span class="token comment">//2</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//设计枚举类型，最好要给一个0，否则容易出错</span>    <span class="token keyword">enum</span> <span class="token class-name">Level2</span>    <span class="token punctuation">&#123;</span>        Low<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                Mid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>                High<span class="token operator">=</span><span class="token number">2</span>            <span class="token punctuation">&#125;</span>        <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行结果如下：</p></li></ul> <pre class="line-numbers language-none"><code class="language-none">0TrueLowMid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>var</code>关键字用于声明隐式的变量，编译器可以推断出隐式变量类型</li></ul> <pre class="line-numbers language-none"><code class="language-none">var x &#x3D; 10;&#x2F;&#x2F;x &#x3D; &quot;s&quot;;这一段在C#是不被允许的,在上一条语句中C#已经知道x是int32类型的Console.WriteLine(x.GetType().Name);&#x2F;&#x2F;结果为int32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p><code>new</code>操作符</p><ul><li><p>在内存中创建类型的实例，并调用它的实例构造器 <code>new Form();</code></p></li><li><p>得到实例的内存地址，把内存地址通过赋值操作符<code>=</code>交给负责实例的引用变量 <code>Form myForm = new Form();</code></p></li><li><p>调用实例的初始化器<code>Form myForm = new Form()&#123;Text = &quot;Hello&quot;&#125;;</code></p></li><li><p><code>new Form().ShowDialog();</code>可以正常执行，只不过运行完就会被垃圾收集器给收回</p></li><li><p><em>语法糖</em>（Syntactic sugar），也译为<em>语法糖衣</em></p><ul><li>指计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。</li></ul></li><li><p>string是<code>类</code>类型的，但是可以不用<code>new</code>操作符</p></li><li><p>可以使用<code>var</code>创建匿名类型</p></li><li><p>用匿名类型来创建对象，然后用隐式类型变量来引用实例</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">&#123;</span> name <span class="token operator">=</span> <span class="token string">"Mr.Okay"</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>           Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>           Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>           Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行结果如下：</p> <pre class="line-numbers language-none"><code class="language-none">Mr.Okay10&lt;&gt;f__AnonymousType0&#96;2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>&lt;&gt;f__AnonymousType0`2</p><ul><li>&lt;&gt;f__AnonymousType 这是一个约定的前缀</li><li>0 指的是我在程序创建的第一个匿名类</li><li>`2 指的是这个类型是个<strong>泛型类</strong>，需要2个参数来构成它</li></ul></li><li><p><code>new</code>操作符在使用的时候一定要小心</p><ul><li><p>一但你在一个类调用了<code>new</code>操作符，你在编写的类型与调用的类型，就形成了<code>紧耦合</code></p></li><li><p>例如</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Form</span> myForm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Form</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Program类就依赖在了Form类上，一但Form类出现问题，Program类也会出现问题</p></li><li><p>依赖注入模式</p></li></ul></li><li><p><code>new</code>还可以作为修饰符</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">OperatorsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu<span class="token punctuation">.</span><span class="token function">Report</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">CsStudent</span> cstu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CsStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cstu<span class="token punctuation">.</span><span class="token function">Report</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Report</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I'm a student."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">CsStudent</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Student</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Report</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//这里的new是修饰符，表示对父类方法的隐藏（hide）</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I'm a CSstudent."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">I&#39;m a student.I&#39;m a CSstudent.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>checked</code>操作符与<code>unchecked</code>操作符</p><ul><li>C#默认是<code>unchecked</code>操作符</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">OperatorsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">uint</span></span> x <span class="token operator">=</span> <span class="token keyword">uint</span><span class="token punctuation">.</span>MaxValue<span class="token punctuation">;</span> <span class="token comment">//无符号整形的最大值</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> binStr <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//以二进制的形式表示</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>binStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name"><span class="token keyword">uint</span></span> y <span class="token operator">=</span> <span class="token keyword">checked</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//超过了最大值</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">OverflowException</span> ex<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"There's overflow!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">429496729511111111111111111111111111111111There&#39;s overflow!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>与<code>new</code>类似，<code>checked</code>与<code>unchecked</code>还有上下文用法</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">OperatorsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">uint</span></span> x <span class="token operator">=</span> <span class="token keyword">uint</span><span class="token punctuation">.</span>MaxValue<span class="token punctuation">;</span> <span class="token comment">//无符号整形的最大值</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> binStr <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//以二进制的形式表示</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>binStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">checked</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span>                <span class="token punctuation">&#123;</span>                    <span class="token class-name"><span class="token keyword">uint</span></span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//超过了最大值</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OverflowException</span> ex<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"There's overflow!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>delegate</code>操作符</p><ul><li><code>delegate</code>有一种更重要的用法，就是委托</li><li>操作符已经是种过时的用法</li></ul></li><li><p><code>sizeof</code>操作符</p><ul><li><p>只能获取C#<code>基本数据类型</code>的实例在内存种所占的字节数</p></li><li><p>只能获取<code>结构体</code>数据类型的实例在内存种所占的字节数</p><ul><li>所以不能获取string这种虽然也是基本数据类型，但不是结构体数据类型</li></ul></li><li><p>可以获取自定义结构体实例在内存种所占的字节数，但是需要定义在unsafe的上下文中</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">OperatorsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">unsafe</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//16</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">struct</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">int</span></span> ID<span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">long</span></span> Score<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>-&gt;</code>操作符</p><ul><li><p>需要定义在unsafe的上下文中</p></li><li><p>用于指针，只能操作结构体类型</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">OperatorsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">unsafe</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">Student</span> stu<span class="token punctuation">;</span>                stu<span class="token punctuation">.</span>ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                stu<span class="token punctuation">.</span>Score <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>                Student<span class="token operator">*</span> pstu<span class="token operator">=</span><span class="token operator">&amp;</span>stu<span class="token punctuation">;</span>                pstu<span class="token operator">-></span>Score <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>Score<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//100</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">struct</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> ID<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">long</span></span> Score<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="7-5-2-一元操作符"><a href="#7-5-2-一元操作符" class="headerlink" title="7.5.2 一元操作符"></a>7.5.2 一元操作符</h4><ul><li><p>优先级比基本操作符低，例如<code>(*pStu).Score=1000</code>; 括号必须加</p></li><li><p><code>-</code>操作符与<code>+</code>操作符</p><ul><li><p>在计算机中-x与x不是完全对称的，例如int型的最大值是2147483647，最小值是-2147483648，如果我们写x=-2147483648，-x实际上已经出现了<code>栈溢出</code>，需要用到<code>checked</code>操作符才会正常报错</p><ul><li>而如果不适用<code>checked</code>操作符，你输出-x发现仍会输出-2147483648</li><li>这是因为-2147483648的二进制是<code>10000000000000000000000000000000</code></li><li>按位取反后是<code>01111111111111111111111111111111</code></li><li>在加1后是<code>10000000000000000000000000000000</code>，即-2147483648</li></ul></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">OperatorsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span>MaxValue<span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span>MinValue<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>~</code>操作符</p><ul><li>取反操作符，在计算中取相反数就是<code>按位取反再加1</code></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">OperatorsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">12345678</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token operator">~</span>x<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> xStr <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PadLeft</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//PadLeft()方法用于表示总共的长度为32，左侧多余用0前置填充</span>            <span class="token class-name"><span class="token keyword">string</span></span> yStr <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PadLeft</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>xStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>yStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">12345678-123456790000000010111100011000010100111011111111010000111001111010110001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>强制类型转化操作符<code>(T)x</code></p><ul><li><p>隐式（implicit）类型转换</p><ul><li><p>不丢失精度的转换</p> <pre class="line-numbers language-none"><code class="language-none">int a &#x3D; 10;long b &#x3D; a;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>子类向父类的转换</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ConversionExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Teacher</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Human</span> h <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token comment">//h只能可见Eat()和Think()这两个方法</span>            <span class="token class-name">Animal</span> a <span class="token operator">=</span> h<span class="token punctuation">;</span>   <span class="token comment">//a只能看见Eat()这一个方法            </span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Animal</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Eating..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Human</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Animal</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Think</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Who I am?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Human</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I teach"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>装箱</p></li></ul></li><li><p>显式（explicit）类型转换（强制类型转换）</p><ul><li>显式类型转换可以理解为目标类型实例的构造器，只不过是写在被转换类型的类里</li><li>有可能丢失精度（甚至发生错误）的转换，即cast<ul><li>强制类型转化操作符<code>(T)x</code></li></ul></li><li>拆箱</li><li>使用Convert类</li><li>ToString方法与各数据类型的Parse/TryParse方法</li></ul></li><li><p>自定义类型转换操作符</p><ul><li><p>C#中两个没有父子关系的类型怎么互相转换呢？</p></li><li><p>implicit和explicit是一对转换操作符</p></li><li><p>示例</p><ul><li>实现显示转换的方法，是在石头类中写一个explicit类型的Monkey方法，传入参数石头</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ConversionExample</span><span class="token punctuation">&#123;</span>  <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Stone</span> stone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stone<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>            <span class="token class-name">Monkey</span> wukongSun <span class="token operator">=</span> <span class="token punctuation">(</span>Monkey<span class="token punctuation">)</span>stone<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>wukongSun<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Stone</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">explicit</span> <span class="token keyword">operator</span> <span class="token function">Monkey</span><span class="token punctuation">(</span><span class="token class-name">Stone</span> stone<span class="token punctuation">)</span><span class="token comment">//explicit 显示类型转换 operator 操作符</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Monkey</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Monkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token punctuation">.</span>Age <span class="token operator">=</span> stone<span class="token punctuation">.</span>Age <span class="token operator">/</span> <span class="token number">500</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> m<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">class</span> <span class="token class-name">Monkey</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实现隐式转换的方法，是在石头类中写一个Implicit类型的Monkey方法，传入参数石头</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ConversionExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Stone</span> stone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stone<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>            <span class="token class-name">Monkey</span> wukongSun <span class="token operator">=</span> stone<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>wukongSun<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Stone</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">implicit</span> <span class="token keyword">operator</span> <span class="token function">Monkey</span><span class="token punctuation">(</span><span class="token class-name">Stone</span> stone<span class="token punctuation">)</span><span class="token comment">//implicit 隐式类型转换</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Monkey</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Monkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token punctuation">.</span>Age <span class="token operator">=</span> stone<span class="token punctuation">.</span>Age <span class="token operator">/</span> <span class="token number">500</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> m<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">class</span> <span class="token class-name">Monkey</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>可以在任意一个类里定义显式或者隐式的类型转换</p></li><li><p>运算符声明必须符合以下规则：同时包含 <code>public</code> 和 <code>static</code> 修饰符。</p></li></ul></li><li><p>C#所有存在的类都有四种方法</p><ul><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220911095744482.png"></li><li>具体可以通过<code>object o; o.</code>进行查看</li><li>ToString/GetType/GetHashCode/Equals</li></ul></li></ul></li><li><p><code>%</code>和<code>/</code>操作符</p><ul><li><code>NaN</code> not number</li><li>浮点类型除法可以除0，整数除0结果为<code>Infinity</code>，即正无穷大，负数除0结果为<code>-Infinity</code><ul><li><code>double.PositiveInfinity</code> 正无穷大</li><li><code>double.NegativeInfinity </code> 负无穷大</li><li><code>double.PositiveInfinity</code> / <code>double.NegativeInfinity</code> = <code>NaN</code></li></ul></li></ul></li><li><p>类型提升在<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>都会发生</p></li><li><p><code>&gt;&gt;</code>和<code>&lt;&lt;</code>位移操作符</p><ul><li>位移操作符指的是数据在内存中的<code>二进制</code>结构向左或者向右进行一定位数的位移</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ConversionExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> x <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> strX <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PadLeft</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> strY <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PadLeft</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>strX<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>strY<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">0000000000000000000000000000011100000000000000000000000000001110714<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>当在没有溢出的情况下，左移就是乘2，右移就是除2</p></li><li><p>左移无论你是正数还是负数，补进来的数都是0</p></li><li><p>右移如果你操作的是正数，最高位补进来的数是0，如果你操作的是负数，最高位补进来的数是1</p></li></ul></li><li><p><code>unicode</code>向下兼容<code>ascii</code>、</p></li><li><p><code>is</code>和<code>as</code>操作符</p><ul><li><p>类型检验操作符</p></li><li><p><code>is</code>操作符检验的结果是布尔类型</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ConversionExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Teacher</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> res1 <span class="token operator">=</span> t <span class="token keyword">is</span> <span class="token class-name">Teacher</span><span class="token punctuation">;</span>            <span class="token class-name">Teacher</span> t1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> res2 <span class="token operator">=</span> t1 <span class="token keyword">is</span> <span class="token class-name">Teacher</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> res3 <span class="token operator">=</span> t <span class="token keyword">is</span> <span class="token class-name">Human</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> res4 <span class="token operator">=</span> t <span class="token keyword">is</span> <span class="token class-name">Animal</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> res5 <span class="token operator">=</span> t <span class="token keyword">is</span> <span class="token class-name"><span class="token keyword">object</span></span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//True</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//False</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//True，因为teacher是Human的派生类</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res4<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//True，因为teacher是Human的派生类，而Human是Animal的派生类</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res5<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//True，因为object是所有类的基类</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Animal</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Eating..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Human</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Animal</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Think</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Who I am?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Human</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I teach"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>as</code>操作符</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">object</span></span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Teacher</span> t <span class="token operator">=</span> o <span class="token keyword">as</span> <span class="token class-name">Teacher</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             t<span class="token punctuation">.</span><span class="token function">Teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>逻辑<code>&amp;</code>与操作符、<code>|</code>或操作符、<code>^</code>异或操作符</p><ul><li>操作二进制数据、图片等</li></ul></li><li><p>条件<code>&amp;&amp;</code>与操作符、<code>||</code>或操作符</p><ul><li><p>短路效应</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ConversionExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> y <span class="token operator">&amp;&amp;</span> a<span class="token operator">++</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>结果为3</p></li><li><p><strong>条件与，由于x&gt;y为False，所以右边的a++&gt;3压根不执行</strong></p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ConversionExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">||</span> a<span class="token operator">++</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>结果为</p><pre class="line-numbers language-none"><code class="language-none">Hello3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>条件或，由于x&gt;y为True，所以右边的a++&gt;3压根不执行</strong></p></li><li><p>我们需要避免短路效应</p></li></ul></li></ul></li><li><p>可空类型</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">Nullable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>         x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>HasValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-none"><code class="language-none">100True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="8-表达式，语句详解"><a href="#8-表达式，语句详解" class="headerlink" title="8. 表达式，语句详解"></a>8. 表达式，语句详解</h2><h3 id="8-1-表达式的定义"><a href="#8-1-表达式的定义" class="headerlink" title="8.1 表达式的定义"></a>8.1 表达式的定义</h3><h4 id="8-1-1-什么是表达式-Expressions"><a href="#8-1-1-什么是表达式-Expressions" class="headerlink" title="8.1.1 什么是表达式(Expressions)"></a>8.1.1 什么是表达式(Expressions)</h4><ul><li>《Programming Languages:Principles and Paradigms》这本书是这样定义的表达式<ul><li>表达式是任何一门编程语言的<strong>基本组件之一</strong>，基本组件还有命令(commands)和声明(declarations)，表达式是任何一门编程语言的<strong>核心组件</strong></li><li>表达式一种语法实体，表达式就是用来求值，<strong>成功得到一个产出值，失败将得到一个终值</strong></li><li>各种编程语言对表达式的实现不尽相同，但答题</li></ul></li></ul><h4 id="8-1-2-C-语言对表达式的定义"><a href="#8-1-2-C-语言对表达式的定义" class="headerlink" title="8.1.2 C#语言对表达式的定义"></a>8.1.2 C#语言对表达式的定义</h4><ul><li>一个表达式是由<strong>一个或多个操作数</strong>和<strong>零个或多个操作符</strong></li><li>算法逻辑的最基本（最小）单元，表达一定的算法意图</li><li>因为操作符有优先级，所以表达式也就有了优先级</li></ul><h3 id="8-2-各类表达式概览"><a href="#8-2-各类表达式概览" class="headerlink" title="8.2 各类表达式概览"></a>8.2 各类表达式概览</h3><h4 id="8-2-1-C-语言中表达式的分类"><a href="#8-2-1-C-语言中表达式的分类" class="headerlink" title="8.2.1 C#语言中表达式的分类"></a>8.2.1 C#语言中表达式的分类</h4><ul><li> A value.一个值，任何能得到值的运算</li><li> A variable. 一个变量</li><li> ……</li><li> A method group.例如：Console.WriteLine，这是一组方法，重载决策决定具体调用哪一个</li><li> <code>Console.WriteLine(&quot;Hello&quot;);</code>是两个表达式，Console.WriteLine 通过成员访问使用了一组方法，然后通过方法调用选择了一组最适合重载决策来执行</li><li> 符合表达式需要注意操作符的优先级和同优先级操作符的运算方向</li></ul><h3 id="8-3-语句（Statement）的定义"><a href="#8-3-语句（Statement）的定义" class="headerlink" title="8.3 语句（Statement）的定义"></a>8.3 语句（Statement）的定义</h3><h4 id="8-3-1-Wikipedia对语句的定义"><a href="#8-3-1-Wikipedia对语句的定义" class="headerlink" title="8.3.1 Wikipedia对语句的定义"></a>8.3.1 Wikipedia对语句的定义</h4><ul><li><p>在计算机编程学科范畴里，语句是命令式编程语言（大多是我们的高级语言）独立的（standalong）最小的独立元素，语句是表达一些将被执行的动作（action）,一个由命令式编程语言所写成的程序实际上就是由一系列语句构成的</p></li><li><p>语句是高级语言的语法——编译语言和机器语言只有指令（高级语言中的表达式对应低级语言中的指令），<strong>语句等价于一个或一组由明显逻辑关联的指令</strong>。例如：求圆柱体积</p></li><li><p>不严格的讲：</p><ul><li>高级语言由一系列语句构成</li><li>低级语言由一系列指令构成</li></ul></li><li><p>C#查看汇编语言，源代码如下</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">CsharpApp</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> result <span class="token operator">=</span> <span class="token function">GetCylinderVolume</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetCylinderVolume</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> r<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> h<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> area <span class="token operator">=</span> <span class="token number">3.1416</span> <span class="token operator">*</span> r <span class="token operator">*</span> h<span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> volume <span class="token operator">=</span> area <span class="token operator">*</span> h<span class="token punctuation">;</span>            <span class="token keyword">return</span> volume<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>右键解决方案在文件资源管理器中打开文件，然后将bin/debug目录下的exe文件复制到桌面</p></li><li><p>打开Developer Command Prompt for VS 2019输入ildasn</p><ul><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220913200549175.png"></li><li>il是中间语言，dasm是反编译</li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220913200602519.png"></li></ul></li><li><p>打开桌面的exe文件</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220913200858748.png"></p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220913200954524.png"></p></li></ul><h4 id="8-3-2-C-对语句的定义"><a href="#8-3-2-C-对语句的定义" class="headerlink" title="8.3.2 C#对语句的定义"></a>8.3.2 C#对语句的定义</h4><ul><li>C#语言的语句除了能够让程序员“顺序地”（sequentially）表达算法思想，还能通过条件判断、跳转和循环等方法控制程序逻辑的走向</li><li>简言之就是：陈述算法思想，控制逻辑走向，完成<strong>有意义的</strong>动作（action）</li><li>C#语言的语句由分号（；）结尾，但由分号结尾的不一定都是语句<ul><li>例如在一个类里定义一个变量</li><li><code>public string name;</code></li></ul></li><li>语句一定是出现在方法体里</li></ul><h3 id="8-4-语句详解"><a href="#8-4-语句详解" class="headerlink" title="8.4 语句详解"></a>8.4 语句详解</h3><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220913203325417.png"></p><ul><li><p>横线以上是基础，以下相对来说高级一点</p></li><li><p>C#语句一共有三大类</p><ul><li><p>标签语句（labeled-statement）</p></li><li><p>声明语句（declaration-statement）</p></li><li><p>嵌入式语句（embedded-statement）</p><ul><li><p>例如</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Console.WriteLine(“Hello”);语句嵌套在IF语句里</p></li></ul></li></ul></li><li><p>不是所有表达式都可以作为语句使用</p></li><li><p>例如<code>x+y</code>，<code>x==1</code>等这样只计算一个值（此值将被放弃）的表达式不能作为语句使用</p></li><li><p>单一原则：一个方法尽量只做一件事情</p><ul><li><p>例如</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetCylinderVolume</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> r<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> h<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> area <span class="token operator">=</span> <span class="token number">3.1416</span> <span class="token operator">*</span> r <span class="token operator">*</span> h<span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> volume <span class="token operator">=</span> area <span class="token operator">*</span> h<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>volume<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> volume<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这个方法计算了体积，又输出了体积</p></li></ul></li><li><p>块语句</p><ul><li><p>在方法体里写一对{}就是空的块语句</p></li><li><p>{}里无论多少代码都是<strong>一条语句</strong></p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//块语句,可以写C#中的任何语句</span>            <span class="token punctuation">&#123;</span>                hello<span class="token punctuation">:</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello,World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//标签语句</span>                            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>小技巧：Ctrl+}可以让光标快速移动到一段程序的头尾</p></li><li><p>在块语句之前声明的变量，在块语句中可见，但是在块语句之内声明的变量，出了块语句不可见</p></li></ul></li><li><p>if语句</p><ul><li><p>整个if语句是一条语句</p></li><li><p>如果不加{}(块语句)</p><ul><li><p>if（布尔类型表达式）后面只能跟一句嵌入式语句，不能跟声明语句或者是标签语句</p></li><li><p>例如，以下两个写法均是不合法的</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> hello<span class="token punctuation">:</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello,World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>逻辑优化就做代码的重构</p></li></ul></li><li><p>switch语句</p><ul><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220914115142772.png"></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//需求：80~100 -> A;60~79 -> B;40~59 ->C;0~39 ->D</span>            <span class="token class-name"><span class="token keyword">int</span></span> score <span class="token operator">=</span> <span class="token number">98</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>score<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token number">10</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        <span class="token keyword">goto</span> <span class="token keyword">case</span> <span class="token number">8</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">&#123;</span>                        <span class="token keyword">goto</span> <span class="token keyword">default</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token keyword">case</span> <span class="token number">9</span><span class="token punctuation">:</span>                <span class="token keyword">case</span> <span class="token number">8</span><span class="token punctuation">:</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span>                <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>                <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>                <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>和枚取配合很好用</li></ul></li><li><p>try语句</p><ul><li><p>让方法具有容错能力</p></li><li><p>举个例子</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> r <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">,</span> <span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> arg1<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> arg2<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>这段代码有很多地方容易出现bug</p></li><li><p>例如将<code>int r = c.Add(&quot;100&quot;, &quot;200&quot;);</code>更改为<code>int r = c.Add(&quot;abc&quot;, &quot;200&quot;);</code>就会抛出异常</p></li><li><p>最精细的异常处理就是在每个可能出现问题的地方+checked</p></li><li><p>比较简易的异常处理就是直接加上try语句</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> r <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">,</span> <span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> arg1<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> arg2<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">&#123;</span>                a <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>                b <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Your argument(s) have error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">Your argument(s) have error!0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>如何使用try语句精确的处理各类异常</p></li><li><p>我们知道int32类型有3种异常</p><ul><li>ArgumentNullException  null</li><li>FormatException     格式错误</li><li>OverflowException  溢出</li></ul></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> r <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">,</span> <span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> arg1<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> arg2<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">&#123;</span>                a <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>                b <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ArgumentNullException</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Your argument(s) have error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FormatException</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Your argument(s) are not number !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OverflowException</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Out of range!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">Your argument(s) have error!0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>代码也可以改为</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> r <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"9999999999999999"</span><span class="token punctuation">,</span> <span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> arg1<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> arg2<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">&#123;</span>                a <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>                b <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ArgumentNullException</span> ane<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ane<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FormatException</span> fe<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>fe<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OverflowException</span> ofe<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ofe<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">值对于 Int32 太大或太小。0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>我们在finally语句中一般写<strong>释放系统资源的语句</strong>，例如数据库连接，无论在执行代码过程中是否发生异常，数据库连接都能正常关闭，这样我们的软件系统就不会出现问题了</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> r <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"9999999999999999"</span><span class="token punctuation">,</span> <span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> arg1<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> arg2<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">bool</span></span> hasError <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">&#123;</span>                a <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>                b <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ArgumentNullException</span> ane<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ane<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>                hasError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FormatException</span> fe<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>fe<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>                hasError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OverflowException</span> ofe<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ofe<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>                hasError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">finally</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>hasError<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Execution has Error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Done!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">值对于 Int32 太大或太小。Execution has Error!0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>throw语句</p><ul><li>不再直接处理，谁调用谁处理</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">&#123;</span>                r <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"9999999999999999"</span><span class="token punctuation">,</span> <span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OverflowException</span> oe<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>oe<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> arg1<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> arg2<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">&#123;</span>                a <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>                b <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ArgumentNullException</span> ane<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ane<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FormatException</span> fe<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>fe<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OverflowException</span> ofe<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//Console.WriteLine(ofe.Message);</span>                <span class="token keyword">throw</span> ofe<span class="token punctuation">;</span>  <span class="token comment">//也可以直接写throw;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">值对于 Int32 太大或太小。0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>迭代语句和跳转语句</p><ul><li><p>迭代语句就是我们常说的循环语句</p></li><li><p>while语句执行0次或多次，do语句则执行1次或多次</p></li><li><p>使用while语句写一个简单的小游戏：</p><ul><li>要求是让两个小朋友输入2个数，如果这两个数的和是100，记1分，继续输入，如果两个数的和不是100，则停止，计算总分并输出</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">bool</span></span> canContinue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>canContinue<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Please input first number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">string</span></span> str1 <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Please input second number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">string</span></span> str2 <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">int</span></span> sum <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    score<span class="token operator">++</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Correct!</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">x</span><span class="token punctuation">&#125;</span></span><span class="token string">+</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">y</span><span class="token punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">sum</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Error!</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">x</span><span class="token punctuation">&#125;</span></span><span class="token string">+</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">y</span><span class="token punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">sum</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    canContinue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Your score is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">score</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"GAME OVER!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>改写成do语句更适合这个游戏的逻辑，同时还可优化少一个布尔值</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> sum<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">do</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Please input first number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">string</span></span> str1 <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Please input second number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">string</span></span> str2 <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>                sum <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    score<span class="token operator">++</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Correct!</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">x</span><span class="token punctuation">&#125;</span></span><span class="token string">+</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">y</span><span class="token punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">sum</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Error!</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">x</span><span class="token punctuation">&#125;</span></span><span class="token string">+</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">y</span><span class="token punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">sum</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Your score is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">score</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"GAME OVER!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用try语句对程序可能存在的隐患进行处理，同时使用跳转语句continue</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> sum<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">do</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Please input first number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">string</span></span> str1 <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">try</span>                <span class="token punctuation">&#123;</span>                    x <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//可能存在隐患的语句</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">catch</span>                 <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The first number has problem!Restart:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Please input second number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">string</span></span> str2 <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span>                <span class="token punctuation">&#123;</span>                    y <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//可能存在隐患的语句</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">catch</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The second number has problem!Restart:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                                sum <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    score<span class="token operator">++</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Correct!</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">x</span><span class="token punctuation">&#125;</span></span><span class="token string">+</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">y</span><span class="token punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">sum</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Error!</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">x</span><span class="token punctuation">&#125;</span></span><span class="token string">+</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">y</span><span class="token punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">sum</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Your score is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">score</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"GAME OVER!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>增加需求，如果其中有一个小朋友玩腻了输入end，则结束循环</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> sum<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">do</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Please input first number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">string</span></span> str1 <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"end"</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">try</span>                <span class="token punctuation">&#123;</span>                    x <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//可能存在隐患的语句</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">catch</span>                 <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The first number has problem!Restart:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Please input second number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">string</span></span> str2 <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"end"</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">try</span>                <span class="token punctuation">&#123;</span>                    y <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//可能存在隐患的语句</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">catch</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The second number has problem!Restart:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                                sum <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    score<span class="token operator">++</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Correct!</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">x</span><span class="token punctuation">&#125;</span></span><span class="token string">+</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">y</span><span class="token punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">sum</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Error!</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">x</span><span class="token punctuation">&#125;</span></span><span class="token string">+</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">y</span><span class="token punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">sum</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Your score is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">score</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"GAME OVER!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>什么样的集合能够被迭代</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> intArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>intArray<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>intArray <span class="token keyword">is</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  运行结果如下</p> <pre class="line-numbers language-none"><code class="language-none">System.Int32[]True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>当你发现一个数据类型是[]结尾，那么这个数据类型就是数组类型</p></li><li><p>C#中所有数组的基类是Array</p></li><li><p>如果你发现一个单词的首字母是I开头的类，那么这就是一个接口，I是Interface的缩写</p></li><li><p>GetEnumerator，Enumerator 刘老师讲的是迭代器</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token comment">//需要引用的名称空间</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//int[]是Array的子类，所以int[]也天然继承了IEnumerator接口的GetEnumerator方法</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> intArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">IEnumerator</span> enumerator <span class="token operator">=</span> intArray<span class="token punctuation">.</span><span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//指月</span>            <span class="token comment">//IEnumerator是可以被遍历的集合</span>            <span class="token comment">//GetEnumerator获得这个集合的迭代器</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>enumerator<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//返回一个布尔类型，如果迭代器可以向后移动返回True</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>enumerator<span class="token punctuation">.</span>Current<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回当前正在访问的元素</span>            <span class="token punctuation">&#125;</span>            enumerator<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把迭代器拨回集合的最开始</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>enumerator<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>enumerator<span class="token punctuation">.</span>Current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//泛型</span>            <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> intList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">IEnumerator</span> enumerator2 <span class="token operator">=</span> intList<span class="token punctuation">.</span><span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//指月</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>enumerator2<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>enumerator2<span class="token punctuation">.</span>Current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">123123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>foreach语句</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>                        <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> intArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> iA <span class="token keyword">in</span> intArray<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>iA<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>相比上面的迭代语句，方便很多</li></ul></li></ul></li></ul><hr><h2 id="9-字段、属性、索引器、常量"><a href="#9-字段、属性、索引器、常量" class="headerlink" title="9. 字段、属性、索引器、常量"></a>9. 字段、属性、索引器、常量</h2><h3 id="9-1-字段"><a href="#9-1-字段" class="headerlink" title="9.1 字段"></a>9.1 字段</h3><h4 id="9-1-1-什么是字段"><a href="#9-1-1-什么是字段" class="headerlink" title="9.1.1 什么是字段"></a>9.1.1 什么是字段</h4><ul><li><p>字段（field）是一种表示与对象或类型（<strong>类与结构体</strong>）关联的变量</p><ul><li>field在英文中的田地的意思 字段是数据存放的空间</li></ul></li><li><p>字段是类型的成员，旧称”成员变量“</p></li><li><p>与对象关联的字段亦称”实例字段“</p></li><li><p>与类型关联的字段称为”静态字段“，由static修饰</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DataMemberExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">List<span class="token punctuation">&lt;</span>Student<span class="token punctuation">></span></span> stuList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Student<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stu<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>                stu<span class="token punctuation">.</span>Score <span class="token operator">=</span> i<span class="token punctuation">;</span>                stuList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name"><span class="token keyword">int</span></span> totalAge <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> totalScore <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> stu <span class="token keyword">in</span> stuList<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                totalAge <span class="token operator">+=</span> stu<span class="token punctuation">.</span>Age<span class="token punctuation">;</span>                totalScore <span class="token operator">+=</span> stu<span class="token punctuation">.</span>Score<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Student<span class="token punctuation">.</span>AverageAge <span class="token operator">=</span> totalAge <span class="token operator">/</span> Student<span class="token punctuation">.</span>Amount<span class="token punctuation">;</span>            Student<span class="token punctuation">.</span>AverageScore <span class="token operator">=</span> totalScore <span class="token operator">/</span> Student<span class="token punctuation">.</span>Amount<span class="token punctuation">;</span>            Student<span class="token punctuation">.</span><span class="token function">ReportAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Student<span class="token punctuation">.</span><span class="token function">ReportAverageAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Student<span class="token punctuation">.</span><span class="token function">ReportAverageScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//实例字段，与对象关联</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Score<span class="token punctuation">;</span>        <span class="token comment">//静态字段，与类型关联</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> AverageAge<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> AverageScore<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> Amount<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Student<span class="token punctuation">.</span>Amount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ReportAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>Amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ReportAverageAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>AverageAge<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ReportAverageScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>AverageScore<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">1002449<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="9-1-2-字段的声明"><a href="#9-1-2-字段的声明" class="headerlink" title="9.1.2 字段的声明"></a>9.1.2 字段的声明</h4><ul><li>参见C#语言定义文档</li><li>尽管字段声明带有分号，但它不是语句</li><li>字段的名字一定是名词</li></ul><h4 id="9-1-3-字段的初始化"><a href="#9-1-3-字段的初始化" class="headerlink" title="9.1.3 字段的初始化"></a>9.1.3 字段的初始化</h4><ul><li><p>无显示初始化时，字段获得其类型的默认值，所以字段”永远不会未被初始化“</p></li><li><p>实例字段初始化的时机——对象创建时</p></li><li><p>静态字段初始化的时机——类型被加载（load）时</p><ul><li>静态构造器被执行的时候</li></ul></li><li><p>在声明字段的时候赋初始值和在写构造器时赋值是一样的</p></li><li><p>静态构造器</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> Amount<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">static</span> student<span class="token comment">//注意不加public</span><span class="token punctuation">&#123;</span>Amount<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>以上的写法也是等价的</li></ul></li></ul><h4 id="9-1-4-只读字段"><a href="#9-1-4-只读字段" class="headerlink" title="9.1.4 只读字段"></a>9.1.4 只读字段</h4><ul><li><p>实例只读字段</p><ul><li><code>public readonly int ID</code> <strong>只读实例字段</strong>，只能初始化一次</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DataMemberExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu<span class="token punctuation">.</span>ID <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//无法编译通过</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> ID<span class="token punctuation">;</span><span class="token comment">//实例只读字段</span>        <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ID <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>静态只读字段</p><ul><li><p>类的静态只读字段</p></li><li><p>只能够被初始化，不能再被赋值</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DataMemberExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Brush<span class="token punctuation">.</span>DefaultColor<span class="token punctuation">.</span>Red<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Brush<span class="token punctuation">.</span>DefaultColor<span class="token punctuation">.</span>Green<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Brush<span class="token punctuation">.</span>DefaultColor<span class="token punctuation">.</span>Blue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">struct</span> <span class="token class-name">Color</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Red<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Green<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Blue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Brush</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Color</span> DefaultColor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Red <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> Green <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> Blue <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>静态构造函数只需要把public改成static即可</li></ul></li></ul><h3 id="9-2-属性"><a href="#9-2-属性" class="headerlink" title="9.2 属性"></a>9.2 属性</h3><h4 id="9-2-1-什么是属性"><a href="#9-2-1-什么是属性" class="headerlink" title="9.2.1 什么是属性"></a>9.2.1 什么是属性</h4><ul><li><p>属性（property）是一种用于<font color="blue">访问对象或类型的特征</font>的成员，<font color="blue">特征反应了状态</font></p></li><li><p>属性是字段的自然扩展</p><ul><li>从命名上看，field（字段）更偏向于实例对象在内存中的布局，property（属性）更偏于反映现实世界对象的特征</li><li>对外：暴露数据，数据可以是存储在字段里的，也可以是动态计算出来的</li><li>对内：保护字段不被非法值”污染“</li></ul></li><li><p>属性由Get/Set方法对进化而来</p></li><li><p>又一个”语法糖“——属性背后的秘密</p></li><li><p>示例如下：</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DataMemberExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu1<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu2<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu3<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token comment">//非法值</span>            <span class="token class-name"><span class="token keyword">int</span></span> avgAge <span class="token operator">=</span> <span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>Age <span class="token operator">+</span> stu2<span class="token punctuation">.</span>Age <span class="token operator">+</span> stu3<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>avgAge<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Age<span class="token punctuation">;</span><span class="token comment">//使用字段，首字母大写</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>我们知道200岁对于人类来说是1个非法值，如果直接用字段，这个字段就被污染了</p></li><li><p>可以改成如下写法进行保护字段，C++/JAVA目前仍然采用的方法</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DataMemberExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu2<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu3<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> avgAge <span class="token operator">=</span> <span class="token punctuation">(</span>stu1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> stu2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> stu3<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>avgAge<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> age<span class="token punctuation">;</span>         <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">value</span> <span class="token operator">&lt;=</span> <span class="token number">120</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"age value has error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> age<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>说明C++/JAVA是没有属性这个概念的</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DataMemberExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu1<span class="token punctuation">.</span>Age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu2<span class="token punctuation">.</span>Age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu3<span class="token punctuation">.</span>Age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> avgAge <span class="token operator">=</span> <span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>Age <span class="token operator">+</span> stu2<span class="token punctuation">.</span>Age <span class="token operator">+</span> stu3<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>avgAge<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> age<span class="token punctuation">;</span> <span class="token comment">//字段必须是私有的或者受保护的</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> Age  <span class="token comment">//属性,需要和字段名称不同</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">get</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">set</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">value</span> <span class="token operator">&lt;=</span> <span class="token number">120</span><span class="token punctuation">)</span>    <span class="token comment">//value是上下文关键字，微软默认规定的变量</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"age value has error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-2-2-属性的声明"><a href="#9-2-2-属性的声明" class="headerlink" title="9.2.2 属性的声明"></a>9.2.2 属性的声明</h4><ul><li><p>完整声明——后台（back）成员变量与访问器（<font color="89BC">注意使用code snippet和refactor工具</font>）</p><ul><li>Developer Command Prompt for VS 2019</li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220916150312014.png"></li><li>可以看到编译器自动给我们写了get和set的方法，所以属性也是一种语法糖</li><li>propfull + tab + tab 快速生成属性</li><li>属性是static的，字段也必须是static的</li><li>还有一种快速声明字段的方法<ul><li>例如<code>private int age;</code>将光标定位到<strong>age</strong>字段上</li><li>按住CTRL键，然后按R+E</li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220916151705312.png"></li></ul></li></ul></li><li><p>简略声明——只有访问器（查看IL代码）</p><ul><li><p>和只有一个公有字段是完全一样的，不安全</p></li><li><p>带有这种属性的类，一般只用来传递数据</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age<span class="token punctuation">&#123;</span><span class="token keyword">get</span><span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>动态计算值的属性</p></li><li><p>注意实例属性和静态属性</p></li><li><p>属性的名字一定是名词</p></li><li><p>只读属性——只有getter没有setter</p><ul><li>尽管语法上正确，几乎没有人使用”只读属性“，因为属性的主要目的是通过向外暴露数据而表示对象/类型的状态</li></ul></li></ul><h4 id="9-2-3-属性与字段的关系"><a href="#9-2-3-属性与字段的关系" class="headerlink" title="9.2.3 属性与字段的关系"></a>9.2.3 属性与字段的关系</h4><ul><li><p>一般情况下，它们都用于表示实体（对象或类型）的状态</p></li><li><p>属性大多数情况是字段的包装器（wrapper）</p></li><li><p>建议：永远使用属性（而不是字段）来暴露数据，即字段永远都是private或protected的</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">PropertyExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> studentOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            studentOne<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>            studentOne<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"8yyy"</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">studentOne<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">'s age is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">studentOne<span class="token punctuation">.</span>Age</span><span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> studentTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            studentTwo<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">66</span><span class="token punctuation">;</span>            studentTwo<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"tryyy"</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">studentTwo<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">'s age is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">studentTwo<span class="token punctuation">.</span>Age</span><span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _age<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> _name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age        <span class="token punctuation">&#123;</span>            <span class="token keyword">get</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> _age<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">set</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">value</span> <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    _age <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Student's Age is Error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name        <span class="token punctuation">&#123;</span>            <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _name<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>            <span class="token keyword">set</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">==</span> <span class="token string">"8yyy"</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    _name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello,8yyy!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    _name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Hi,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">value</span></span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">Hello,8yyy!8yyy&#39;s age is 8.未经处理的异常:  System.Exception: Student&#39;s Age is Error!......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-2-4-属性补充"><a href="#9-2-4-属性补充" class="headerlink" title="9.2.4 属性补充"></a>9.2.4 属性补充</h4><p>有时，需要将属性初始化为其类型默认值以外的值。 C# 通过在属性的右括号后设置值达到此目的。 对于 <code>FirstName</code> 属性的的初始值，你可能更希望设置为空字符串而非 <code>null</code>。 可按如下所示进行指定：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FirstName <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-3-索引器"><a href="#9-3-索引器" class="headerlink" title="9.3 索引器"></a>9.3 索引器</h3><ul><li><p>什么是索引器</p><ul><li>索引器（indexer）是这样一种成员：它使对象能够用与数组相同的方法（即使用下标）进行索引</li><li>indexer + tab + tab</li></ul></li><li><p>索引器的声明</p><ul><li>参见C#语言定义文档</li><li>注意：没有静态索引器</li></ul></li><li><p>示例</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DataMemberExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu<span class="token punctuation">[</span><span class="token string">"Math"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> mathScore <span class="token operator">=</span> stu<span class="token punctuation">[</span><span class="token string">"Math"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>mathScore<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span> scoreDictionary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name"><span class="token keyword">string</span></span> subject<span class="token punctuation">]</span>    <span class="token comment">//索引器，indexer</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">get</span>             <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scoreDictionary<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scoreDictionary<span class="token punctuation">[</span>subject<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">set</span>             <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">.</span>HasValue <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Score cannot be null."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scoreDictionary<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>scoreDictionary<span class="token punctuation">[</span>subject<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>scoreDictionary<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-4-常量"><a href="#9-4-常量" class="headerlink" title="9.4 常量"></a>9.4 常量</h3><h4 id="9-4-1-什么是常量"><a href="#9-4-1-什么是常量" class="headerlink" title="9.4.1 什么是常量"></a>9.4.1 什么是常量</h4><ul><li>常量（constant）是表示常量值（即，可以在编译时计算的值）的类成员<ul><li>必须使用类型+.的形式访问常量</li><li><code>Math.PI</code> 就是一个常量</li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220916171749814.png"></li></ul></li><li>常量隶属于类型而不是对象，即没有”实例常量“<ul><li>“实例常量”的角色由只读实例字段来担当</li></ul></li><li>注意区分成员常量与局部常量<ul><li><code>Math.PI</code>就是一个成员常量</li></ul></li></ul><h4 id="9-4-2-常量的声明"><a href="#9-4-2-常量的声明" class="headerlink" title="9.4.2 常量的声明"></a>9.4.2 常量的声明</h4><h4 id="9-4-3-各种“只读”的引用场景"><a href="#9-4-3-各种“只读”的引用场景" class="headerlink" title="9.4.3 各种“只读”的引用场景"></a>9.4.3 各种“只读”的引用场景</h4><ul><li>为了提高程序可读性和执行效率——常量</li><li>为了防止对象的值被改变——只读字段</li><li>向外暴露不允许修改的数据——只读属性（静态或非静态），功能与常量有一些重叠</li><li>当希望成为常量的值其类型不能被常量声明接受时（类/自定义结构体）——静态只读字段</li></ul><hr><h2 id="10-传值-输出-引用-数组-具名-可选参数，扩展方法-this参数"><a href="#10-传值-输出-引用-数组-具名-可选参数，扩展方法-this参数" class="headerlink" title="10. 传值/输出/引用/数组/具名/可选参数，扩展方法(this参数)"></a>10. 传值/输出/引用/数组/具名/可选参数，扩展方法(this参数)</h2><h3 id="10-1-传值参数"><a href="#10-1-传值参数" class="headerlink" title="10.1 传值参数"></a>10.1 传值参数</h3><ul><li><p>声明时<font color="red">不带修饰符</font>的形参是值形参。一个<font color="red">值形参对应于一个局部变量</font>，只是它的<font color="red">初始值来自该方法调用所提供的相应实参</font></p><ul><li>public void add(int a)，a就是值形参，因为它不带修饰符</li></ul></li><li><p><font color="red">允许方法将新值赋给值参数。这样的赋值只影响由该值形参表示的局部存储位置（方法内有效），而不会影响在方法调用时由调用方给出的实参</font></p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220916172808169.png"></p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ConstantExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            stu<span class="token punctuation">.</span><span class="token function">AddOne</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//y的值不会发生变化</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddOne</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul><pre class="line-numbers language-none"><code class="language-none">101100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220916173949040.png"></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Name <span class="token operator">=</span> <span class="token string">"Tim"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token function">SomeMethod</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SomeMethod</span><span class="token punctuation">(</span><span class="token class-name">Student</span> stu<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Name <span class="token operator">=</span> <span class="token string">"Tim"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token comment">//像这种通过传值参数将一个引用类型变量传过来</span>            <span class="token comment">//将这个变量先前的引用对象丢弃掉，而在方法内部创建</span>            <span class="token comment">//一个新的对象，在实际操作中没有啥意义</span>              Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul><pre class="line-numbers language-none"><code class="language-none">46104728,Tim12289376,Tim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>像这种通过传值参数将一个引用类型变量传过来将这个变量先前的引用对象丢弃掉，而在方法内部创建一个新的对象，在实际操作中没有啥意义</strong></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Name <span class="token operator">=</span> <span class="token string">"Tim"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token function">SomeMethod</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SomeMethod</span><span class="token punctuation">(</span><span class="token class-name">Student</span> stu<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            stu<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span><span class="token comment">//副作用，side-effect</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下</li></ul> <pre class="line-numbers language-none"><code class="language-none">46104728,Tom46104728,Tom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>向以上这种副作用，我们平时编程的时候需要避免</li></ul><h3 id="10-2-引用参数"><a href="#10-2-引用参数" class="headerlink" title="10.2 引用参数"></a>10.2 引用参数</h3><ul><li><p>引用形参是<font color="red">用ref修饰符声明的形参</font>。与值形参不同，<font color="red">引用形参并不创建新的存储位置。</font>相反，<font color="red">引用形参表示的存储位置恰是在方法调用中作为实参给出的那个变量所表示的存储位置。</font></p></li><li><p>当形参为引用形参时，方法调用中的实参必须由关键字ref并后接一个与形参类型相同的 variable-reference 组成。<font color="red">变量在可以作为引用形参传递之前，必须先明确赋值。</font></p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220916192704039.png"></p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//必须先明确赋值</span>            <span class="token function">IWantSideEffect</span><span class="token punctuation">(</span><span class="token keyword">ref</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//101</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">IWantSideEffect</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            x <span class="token operator">+=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220916193024608.png"></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> outterStu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Name <span class="token operator">=</span> <span class="token string">"Tim"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">outterStu<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">outterStu<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">IWantSideEffect</span><span class="token punctuation">(</span><span class="token keyword">ref</span> outterStu<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">outterStu<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">outterStu<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">IWantSideEffect</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name">Student</span> stu<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Name <span class="token operator">=</span> <span class="token string">"Tom"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">46104728,Tim---------------------------------------12289376,Tom12289376,Tom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220916193657600.png"></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> outterStu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Name <span class="token operator">=</span> <span class="token string">"Tim"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">outterStu<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">outterStu<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">IWantSideEffect</span><span class="token punctuation">(</span><span class="token keyword">ref</span> outterStu<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">outterStu<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">outterStu<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">IWantSideEffect</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name">Student</span> stu<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            stu<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span><span class="token comment">//对象不变</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">46104728,Tim---------------------------------------46104728,Tom46104728,Tom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>引用参数和值参数的对比</strong></p><ul><li>上述例子在去掉ref之后所得的结果与引用参数结果相同</li><li>从效果上来看一模一样</li><li>但是在内存基理不一样<ul><li>值参数创建副本。两个参数所指向的内存地址不同，他们同时指向同一个对象所在堆的内存地址</li><li>引用参数不创建副本。两个参数所指向的内存地址就是同一个内存地址，而这个地址指向对象所在堆的内存地址</li></ul></li></ul></li></ul><h3 id="10-3-输出形参"><a href="#10-3-输出形参" class="headerlink" title="10.3 输出形参"></a>10.3 输出形参</h3><ul><li><p><font color="red">用out修饰符声明的形参</font>是输出形参。类似于引用实参，<font color="red">输出形参不创建新的存储位置。</font>相反，输出形参表示的存储位置恰是在该方法调用中作为实参给出的那个变量所表示的存储位置。</p></li><li><p><font color="red">变量在可以作为输出形参传递之前不一定需要明确赋值</font></p></li><li><p><font color="red">在方法返回之前，该方法的每个输出形参都必须明确赋值</font></p></li><li><p>引用参数为了改变变量的值，所以需要先进行赋值，而输出参数是为了通过这个参数向外输出，原来的值必然被丢弃，所以不要求先赋值</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220916195204303.png"></p></li><li><p>tyrparse是一个带有输出的方法</p><ul><li>bool double.TryParse(string s,out double result)</li><li>作用就是将字符串s转化为double型的result</li></ul></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Please input first number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> arg1 <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">bool</span></span> b1 <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> <span class="token keyword">out</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b1 <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"input error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Please input second number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> arg2 <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">bool</span></span> b2 <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>arg2<span class="token punctuation">,</span> <span class="token keyword">out</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b2 <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"input error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name"><span class="token keyword">double</span></span> z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>自己写一个带有输出参数的方法</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">bool</span></span> b <span class="token operator">=</span> DoubleParse<span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span><span class="token string">"789"</span><span class="token punctuation">,</span> <span class="token keyword">out</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//790</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">DoubleParse</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">TryParse</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> input<span class="token punctuation">,</span><span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">double</span></span> result<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span>            <span class="token punctuation">&#123;</span>                result <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span>             <span class="token punctuation">&#123;</span>                result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220916200654390.png"></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">bool</span></span> b <span class="token operator">=</span> StudentFactory<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token string">"Tim"</span><span class="token punctuation">,</span>  <span class="token keyword">out</span> stu<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"student </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">'s age is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span>Age</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">StudentFactory</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Create</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> stuAge<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> stuName<span class="token punctuation">,</span><span class="token keyword">out</span> <span class="token class-name">Student</span> stu<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            stu <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>stuName<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stuAge<span class="token operator">&lt;</span><span class="token number">20</span> <span class="token operator">||</span> stuAge <span class="token operator">></span> <span class="token number">80</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Name <span class="token operator">=</span> stuName<span class="token punctuation">,</span> Age <span class="token operator">=</span> stuAge <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-4-数组参数"><a href="#10-4-数组参数" class="headerlink" title="10.4 数组参数"></a>10.4 数组参数</h3><ul><li><p>必须是形参列表中的<strong>最后一个</strong>，由params修饰，只能有一个</p><ul><li>因为如果不是最后一个，编译器就无法判断哪个参数是数组参数后面的参数</li></ul></li><li><p>举例：String.Format方法和String.Split方法</p></li><li><p>先来看一个例子</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> myIntArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> <span class="token function">CalculateSum</span><span class="token punctuation">(</span>myIntArray<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">CalculateSum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> intArray<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> intArray<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                sum <span class="token operator">+=</span> item<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>你会发现在调用CalculateSum方法时，必须提前声明一个数组myIntArray，这样就会显得非常啰嗦，接下来采用params修饰符</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> <span class="token function">CalculateSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//不需要提前定义一个int数组</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">CalculateSum</span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> intArray<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> intArray<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                sum <span class="token operator">+=</span> item<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>实际上我们一直有用到params修饰符</p></li><li><p>例如</p><pre class="line-numbers language-none"><code class="language-none">int x &#x3D; 1;         int y &#x3D; 2;         int z &#x3D; x + y;         Console.WriteLine(&quot;&#123;0&#125;+&#123;1&#125;&#x3D;&#123;2&#125;&quot;,x,y,z);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220917162756896.png"></p></li><li><p>其中一个重载如图所示，这就是为什么我们可以自由输入任意个数的参数，实际上它会先声明一个object类型的数组，然后把x,y,z放入这个数组，然后再传进我们的WriteLine方法</p></li><li><p>再来看一个例子</p></li><li><p>string类型具有实例方法Split()，它会基于数组中的字符将字符串拆分为多个子字符串</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">string</span></span> str <span class="token operator">=</span> <span class="token string">"Tim;Tom,Amy.Lisa"</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token char">';'</span><span class="token punctuation">,</span> <span class="token char">','</span><span class="token punctuation">,</span> <span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> result<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">TimTomAmyLisa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-5-具名参数"><a href="#10-5-具名参数" class="headerlink" title="10.5 具名参数"></a>10.5 具名参数</h3><ul><li><p>参数的位置不受约束</p><ul><li>首先举个例子，不具名调用</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">PrintInfo</span><span class="token punctuation">(</span><span class="token string">"Tim"</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PrintInfo</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> age<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Hello </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">name</span><span class="token punctuation">&#125;</span></span><span class="token string">,you are </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">age</span><span class="token punctuation">&#125;</span></span><span class="token string"> years old!"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>当你在调用PrintInfo()方法时，传递过去的实参必须与形参相对应</p></li><li><p>接下来是具名调用</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">PrintInfo</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">age</span><span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span><span class="token string">"Tim"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PrintInfo</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> age<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Hello </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">name</span><span class="token punctuation">&#125;</span></span><span class="token string">,you are </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">age</span><span class="token punctuation">&#125;</span></span><span class="token string"> years old!"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>具名调用能使代码<strong>可读性更高</strong>，且不受位置约束</p></li><li><p>严格来讲具名调用不是参数的某个种类，而是一种使用方法</p></li></ul></li></ul><h3 id="10-6-可选参数"><a href="#10-6-可选参数" class="headerlink" title="10.6 可选参数"></a>10.6 可选参数</h3><ul><li><p>参数因为具有默认值而变得“可选”</p><ul><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220917164636475.png"></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">PrintInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PrintInfo</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token operator">=</span><span class="token string">"Tim"</span><span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> age<span class="token operator">=</span><span class="token number">34</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Hello </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">name</span><span class="token punctuation">&#125;</span></span><span class="token string">,you are </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">age</span><span class="token punctuation">&#125;</span></span><span class="token string"> years old!"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不推荐使用可选参数</p></li></ul><h3 id="10-7-扩展方法（this参数）"><a href="#10-7-扩展方法（this参数）" class="headerlink" title="10.7 扩展方法（this参数）"></a>10.7 扩展方法（this参数）</h3><ul><li><p>方法必须是公有的、静态的，即被public static所修饰</p></li><li><p>必须是形参列表中的第一个，由this修饰</p></li><li><p>必须由一个静态类（一般类名为SomeTypeExtension）来统一收纳SomeType类型的扩展方法</p></li><li><p>实例写一个double型的扩展方法，代码如下：</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> x <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">Round</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//扩展方法的应用</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>    <span class="token comment">//扩展方法必须定义在一个静态类</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DoubleExtention</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//方法必须是公有的、静态的</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Round</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name"><span class="token keyword">double</span></span> input<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> digits<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Round</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> digits<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>举例：LINQ方法</p></li><li><p>代码如下：</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> myList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">bool</span></span> result <span class="token operator">=</span> <span class="token function">AllGreaterThanTen</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">AllGreaterThanTen</span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> intList<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> intList<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接下来使用linq方法</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token comment">//调用类库linq</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> myList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">bool</span></span> result <span class="token operator">=</span> myList<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span>i <span class="token operator">=></span> i <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>All是一个扩展方法</p><ul><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220917170800750.png"></li></ul></li></ul><p>总结：</p><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220917170846626.png"></p><hr><h2 id="11-委托详解"><a href="#11-委托详解" class="headerlink" title="11. 委托详解"></a>11. 委托详解</h2><h3 id="11-1-什么是委托"><a href="#11-1-什么是委托" class="headerlink" title="11.1 什么是委托"></a>11.1 什么是委托</h3><ul><li><p>委托（delegate）是函数指针的“升级版”</p><ul><li><p>delegate    授(权)；把(工作、权力等)委托(给下级)；选派(某人做某事)；</p></li><li><p>实例：C/C++中的函数指针</p><ul><li>以C语言为例</li></ul> <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span>  x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>z <span class="token operator">=</span> <span class="token function">Add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d+%d=%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>z <span class="token operator">=</span> <span class="token function">Sub</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d-%d=%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>以上的代码通过函数的名字调用函数，称为直接调用</p></li><li><p>下面采用函数指针的方法</p></li></ul> <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Calc<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//函数指针</span><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span>  x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>Calc funcPoint1 <span class="token operator">=</span> <span class="token operator">&amp;</span>Add<span class="token punctuation">;</span><span class="token comment">//把函数Add的地址赋值给函数指针类型Calc的变量funcPoint1</span>Calc funcPoint2 <span class="token operator">=</span> <span class="token operator">&amp;</span>Sub<span class="token punctuation">;</span> <span class="token comment">//把函数Sub的地址赋值给函数指针类型Calc的变量funcPoint2</span>z <span class="token operator">=</span> <span class="token function">funcPoint1</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d+%d=%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>z <span class="token operator">=</span> <span class="token function">funcPoint2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d-%d=%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>运行结果是一样的</p><pre class="line-numbers language-none"><code class="language-none">100+200&#x3D;300100-200&#x3D;-100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>一切皆地址</p><ul><li>变量（数据）是以某个地址为起点的一段内存中所存储的值</li><li>函数（算法）是以某个地址为起点的一段内存中所存储的一组机器语言指令</li></ul></li><li><p>直接调用与间接调用</p><ul><li>直接调用：通过<strong>函数名</strong>来调用函数，CPU通过函数名直接获得函数所在地址并开始执行 ——&gt; 返回</li><li>间接调用：通过<strong>函数指针</strong>来调用函数，CPU通过读取函数指针存储的值获得函数所在地址并开始执行 ——&gt; 返回</li></ul></li><li><p>Java中没有与委托相对应的功能实体</p></li><li><p>委托的简单使用</p><ul><li><p>Action委托</p></li><li><p>Action委托<strong>无返回值</strong>的泛型委托</p></li></ul></li><li><p>Func委托</p><ul><li><p>Func委托是泛型委托，必须具备返回值</p></li><li><p>下面来举个例子</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DelegateExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> calculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//Action委托 是无参委托</span>            <span class="token class-name">Action</span> action <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>calculator<span class="token punctuation">.</span>Report<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意Report不能加()，因为加()就是要使用这个方法</span>            calculator<span class="token punctuation">.</span><span class="token function">Report</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//直接调用</span>            <span class="token comment">//间接调用,以下两种写法是一样的 </span>            action<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//Func委托 泛型委托</span>            <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span> func1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>calculator<span class="token punctuation">.</span>Add<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span> func2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>calculator<span class="token punctuation">.</span>Sub<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2个参数+返回值result，所以是三个int</span>            <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            z <span class="token operator">=</span> func1<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>            z <span class="token operator">=</span> func2<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>            z <span class="token operator">=</span> <span class="token function">func1</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>            z <span class="token operator">=</span> <span class="token function">func2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Report</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I have 3 methods."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">I have 3 methods.I have 3 methods.I have 3 methods.300-100300-100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="11-2-委托的声明（自定义委托）"><a href="#11-2-委托的声明（自定义委托）" class="headerlink" title="11.2 委托的声明（自定义委托）"></a>11.2 委托的声明（自定义委托）</h3><ul><li><p>委托是一种类（class），类是数据类型所以委托也是一种数据类型</p><ul><li><p>证明：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">Type</span> t <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Action</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>IsClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//运行结果为True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>举例如下：</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DelegateExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Calc</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//委托的声明</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> calculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Calc</span> calc1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calc</span><span class="token punctuation">(</span>calculator<span class="token punctuation">.</span>Add<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Calc</span> calc2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calc</span><span class="token punctuation">(</span>calculator<span class="token punctuation">.</span>Sub<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Calc</span> calc3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calc</span><span class="token punctuation">(</span>calculator<span class="token punctuation">.</span>Mul<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Calc</span> calc4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calc</span><span class="token punctuation">(</span>calculator<span class="token punctuation">.</span>Div<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> <span class="token function">calc1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> <span class="token function">calc2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> <span class="token function">calc3</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> <span class="token function">calc4</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> result <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Mul</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> result <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Div</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> result <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>它的声明方式与一般类不同，主要是为了照顾可读性和C/C++传统</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Calc</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//委托的声明</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>注意声明委托的位置</p><ul><li><p>避免写错地方结果声明称嵌套类型</p></li><li><p>例如写成如下格式就是声明嵌套类型</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Program</span>   <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Calc</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//委托的声明</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>委托与所封装的方法必须“类型兼容”</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Calc</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//委托的声明</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>返回值的数据类型一致</p></li><li><p>参数列表在个数和数据类型上一致</p></li></ul></li></ul><h3 id="11-3-委托的一般使用"><a href="#11-3-委托的一般使用" class="headerlink" title="11.3 委托的一般使用"></a>11.3 委托的一般使用</h3><ul><li><p>实例：把方法作为参数传给另一个方法</p><ul><li><p>正确使用1：<font color="red">模板方法</font>，“借用”指定的外部方法来产生结果</p><ul><li><p>相当于“填空题”</p></li><li><p>常位于代码中部</p></li><li><p>委托有返回值</p></li><li><p>示例：</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DelegateExample</span><span class="token punctuation">&#123;</span>        <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">ProductFactory</span> productFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProductFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">WrapFactory</span> wrapFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WrapFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Func<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span> fun1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span><span class="token punctuation">(</span>productFactory<span class="token punctuation">.</span>MakePizza<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Func<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span> fun2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span><span class="token punctuation">(</span>productFactory<span class="token punctuation">.</span>MakeToyCar<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Box</span> box1 <span class="token operator">=</span> wrapFactory<span class="token punctuation">.</span><span class="token function">WrapProcut</span><span class="token punctuation">(</span>fun1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Box</span> box2 <span class="token operator">=</span> wrapFactory<span class="token punctuation">.</span><span class="token function">WrapProcut</span><span class="token punctuation">(</span>fun2<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>box1<span class="token punctuation">.</span>Product<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>box2<span class="token punctuation">.</span>Product<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Product</span>   <span class="token comment">//产品类</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span>  Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>   <span class="token comment">//属性的简略声明，一般只用来传递数据</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Box</span>       <span class="token comment">//盒子类</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Product</span> Product <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">WrapFactory</span>   <span class="token comment">//包装厂的类</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//模板方法</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Box</span> <span class="token function">WrapProcut</span><span class="token punctuation">(</span><span class="token class-name">Func<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span> getProduct<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Box</span> box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//准备box</span>            <span class="token class-name">Product</span> product <span class="token operator">=</span> getProduct<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取产品</span>            box<span class="token punctuation">.</span>Product <span class="token operator">=</span> product<span class="token punctuation">;</span><span class="token comment">//将产品装进box</span>            <span class="token keyword">return</span> box<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">ProductFactory</span>    <span class="token comment">//产品生产厂的类</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Product</span> <span class="token function">MakePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//制作披萨的方法</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Pizza"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> product<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Product</span> <span class="token function">MakeToyCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//制作玩具车的方法</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"ToyCar"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> product<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优势：只需要扩展ProductFactory类（产品工厂），最大限度的实现了代码的重复使用</li></ul></li><li><p>正确使用2：<font color="red">回调（callback）方法</font>，调用指定的外部方法</p><ul><li><p>回调方法也被称为好莱坞方法</p></li><li><p>相当于“流水线”</p></li><li><p>常位于代码末尾</p></li><li><p>委托无返回值</p></li><li><p>示例如下：</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DelegateExample</span><span class="token punctuation">&#123;</span>        <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">ProductFactory</span> productFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProductFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">WrapFactory</span> wrapFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WrapFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Func<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span> fun1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span><span class="token punctuation">(</span>productFactory<span class="token punctuation">.</span>MakePizza<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Func<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span> fun2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span><span class="token punctuation">(</span>productFactory<span class="token punctuation">.</span>MakeToyCar<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Action<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span> log <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span><span class="token punctuation">(</span>logger<span class="token punctuation">.</span>Log<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Box</span> box1 <span class="token operator">=</span> wrapFactory<span class="token punctuation">.</span><span class="token function">WrapProcut</span><span class="token punctuation">(</span>fun1<span class="token punctuation">,</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Box</span> box2 <span class="token operator">=</span> wrapFactory<span class="token punctuation">.</span><span class="token function">WrapProcut</span><span class="token punctuation">(</span>fun2<span class="token punctuation">,</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>box1<span class="token punctuation">.</span>Product<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>box2<span class="token punctuation">.</span>Product<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//记录程序的运行状态</span>    <span class="token keyword">class</span> <span class="token class-name">Logger</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Log</span><span class="token punctuation">(</span><span class="token class-name">Product</span> product<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Product '</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">product<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">' created at </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>UtcNow</span><span class="token punctuation">&#125;</span></span><span class="token string">. Price is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">product<span class="token punctuation">.</span>Price</span><span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//使用UtcNow是因为不带时区</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Product</span>   <span class="token comment">//产品类</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span>  Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>   <span class="token comment">//属性的简略声明，一般只用来传递数据</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> Price <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>   <span class="token comment">//新增产品的价格</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Box</span>       <span class="token comment">//盒子类</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Product</span> Product <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">WrapFactory</span>   <span class="token comment">//包装厂的类</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//logCallback回调方法，getProduct模板方法</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Box</span> <span class="token function">WrapProcut</span><span class="token punctuation">(</span><span class="token class-name">Func<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span> getProduct<span class="token punctuation">,</span><span class="token class-name">Action<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span> logCallback<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Box</span> box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Product</span> product <span class="token operator">=</span> getProduct<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>product<span class="token punctuation">.</span>Price<span class="token operator">>=</span><span class="token number">50</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">logCallback</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            box<span class="token punctuation">.</span>Product <span class="token operator">=</span> product<span class="token punctuation">;</span>            <span class="token keyword">return</span> box<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">ProductFactory</span>    <span class="token comment">//产品生产厂的类</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Product</span> <span class="token function">MakePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//制作披萨的方法</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Pizza"</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span>Price <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> product<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Product</span> <span class="token function">MakeToyCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//制作玩具车的方法</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"ToyCar"</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span>Price <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> product<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">Product &#39;ToyCar&#39; created at 2022&#x2F;9&#x2F;18 7:50:50. Price is 120.PizzaToyCar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>注意：难精通+易使用+功能强大东西，一旦被滥用则后果非常严重</p><ul><li>缺点1：这是一种方法级别的紧耦合，现实工作中要慎之又慎</li><li>缺点2：使可读性下降、debug的难度增加</li><li>缺点3：把委托回调、异步调用和多线程纠缠在一起，会使代码变得难以阅读和维护</li><li>缺点4：委托使用不当有可能造成内存泄漏和程序性能下降</li></ul></li></ul><h3 id="11-4-委托的高级使用"><a href="#11-4-委托的高级使用" class="headerlink" title="11.4 委托的高级使用"></a>11.4 委托的高级使用</h3><ul><li><p>多播（multicast）委托</p><ul><li><p>指一个委托内部封装着不止一个方法</p></li><li><p>单播委托（之前写的委托）的例子如下：</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">MulticastDelegateExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Red <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Green <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Blue <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> action1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> action2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> action3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu3<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">;</span>            action1<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            action2<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            action3<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">ConsoleColor</span> PenColor <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>PenColor<span class="token punctuation">;</span>                <span class="token comment">//ForegroundColor 获取或设置控制太的前景色</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Student </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>ID</span><span class="token punctuation">&#125;</span></span><span class="token string"> doing homework </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string"> hour(s)."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//使该线程睡眠1秒</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">Student 1 doing homework 0 hour(s).Student 1 doing homework 1 hour(s).Student 1 doing homework 2 hour(s).Student 1 doing homework 3 hour(s).Student 1 doing homework 4 hour(s).Student 2 doing homework 0 hour(s).Student 2 doing homework 1 hour(s).Student 2 doing homework 2 hour(s).Student 2 doing homework 3 hour(s).Student 2 doing homework 4 hour(s).Student 3 doing homework 0 hour(s).Student 3 doing homework 1 hour(s).Student 3 doing homework 2 hour(s).Student 3 doing homework 3 hour(s).Student 3 doing homework 4 hour(s).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接下来使用多播委托：</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">MulticastDelegateExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Red <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Green <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Blue <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> action1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> action2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> action3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu3<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//多播委托</span>            action1 <span class="token operator">+=</span> action2<span class="token punctuation">;</span><span class="token comment">//相当于action2合并到了action1中</span>            action1 <span class="token operator">+=</span> action3<span class="token punctuation">;</span>            <span class="token comment">//现在action1里封装了3个方法</span>            action1<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">ConsoleColor</span> PenColor <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>PenColor<span class="token punctuation">;</span>                <span class="token comment">//ForegroundColor 获取或设置控制太的前景色</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Student </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>ID</span><span class="token punctuation">&#125;</span></span><span class="token string"> doing homework </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string"> hour(s)."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//使该线程睡眠1秒</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>隐式异步调用</p><ul><li><p>同步与异步的简介</p><ul><li>中英文的语言差异</li><li>同步：你做完了我（在你的基础上）接着做</li><li>异步：咱们两个同时做（相当于汉语中的“同步进行”）</li></ul></li><li><p>同步调用与异步调用的对比</p><ul><li>每一个运行的程序都是一个进程（process）</li><li>每个进程可以有一个或者多个线程（thread）<ul><li>每个程序在内存中运行一定会有第一个运行的线程，这个线程就是<strong>主线程</strong>；主线程之外的线程称为<strong>分支线程</strong></li></ul></li><li>同步调用是在同一线程内</li><li>异步调用的底层机制是<font color="red">多线程</font></li><li>串行 == 同步 == 单线程，并行 == 异步 == 多线程</li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220918162324195.png"></li></ul></li><li><p>隐式多线程 v.s 显式多线程</p><ul><li><p>直接同步调用：使用方法名</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">MulticastDelegateExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Red <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Green <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Blue <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                        <span class="token comment">//直接同步调用</span>            stu1<span class="token punctuation">.</span><span class="token function">DoHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu2<span class="token punctuation">.</span><span class="token function">DoHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu3<span class="token punctuation">.</span><span class="token function">DoHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Cyan<span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Main thread </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">ConsoleColor</span> PenColor <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>PenColor<span class="token punctuation">;</span>                <span class="token comment">//ForegroundColor 获取或设置控制太的前景色</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Student </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>ID</span><span class="token punctuation">&#125;</span></span><span class="token string"> doing homework </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string"> hour(s)."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//使该线程睡眠1秒</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>间接同步调用：使用单播/多播委托的invoke方法</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">MulticastDelegateExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Red <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Green <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Blue <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> action1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> action2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> action3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu3<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//间接同步调用</span>            action1<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            action2<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            action3<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Cyan<span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Main thread </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">ConsoleColor</span> PenColor <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>PenColor<span class="token punctuation">;</span>                <span class="token comment">//ForegroundColor 获取或设置控制太的前景色</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Student </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>ID</span><span class="token punctuation">&#125;</span></span><span class="token string"> doing homework </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string"> hour(s)."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//使该线程睡眠1秒</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">Student 1 doing homework 0 hour(s).Student 1 doing homework 1 hour(s).Student 1 doing homework 2 hour(s).Student 1 doing homework 3 hour(s).Student 1 doing homework 4 hour(s).Student 2 doing homework 0 hour(s).Student 2 doing homework 1 hour(s).Student 2 doing homework 2 hour(s).Student 2 doing homework 3 hour(s).Student 2 doing homework 4 hour(s).Student 3 doing homework 0 hour(s).Student 3 doing homework 1 hour(s).Student 3 doing homework 2 hour(s).Student 3 doing homework 3 hour(s).Student 3 doing homework 4 hour(s).Main thread 0Main thread 1Main thread 2Main thread 3Main thread 4Main thread 5Main thread 6Main thread 7Main thread 8Main thread 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多播同步调用和上面多播委托的示例类似</li></ul></li><li><p>隐式异步调用：使用委托的Begininvoke</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">MulticastDelegateExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Red <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Green <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Blue <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> action1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> action2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> action3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu3<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//隐式异步调用</span>            action1<span class="token punctuation">.</span><span class="token function">BeginInvoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            action2<span class="token punctuation">.</span><span class="token function">BeginInvoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            action3<span class="token punctuation">.</span><span class="token function">BeginInvoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Cyan<span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Main thread </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">ConsoleColor</span> PenColor <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>PenColor<span class="token punctuation">;</span>                <span class="token comment">//ForegroundColor 获取或设置控制太的前景色</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Student </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>ID</span><span class="token punctuation">&#125;</span></span><span class="token string"> doing homework </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string"> hour(s)."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//使该线程睡眠1秒</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">Main thread 0Student 2 doing homework 0 hour(s).Student 3 doing homework 0 hour(s).Student 1 doing homework 0 hour(s).Main thread 1Student 2 doing homework 1 hour(s).Student 3 doing homework 1 hour(s).Student 1 doing homework 1 hour(s).Student 1 doing homework 2 hour(s).Student 2 doing homework 2 hour(s).Student 3 doing homework 2 hour(s).Main thread 2Student 2 doing homework 3 hour(s).Student 3 doing homework 3 hour(s).Student 1 doing homework 3 hour(s).Main thread 3Main thread 4Student 3 doing homework 4 hour(s).Student 1 doing homework 4 hour(s).Student 2 doing homework 4 hour(s).Main thread 5Main thread 6Main thread 7Main thread 8Main thread 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>分之线程和主线程同时执行，发生了资源上的争抢</p></li><li><p>发生冲突导致颜色不一样</p></li></ul></li><li><p>显式异步调用：使用Thread或Task</p><ul><li>Thread是一种比较古老的方式</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">MulticastDelegateExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Red <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Green <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Blue <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token comment">//创建线程</span>            <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span> thread3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>stu3<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread1<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread2<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread3<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Cyan<span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Main thread </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">ConsoleColor</span> PenColor <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>PenColor<span class="token punctuation">;</span>                <span class="token comment">//ForegroundColor 获取或设置控制太的前景色</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Student </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>ID</span><span class="token punctuation">&#125;</span></span><span class="token string"> doing homework </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string"> hour(s)."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//使该线程睡眠1秒</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">Student 2 doing homework 0 hour(s).Main thread 0Student 1 doing homework 0 hour(s).Student 3 doing homework 0 hour(s).Student 3 doing homework 1 hour(s).Student 2 doing homework 1 hour(s).Main thread 1Student 1 doing homework 1 hour(s).Student 1 doing homework 2 hour(s).Student 2 doing homework 2 hour(s).Main thread 2Student 3 doing homework 2 hour(s).Student 2 doing homework 3 hour(s).Student 3 doing homework 3 hour(s).Student 1 doing homework 3 hour(s).Main thread 3Student 3 doing homework 4 hour(s).Student 2 doing homework 4 hour(s).Main thread 4Student 1 doing homework 4 hour(s).Main thread 5Main thread 6Main thread 7Main thread 8Main thread 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>分之线程和主线程同时执行，发生了资源上的争抢</p></li><li><p>接下来使用Task，相对于Thread来说会高级一些</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">MulticastDelegateExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Red <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Green <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Blue <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Task</span> task1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Task</span> task2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Task</span> task3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu3<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            task1<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            task2<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            task3<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Cyan<span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Main thread </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">ConsoleColor</span> PenColor <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>PenColor<span class="token punctuation">;</span>                <span class="token comment">//ForegroundColor 获取或设置控制太的前景色</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Student </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>ID</span><span class="token punctuation">&#125;</span></span><span class="token string"> doing homework </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string"> hour(s)."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//使该线程睡眠1秒</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>应适时地使用接口（interface）取代一些对委托的使用</p><ul><li>Java完全地使用接口取代了委托的功能，即Java没有与C#中委托相对应的功能实体</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DelegateExample</span><span class="token punctuation">&#123;</span>        <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">IProcutFactory</span> pizzaFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PizzaFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">IProcutFactory</span> toycarFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ToyCarFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">WrapFactory</span> wrapFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WrapFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Box</span> box1 <span class="token operator">=</span> wrapFactory<span class="token punctuation">.</span><span class="token function">WrapProcut</span><span class="token punctuation">(</span>pizzaFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Box</span> box2 <span class="token operator">=</span> wrapFactory<span class="token punctuation">.</span><span class="token function">WrapProcut</span><span class="token punctuation">(</span>toycarFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>box1<span class="token punctuation">.</span>Product<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>box2<span class="token punctuation">.</span>Product<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">interface</span> <span class="token class-name">IProcutFactory</span>    <span class="token punctuation">&#123;</span>        <span class="token return-type class-name">Product</span> <span class="token function">Make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">PizzaFactory</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IProcutFactory</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Product</span> <span class="token function">Make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Pizza"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> product<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">ToyCarFactory</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IProcutFactory</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Product</span> <span class="token function">Make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"ToyCar"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> product<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Product</span>   <span class="token comment">//产品类</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span>  Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>   <span class="token comment">//属性的简略声明，一般只用来传递数据</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> Price <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>   <span class="token comment">//新增产品的价格</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Box</span>       <span class="token comment">//盒子类</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Product</span> Product <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">WrapFactory</span>   <span class="token comment">//包装厂的类</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//模板方法</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Box</span> <span class="token function">WrapProcut</span><span class="token punctuation">(</span><span class="token class-name">IProcutFactory</span> procutFactory<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Box</span> box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Product</span> product <span class="token operator">=</span> procutFactory<span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            box<span class="token punctuation">.</span>Product <span class="token operator">=</span> product<span class="token punctuation">;</span>            <span class="token keyword">return</span> box<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    class ProductFactory    //产品生产厂的类    &#123;        public Product MakePizza()  //制作披萨的方法        &#123;            Product product = new Product();            product.Name = "Pizza";            product.Price = 12;            return product;        &#125;        public Product MakeToyCar() //制作玩具车的方法        &#123;            Product product = new Product();            product.Name = "ToyCar";            product.Price = 120;            return product;        &#125;    &#125;    */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="12-事件详解"><a href="#12-事件详解" class="headerlink" title="12 .事件详解"></a>12 .事件详解</h2><h3 id="12-1-初步了解事件"><a href="#12-1-初步了解事件" class="headerlink" title="12.1 初步了解事件"></a>12.1 初步了解事件</h3><ul><li><p><font color="FF5555">定义</font>：单词Event,译为“事件”</p><ul><li><p>《牛津词典》中的解释是“a thing that <strong>happens</strong>,especially something important”</p><ul><li>也就是说如果一个作为主语，它能够用<strong>发生</strong>作为谓语，那么它就能作为一个事件</li><li>例如拿苹果为主语，那么谓语就不能用<strong>发生</strong>，因为我们谁也不会说苹果发生了（其实也可以，例如说苹果熟透了）</li><li>公司上市，产品发布都是一个事件，事件就是能够发生的什么事情。</li></ul></li><li><p>通常的解释就是“<font color="red">能够发生的什么事情</font>”</p></li></ul></li><li><p><font color="FF5555">角色</font>：使对象或类具备<font color="red">通知能力</font>的成员</p><ul><li><p>（中译）事件（event）是一种使对象或类能够提供通知的成员</p></li><li><p>（原文）An event is a member that enables an object or class to provide notifications.</p></li><li><p>“对象O拥有一个事件E”想表达的思想是：当事件E发生的时候，O有能力通知别的对象</p></li></ul></li><li><p>事件的功能 = 通知 + 可选的事件参数（即详细信息）</p></li><li><p><font color="FF5555">使用</font>：用于对象或类间的动作协调与信息传递（消息同送）</p></li><li><p><font color="FF5555">原理</font>：事件模型（event model）中的两个”5“</p><ul><li>”<font color="red">发生 –&gt; 响应</font>“中的5个部分——闹钟响了你起床、孩子饿了你做饭……这里隐含着”订阅“关系<ul><li>闹钟、响了、你、起床、订阅（可以想想为为什么别人家的闹钟响了你就不起床呢？）</li><li>孩子、饿了、你、做饭、订阅（可以想想为为什么别人家的孩子饿了你就不用做饭呢？）</li></ul></li><li>”<font color="red">发生 –&gt; 响应</font>“中的5个动作<ul><li>（1）我有一件事</li><li>（2）一个人或一群人关心我的这个事件</li><li>（3）我的这个事件发生了</li><li>（4）关心这个事件的人会被依次通知到</li><li>（5）被通知的人根据拿到的事件信息（又称”事件数据“、”事件参数“、”通知“）对事件进行响应（又称”处理事件“）。</li></ul></li></ul></li></ul><ul><li><p>事件的订阅者</p><ul><li>事件消息的接收者</li><li>事件的响应者</li><li>事件的处理者</li><li>被事件所通知的对象</li><li>以上为一回事，统一用<strong>事件的订阅者</strong></li></ul></li><li><p>事件参数</p><ul><li>事件信息</li><li>事件消息</li><li>事件数据</li><li>以上为一回事，统一用微软的标准<strong>事件参数</strong></li></ul></li></ul><ul><li><font color="FF5555">提示</font><ul><li>事件多用于桌面、手机等开发的客户端编程，因为这些程序经常是用户通过事件来”驱动的“</li><li>各种编程语言对这个机制的实现方式不尽相同</li><li>Java语言里没有事件这种成员，也没有委托这种数据类型。Java的”事件“是使用接口来是实现的</li><li>MVC、MVP、MVVM等模式，是事件模式更高级、更有效的”玩法“</li><li>日常开发的时候，使用已有事件的机会比较多，自己声明事件的机会比较少，所以先学使用</li></ul></li></ul><h3 id="12-2-事件的应用"><a href="#12-2-事件的应用" class="headerlink" title="12.2 事件的应用"></a>12.2 事件的应用</h3><ul><li>实例演示<ul><li>派生（继承）与扩展（extends）</li></ul></li></ul><ul><li>事件模型的五个组成部分<ol><li>事件的拥有者（event source，对象）<ul><li>事件不会主动发生</li><li>当用户点击一个按钮，是用户的鼠标向计算机硬件发送了一个电讯号，硬件之所以能工作，全靠操作系统来协调管理。当Windows侦听到由鼠标发过来的电讯号，它就会查看一下鼠标指针在屏幕上的当前位置，实际上在Windows操作系统启动的时候，它就一直在追踪鼠标指针在屏幕上的位置，这个是所有图形用户操作系统最基本的功能之一。当Windows发现这个鼠标指针的位置由一个按钮，而且包含这个按钮的窗口处于激活状态的时候，它就会通知这个按钮，你被这个用户按下了，这时候按钮的内部逻辑就被执行了。</li><li>用户按按钮，是用户的操作通过windows操作系统调用了按钮的内部逻辑，最终还是按钮的内部逻辑触发了click事件</li></ul></li><li> 事件成员（event，成员）</li><li> 事件的响应者（event subscriber，对象）</li><li> 事件处理器（event handler ，成员）——本质上是一个回调方法</li><li> 事件订阅——把事件处理器与事件关联在一起，本质上是一种以委托类型为基础的”约定“</li><li> <img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220918200959915.png"></li><li> <img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220918201025294.png"></li></ol></li></ul><ul><li><p>注意</p><ul><li>事件处理器是成员方法</li><li>挂接事件处理器的时候，可以使用委托实例，也可以直接使用方法名，这是个”语法糖“</li><li>事件处理器对事件的订阅不是随意的，匹配与否由声明时间是所使用的委托类型来检测</li><li>事件可以同步调用也可以异步调用</li></ul></li><li><p>实例如下：</p><ul><li><p>事件成员一般是一个黄色的小闪电</p></li><li><p>一个事件有两个事件处理的场景</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Timers</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">EventExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//timer是事件的拥有者</span>            timer<span class="token punctuation">.</span>Interval <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>  <span class="token comment">//事件间隔为1秒</span>            <span class="token class-name">Boy</span> boy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Boy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Girl</span> girl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Girl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            timer<span class="token punctuation">.</span>Elapsed <span class="token operator">+=</span> boy<span class="token punctuation">.</span>Action<span class="token punctuation">;</span>    <span class="token comment">//Elapsed事件成员 +=事件的订阅 Action事件处理器</span>            timer<span class="token punctuation">.</span>Elapsed <span class="token operator">+=</span> girl<span class="token punctuation">.</span>Action<span class="token punctuation">;</span>            timer<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Boy</span>   <span class="token comment">//事件的响应者1</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//internal 访问仅限当前的程序集</span>        <span class="token keyword">internal</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">ElapsedEventArgs</span> e<span class="token punctuation">)</span> <span class="token comment">//事件处理器Action方法</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Jump!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Girl</span>  <span class="token comment">//事件的响应者2</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">internal</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">ElapsedEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Sing!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行结果是boy,girl依次打印</p></li></ul> <pre class="line-numbers language-none"><code class="language-none">Jump!Sing!Jump!Sing!Jump!Sing!......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>五大部分分别如下：</p><ul><li>1.事件的拥有者 timer(Timer类型的变量)</li><li>2.事件成员 Elapsed事件</li><li>3.事件的响应者 boy、girl(Boy/Girl类的变量)</li><li>4.事件的订阅 +=操作符</li><li>5.事件的处理器 Action方法(Boy/Girl类的方法)</li></ul></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220918200959915.png"></p></li><li><p>上图MVC/MVP等的模型，接下来举例上图所示的例子：</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">EventExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Form</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Form</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//form是事件的拥有者</span>            <span class="token class-name">Controller</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Controller</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//controller 事件的响应者</span>            form<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Controller</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Form</span> form<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Controller</span><span class="token punctuation">(</span><span class="token class-name">Form</span> form<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>form<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">//判断是否为空是因为如果一个对象是空的，那么我们是无法访问它的事件的</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>form <span class="token operator">=</span> form<span class="token punctuation">;</span>   <span class="token comment">//this可以区分哪个是字段，哪个是参数</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>Click <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>FormClicked<span class="token punctuation">;</span>    <span class="token comment">//this就是Controller实例</span>                <span class="token comment">//事件Click</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//事件处理器</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FormClicked</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>    <span class="token comment">//你会发现和之前Elapsed的事件约定不同</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>Text <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>五大部分分别如下：</p><ul><li>1.事件的拥有者 form(Form类型的变量)</li><li>2.事件成员 Click事件</li><li>3.事件的响应者 controller(Controller类的变量)</li><li>4.事件的订阅 +=操作符</li><li>5.事件的处理器 FormClicked方法(Controller类的方法)</li></ul></li><li><p>运行结果如下，在窗口的标题栏上显示当前的时间</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220919201951955.png"></p></li><li><p>接下来举例2星的例子，事件的拥有者同时也是事件的处理者</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">EventExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">MyForm</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//form是事件的拥有者，同时也是事件的响应者</span>            form<span class="token punctuation">.</span>Click <span class="token operator">+=</span> form<span class="token punctuation">.</span>FormClicked<span class="token punctuation">;</span>     <span class="token comment">//Click事件</span>            <span class="token comment">//FormClicked是事件处理器 +=是事件的订阅</span>            form<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">MyForm</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">internal</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FormClicked</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>Text <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>五大部分分别如下：</p><ul><li>1.事件的拥有者 myForm(MyForm类型的变量)</li><li>2.事件成员 Click事件</li><li>3.事件的响应者 myForm(MyForm类型的变量)</li><li>4.事件的订阅 +=操作符</li><li>5.事件的处理器 FormClicked方法(属于MyForm类型的方法)</li></ul></li><li><p>接下来举例3星的例子：事件的拥有者是事件的响应者的字段成员，事件的响应者用自己的方法订阅着自己的字段成员的某个事件。</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220922150825669.png"></p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">EventExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">MyForm</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//MyForm对象是事件的响应者</span>            form<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">MyForm</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//事件的拥有者 字段button</span>        <span class="token keyword">private</span> <span class="token class-name">TextBox</span> textBox<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Button</span> button<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MyForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>textBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">this</span><span class="token punctuation">.</span>button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>textBox<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>button<span class="token punctuation">.</span>Click <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ButtonClick<span class="token punctuation">;</span>            <span class="token comment">//非可视化编程</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>button<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"Say Hello"</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>button<span class="token punctuation">.</span>Top <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>            <span class="token comment">//事件成员(事件)Click +=事件订阅</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//事件处理器</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ButtonClick</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>textBox<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"Hello,World!"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>五大部分分别如下：</p><ul><li>1.事件的拥有者 button(MyForm类型的字段)</li><li>2.事件成员 Click事件(MyForm类型的字段button的事件)</li><li>3.事件的响应者 myForm(myForm类的变量)</li><li>4.事件的订阅 +=操作符</li><li>5.事件的处理器 ButtonClicked方法(事件的响应者myForm所拥有的方法)</li></ul></li><li><p>运行结果如下：</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220919204217195.png"></p></li><li><p>有趣的知识点</p></li><li><p>例如有如下窗口Form1，里面有一个textbox1和button1、button2，你可以同时将两个button的click事件设置为ButtonClick事件</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220920195659807.png"></p></li><li><p>同时代码如下：</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>ComponentModel</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Data</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">WinFormExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Form1</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token function">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ButtonClick</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//sender为事件的拥有者</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sender <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>button1<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sender <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>button2<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"World"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行结果是当你点击button1，textbox1的内容为Hello</p><ul><li>当你点击button2，textbox1的内容为World</li></ul></li></ul><h3 id="12-3-深入理解事件"><a href="#12-3-深入理解事件" class="headerlink" title="12.3 深入理解事件"></a>12.3 深入理解事件</h3><h3 id="12-4-事件的声明"><a href="#12-4-事件的声明" class="headerlink" title="12.4 事件的声明"></a>12.4 事件的声明</h3><ul><li><p>事件的声明</p><ul><li><p>完整声明</p><ul><li><p>事件是基于委托的有两层意思</p><ul><li>第一层意思：事件需要委托类型来做一个约束。约束既规定事件能发送什么样的消息给响应者，也规定事件响应者能收到什么样的事件消息。这就决定了事件响应者的事件处理器，必须能够和这个约束匹配上，才能够订阅这个事件。</li><li>第二层意思：当事件响应者向事件拥有者提供了能够匹配这个事件的事件处理器之后，需要把事件处理器保存或者记录下来。能够记录或者说引用方法的任务，只有委托类型的实例能够做到。</li></ul></li><li><p>例子如下：</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">EventExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//customer事件的拥有者</span>            <span class="token class-name">Waiter</span> waiter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Waiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//waiter事件的响应者</span>            customer<span class="token punctuation">.</span>Order <span class="token operator">+=</span> waiter<span class="token punctuation">.</span>Action<span class="token punctuation">;</span>        <span class="token comment">//Order事件 +=事件约束 Action事件处理器</span>            customer<span class="token punctuation">.</span><span class="token function">Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            customer<span class="token punctuation">.</span><span class="token function">PayTheBill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderEventArgs</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">EventArgs</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> DishName <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Size <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//委托isClass</span>    <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OrderEventHandler</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">,</span> <span class="token class-name">OrderEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//第一个参数表明事件的拥有者，这里是Customer</span>    <span class="token comment">//第二个参数用来保存状态信息，指明什么类型适用于该应用程序，比如点餐和大小</span>    <span class="token comment">//事件的拥有者类Customer顾客</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">OrderEventHandler</span> orderEventHandler<span class="token punctuation">;</span>    <span class="token comment">//引用事件处理器</span>        <span class="token keyword">public</span> <span class="token keyword">event</span> OrderEventHandler Order    <span class="token comment">//事件</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">add</span> <span class="token comment">//事件处理器添加器</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>orderEventHandler <span class="token operator">+=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">remove</span> <span class="token comment">//事件处理器移除器</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>orderEventHandler <span class="token operator">-=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> Bill <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">//点单付费</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PayTheBill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"I will pay $</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>Bill</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WalkIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Walk into the restaurant."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SitDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Sit down"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Think</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Let me think"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>orderEventHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment">//null意味着没有服务员订阅你的order事件</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">OrderEventArgs</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderEventArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span>DishName <span class="token operator">=</span> <span class="token string">"Kongpao Chicken"</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token string">"large"</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>orderEventHandler<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">WalkIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">SitDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Think</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Waiter</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">,</span> <span class="token class-name">OrderEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"I will serve you the dish - </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">e<span class="token punctuation">.</span>DishName</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> price <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>Size<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token string">"small"</span><span class="token punctuation">:</span>                    price <span class="token operator">*=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"large"</span><span class="token punctuation">:</span>                    price <span class="token operator">*=</span> <span class="token number">1.5</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            customer<span class="token punctuation">.</span>Bill <span class="token operator">+=</span> price<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">Walk into the restaurant.Sit downLet me thinkLet me thinkLet me thinkLet me thinkLet me thinkI will serve you the dish - Kongpao ChickenI will pay $15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>五大部分分别如下：</p><ul><li>1.事件的拥有者 customer(Customer类型的成员)</li></ul></li></ul></li><li><p>2.事件成员 Order事件(Customer类型的事件Order)</p><ul><li>3.事件的响应者 waiter(Waiter类的变量)</li><li>4.事件的订阅 +=操作符</li><li>5.事件的处理器 Action方法(Waiter类的方法)</li></ul></li><li><p>简略声明（字段式声明，field-like）</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>  <span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>  <span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span>  <span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span>  <span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>  <span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span>    <span class="token keyword">namespace</span> <span class="token namespace">EventExample</span>  <span class="token punctuation">&#123;</span>      <span class="token keyword">class</span> <span class="token class-name">Program</span>      <span class="token punctuation">&#123;</span>          <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//customer事件的拥有者</span>              <span class="token class-name">Waiter</span> waiter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Waiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//waiter事件的响应者</span>              customer<span class="token punctuation">.</span>Order <span class="token operator">+=</span> waiter<span class="token punctuation">.</span>Action<span class="token punctuation">;</span>        <span class="token comment">//Order事件 +=事件约束 Action事件处理器</span>              customer<span class="token punctuation">.</span><span class="token function">Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              customer<span class="token punctuation">.</span><span class="token function">PayTheBill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderEventArgs</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">EventArgs</span></span>      <span class="token punctuation">&#123;</span>          <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> DishName <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>          <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Size <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//委托isClass</span>      <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OrderEventHandler</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">,</span> <span class="token class-name">OrderEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//第一个参数表明事件的拥有者，这里是Customer</span>        <span class="token comment">//事件的拥有者类Customer顾客</span>      <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span>      <span class="token punctuation">&#123;</span>          <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">OrderEventHandler</span> Order<span class="token punctuation">;</span>   <span class="token comment">//事件的简略声明，field-like</span>          <span class="token comment">//事件的完整声明</span>          <span class="token comment">/*          private OrderEventHandler orderEventHandler;    //引用事件处理器            public event OrderEventHandler Order    //事件          &#123;              add //事件处理器添加器              &#123;                  this.orderEventHandler += value;              &#125;              remove //事件处理器移除器              &#123;                  this.orderEventHandler -= value;              &#125;          &#125;          */</span>          <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> Bill <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">//点单付费</span>          <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PayTheBill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"I will pay $</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>Bill</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WalkIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Walk into the restaurant."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SitDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Sit down"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Think</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>              <span class="token punctuation">&#123;</span>                  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Let me think"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>                <span class="token comment">//这里用事件的名字取代了字段的名字</span>              <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Order <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment">//微软在设计这个语法糖的时候造成了这个语法的前后不一致</span>              <span class="token punctuation">&#123;</span>                  <span class="token class-name">OrderEventArgs</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderEventArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  e<span class="token punctuation">.</span>DishName <span class="token operator">=</span> <span class="token string">"Kongpao Chicken"</span><span class="token punctuation">;</span>                  e<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token string">"large"</span><span class="token punctuation">;</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>Order<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">WalkIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">SitDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Think</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Waiter</span>      <span class="token punctuation">&#123;</span>          <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">,</span> <span class="token class-name">OrderEventArgs</span> e<span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"I will serve you the dish - </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">e<span class="token punctuation">.</span>DishName</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name"><span class="token keyword">double</span></span> price <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>              <span class="token keyword">switch</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>Size<span class="token punctuation">)</span>              <span class="token punctuation">&#123;</span>                  <span class="token keyword">case</span> <span class="token string">"small"</span><span class="token punctuation">:</span>                      price <span class="token operator">*=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>                      <span class="token keyword">break</span><span class="token punctuation">;</span>                  <span class="token keyword">case</span> <span class="token string">"large"</span><span class="token punctuation">:</span>                      price <span class="token operator">*=</span> <span class="token number">1.5</span><span class="token punctuation">;</span>                      <span class="token keyword">break</span><span class="token punctuation">;</span>                  <span class="token keyword">default</span><span class="token punctuation">:</span>                      <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              customer<span class="token punctuation">.</span>Bill <span class="token operator">+=</span> price<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>这里用事件的名字取代了字段的名字，微软在设计这个语法糖的时候造成了这个语法的前后不一致</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220921154819013.png"></p></li></ul></li></ul></li><li><p>有了委托字段/属性，为什么还需要事件？</p><ul><li>为了程序的逻辑更加“有道理”、更加安全，<font color="red">谨防“借刀杀人”</font></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">EventExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//customer事件的拥有者</span>            <span class="token class-name">Waiter</span> waiter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Waiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//waiter事件的响应者</span>            customer<span class="token punctuation">.</span>Order <span class="token operator">+=</span> waiter<span class="token punctuation">.</span>Action<span class="token punctuation">;</span>        <span class="token comment">//Order事件 +=事件约束 Action事件处理器</span>                                                    <span class="token comment">//customer.Action();</span>            <span class="token class-name">OrderEventArgs</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderEventArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span>DishName <span class="token operator">=</span> <span class="token string">"Manhanquanxi"</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token string">"large"</span><span class="token punctuation">;</span>            <span class="token class-name">OrderEventArgs</span> e2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderEventArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e2<span class="token punctuation">.</span>DishName <span class="token operator">=</span> <span class="token string">"Manhanquanxi"</span><span class="token punctuation">;</span>            e2<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token string">"large"</span><span class="token punctuation">;</span>            <span class="token class-name">Customer</span> badGuy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            badGuy<span class="token punctuation">.</span>Order <span class="token operator">+=</span> waiter<span class="token punctuation">.</span>Action<span class="token punctuation">;</span>            badGuy<span class="token punctuation">.</span>Order<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>customer<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            badGuy<span class="token punctuation">.</span>Order<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>customer<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">;</span>            customer<span class="token punctuation">.</span><span class="token function">PayTheBill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderEventArgs</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">EventArgs</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> DishName <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Size <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//委托isClass</span>    <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OrderEventHandler</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">,</span> <span class="token class-name">OrderEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//第一个参数表明事件的拥有者，这里是Customer</span>    <span class="token comment">//事件的拥有者类Customer顾客</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">OrderEventHandler</span> Order<span class="token punctuation">;</span>   <span class="token comment">//去掉event之后成了字段,event抑制外部滥用</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> Bill <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">//点单付费</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PayTheBill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"I will pay $</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>Bill</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WalkIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Walk into the restaurant."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SitDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Sit down"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Think</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Let me think"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//这里用事件的名字取代了字段的名字</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Order <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment">//微软在设计这个语法糖的时候造成了这个语法的前后不一致</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">OrderEventArgs</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderEventArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span>DishName <span class="token operator">=</span> <span class="token string">"Kongpao Chicken"</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token string">"large"</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>Order<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">WalkIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">SitDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Think</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Waiter</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">,</span> <span class="token class-name">OrderEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"I will serve you the dish - </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">e<span class="token punctuation">.</span>DishName</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> price <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>Size<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token string">"small"</span><span class="token punctuation">:</span>                    price <span class="token operator">*=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"large"</span><span class="token punctuation">:</span>                    price <span class="token operator">*=</span> <span class="token number">1.5</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            customer<span class="token punctuation">.</span>Bill <span class="token operator">+=</span> price<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>所以<font color="red">事件的本质</font>是委托字段的一个包装器</p><ul><li>这个包装器对委托字段的访问起<font color="red">限制作用</font>，相当于一个“蒙版”</li><li>封装（encapsulation）的一个重要功能就是隐藏</li><li>事件<font color="red">对外界</font>隐藏了委托实例的大部分功能，<font color="red">仅暴露添加/移除事件处理器的功能</font></li><li>添加/移除事件处理器的时候可以直接使用方法名，这是委托实例所不具备的功能</li></ul></li><li><p>用于声明事件的委托类型的命名约定</p><ul><li><p>用于声明Foo事件的委托，一般命名为FooEventHandler（除非是一个非常通用的事件约束）</p><ul><li>使用通过委托EventHandler</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">EventExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//customer事件的拥有者</span>            <span class="token class-name">Waiter</span> waiter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Waiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//waiter事件的响应者</span>            customer<span class="token punctuation">.</span>Order <span class="token operator">+=</span> waiter<span class="token punctuation">.</span>Action<span class="token punctuation">;</span>        <span class="token comment">//Order事件 +=事件约束 Action事件处理器</span>            customer<span class="token punctuation">.</span><span class="token function">Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            customer<span class="token punctuation">.</span><span class="token function">PayTheBill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderEventArgs</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EventArgs</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> DishName <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Size <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//委托isClass</span>    <span class="token comment">//public delegate void OrderEventHandler(Customer customer, OrderEventArgs e);</span>    <span class="token comment">//第一个参数表明事件的拥有者，这里是Customer</span>    <span class="token comment">//事件的拥有者类Customer顾客</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">EventHandler</span> Order<span class="token punctuation">;</span>   <span class="token comment">//事件的简略声明，field-like</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> Bill <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">//点单付费</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PayTheBill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"I will pay $</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>Bill</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WalkIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Walk into the restaurant."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SitDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Sit down"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Think</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Let me think"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//这里用事件的名字取代了字段的名字</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Order <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment">//微软在设计这个语法糖的时候造成了这个语法的前后不一致</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">OrderEventArgs</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderEventArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span>DishName <span class="token operator">=</span> <span class="token string">"Kongpao Chicken"</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token string">"large"</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>Order<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">WalkIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">SitDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Think</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Waiter</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//类型转换</span>            <span class="token class-name">Customer</span> customer <span class="token operator">=</span> sender <span class="token keyword">as</span> <span class="token class-name">Customer</span><span class="token punctuation">;</span>            <span class="token class-name">OrderEventArgs</span> orderInfo <span class="token operator">=</span> e <span class="token keyword">as</span> <span class="token class-name">OrderEventArgs</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"I will serve you the dish - </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">orderInfo<span class="token punctuation">.</span>DishName</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> price <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>orderInfo<span class="token punctuation">.</span>Size<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token string">"small"</span><span class="token punctuation">:</span>                    price <span class="token operator">*=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"large"</span><span class="token punctuation">:</span>                    price <span class="token operator">*=</span> <span class="token number">1.5</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            customer<span class="token punctuation">.</span>Bill <span class="token operator">+=</span> price<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>FooEventHandler委托的参数一般有两个（由Win32 API演化而来，历史悠久）</p><ul><li>第一个是object类型，名字为sender，实际上就是事件的拥有者、事件的source<ul><li>用于保存触发事件的对象的引用</li></ul></li><li>第二个是EventArgs类的派生类，类名一般为FooEventArgs，参数名为e。也就是前面讲过的事件参数<ul><li>用来保存状态信息，指明什么类型适用于该应用程序</li></ul></li><li>虽然没有官方的说法，但我们可以把委托的参数列表看作是事件发生后发给给事件响应者的<font color="red">“事件消息”</font></li></ul></li><li><p>触发Foo事件的方法一般命名为OnFoo，即“因何引发”、<font color="red">“事出有因”</font></p><ul><li><p>访问级别为protected，不能用public，不然又成了可以“借刀杀人了”</p><ul><li>之前我们写的think方法违反了.net规定的原则，即一个方法只能做一件事</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Think</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Let me think"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">OnOrder</span><span class="token punctuation">(</span><span class="token string">"Gongpao chicken"</span><span class="token punctuation">,</span> <span class="token string">"large"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>            <span class="token keyword">protected</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnOrder</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> dishName<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> size<span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>       <span class="token comment">//这里用事件的名字取代了字段的名字</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Order <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment">//微软在设计这个语法糖的时候造成了这个语法的前后不一致</span>       <span class="token punctuation">&#123;</span>           <span class="token class-name">OrderEventArgs</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderEventArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           e<span class="token punctuation">.</span>DishName <span class="token operator">=</span> dishName<span class="token punctuation">;</span>           e<span class="token punctuation">.</span>Size <span class="token operator">=</span> size<span class="token punctuation">;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>Order<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>事件的命名约定</p><ul><li>带有时态的动词或者动词短语</li><li>事件拥有者“正在做”什么事情，用进行时；事件拥有者“做完了”什么事情，用完成时</li></ul></li></ul><h3 id="12-5-问题辨析"><a href="#12-5-问题辨析" class="headerlink" title="12.5 问题辨析"></a>12.5 问题辨析</h3><ul><li>很多有经验的程序员认为事件是特殊的委托</li><li>事件真的是“以特殊方式声明的委托字段/实例”吗？<ul><li><font color="red">不是！</font>只是声明的时候“看起来像”（对比委托字段与事件的简化声明，field-like）</li><li>事件声明的时候使用了委托类型，简化声明造成事件看上去像一个委托的字段（实例），而event关键字则更像是一个修饰符——这就是<font color="FF99##">错觉的来源之一</font></li><li>订阅事件的时候 += 操作符后面可以是一个委托实例，这与委托实例的赋值方法语法相同，这也让事件看起来像是一个委托字段——这是<font color="FF99##">错觉的又一来源</font></li><li>重申：事件的本质是假装在委托字段上的一个“蒙版”（mask），是个起掩蔽作用的包装器。这个用于阻挡非法操作的“蒙版”绝不是委托字段本身</li></ul></li><li>为什么要使用委托类型来声明事件？<ul><li>站在source（事件的拥有者）的角度来看，是为了表明source能对外传递哪些信息</li><li>站在subscriber（事件的响应者）的角度来看，它是一种约定，是为了约束能够使用什么样签名的方法来处理（响应）事件</li><li>委托类型的实例将用于存储（引用）事件处理器</li></ul></li><li>对比事件与属性<ul><li>属性不是字段——<font color="red">很多时候</font>属性是字段的包装器，这个包装器用来保护字段不被滥用</li><li>事件不是委托字段——它是委托字段的包装器，这个包装器用来保护委托字段不被滥用</li><li>包装器永远都不可能是被包装的东西</li></ul></li></ul><h2 id="13-什么是类（Class），构造器与析构器"><a href="#13-什么是类（Class），构造器与析构器" class="headerlink" title="13.  什么是类（Class），构造器与析构器"></a>13.  什么是类（Class），构造器与析构器</h2><ul><li>《C#语言规范》<ul><li>类是一种数据结构，它可以包含数据成员（常量和字段）、函数成员（方法、属性、索引器、运算符、实力构造器、静态构造器和析构器）以及嵌套类型。类类型支持继承，继承是一种机制，它使派生类可以对基类进行扩展和专用华。</li></ul></li></ul><h3 id="13-1-什么是类"><a href="#13-1-什么是类" class="headerlink" title="13.1 什么是类"></a>13.1 什么是类</h3><ul><li><p>是一种数据结构（data structure）</p></li><li><p>是一种数据类型</p><ul><li>类是引用类型，例如Student类是自定义的引用类型</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloClass</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>Name<span class="token operator">=</span><span class="token string">"8yyy"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>ID<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            stu<span class="token punctuation">.</span><span class="token function">Report</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Report</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"I'm #</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>ID</span><span class="token punctuation">&#125;</span></span><span class="token string"> student,my name is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>代表现实世界中的“种类”</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloClass</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"8yyy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"TimothyLiu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>Amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Amount <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Amount <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>        <span class="token operator">~</span><span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            Student<span class="token punctuation">.</span>Amount<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ID <span class="token operator">=</span> id<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>Name <span class="token operator">=</span> name<span class="token punctuation">;</span>            Student<span class="token punctuation">.</span>Amount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Report</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"I'm #</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>ID</span><span class="token punctuation">&#125;</span></span><span class="token string"> student,my name is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="13-2-构造器与析构器"><a href="#13-2-构造器与析构器" class="headerlink" title="13.2 构造器与析构器"></a>13.2 构造器与析构器</h3><ul><li><p>实例</p></li><li><p>静态</p><ul><li>静态构造器用于初始化静态成员</li></ul></li><li><p>如何不使用new操作符创建实例？</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloClass</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Type</span> t <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">object</span></span> o <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"8yyy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>o<span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> o <span class="token keyword">as</span> <span class="token class-name">Student</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">dynamic</span></span> stu2 <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"8yyy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ID <span class="token operator">=</span> id<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>Name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Report</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"I'm #</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>ID</span><span class="token punctuation">&#125;</span></span><span class="token string"> student,my name is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="14-类的声明与访问级别"><a href="#14-类的声明与访问级别" class="headerlink" title="14. 类的声明与访问级别"></a>14. 类的声明与访问级别</h2><ul><li><p>类声明的全貌</p><ul><li>C#类声明的位置<ul><li>名称空间里（99%的情况）</li><li>看似名称空间外（不推荐的做法，其实声明是在全局名称空间里）</li><li>类里，嵌套类</li></ul></li><li>声明即定义（C#与Java）<ul><li>在C/C++中声明和定义是分开的</li></ul></li></ul></li><li><p>最简单的类声明</p><ul><li>class 关键字 identifier 类名 class-body 类体</li><li>类的访问控制<ul><li>类默认的访问级别是internal（在本程序集内Assembly可访问，本项目object）</li><li>不能使用private，当这个类是某个类的成员的时候可以使用private</li></ul></li></ul></li><li><p>类成员的访问控制</p><ul><li>public 均可访问</li><li>private 类体内可访问，子类不能访问</li><li>protected 类的继承链上的类可以访问，可以跨程序集<ul><li>更多应用在方法上</li></ul></li><li>internal 本程序集内可访问</li></ul></li><li><p>类的继承</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloOOP</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Type</span> t <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Car</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Type</span> tb <span class="token operator">=</span> t<span class="token punctuation">.</span>BaseType<span class="token punctuation">;</span>   <span class="token comment">//结果为HelloOOP.Vehicle，说明Car是Vehicle的派生类</span>            <span class="token class-name">Type</span> ttop <span class="token operator">=</span> tb<span class="token punctuation">.</span>BaseType<span class="token punctuation">;</span>    <span class="token comment">//结果为System.Object,说明所有类的基类为Object</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>tb<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ttop<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Vehicle</span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Vehicle</span></span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>三层 System.Object &lt;–  Vehicle &lt;– Car</p></li><li><p>类在功能上的扩展（extend）</p></li><li><p>只能由一个基类（base-class），但可以实现多个其接口</p><ul><li>C++中可以有多个基类</li></ul></li><li><p>类访问级别对其继承的影响</p><ul><li>子类的访问级别不能超越父类</li></ul></li><li><p>sealed类不能被继承</p></li><li><p>《是一个 is a 概念》一个派生类的实例从语义上来讲也是基类的实例</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloOOP</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>car <span class="token keyword">is</span> <span class="token class-name">Vehicle</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//True</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>car <span class="token keyword">is</span> <span class="token class-name"><span class="token keyword">object</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//True</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Vehicle</span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Vehicle</span></span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以用父类类型的变量来实现子类的实例</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloOOP</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Vehicle</span> vehicle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">object</span></span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">object</span></span> o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Vehicle</span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Vehicle</span></span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>继承的本质</strong>：继承的本质是派生类在基类已有的成员的基础之上对基类进行<strong>横向</strong>或者<strong>纵向</strong>上的扩展</p><ul><li>横向扩展指类成员的扩充</li><li>纵向扩展指不扩充类成员的个数，对某些类成员的版本扩展（override）</li></ul></li></ul></li><li><p>成员的继承与访问</p><ul><li><p>类成员的访问级别的上限是类的访问级别</p></li><li><p>派生类对继承成员的访问</p></li><li><p>派生类对基类成员的访问 base</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloOOP</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            car<span class="token punctuation">.</span><span class="token function">ShowOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Vehicle</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token function">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>Owner <span class="token operator">=</span> <span class="token string">"N/A"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Owner <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Vehicle</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>Owner <span class="token operator">=</span> <span class="token string">"Car Owner"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ShowOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">base</span><span class="token punctuation">.</span>Owner<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//访问父类的Owner，在这和下面的结果是一样的，因为子类对父类的Owner进行了重写</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Owner<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>用base可以访问父类的Owner，在这和下面的this结果一样，因为子类对父类的Owner进行了重写</li></ul></li><li><p>构造器的不可继承性</p><ul><li><p>当父类只有一个有参的构造器之后</p></li><li><p>写法1：base</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Vehicle</span>   <span class="token punctuation">&#123;</span>       <span class="token keyword">public</span> <span class="token function">Vehicle</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> owner<span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>Owner <span class="token operator">=</span> owner<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Owner <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Vehicle</span></span>   <span class="token punctuation">&#123;</span>       <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">base</span><span class="token punctuation">(</span><span class="token string">"N/A"</span><span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>       <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ShowOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">base</span><span class="token punctuation">.</span>Owner<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Owner<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>写法2：</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Vehicle</span>   <span class="token punctuation">&#123;</span>       <span class="token keyword">public</span> <span class="token function">Vehicle</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> owner<span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>Owner <span class="token operator">=</span> owner<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Owner <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Vehicle</span></span>   <span class="token punctuation">&#123;</span>       <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> owner<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">base</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>                  <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><font color="red">注意：因为在基类构造器里已经把Owner的值设置为owner参数的值了，所以我们不必要在Car的构造器里再设置一遍，让Car里面的构造器空着就可以了</font></p></li><li><p>说明实例构造器不被继承</p></li><li><p>变量名+_下划线，表明实例字段且为私有字段</p></li></ul></li></ul></li><li><p>面向对象的实现风格</p><ul><li>Class-based 基于类<ul><li>编程界主流</li><li>C#、Java、C++</li></ul></li><li>Prototype-based 基于原型<ul><li>JavaScript</li></ul></li></ul></li></ul><h2 id="15-继承，重写，多态"><a href="#15-继承，重写，多态" class="headerlink" title="15. 继承，重写，多态"></a>15. 继承，重写，多态</h2><p>Rider</p><h3 id="15-1-类的继承"><a href="#15-1-类的继承" class="headerlink" title="15.1 类的继承"></a>15.1 类的继承</h3><ul><li><p>类成员的“ 横向扩展 ”（成员越来越多）</p></li><li><p>类成员的“ 纵向扩展 ”（行为改变，版本增高）</p></li><li><p>类成员的隐藏（不常用）</p><ul><li>在子类中写了一个和父类一样的方法，就会隐藏掉继承自父类的方法（完全不推荐）</li></ul></li><li><p>重写（Override）</p><ul><li>父类成员标记为 <strong>virtual</strong>，子类成员标记为 <strong>override</strong></li><li>注：被标记为 override 的成员，隐含也是 virtual 的，可以继续被重写。</li></ul></li><li><p>重写（Override）与隐藏（Hide）的发生条件：函数成员、可见、签名一致</p><ul><li><p>新手不必过于纠结 Override 和 Hide 的区分、关联。因为原则上是不推荐用 Hide 的。很多时候甚至会视 Hide 为一种错误</p></li><li><p>函数成员（Function members）</p><ul><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220923111905199.png"></p></li><li><p>Methods 方法 Properties 属性 在多态上体现的比较多</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">OverrideExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            car<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span>Speed<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Vehicle</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _speed<span class="token punctuation">;</span> <span class="token comment">//_用于表明访问类型为private</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Speed <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _speed<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">set</span> <span class="token punctuation">&#123;</span> _speed <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I'am running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _speed <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Vehicle</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _rpm<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Speed <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _rpm<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">set</span> <span class="token punctuation">&#123;</span> _rpm <span class="token operator">=</span> <span class="token keyword">value</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> CarName <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//横向扩展</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//纵向扩展，重写</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"car is running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _rpm <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>只有对子类可见的父类成员可以重写， public/protected</p></li></ul></li></ul><h3 id="15-2-多态（polymorphism）"><a href="#15-2-多态（polymorphism）" class="headerlink" title="15.2 多态（polymorphism）"></a>15.2 多态（polymorphism）</h3><ul><li><p><strong>什么是多态？</strong></p><ul><li><p>父类型变量指向子类型对象；</p><ul><li><code>class Car : Vehicle</code></li><li><code>Vehicle vehicle = new Car();</code></li></ul></li><li><p>父类型中的函数成员被子类重写了；</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I'am running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"car is running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当父类型引用调用函数成员时，调用的时子类中重写了的函数成员；</p> <pre class="line-numbers language-none"><code class="language-none">vehicle.run();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>运行结果为：<strong>car is running</strong></li></ul></li><li><p>以上就是对多态的描述，它隐含了：继承、重写。</p></li></ul></li><li><p>c#的多态性主要体现在类的继承上：子类继承父类的时候，可能出现同名但方法定义不同的情况， 所以在子类中会将原方法覆盖，实现自身的要求</p></li><li><p>当用父类类型的的变量引用子类类型的的实例，调用被重写的方法，一定是调用<strong>子类</strong>的方法</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">EventExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">People</span> peopleOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            peopleOne<span class="token punctuation">.</span><span class="token function">WhoIam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">People</span> peopleTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Eight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            peopleTwo<span class="token punctuation">.</span><span class="token function">WhoIam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">Student</span> studentOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Eight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            studentOne<span class="token punctuation">.</span><span class="token function">WhoIam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">People</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WhoIam</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I'am people!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">People</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WhoIam</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I'am a student!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Eight</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Student</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WhoIam</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I'am 8!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下:</li></ul> <pre class="line-numbers language-none"><code class="language-none">I&#39;am a student!I&#39;am 8!I&#39;am 8!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>基于重写机制（virtual –&gt; override）</p><ul><li>virtual 可理解为可被重写的，名存实亡的，可被推翻的</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">OverrideExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            car<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Vehicle</span> vehicle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            vehicle<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Vehicle</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I'am running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Vehicle</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> CarName <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//横向扩展</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//纵向扩展，重写</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"car is running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">car is runningcar is running<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>而在Java中不需要加virtual和override即可实现重写</li></ul></li><li><p>函数成员的具体行为（版本）由对象决定</p></li><li><p>回顾：C#语言的变量和对象都是有类型的，所以会有“代差”</p></li><li><p>Python 是对象有类型，变量没有类型的语言，Python 变量的类型永远跟着对象走。 所以在 Python 中即使重写了，也没有多态的效果。</p></li></ul><h2 id="16-接口，抽象类，SOLID，单元测试，反射，依赖注入"><a href="#16-接口，抽象类，SOLID，单元测试，反射，依赖注入" class="headerlink" title="16. 接口，抽象类，SOLID，单元测试，反射，依赖注入"></a>16. 接口，抽象类，SOLID，单元测试，反射，依赖注入</h2><p><font color="red" size="5">C#中SOLID原则:</font></p><ol><li><p><strong>S  表示 Single responsibility（单一责任）；</strong></p><ul><li>单一责任原则，简单来说就是一个类或一个模块，只负责一种或一类职责。</li></ul></li><li><p><strong>O 表示 Open for extension and closed for modification（扩展时打开和修改时关闭，关闭原则）；</strong></p><ul><li>开闭原则要求类、模块、函数等实体应该对扩展开放，对修改关闭。</li></ul></li><li><p><strong>L  表示 Liskov 替换（里氏替换原则）；</strong></p><ul><li>子类可以扩展父类的功能，但不能改变基类原有的功能。它有四层含义：<ol><li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法；</li><li>子类中可以增加自己的特有方法；</li><li>当子类重载父类的方法时，方法的前置条件（形参）要比父类的输入参数更宽松；</li><li>当子类实现父类的抽象方法时，方法的后置条件（返回值）要比父类更严格。</li></ol></li></ul></li><li><p><strong>I   表示 Interface segregation（接口隔离）；</strong></p><ul><li><p>接口隔离原则要求客户不依赖于它不使用的接口和方法；一个类对另一个类的依赖应该建立在最小的接口上。</p><p>通常的做法，是把一个臃肿的接口拆分成多个更小的接口，以保证客户只需要知道与它相关的方法。</p></li></ul></li><li><p><strong>D  表示 Dependency injection（依赖关系注入）。</strong></p><ul><li>依赖倒置原则要求高层模块不能依赖于低层模块，而是两者都依赖于抽象。另外，抽象不应该依赖于细节，而细节应该依赖于抽象。</li></ul></li></ol><p>解释摘自：<a href="https://www.cnblogs.com/tiger-wang/p/13525841.html">https://www.cnblogs.com/tiger-wang/p/13525841.html</a></p><hr><ul><li>为做基类而生的”抽象类“与”开放/关闭原则“</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Example027</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//Vehicle vehicle = new Vehicle();</span>            <span class="token comment">//无法创建抽象类的实例</span>            <span class="token class-name">Vehicle</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Vehicle</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Stopped!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Vehicle</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//实现抽象方法必须使用override</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Car is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">class</span> <span class="token class-name">Truck</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Vehicle</span></span> <span class="token comment">//卡车</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Truck is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//抽象方法必须放在抽象类里</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//像这种就是抽象方法，没有方法体&#123;&#125;，不能是private</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>一个抽象类里的所有类成员都是抽象的实际上就是接口</p></li><li><p>接口由抽象类进化而来</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">VehicleBase</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>将abstract class 改为 interface，去掉 abstract public</p></li><li><p>接口的默认成员都是public的</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">interface</span> <span class="token class-name">VehicleBase</span>    <span class="token punctuation">&#123;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>派生类的方法的override也需要去掉</li></ul></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Example027</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//Vehicle vehicle = new Vehicle();</span>            <span class="token comment">//无法创建抽象类的实例</span>            <span class="token class-name">Vehicle</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">interface</span> <span class="token class-name">VehicleBase</span><span class="token comment">//接口</span>    <span class="token punctuation">&#123;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Vehicle</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">VehicleBase</span></span><span class="token comment">//需要实现接口的所有成员</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//需要去掉override</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Stopped!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Pay and Fill..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Vehicle</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//实现抽象方法必须使用override</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Car is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">class</span> <span class="token class-name">Truck</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Vehicle</span></span> <span class="token comment">//卡车</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Truck is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果一个接口继承其他接口，那么实现类或结构就需要实现所有接口的成员。</li></ul><h3 id="16-1-什么是接口和抽象类"><a href="#16-1-什么是接口和抽象类" class="headerlink" title="16.1 什么是接口和抽象类"></a>16.1 什么是接口和抽象类</h3><ul><li><p>接口和抽象类都是“软件工程产物”</p></li><li><p>具体类 –&gt; 抽象类 –&gt; 接口：越来越抽象，内部实现的东西越来越少</p></li><li><p><strong>抽象类是未完全实现逻辑的类</strong>（可以有字段和非public成员，它们代表了“具体逻辑”）</p><ul><li>不能是private的成员</li></ul></li><li><p>抽象类为复用而生：专门作为基类来使用，也就有解耦功能</p></li><li><p>封装确定的，开放不确定的，推迟到合适的子类中去实现</p><ul><li>开闭原则</li></ul></li><li><p><strong>接口是完全未实现逻辑的“类”</strong>（“纯虚类”：只有函数成员；成员全部public）</p><ul><li>听说C# 8.0之后存在接口默认方法</li></ul></li><li><p>接口为解耦而生：”高内聚，低耦合“，方便单元测试</p><ul><li><p>内聚：每个模块尽可能独立完成自己的功能，不依赖于模块外部的代码。           </p><p>耦合：模块与模块之间接口的复杂程度，模块之间联系越复杂耦合度越高，牵一发而动全身。 </p><p>目的：使得模块的“可重用性”、“移植性”大大增强 </p></li><li><p>紧耦合的例子</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">InterfaceExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> engine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Engine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Car</span><span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token punctuation">;</span>            car<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span>Speed<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">class</span> <span class="token class-name">Engine</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> RPM <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Work</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> gas<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>RPM <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> gas<span class="token punctuation">;</span>                <span class="token comment">//例如将this.RPM = 1000 * gas;改为RPM=0;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>   <span class="token keyword">class</span> <span class="token class-name">Car</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">private</span> <span class="token class-name">Engine</span> _engine<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token class-name">Engine</span> engine<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                _engine <span class="token operator">=</span> engine<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Speed <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> gas<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                _engine<span class="token punctuation">.</span><span class="token function">Work</span><span class="token punctuation">(</span>gas<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>Speed <span class="token operator">=</span> _engine<span class="token punctuation">.</span>RPM <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Car类依赖于Engine类，Engine出问题，Car也会出问题</p></li><li><p>使用接口低耦合</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">InterfaceExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PhoneUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">NokiaPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//改动new NokiaPhone()即可</span>            user<span class="token punctuation">.</span><span class="token function">UsePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">PhoneUser</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">IPhone</span> _phone<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">PhoneUser</span><span class="token punctuation">(</span><span class="token class-name">IPhone</span> phone<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UsePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _phone<span class="token punctuation">.</span><span class="token function">Dail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _phone<span class="token punctuation">.</span><span class="token function">PickUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _phone<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _phone<span class="token punctuation">.</span><span class="token function">Receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">interface</span> <span class="token class-name">IPhone</span>    <span class="token punctuation">&#123;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PickUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">NokiaPhone</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPhone</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dail</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Nokia calling..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PickUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello!This is Tim!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Nokia message ring..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">EricssonPhone</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPhone</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dail</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Ericsson calling..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PickUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello!This is Tim!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Ericsson ring..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>只需要改动<code>var user = new PhoneUser(new NokiaPhone());</code>中的<code>new NokiaPhone()</code>，即可更换手机</li></ul></li><li><p><strong>接口是一个”协约“</strong>，早已为工业生产所熟知（有分工必有协作，有协作必有协约）</p><ul><li>在面向对象中协作就是类和类之间的协作，协作就意味着产生了依赖关系</li></ul></li><li><p><strong>它们都不能实例化</strong>，只能用来声明变量，引用具体类（concrete class）的实例</p></li></ul><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220924164637540.png"></p><p>接口与单元测试</p><ul><li>接口的产生：自底向上（重构），自顶向下（设计）<ul><li>“自顶向下，逐步求精”（紧耦合形成的金字塔）</li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220924200503886.png"></li></ul></li><li>C#中接口的实现（隐式，显示，多接口）</li><li>语言对面向对象设计的内建支持：依赖反转，接口隔离，开/闭原则<ul><li>依赖反转用于平衡“自顶向下，逐步求精”的思路</li><li>解耦在代码中的表现就是依赖反转。单元测试就是依赖反转在开发中的直接应用和直接受益者。</li><li>依赖关系：服务的使用者和服务的提供者之间有依赖关系，服务的使用者依赖在服务的提供者之上。依赖越直接，耦合越紧密。服务的提供者出问题时，服务的使用者也会出问题。</li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220925105343376.png"></li></ul></li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">InterfaceExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nums1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">ArrayList</span> nums2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArrayList</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token comment">//object类型，非泛型，需要引入System.Collections类库</span>            <span class="token comment">//ArrayList实现了IEnumerable接口 支持迭代</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Sum</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Avg</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Sum1</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Avg1</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//在没有使用接口的情况下,需要四个方法</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> n <span class="token keyword">in</span> nums<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                sum <span class="token operator">+=</span> n<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Avg</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nums<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> n <span class="token keyword">in</span> nums<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                sum <span class="token operator">+=</span> n<span class="token punctuation">;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> sum <span class="token operator">/</span> count<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Sum1</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span> nums<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> n <span class="token keyword">in</span> nums<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                sum <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>n<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Avg1</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span> nums<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> n <span class="token keyword">in</span> nums<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                sum <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>n<span class="token punctuation">;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> sum <span class="token operator">/</span> count<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用接口</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">InterfaceExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nums1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">ArrayList</span> nums2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArrayList</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Sum</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Sum</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable</span> nums<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> n <span class="token keyword">in</span> nums<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                sum <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>n<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Avg</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable</span> nums<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> n <span class="token keyword">in</span> nums<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                sum <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>n<span class="token punctuation">;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> sum <span class="token operator">/</span> count<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在需求方（Sum和Avg函数）只需要传进来的对象能够被迭代，因为要用foreach循环去迭代每一个整数，不要求其他功能。<br>需求方只需要可以被迭代，而供方（整型数组和ArrayList实例）是可以被迭代的。整型数组的基类是Array，它实现了IEnumerable接口，就是说Array对外声称自己遵循这个契约，保证自己可以被迭代。ArrayList同理。<br>因此就不需要再使用具体的int[]类型和ArrayList类型了，统一替换成IEnumerable。<br>摘自：<a href="https://blog.csdn.net/Mr_Tfos/article/details/115556289">https://blog.csdn.net/Mr_Tfos/article/details/115556289</a></p><p>例子2：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">InterfaceExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> fan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DeskFan</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PowerSupply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>fan<span class="token punctuation">.</span><span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">PowerSupply</span> <span class="token comment">//电源</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">210</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">DeskFan</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">PowerSupply</span> _powerSupply<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">DeskFan</span><span class="token punctuation">(</span><span class="token class-name">PowerSupply</span> powerSupply<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _powerSupply <span class="token operator">=</span> powerSupply<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> power <span class="token operator">=</span> _powerSupply<span class="token punctuation">.</span><span class="token function">GetPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>power <span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token string">"Wont work."</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>power <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token string">"Slow."</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>power <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token string">"Work Fine."</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token string">"Warning."</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结构为<code>Warning.</code></p><p>以上这个例子当你想要测试的时候就必须动PowerSupply类，这在实际工作中是不允许的，因为可能还有其他电器需要用到PowerSupply类，你为了测试DeskFan直接改动PowerSupply类就可能导致其他电器不能正常运行，这个紧耦合就会造成很大的问题。</p><p>接下来使用接口解耦</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">InterfaceExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> fan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DeskFan</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PowerSupply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>fan<span class="token punctuation">.</span><span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPowerSupply</span>    <span class="token punctuation">&#123;</span>        <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PowerSupply</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">IPowerSupply</span></span> <span class="token comment">//电源</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">110</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeskFan</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">IPowerSupply</span> _powerSupply<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">DeskFan</span><span class="token punctuation">(</span><span class="token class-name">IPowerSupply</span> powerSupply<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _powerSupply <span class="token operator">=</span> powerSupply<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> power <span class="token operator">=</span> _powerSupply<span class="token punctuation">.</span><span class="token function">GetPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>power <span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token string">"Wont work."</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>power <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token string">"Slow."</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>power <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token string">"Work Fine."</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token string">"Warning."</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16-2-测试单元"><a href="#16-2-测试单元" class="headerlink" title="16.2 测试单元"></a>16.2 测试单元</h3><ul><li>打开测试资源管理器 Ctrl E,T</li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220925143358131.png"></li></ul><ul><li><p>右键解决方案添加一个<code>xUnit Project</code>，命名为<code>InterfaceExample.Tests</code></p></li><li><p>将类名改名为<code>DeskFanTests</code></p></li><li><p>依赖项添加项目引用<code>InterfaceExample</code>，以便使用接口<code>IPowerSupply</code></p></li><li><p>Solution如下图所示</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220925144730231.png"></p></li><li><p>主要测试代码如下</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Xunit</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">InterfaceExample<span class="token punctuation">.</span>Tests</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeskFanTests</span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>  <span class="token comment">//特征特性</span>        <span class="token comment">//测试case</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PowerLowerThanZero_OK</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> fan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DeskFan</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PowerSupplyLowerThanZero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> expected <span class="token operator">=</span> <span class="token string">"Wont work."</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> actual <span class="token operator">=</span> fan<span class="token punctuation">.</span><span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span>actual<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PowerLowerThan200_Warning</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> fan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DeskFan</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PowerSupplyHigherThan200</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> expected <span class="token operator">=</span> <span class="token string">"Warning."</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> actual <span class="token operator">=</span> fan<span class="token punctuation">.</span><span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">PowerSupplyLowerThanZero</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPowerSupply</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">PowerSupplyHigherThan200</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPowerSupply</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">220</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>[Fact]</code>代表特征特性，它表明接下来的方法为测试case</p></li><li><p>上述代码运行结果如下：</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220925144857205.png"></p></li><li><p>在平时工作中测试case和写代码的重要程度是一样的</p></li><li><p>在上述单元测试里有一个很大的问题，就是为了测试不同的情况，我们需要创建不同的类</p></li><li><p>因此我们可以使用<code>Moq</code>，打开<code>管理NuGet程序包</code>，安装Moq</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220925145225757.png"></p></li><li><p>接下来我们就直接用Moq直接创建这种实现接口的实例，而略过创建类的这一步</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Xunit</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Moq</span><span class="token punctuation">;</span><span class="token comment">//引入Moq</span><span class="token keyword">namespace</span> <span class="token namespace">InterfaceExample<span class="token punctuation">.</span>Tests</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeskFanTests</span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>  <span class="token comment">//特征特性</span>        <span class="token comment">//测试case</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PowerLowerThanZero_OK</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> mock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mock<span class="token punctuation">&lt;</span>IPowerSupply<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mock<span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span>ps <span class="token operator">=></span> ps<span class="token punctuation">.</span><span class="token function">GetPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Returns</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> fan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DeskFan</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> expected <span class="token operator">=</span> <span class="token string">"Wont work."</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> actual <span class="token operator">=</span> fan<span class="token punctuation">.</span><span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span>actual<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PowerLowerThan200_Warning</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> mock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mock<span class="token punctuation">&lt;</span>IPowerSupply<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mock<span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span>ps <span class="token operator">=></span> ps<span class="token punctuation">.</span><span class="token function">GetPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Returns</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">220</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> fan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DeskFan</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> expected <span class="token operator">=</span> <span class="token string">"Warning."</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> actual <span class="token operator">=</span> fan<span class="token punctuation">.</span><span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>运行结果如下：</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220925145753984.png"></p></li><li><p>简单来说就是一个代码自动生成工具，简化了单元测试的流程</p></li></ul><h3 id="16-3-反射与依赖注入"><a href="#16-3-反射与依赖注入" class="headerlink" title="16.3 反射与依赖注入"></a>16.3 反射与依赖注入</h3><p>可直接参考：<a href="https://www.sogou.com/link?url=hedJjaC291OfPyaFZYFLI4KQWvqt63NBtcOkgzSJL054AydClNZNQQ">https://www.sogou.com/link?url=hedJjaC291OfPyaFZYFLI4KQWvqt63NBtcOkgzSJL054AydClNZNQQ</a>..</p><p>SOILD中的I，<strong>接口隔离原则</strong>（Interface segregation）：调用者不会多要</p><p>接口隔离原则要求客户不依赖于它不使用的接口和方法；一个类对另一个类的依赖应该建立在最小的接口上。</p><p>通常的做法，是把一个臃肿的接口拆分成多个更小的接口，以保证客户只需要知道与它相关的方法。</p><p>例子1：给女朋友买车，日常用车只需要能跑就行，不需要开火</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">IspExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> driverOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Driver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            driverOne<span class="token punctuation">.</span><span class="token function">Drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> driverTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Driver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">LightTank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            driverTwo<span class="token punctuation">.</span><span class="token function">Drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> driverThree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Driver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">HeavyTank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            driverThree<span class="token punctuation">.</span><span class="token function">Drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Driver</span><span class="token comment">//客户即女朋友，只需要Run方法，不多要</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">IVehicle</span> _vehicle<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Driver</span><span class="token punctuation">(</span><span class="token class-name">IVehicle</span> vehicle<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _vehicle <span class="token operator">=</span> vehicle<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _vehicle<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">interface</span> <span class="token class-name">IVehicle</span>    <span class="token punctuation">&#123;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IVehicle</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Car is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Truck</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IVehicle</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Truck is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">interface</span> <span class="token class-name">IWeapon</span>    <span class="token punctuation">&#123;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">interface</span> <span class="token class-name">ITank</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">IVehicle</span><span class="token punctuation">,</span><span class="token class-name">IWeapon</span></span>    <span class="token comment">//一个接口可以继承多个接口</span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">LightTank</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ITank</span></span> <span class="token comment">//轻型坦克</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fire</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Boom!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Ka ka ka ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">MediumTank</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ITank</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fire</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Boom!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Ka! ka! ka! ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">HeavyTank</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ITank</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fire</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Boom!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Ka!! ka!! ka!! ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">Car is running...Ka ka ka ...Ka!! ka!! ka!! ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220925105343376.png"></p><p>例子2：</p><h4 id="16-3-1-手写迭代器"><a href="#16-3-1-手写迭代器" class="headerlink" title="16.3.1 手写迭代器"></a>16.3.1 手写迭代器</h4><p><code>Array</code>和<code>ArrayList</code>均实现了<code>ICollection接口</code>与<code>IEnumerable接口</code></p><p><code>ICollection接口</code>继承了<code>IEnumerable接口</code>，也就是说除了实现了<code>IEnumerable接口</code>的功能，还实现了其他的功能</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">namespace</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICollection</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEnumerable</span></span>    <span class="token punctuation">&#123;</span>        <span class="token return-type class-name"><span class="token keyword">int</span></span> Count <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsSynchronized <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token return-type class-name"><span class="token keyword">object</span></span> SyncRoot <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CopyTo</span><span class="token punctuation">(</span><span class="token class-name">Array</span> array<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在.net框架中，没有一种集合是只实现了<code>IEnumerable接口</code>，没有实现<code>ICollection接口</code>，所以我们需要自己写一个</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">IspExample2</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>                         <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nums1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">ArrayList</span> nums2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArrayList</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Sum</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Sum</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> roc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ReadOnlyCollection</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> n <span class="token keyword">in</span> roc<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token class-name">ICollection</span> nums<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> n <span class="token keyword">in</span> nums<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                result <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>n<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">ReadOnlyCollection</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEnumerable</span></span>  <span class="token comment">//只能被迭代，不能删除添加元素</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> _array<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">ReadOnlyCollection</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> array<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _array <span class="token operator">=</span> array<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//实现接口的代码，需要返回一个IEnumerator类型的实例</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Enumerator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Enumerator</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEnumerator</span></span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">private</span> <span class="token class-name">ReadOnlyCollection</span> _collection<span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _head<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token function">Enumerator</span><span class="token punctuation">(</span><span class="token class-name">ReadOnlyCollection</span> collection<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                _collection <span class="token operator">=</span> collection<span class="token punctuation">;</span>                _head <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token keyword">object</span> Current   <span class="token comment">//数组的_head</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">get</span>                <span class="token punctuation">&#123;</span>                    <span class="token class-name"><span class="token keyword">object</span></span> o <span class="token operator">=</span> _collection<span class="token punctuation">.</span>_array<span class="token punctuation">[</span>_head<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> o<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>_head <span class="token operator">&lt;</span> _collection<span class="token punctuation">.</span>_array<span class="token punctuation">.</span>Length<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                _head <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们想用如下语法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> roc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ReadOnlyCollection</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Sum</span><span class="token punctuation">(</span>roc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那么我们就需要将<code>static int Sum(ICollection nums)</code>更改为<code>static int Sum(IEnumerable nums)</code>，原因是因为<code>ICollection接口</code>实现了其他的方法，而<code>ReadOnlyCollection</code>只实现了<code>IEnumerable接口</code></p><p>例子3：显示接口实现（C#独有）</p><p>这个杀手不太冷的男主角，杀手的身份需要隐藏</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">IspExample3</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">IKiller</span> killer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WarmKill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            killer<span class="token punctuation">.</span><span class="token function">Kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//这时候如果我们想调用love方法</span>            <span class="token comment">//方法1类型转换</span>            <span class="token class-name"><span class="token keyword">var</span></span> wk1 <span class="token operator">=</span> killer <span class="token keyword">as</span> <span class="token class-name">WarmKill</span><span class="token punctuation">;</span>            <span class="token comment">//方法2强制类型转换</span>            <span class="token class-name"><span class="token keyword">var</span></span> wk2 <span class="token operator">=</span> <span class="token punctuation">(</span>IGentelman<span class="token punctuation">)</span>killer<span class="token punctuation">;</span>                        wk1<span class="token punctuation">.</span><span class="token function">Love</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            wk2<span class="token punctuation">.</span><span class="token function">Love</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">interface</span> <span class="token class-name">IGentelman</span>    <span class="token punctuation">&#123;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Love</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">interface</span> <span class="token class-name">IKiller</span>    <span class="token punctuation">&#123;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">WarmKill</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IGentelman</span><span class="token punctuation">,</span> <span class="token class-name">IKiller</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Love</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I will love you forever..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> IKiller<span class="token punctuation">.</span><span class="token function">Kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//杀手的身份需要隐藏，所以我们需要显示实现接口成员</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Let me kill the enemy..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">Let me kill the enemy...I will love you forever...I will love you forever...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>反射：以不变应万变（更松的耦合）</li></ul><h4 id="16-3-2-什么是反射"><a href="#16-3-2-什么是反射" class="headerlink" title="16.3.2 什么是反射"></a>16.3.2 什么是反射</h4><ul><li><p>.net框架所具有的功能</p></li><li><p>简单理解：给我一个对象，我能在<strong>不用new操作符</strong>的情况下，也不知道是什么静态类型的情况下，创建一个同类型的对象，还能访问这个对象的各个成员</p></li><li><p>《C#图解教程》——大多数程序都要处理数据，包括读、写、操作和显示数据。（图形也是数据的一种形式。）然而，对于某些程序来说，它们操作的数据不是数字、文本或图形，而是关于程序和程序类型的信息。</p><ul><li>有关程序及其类型的数据被成员<strong>元数据</strong>（metadata），它们保存在程序的程序集中。</li><li>程序在运行时，可以查看其他程序集或其本身的元数据。运行中的程序查看本身的元数据或其他程序的元数据的行为叫做<strong>反射</strong>（reflection）。</li></ul></li><li><p>对象浏览器是显示元数据的程序的一个示例。它可以读取程序集，然后显示其所包含的类型以及类型的所有特征和成员。</p></li><li><p>反射是C#/JAVA这类托管类型语言与C/C++这类原生类型语言最大的区别之一</p></li><li><p>单元测试/泛型等均基于反射</p></li><li><p><font size="5">2、为什么需要反射</font></p></li><li><p><strong>原因</strong>：</p><ul><li>很多时候程序的逻辑并不是在写的时候就能确定，有时需要用户交互时才确定<ul><li>此时程序已经属于运行状态（Dynamic，动态）</li><li>如果要程序员在静态（static）编写时，去枚举用户可能做的操作，会让程序变得十分臃肿，可读性、可维护性都很烂，并且枚举用户可能做的操作这件事是很难实现的</li><li>这是我们需要的这种：<strong>以不变应万变</strong>的能力，就是反射机制</li></ul></li></ul></li><li><p><font size="5">3、反射优缺点</font></p><ul><li><p><strong>优点</strong></p><ul><li>1、反射提高了程序的灵活性和扩展性。</li><li>2、降低耦合性，提高自适应能力。</li><li>3、它允许程序创建和控制任何类的对象，无需提前硬编码目标类。</li></ul></li><li><p><strong>缺点</strong></p><ul><li>1、性能问题：反射是去内存中动态拿到对象/类型描述，再用这些描述去创建对象，这个过程是对性能有影响的（使用反射基本上是一种解释操作，用于字段和方法接入时要远慢于直接代码。因此反射机制主要应用在对灵活性和拓展性要求很高的系统框架上，普通程序不建议使用。）</li><li>2、使用反射会模糊程序内部逻辑；程序员希望在源代码中看到程序的逻辑，反射却绕过了源代码的技术，因而会带来维护的问题，反射代码比相应的直接代码更复杂。</li></ul></li></ul></li></ul><p>部分摘自：<a href="https://www.sogou.com/link?url=hedJjaC291OfPyaFZYFLI4KQWvqt63NBtcOkgzSJL054AydClNZNQQ">https://www.sogou.com/link?url=hedJjaC291OfPyaFZYFLI4KQWvqt63NBtcOkgzSJL054AydClNZNQQ</a>..</p><ul><li><p>实例1，用第一个给女朋友买车的例子，反射的基本原理</p></li><li><p>Main方法的主要代码如下</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">IspExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">ITank</span> tank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HeavyTank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//=========华丽的分割线=========</span>            <span class="token class-name"><span class="token keyword">var</span></span> t <span class="token operator">=</span> tank<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">object</span></span> o <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//Activator.CreateInstance方法 使用最符合指定参数的构造函数创建指定类型的实例</span>            <span class="token class-name">MethodInfo</span> fireMi <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"Fire"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">MethodInfo</span> runMi <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"Run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//MethodInfo 发现方法的属性并提供对方法元数据的访问。</span>            fireMi<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            runMi<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">Boom!!!Ka!! ka!! ka!! ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>主体程序和插件的关系就是以不变应万变</p></li><li><p>主体程序一般都会发布包含程序开发接口API，程序开发包SDK</p><ul><li>程序开发接口API不一定都是接口</li><li>依赖注入的高自由度意味着错误率提高，例如调方法时大小写写错，就无法找到对应的方法再成功调用了。</li><li>开发插件过程中，为了避免自由度过高导致的错误，我们需要有一定的约束，就是SDK中的API</li></ul></li><li><p>孩子玩具的例子</p></li><li><p>创建一个.net core的程序控制台应用<code>BabyStroller.App</code></p></li><li><p>首先使用<code>Console.WriteLine(Environment.CurrentDirectory);</code>获取程序所在文件夹的位置</p></li><li><p>然后在文件夹内新建一个Animals文件夹</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>Loader</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">BabyStroller<span class="token punctuation">.</span>App</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//Console.WriteLine(Environment.CurrentDirectory);</span>            <span class="token class-name"><span class="token keyword">var</span></span> folder <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span>CurrentDirectory<span class="token punctuation">,</span> <span class="token string">"Animals"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//得到Animals文件夹</span>            <span class="token class-name"><span class="token keyword">var</span></span> files <span class="token operator">=</span> Directory<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span>folder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//从Path中把所有.dll文件load进来，当然目前是没有文件的</span>            <span class="token class-name"><span class="token keyword">var</span></span> animalsTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Type<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> file <span class="token keyword">in</span> files<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name"><span class="token keyword">var</span></span> assembly <span class="token operator">=</span> AssemblyLoadContext<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">LoadFromAssemblyPath</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//将assembly里所有的动物类型加到animalsTypes里</span>                <span class="token class-name"><span class="token keyword">var</span></span> types <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> t <span class="token keyword">in</span> types<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"Voice"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        animalsTypes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> animalsTypes<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i<span class="token operator">+</span><span class="token number">1</span></span><span class="token punctuation">&#125;</span></span><span class="token string">.</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">animalsTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"======================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Please choose animal."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">int</span></span> index <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">></span>animalsTypes<span class="token punctuation">.</span>Count <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"No such an animal.Try again!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name"><span class="token keyword">int</span></span> times <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">var</span></span> t <span class="token operator">=</span> animalsTypes<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">var</span></span> m <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"Voice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">var</span></span> o <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                m<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> times <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>之后创建插件，创建一个类库，解决方案如下，两个类库，每个类库下都有两个类</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220926151204152.png"></p></li><li><p>每个类里都只有一个<code>public void Voice(int times)</code>方法，主要内容类似</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Animals<span class="token punctuation">.</span>Lib</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Voice</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> times<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Meow!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>之后右击解决方案<code>生成解决方案</code></p></li><li><p>右键解决方案，在<code>文件资源管理器中打开文件夹</code>，找到两个dll文件复制到主程序Animals的文件夹下</p></li><li><p>之后回到主程序<code>BabyStroller.App</code></p></li><li><p>运行程序结果如下</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220926152015097.png"></p></li><li><p>纯反射，很容易发生错误，接下来开发<strong>程序开发包SDK</strong></p></li><li><p>右键<code>BabyStroller.App</code>解决方案，添加一个新的类库<code>BabyStroller.SDK</code></p></li><li><p>删除默认的类class1，添加一个interface<code>IAnimal</code>，代码如下</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">BabyStroller<span class="token punctuation">.</span>SDK</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAnimal</span>    <span class="token punctuation">&#123;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Voice</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> times<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>接下来在添加一个类<code>UnfinishedAttribute</code></p></li><li><p>就是未完成的插件可以用这个特性进行标记，当sdk的提供商扫描到这个特性的时候就知道这个插件还没有完成，就会忽略它的调用</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">BabyStroller<span class="token punctuation">.</span>SDK</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnfinishedAttribute</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Attribute</span></span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>右键<code>BabyStroller.App</code>解决方案进行生成解决方案</p></li><li><p>右键<code>BabyStroller.SDK</code>，找到dll文件，让第三方进行使用</p></li><li><p>主体程序需要引用SDK，主体程序解决方案如下：</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220926153138910.png"></p></li><li><p>之后回到第三方插件，为两个类库在依赖项中添加dll文件的引用</p></li><li><p>程序代码无需做过多修改，只需要加上接口即可</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">BabyStroller<span class="token punctuation">.</span>SDK</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Animals<span class="token punctuation">.</span>Lib</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">IAnimal</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Voice</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> times<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Meow!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>如果在开发过程发现某个还没有做完，只需要用<code>[Unfinished]</code>标注即可</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220926153608623.png"></p></li><li><p>之后重新生成解决方案，将主程序文件夹下Aniaml文件夹里的两个旧版本第三方插件的dll文件更替为新版本的</p></li><li><p>之后可以对主程序代码进行优化</p></li><li><p>优化1</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">/*                    if (t.GetMethod("Voice") != null)                    &#123;                        animalsTypes.Add(t);                    &#125;                    */</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">GetInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IAnimal</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">UnfinishedAttribute</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        animalsTypes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>这样能够减少插件开发者的工作量或者错误使用</p></li><li><p>优化2</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//m.Invoke(o, new object[] &#123; times &#125;);</span>            <span class="token class-name"><span class="token keyword">var</span></span> a <span class="token operator">=</span> o <span class="token keyword">as</span> <span class="token class-name">IAnimal</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">Voice</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>接下来debug程序发现没有成功过滤掉Cow和Cat</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220926155545576.png"></p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">/*                    if (t.GetMethod("Voice") != null)                    &#123;                        animalsTypes.Add(t);                    &#125;                    */</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">GetInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IAnimal</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        <span class="token class-name"><span class="token keyword">var</span></span> isUnfinished <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>a <span class="token operator">=></span> a<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">UnfinishedAttribute</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>isUnfinished<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                        animalsTypes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>debug后发现成功过滤</p><ul><li>第一种写法获取到的object[]里面是类本身，Contains里面是类的类型(typeof)，两个肯定是不同的</li><li>第二种写法是先获取了object[]里面的类型，也就是a.GetType()这一步，所以判断是对了的</li></ul></li></ul><ul><li><p>反射与接口的结合</p></li><li><p>反射与特性的结合</p></li><li><p>依赖注入：此DI非彼DI，但没有彼DI就没有此DI……</p><ul><li><p><strong>什么是注入？</strong></p><ul><li><p>最重要的一点：<strong>Container（容器）</strong></p></li><li><ul><li><p>把各种类型、接口放到容器中，就是“注册”</p></li><li><ul><li>注册类型的时候还可以设置，创建对象时是每次创建都是一个新对象，还是创建一个单例模式（每次要对象都给你同一个实例）</li></ul></li><li><p>后边需要创建实例的时候，向容器“要实例”即可</p></li></ul></li></ul></li><li><p>封装好的反射最重要的功能是依赖注入</p></li><li><p>依赖注入DI（Dependency Injection）</p></li><li><p>依赖反转原则（Dependency inversion principle）</p></li><li><p>没有依赖反转原则就没有依赖注入，依赖注入是在依赖反转原则这个概念的基础上，结合接口及反射机制等的应用</p></li><li><p>添加依赖注入框架，右键 <code>依赖项</code> –&gt; <code>管理NuGet程序包</code> –&gt; 输入<code>DependencyInjection</code></p></li><li><p>依赖注入的基本用法，Main方法的主要代码如下：</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>DependencyInjection</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">IspExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ServiceCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//ServiceCollection 容器</span>            sc<span class="token punctuation">.</span><span class="token function">AddScoped</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ITank</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">HeavyTank</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//往容器里装东西，ITank是静态类型，typeof(ITank)拿到动态类型描述</span>          <span class="token class-name"><span class="token keyword">var</span></span> sp <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">BuildServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//分割线以上为一次性注册</span>          <span class="token comment">//=====================华丽的分割线==============</span>            <span class="token class-name">ITank</span> tank <span class="token operator">=</span> sp<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ITank<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tank<span class="token punctuation">.</span><span class="token function">Fire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tank<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优势在于如果在程序过程中有千千万万个<code>ITank</code>实例，只需要更改<code>sc.AddScoped(typeof(ITank), typeof(HeavyTank));</code>中的<code>typeof(HeavyTank)</code>即可</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>DependencyInjection</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">IspExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ServiceCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sc<span class="token punctuation">.</span><span class="token function">AddScoped</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ITank</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">HeavyTank</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sc<span class="token punctuation">.</span><span class="token function">AddScoped</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IVehicle</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Car</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          sc<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Driver<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//Driver是类所以不需要typeof</span>            <span class="token class-name"><span class="token keyword">var</span></span> sp <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">BuildServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//=====================华丽的分割线==============</span>            <span class="token class-name"><span class="token keyword">var</span></span> driver <span class="token operator">=</span> sp<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Driver<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            driver<span class="token punctuation">.</span><span class="token function">Drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="17-泛型，partial类，枚举，结构，Lambda-Linq"><a href="#17-泛型，partial类，枚举，结构，Lambda-Linq" class="headerlink" title="17.泛型，partial类，枚举，结构，Lambda,Linq"></a>17.泛型，partial类，枚举，结构，Lambda,Linq</h2><h3 id="17-1-泛型-generic-无处不在"><a href="#17-1-泛型-generic-无处不在" class="headerlink" title="17.1 泛型(generic)无处不在"></a>17.1 泛型(generic)无处不在</h3><ul><li><p>为什么需要泛型：避免成员膨胀或者类型膨胀</p><ul><li>本次实例讲的是在一给商店，一开始只卖苹果</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloGeneric</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Apple</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Color <span class="token operator">=</span> <span class="token string">"Red"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Box</span> box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Cargo <span class="token operator">=</span> apple <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>Cargo<span class="token punctuation">.</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Apple</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Color <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Box</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Apple</span> Cargo <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>随着商店经营变好，卖的东西增多，开始卖书了，这时候就需要增加一个<code>Book类</code>，也是需要装进<code>Box</code>里，让客服带回家</p></li><li><p>这时候就面临四个选择</p><ul><li><p>第一种是为<code>Book</code>新准备一个盒子<code>BookBox类</code></p><ul><li>产生<code>类型膨胀</code>问题，例如随着商品变多，一千种商品需要准备一千种类型</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloGeneric</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Apple</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Color <span class="token operator">=</span> <span class="token string">"Red"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">AppleBox</span> box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppleBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Apple <span class="token operator">=</span> apple <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>Apple<span class="token punctuation">.</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Name <span class="token operator">=</span> <span class="token string">"BOOK"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">BooxBox</span> booxBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BooxBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Book <span class="token operator">=</span> book <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>booxBox<span class="token punctuation">.</span>Book<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Book</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Apple</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Color <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">AppleBox</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Apple</span> Apple <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">BooxBox</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Book</span> Book <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第二种是在<code>Box类</code>添加一个<code>public Book book &#123; get; set; &#125;</code>属性</p><ul><li>产生成员膨胀的问题，Box类里的成员在大多数时候都用不到</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloGeneric</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Apple</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Color <span class="token operator">=</span> <span class="token string">"Red"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Name <span class="token operator">=</span> <span class="token string">"8yyy"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Box</span> box1 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> Apple<span class="token operator">=</span>apple<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Box</span> box2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Book<span class="token operator">=</span>book <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>box1<span class="token punctuation">.</span>Apple<span class="token punctuation">.</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>box2<span class="token punctuation">.</span>Book<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Book</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Apple</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Color <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Box</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Apple</span> Apple <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Book</span> Book <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第三种是在<code>Box类</code>里声明Object类型的成员</p><ul><li><code>public Object Cargo &#123; get; set; &#125;</code></li><li><code>Console.WriteLine((box1.Cargo as Apple)?.Color);</code><ul><li>输出结果时需要强制类型转换</li><li>？的意思是如果是Apple类型的就输出Color的值，否则输出null值</li><li>装盒省事了，把东西从盒子里拿出来复杂了</li></ul></li></ul></li><li><p>第四种是泛型</p><ul><li>Box修改如下</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Box<span class="token punctuation">&lt;</span>TCargo<span class="token punctuation">></span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">TCargo</span> Cargo <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在使用泛型实体前都需要特化，就是给定具体类型</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Apple</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Color <span class="token operator">=</span> <span class="token string">"Red"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Name <span class="token operator">=</span> <span class="token string">"8yyy"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Box<span class="token punctuation">&lt;</span>Apple<span class="token punctuation">></span></span> box1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box<span class="token punctuation">&lt;</span>Apple<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Box<span class="token punctuation">&lt;</span>Book<span class="token punctuation">></span></span> box2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box<span class="token punctuation">&lt;</span>Book<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>box1<span class="token punctuation">.</span>Cargo<span class="token punctuation">.</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>box2<span class="token punctuation">.</span>Cargo<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>泛型的其他例子</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloGeneric</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu<span class="token punctuation">.</span>ID <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span>            stu<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"8yyy"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">interface</span> <span class="token class-name">IUnique<span class="token punctuation">&lt;</span>TId<span class="token punctuation">></span></span>    <span class="token punctuation">&#123;</span>        <span class="token return-type class-name">TId</span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student<span class="token punctuation">&lt;</span>TId<span class="token punctuation">></span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IUnique<span class="token punctuation">&lt;</span>TId<span class="token punctuation">></span></span></span>   <span class="token comment">//一个类实现了一个泛型接口，那么这个类本身也是泛型的</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">TId</span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token operator">=></span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">set</span> <span class="token operator">=></span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>当继承接口的时候直接特化，类就可以不再是泛型的</p><ul><li>类之间实现特化之后的泛型接口</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IUnique<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span></span>       <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token operator">=></span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">set</span> <span class="token operator">=></span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>泛型的基接口的名称空间<code>using System.Collections.Generic;</code></p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloGeneric</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">IList<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//IList泛型接口，List泛型类</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> list<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>一个方法就是一个算法</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloGeneric</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> a1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> a2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> a3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">3.3</span><span class="token punctuation">,</span> <span class="token number">4.4</span><span class="token punctuation">,</span> <span class="token number">5.5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> a4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">3.3</span><span class="token punctuation">,</span> <span class="token number">4.4</span><span class="token punctuation">,</span> <span class="token number">5.5</span> <span class="token punctuation">,</span><span class="token number">6.6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token function">Zip</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">Zip</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> zipped <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span>a<span class="token punctuation">.</span>Length <span class="token operator">+</span> b<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> ai <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> zi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">do</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ai <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>Length<span class="token punctuation">)</span> zipped<span class="token punctuation">[</span>zi<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>ai<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bi <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>Length<span class="token punctuation">)</span> zipped<span class="token punctuation">[</span>zi<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>bi<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>ai <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>Length <span class="token operator">||</span> bi <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> zipped<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>有 如上一个例子，<code>Zip方法</code>用于将两个<code>int型</code>的数组依次交替组成一个数组</p></li><li><p>现在我们有两个<code>double型</code>的数组，我们也想把这两个数组一次交替组成一个数组，那么我们就需要用到泛型</p></li><li><p>使用Ctrl+F 全部替换</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220927104134768.png"></p></li><li><p>我们将代码改为如下形式</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name">T<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token generic-method"><span class="token function">Zip</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">T<span class="token punctuation">[</span><span class="token punctuation">]</span></span> a<span class="token punctuation">,</span> <span class="token class-name">T<span class="token punctuation">[</span><span class="token punctuation">]</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">T<span class="token punctuation">[</span><span class="token punctuation">]</span></span> zipped <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">T</span><span class="token punctuation">[</span>a<span class="token punctuation">.</span>Length <span class="token operator">+</span> b<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> ai <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> zi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">do</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ai <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>Length<span class="token punctuation">)</span> zipped<span class="token punctuation">[</span>zi<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>ai<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bi <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>Length<span class="token punctuation">)</span> zipped<span class="token punctuation">[</span>zi<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>bi<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>ai <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>Length <span class="token operator">||</span> bi <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> zipped<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>正交性：泛型类型(类/接口/委托…）、泛型成员(属性/方法/字段…）</p><ul><li><p>泛型与其他的变成实体都存在一个交叉点——正交点</p></li><li><p>泛型委托</p><ul><li>Action委托</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloGeneric</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> ac1 <span class="token operator">=</span> Hello<span class="token punctuation">;</span>            <span class="token function">ac1</span><span class="token punctuation">(</span><span class="token string">"8yyy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> ac2 <span class="token operator">=</span> Mul<span class="token punctuation">;</span>            <span class="token function">ac2</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Hello,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Mul</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">Hello,8yyy10000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>Func委托</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloGeneric</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span> func1 <span class="token operator">=</span> Add<span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> res <span class="token operator">=</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>类型方法的参数推断</p></li><li><p>泛型与委托、lambda表达式</p><ul><li><p>对于逻辑非常简单的方法，在调用的地方谁调用谁声明，并且是匿名声明。</p></li><li><p>使用lambda表达式，Func泛型委托</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span> func1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> res <span class="token operator">=</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>(int a, int b) =&gt; &#123; return a + b; &#125;;</code>这段代码的逻辑就等价于以下Add方法</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>同时我们可以使用简化，因为在声明Func泛型时已经表明变量是int型的了</p><ul><li><code>(a,b) =&gt; &#123; return a + b; &#125;;</code></li></ul></li></ul></li></ul><h3 id="17-2-partial类"><a href="#17-2-partial类" class="headerlink" title="17.2 partial类"></a>17.2 partial类</h3><p><strong>什么是partial类？</strong></p><p>C#运行我们把一个类的代码分成两个部分甚至多个部分进行编写</p><p>同一个类分割成多个partial类，类名称是相同的，partial类的编写进度可以各自控制，最后合成为一个类。</p><p>partial类还有一个功能，就是允许不同的partial类可以使用不同编程语言来写，然后最后合成为一个类，仍然不影响。</p><ul><li><strong>为什么需要partial类？</strong>减少类的派生</li><li>partial类与Entity Framework</li><li>partia类与Windows Forns, WPF, ASP.NET Core</li></ul><p>首先由一个Bookstore数据库</p><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220927113437000.png"></p><p>.net core 没有ADO.NET Entity Data Model。</p><p>需要新建一个.net framework的解决方案</p><p>添加ADO.NET Entity Data Model，结果如下</p><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220927140903136.png"></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">var</span></span> dbContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BookstoreEntities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">var</span></span> books <span class="token operator">=</span> dbContext<span class="token punctuation">.</span>Book<span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> book <span class="token keyword">in</span> books<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220927142323374.png"></p><p><img src="/.io//Users\8y\AppData\Roaming\Typora\typora-user-images\image-20220927142454032.png" alt="image-20220927142454032"></p><p>再对泛型里面的Book类型F12查看定义</p><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220927142529205.png"></p><p>右键<code>Bookstore.Client</code>项目添加一个类<code>BookstorePart2</code>，将上述代码复制到里面，修改如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">namespace</span> <span class="token namespace">Bookstore<span class="token punctuation">.</span>Client</span><span class="token punctuation">&#123;</span>    <span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>    <span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Book</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Report</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token interpolation-string"><span class="token string">$"ID:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>ID</span><span class="token punctuation">&#125;</span></span><span class="token string"> Name:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string"> Price:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>Price</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在SQL server新填一个字段Author，回到Model<code>从数据库更新模型</code>，效果如下</p><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220927143649995.png"></p><p>回到Book类的定义，你会发现存在两个声明，其中原来的那个也进行了修改</p><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220927143734398.png"></p><p>写在partial类的另外一部分<code>BookstorePart2</code>没受到任何影响</p><h3 id="17-3-枚举类型"><a href="#17-3-枚举类型" class="headerlink" title="17.3 枚举类型"></a>17.3 枚举类型</h3><ul><li>人为限定取值范围的整数</li><li>整数值的对应<ul><li>默认为0123…</li></ul></li><li>比特位式用法<ul><li>读取文件</li></ul></li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloEnum</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Person</span> personOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Name <span class="token operator">=</span> <span class="token string">"8yyy"</span><span class="token punctuation">,</span>Level<span class="token operator">=</span>Level<span class="token punctuation">.</span>BigBoos <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Level<span class="token punctuation">.</span>Employee<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Level<span class="token punctuation">.</span>Manager<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Level<span class="token punctuation">.</span>Boos<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Level<span class="token punctuation">.</span>BigBoos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Person</span> personTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Name<span class="token operator">=</span><span class="token string">"Timothy"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            personTwo<span class="token punctuation">.</span>Skill <span class="token operator">=</span> Skill<span class="token punctuation">.</span>Cook <span class="token operator">|</span> Skill<span class="token punctuation">.</span>Drive <span class="token operator">|</span> Skill<span class="token punctuation">.</span>Program <span class="token operator">|</span> Skill<span class="token punctuation">.</span>Teach<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">(</span>personTwo<span class="token punctuation">.</span>Skill <span class="token operator">&amp;</span> Skill<span class="token punctuation">.</span>Cook<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//比特位式用法,返回Ture则说明会做饭</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">enum</span> <span class="token class-name">Level</span><span class="token punctuation">&#123;</span>        Employee<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>       <span class="token comment">//人为限定取值范围的整数</span>        Manager<span class="token punctuation">,</span>        Boos<span class="token operator">=</span><span class="token number">301</span><span class="token punctuation">,</span>        BigBoos<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//比特位式用法</span>    <span class="token keyword">enum</span> <span class="token class-name">Skill</span>    <span class="token punctuation">&#123;</span>        Cook<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>        Drive<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>        Program<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>        Teach<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Person</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Level</span> Level <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Skill</span> Skill <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">100101301302True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-4-结构体（struct）"><a href="#17-4-结构体（struct）" class="headerlink" title="17.4 结构体（struct）"></a>17.4 结构体（struct）</h3><ul><li>值类型，可装/拆箱</li><li>可实现接口，不能派生自类/结构体</li><li>不能又显示无参构造器</li></ul><h3 id="17-5-Lambda表达式"><a href="#17-5-Lambda表达式" class="headerlink" title="17.5 Lambda表达式"></a>17.5 Lambda表达式</h3><p>1.匿名方法</p><p>2.Inline方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Combine</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//可省略(int a,int b)中的int</span>            <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span> func <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> res <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">;</span>            func <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//可省略委托实例</span>            func <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//可省略return</span>            func <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">835-123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>泛型方法+泛型委托参数+泛型参数</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Combine</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//&lt;int>也可以省略，泛型委托的类型参数推断</span>            <span class="token generic-method"><span class="token function">DoSomeCalc</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">DoSomeCalc</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span>T<span class="token punctuation">,</span>T<span class="token punctuation">></span></span> func<span class="token punctuation">,</span><span class="token class-name">T</span> x<span class="token punctuation">,</span> <span class="token class-name">T</span> y<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">T</span> res <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果为11</p><h3 id="17-6-LINQ"><a href="#17-6-LINQ" class="headerlink" title="17.6 LINQ"></a>17.6 LINQ</h3><p>Language Integrated Query，语言集成查询，是C# 3的核心。顾名思义，LINQ是关于查询的，其目的是使用一致的语法和特性，以一种易阅读、可组合的方式，使对多数据的查询变得简单。</p>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharpNotes</title>
      <link href="/2022/08/21/CSharpNotes/"/>
      <url>/2022/08/21/CSharpNotes/</url>
      
        <content type="html"><![CDATA[<h2 id="1-C-程序结构"><a href="#1-C-程序结构" class="headerlink" title="1. C#程序结构"></a>1. C#程序结构</h2><p><strong>一个 C# 程序主要包括以下几个部分：</strong></p><ul><li>命名空间声明；</li><li>一个类（class）；</li><li>类方法；</li><li>类属性；</li><li>一个 Main 方法；</li><li>语句和表达式；</li><li>注释。</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;    class Program    &#123;        static void Main(string[] args)        &#123;            &#x2F;* my first c# program *&#x2F;            Console.WriteLine(&quot;Hello World!&quot;);            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我们来看一下上面程序的各个部分</p><h4 id="1-using-System"><a href="#1-using-System" class="headerlink" title="1) using System;"></a>1) using System;</h4><p>using 关键字用来在程序中引入 System 命名空间，一个程序中可以有多个 using 语句。</p><h4 id="2-namespace-test1"><a href="#2-namespace-test1" class="headerlink" title="2) namespace test1"></a>2) namespace test1</h4><p>namespace 关键字用来声明一个命名空间，“test1”则是命名空间的名字。命名空间是类的集合，上面代码中名为“test1”的命名空间中包含了一个名为“Program”的类。</p><h4 id="3-class-Program"><a href="#3-class-Program" class="headerlink" title="3) class Program"></a>3) class Program</h4><p>class 关键字用来定义一个类，“Program”则是类的名称，类中通常用来存放程序中要使用的数据和函数（也叫方法）。</p><h4 id="4-static-void-Main-string-args"><a href="#4-static-void-Main-string-args" class="headerlink" title="4) static void Main(string[] args)"></a>4) static void Main(string[] args)</h4><p>此行代码中，Main 为定义的函数名称，Main 函数是整个 C# 程序的入口，其中包含了程序运行时需要执行的操作。static 和 void 都是用来修饰 Main 函数的关键字。</p><h4 id="5-my-first-c-program"><a href="#5-my-first-c-program" class="headerlink" title="5)/* my first c# program */"></a>5)/* my first c# program */</h4><p>这是程序的注释，当程序运行时被<code>/* */</code>包裹的内容将被编译器忽略，不会执行。注释主要用来对我们所写的代码进行说明。</p><h4 id="6-Console-WriteLine-“Hello-World-”"><a href="#6-Console-WriteLine-“Hello-World-”" class="headerlink" title="6) Console.WriteLine(“Hello World!”);"></a>6) Console.WriteLine(“Hello World!”);</h4><p>此行代码用来在命令行窗口中输出“Hello World!”。WriteLine 是 System 命名空间中定义的 Console 类里面的方法，用来输出一些消息。</p><h4 id="7-Console-ReadKey"><a href="#7-Console-ReadKey" class="headerlink" title="7) Console.ReadKey();"></a>7) Console.ReadKey();</h4><p>此行代码是针对 VS.NET 用户的，它会 <strong>使程序进入等待状态</strong>，敲击键盘上的任意一个按键即可让程序继续运行。之所以需要这行代码，是因为命令行窗口会在程序运行结束后自动关闭，这会导致我们想要输出的内容一闪而过，加入此行代码则可以避免这种情况。</p><p>按F5即可执行</p><h2 id="2-C-基本的语法"><a href="#2-C-基本的语法" class="headerlink" title="2. C#基本的语法"></a>2. C#基本的语法</h2><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;    class Rectangle    &#123;        &#x2F;&#x2F;成员变量        double length;        double width;        &#x2F;&#x2F;成员函数        public void Acceptdetails() &#123;            length &#x3D; 4.5;            width &#x3D; 3.5;        &#125;                public double GetArea() &#123;            return length * width;        &#125;        public void Diskplay()        &#123;            Console.WriteLine(&quot;length:&#123;0&#125;&quot;,length);            Console.WriteLine(&quot;width:&#123;0&#125;&quot;, width);            Console.WriteLine(&quot;Area:&#123;0&#125;&quot;, GetArea());        &#125;    &#125;    class ExecuteRectangle    &#123;        static void Main(string[] args)        &#123;            &#x2F;&#x2F;类的实例化            Rectangle r &#x3D; new Rectangle();            r.Acceptdetails();            r.Diskplay();            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><p>成员变量是用来存储类中要使用的数据或属性的。在上面的示例程序中，Rectangle 类中包含两个成员变量，分别是 length 和 width。</p><h4 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h4><p>成员函数（也可以称为成员方法）是执行特定任务的语句集，一个类的成员函数需要在类中声明。上面的示例代码中，Rectangle 类包含三个成员函数，分别是 AcceptDetails、GetArea 和 Display。</p><h4 id="类的实例化"><a href="#类的实例化" class="headerlink" title="类的实例化"></a>类的实例化</h4><p>通过一个已有的类（class）创建出这个类的对象（object）的过程叫做类的实例化。类的实例化需要使用 new 关键字，例如上面示例中第 26 行就创建了一个 Rectangle 类的对象。</p><h2 id="3-C-关键字"><a href="#3-C-关键字" class="headerlink" title="3. C#关键字"></a>3. C#关键字</h2><p>C# 中的关键字是编译器预先定义好的一些单词，也可以称为保留字或者保留标识符，这些关键字对编译器有特殊的意义，不能用作标识符。但是，如果您非要使用的话也不是没有办法，只需要在关键字前面加上<code>@</code>前缀即可，例如<code>@if</code>就是一个有效的标识符，而<code>if</code>则是一个关键字。</p><p>在 C# 中，有些关键字在代码的上下文中具有特殊的意义，例如 get 和 set，这样的关键字被称为上下文关键字（contextual keywords）。一般来说，C# 语言中新增的关键字都会作为上下文关键字，这样可以避免影响到使用旧版语言编写的 C# 程序。</p><p>下表列出了 C# 中的保留关键字（Reserved Keywords）和上下文关键字（Contextual Keywords）：</p><table><thead><tr><th>保留关键字</th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>abstract</td><td>as</td><td>base</td><td>bool</td><td>break</td><td>byte</td><td>case</td></tr><tr><td>catch</td><td>char</td><td>checked</td><td>class</td><td>const</td><td>continue</td><td>decimal</td></tr><tr><td>default</td><td>delegate</td><td>do</td><td>double</td><td>else</td><td>enum</td><td>event</td></tr><tr><td>explicit</td><td>extern</td><td>false</td><td>finally</td><td>fixed</td><td>float</td><td>for</td></tr><tr><td>foreach</td><td>goto</td><td>if</td><td>implicit</td><td>in</td><td>in (generic modifier)</td><td>int</td></tr><tr><td>interface</td><td>internal</td><td>is</td><td>lock</td><td>long</td><td>namespace</td><td>new</td></tr><tr><td>null</td><td>object</td><td>operator</td><td>out</td><td>out (generic modifier)</td><td>override</td><td>params</td></tr><tr><td>private</td><td>protected</td><td>public</td><td>readonly</td><td>ref</td><td>return</td><td>sbyte</td></tr><tr><td>sealed</td><td>short</td><td>sizeof</td><td>stackalloc</td><td>static</td><td>string</td><td>struct</td></tr><tr><td>switch</td><td>this</td><td>throw</td><td>true</td><td>try</td><td>typeof</td><td>uint</td></tr><tr><td>ulong</td><td>unchecked</td><td>unsafe</td><td>ushort</td><td>using</td><td>virtual</td><td>void</td></tr><tr><td>volatile</td><td>while</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>上下文关键字</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>add</td><td>alias</td><td>ascending</td><td>descending</td><td>dynamic</td><td>from</td><td>get</td></tr><tr><td>global</td><td>group</td><td>into</td><td>join</td><td>let</td><td>orderby</td><td>partial (type)</td></tr><tr><td>partial (method)</td><td>remove</td><td>select</td><td>set</td><td></td><td></td><td></td></tr></tbody></table><h2 id="4-C-数据类型"><a href="#4-C-数据类型" class="headerlink" title="4. C#数据类型"></a>4. C#数据类型</h2><p>C# 语言中内置了一些基本的数据类型，数据类型用来指定程序中变量可以存储的数据的类型，C# 中的数据类型可以大致分为三类：</p><ul><li>值类型（Value types）；</li><li>引用类型（References types）；</li><li>指针类型（Pointer types）。</li></ul><p>如果想要获取类型或变量的确切大小，可以使用 sizeof 方法</p><p>例如sizeof(int)，结果为4</p><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p><strong>引用类型的变量中并不存储实际的数据值</strong>，而是存储的对数据（对象）的引用，换句话说就是，<strong>引用类型的变量中存储的是数据在内存中的位置</strong>。当多个变量都引用同一个内存地址时，如果其中一个变量改变了内存中数据的值，那么所有引用这个内存地址的变量的值都会改变。C# 中内置的引用类型包括 Object（对象）、Dynamic（动态）和 string（字符串）。</p><h4 id="1-对象类型（Object）"><a href="#1-对象类型（Object）" class="headerlink" title="1) 对象类型（Object）"></a>1) 对象类型（Object）</h4><p>对象类型是 C# 通用类型系统（Common Type System：CTS）中所有数据类型的最终基类，Object 是 System.Object 类的别名。任何类型的值都可以分配给对象类型，但是在分配值之前，需要对类型进行转换。</p><p>将值类型转换为对象类型的过程被称为“装箱”，反之将对象类型转换为值类型的过程则被称为“拆箱”。注意，只有经过装箱的数据才能进行拆箱。</p><h4 id="2-动态类型（Dynamic）"><a href="#2-动态类型（Dynamic）" class="headerlink" title="2) 动态类型（Dynamic）"></a>2) 动态类型（Dynamic）</h4><p>您可以在动态类型的变量中存储任何类型的值，这些变量的类型检查是在程序运行时进行的。动态类型的声明语法如下所示：</p><p>dynamic <variable_name> = value;</variable_name></p><p>例如：</p><p>dynamic d = 20;</p><p>动态类型与对象类型类似，但对象类型变量的类型检查是在编译时进行的，而动态类型变量的类型检查则是在程序运行时进行的。</p><h4 id="3-字符串类型（String）"><a href="#3-字符串类型（String）" class="headerlink" title="3) 字符串类型（String）"></a>3) 字符串类型（String）</h4><p>字符串类型的变量允许您将一个字符串赋值给这个变量，字符串类型需要通过 String 类来创建，String 类是 System.String 类的别名，它是从对象（Object）类型中派生的。**在 C# 中有两种定义字符串类型的方式，分别是使用<code>&quot; &quot;</code>和<code>@&quot; &quot;</code>**。</p><p>示例代码如下：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;使用引号的声明方式String str &#x3D; &quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;&quot;;&#x2F;&#x2F;使用 @ 加引号的声明形式String str &#x3D; @&quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用<code>@&quot; &quot;</code>形式声明的字符串称为“逐字字符串”，逐字字符串会将转义字符<code>\</code>当作普通字符对待</strong>，例如<code>string str = @&quot;C:\Windows&quot;;</code>等价于<code>string str = &quot;C:\\Windows&quot;;</code>。</p><p>另外，在<code>@&quot; &quot;</code>形式声明的字符串中可以任意使用换行，换行符及缩进空格等都会计算在字符串的长度之中。</p><h2 id="5-C-变量"><a href="#5-C-变量" class="headerlink" title="5. C#变量"></a>5. C#变量</h2><table><thead><tr><th>类型</th><th>示例</th></tr></thead><tbody><tr><td>整型（整数类型）</td><td>sbyte、byte、short、ushort、int、uint、long、ulong、char</td></tr><tr><td>浮点型</td><td>float、double</td></tr><tr><td>十进制类型</td><td>decimal</td></tr><tr><td>布尔型</td><td>true、false</td></tr><tr><td>空类型</td><td>可为空值的数据类型</td></tr></tbody></table><p>C# 中变量的名称并不是可以随意定义的，需要遵循如下所示的规则：</p><ul><li>变量名中可以包含英文字母<code>a-z, A-Z</code>、数字<code>0-9</code>和下划线<code>_</code>；</li><li>变量名只能以英文字母<code>a-z, A-Z</code>或下划线<code>_</code>开头，不能以数字开头；</li><li>变量名中不允许使用空格；</li><li>变量名不能是任何 C# 中的保留字或关键字，例如 char、float 等。</li><li>变量名命名我们一般遵循<strong>驼峰命名法</strong>，即以<strong>小写字母开头</strong>，多个单词拼接时，除第一个单词外，其余<strong>首字母大写</strong></li></ul><h3 id="接受用户输入的值"><a href="#接受用户输入的值" class="headerlink" title="接受用户输入的值"></a>接受用户输入的值</h3><p>上面的示例代码中我们使用到了一个名为 ReadLine() 的函数，它是由 System 命名空间中的 Console 类提供的，使用 ReadLine() 函数可以接受来自用户输入的内容并将其存储到变量中。</p><p>示例代码如下：</p><pre class="line-numbers language-none"><code class="language-none">using System;namespace c.biancheng.net&#123;    class Program &#123;        static void Main(string[] args) &#123;            int a, b;            Console.WriteLine(&quot;请输入第一个数字：&quot;);            a &#x3D; Convert.ToInt32(Console.ReadLine());            Console.WriteLine(&quot;请输入第二个数字：&quot;);            b &#x3D; Convert.ToInt32(Console.ReadLine());            Console.WriteLine(&quot;&#123;0&#125;+&#123;1&#125;&#x3D;&#123;2&#125;&quot;, a, b, a+b);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为使用 <strong>Console.ReadLine() 接收的数据是字符串格式</strong>的，所以示例中我们需要使用 <strong>Convert.ToInt32() 函数来将用户输入的数据转换为 int 类型</strong>。</p><h2 id="6-C-数据类型转换"><a href="#6-C-数据类型转换" class="headerlink" title="6. C#数据类型转换"></a>6. C#数据类型转换</h2><p>数据类型转换就是将一种类型的数据转换为另一种类型，在 C# 中有  <strong>两种</strong>  形式的类型转换方式，分别是  <strong>隐式类型转换</strong>  和  <strong>显示类型转换</strong></p><h3 id="1、隐式类型转换"><a href="#1、隐式类型转换" class="headerlink" title="1、隐式类型转换"></a>1、隐式类型转换</h3><p>隐式类型转换是由 C# 以类型安全的方式执行的，转换的过程中不会导致数据丢失，例如从较 **小 **的整数类型（例如 int） <strong>转</strong>  换到较 **大 **的整数类型（例如 long），从派生类转换为基类。</p><p>隐式转换不需要我们编写额外的代码，下例中演示了如何使用隐式类型转换的方式将 int 类型的数据转换成 double 类型：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int a &#x3D; 10;double b &#x3D; a;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>提示：一种数据类型（类型 A），只要其取值范围 <strong>完全包含</strong> 在另一种数据类型（类型 B）的取值范围内，那么类型 A 就可以隐式转换为类型 B。基于这一特性，C# 的隐式类型转换不会导致数据丢失。</p><h3 id="2、显式类型转换"><a href="#2、显式类型转换" class="headerlink" title="2、显式类型转换"></a>2、显式类型转换</h3><p>显式类型转换也叫 <strong>强制类型转换</strong> ，这种转换需要使用<code>(type)value</code>的形式或者预定义函数显式的完成，显式转换需要用户明确的指定要转换的类型，而且在转换的过程中可能会造成数据丢失，例如将 double 类型转换为 int 类型。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">double d&#x3D;56.23;int i &#x3D; (int)d;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果为56</p><p><code>int.Parse(string)</code> : 只支持将string类型转成int，Parse就是将int,char,double…等将</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">string st&#x3D;&quot;56.21&quot;;Int.Parse(st);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><font color="red">这是一种错误的写法，会报错Input string was not in a correct format，输入的格式错误，注意这里只能输入<code>int</code>的字符串</font></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">string st&#x3D;&quot;56&quot;;&#x2F;&#x2F;这是正确的写法Int.Parse(st);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>Convert.ToInt32(double value)</code>：<strong>不完全遵循四舍五入</strong>，如果value为两个整数中间的数，返回两者中的偶数</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Console.WriteLine(Convert.ToInt32(4.3));&#x2F;&#x2F;四舍五入，结果为4 Console.WriteLine(Convert.ToInt32(4.5));&#x2F;&#x2F;4.5为4和5中间的数，输出偶数4         Console.WriteLine(Convert.ToInt32(4.53));&#x2F;&#x2F;四舍五入，结果为5        Console.WriteLine(Convert.ToInt32(5.5));&#x2F;&#x2F;5.5为5和6中间的数，输出偶数6      Console.WriteLine(Convert.ToInt32(5.53));&#x2F;&#x2F;四舍五入，结果为6Console.WriteLine(Convert.ToInt32(null));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">445660<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Convert.ToInt32()和int.Parse()对于空值(null)的处理不同Convert.ToInt32(null)会返回0而不会产生异常，int.Parse(null)则会产生异常:System.ArgumentNullException:“Value cannot be null. ”</code></p><p>C# 中还提供了一系列内置的类型转换方法，如下表所示：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>ToBoolean</td><td>将类型转换为布尔型</td></tr><tr><td>ToByte</td><td>将类型转换为字节类型</td></tr><tr><td>ToChar</td><td>将类型转换为单个 Unicode 字符类型</td></tr><tr><td>ToDateTime</td><td>将类型（整数或字符串类型）转换为日期时间的结构</td></tr><tr><td>ToDecimal</td><td>将浮点型或整数类型转换为十进制类型</td></tr><tr><td>ToDouble</td><td>将类型转换为双精度浮点型</td></tr><tr><td>ToInt16</td><td>将类型转换为 16 位整数类型</td></tr><tr><td>ToInt32</td><td>将类型转换为 32 位整数类型</td></tr><tr><td>ToInt64</td><td>将类型转换为 64 位整数类型</td></tr><tr><td>ToSbyte</td><td>将类型转换为有符号字节类型</td></tr><tr><td>ToSingle</td><td>将类型转换为小浮点数类型</td></tr><tr><td>ToString</td><td>将类型转换为字符串类型</td></tr><tr><td>ToType</td><td>将类型转换为指定类型</td></tr><tr><td>ToUInt16</td><td>将类型转换为 16 位无符号整数类型</td></tr><tr><td>ToUInt32</td><td>将类型转换为 32 位无符号整数类型</td></tr><tr><td>ToUInt64</td><td>将类型转换为 64 位无符号整数类型</td></tr></tbody></table><h2 id="7-C-运算符"><a href="#7-C-运算符" class="headerlink" title="7. C#运算符"></a>7. C#运算符</h2><p>运算符其实就是一个符号，用来告诉编译器执行特定的数学或逻辑运算。C# 中内置了丰富的运算符，大致可以分为如下几类：</p><ul><li>算术运算符；</li><li>关系运算符；</li><li>逻辑运算符；</li><li>位运算符；</li><li>赋值运算符；</li><li>其它运算符。</li></ul><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>算术运算符即完成特定算术运算的符号，C# 中支持的算术运算符如下表所示：（假设变量 A = 10，变量 B = 20）</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>加法运算符，对运算符左右两边的操作数执行加法操作</td><td>A + B 值为 30</td></tr><tr><td>-</td><td>减法运算符，对运算符左右两边的操作数执行减法操作</td><td>A - B 值为 -10</td></tr><tr><td>*</td><td>乘法运算符，将运算符左右两边的操作数相乘</td><td>A * B 值为 200</td></tr><tr><td>/</td><td>除法运算符，使用运算符左边的操作数除以右边的操作数</td><td>B / A 值为 2</td></tr><tr><td>%</td><td>取模运算符，整除后的余数</td><td>B % A 值为 0</td></tr><tr><td>++</td><td>自增运算符，整数值增加 1</td><td>A++ 值为 11</td></tr><tr><td>–</td><td>自减运算符，整数值减少 1</td><td>A– 值为 9</td></tr></tbody></table><p><code>与C/C++不同的是，/和%支持float、double等类型的变量</code></p><p>例如：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Console.WriteLine(5.42 &#x2F; 3);         Console.WriteLine(6 &#x2F; 3);         Console.WriteLine(5 &#x2F; 2.5);         Console.WriteLine(9 &#x2F; 1.1);         Console.WriteLine(5.42 % 3);         Console.WriteLine(6 % 3);         Console.WriteLine(5 % 2.5);         Console.WriteLine(9 % 1.1);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">1.8066666666666666228.1818181818181822.42000.1999999999999993<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>位运算符用来对 <strong>二进制</strong> 位进行操作，＆、| 和 ^ 的真值表如下：</p><table><thead><tr><th>p</th><th>q</th><th>p &amp; q</th><th>p | q</th><th>p ^ q</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td></tr></tbody></table><p>下表列举了 C# 中支持的位运算符：（假设变量 A = 60，变量 B = 13）</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与，对两个操作数的二进制位进行按位与运算，即当两个数对应的二进制位均为 1 时，结果位为 1，否则为 0</td><td>(A &amp; B) 将得到 12，即为 0000 1100</td></tr><tr><td>|</td><td>按位或，对两个操作数的二进制位进行按位或运算，即当两个数对应的二进制位有一个为 1 时，结果就为 1，否则为 0</td><td>(A | B) 将得到 61，即为 0011 1101</td></tr><tr><td>^</td><td>按位异或，对两个操作数的二进制位进行按位异或运算，即当两个数对应的二进制位不同时，结果为 1，否则为 0</td><td>(A ^ B) 将得到 49，即为 0011 0001</td></tr><tr><td>~</td><td>按位取反，该运算符具有”翻转”位效果，即 0 变成 1，1 变成 0，包括符号位</td><td>(~A ) 将得到 -61，即为 1100 0011</td></tr><tr><td>&lt;&lt;</td><td>二进制左移运算符，左操作数的值向左移动右操作数指定的位数</td><td>A &lt;&lt; 2 将得到 240，即为 1111 0000</td></tr><tr><td>&gt;&gt;</td><td>二进制右移运算符，左操作数的值向右移动右操作数指定的位数</td><td>A &gt;&gt; 2 将得到 15，即为 0000 1111</td></tr></tbody></table><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)        &#123;            int a &#x3D; 60;            &#x2F;* 60 &#x3D; 0011 1100 *&#x2F;             int b &#x3D; 13;            &#x2F;* 13 &#x3D; 0000 1101 *&#x2F;            int c &#x3D; 0;                     c &#x3D; a &amp; b;           &#x2F;* 12 &#x3D; 0000 1100 *&#x2F;            Console.WriteLine(&quot;a &amp; b 的值是 &#123;0&#125;&quot;, c );            c &#x3D; a | b;           &#x2F;* 61 &#x3D; 0011 1101 *&#x2F;            Console.WriteLine(&quot;a | b 的值是 &#123;0&#125;&quot;, c);            c &#x3D; a ^ b;           &#x2F;* 49 &#x3D; 0011 0001 *&#x2F;            Console.WriteLine(&quot;a ^ b 的值是 &#123;0&#125;&quot;, c);            c &#x3D; ~a;               &#x2F;*-61 &#x3D; 1100 0011 *&#x2F;            Console.WriteLine(&quot;~a 的值是 &#123;0&#125;&quot;, c);            c &#x3D; a &lt;&lt; 2;     &#x2F;* 240 &#x3D; 1111 0000 *&#x2F;            Console.WriteLine(&quot;a &lt;&lt; 2 的值是 &#123;0&#125;&quot;, c);            c &#x3D; a &gt;&gt; 2;     &#x2F;* 15 &#x3D; 0000 1111 *&#x2F;            Console.WriteLine(&quot;a &gt;&gt; 2 的值是 &#123;0&#125;&quot;, c);            Console.ReadLine();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">a &amp; b 的值是 12a | b 的值是 61a ^ b 的值是 49~a 的值是 -61a &lt;&lt; 2 的值是 240a &gt;&gt; 2 的值是 15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>赋值运算符顾名思义就是用来为变量赋值的，下表列举了 C# 中支持的赋值运算符：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>最简单的赋值运算符，把右边操作数的值赋给左边的操作数</td><td>C = A + B 将把 A + B 的值赋给 C</td></tr><tr><td>+=</td><td>加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数</td><td>C += A 相当于 C = C + A</td></tr><tr><td>-=</td><td>减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数</td><td>C -= A 相当于 C = C - A</td></tr><tr><td>*=</td><td>乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数</td><td>C *= A 相当于 C = C * A</td></tr><tr><td>/=</td><td>除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数</td><td>C /= A 相当于 C = C / A</td></tr><tr><td>%=</td><td>求模且赋值运算符，求两个操作数的模并赋值给左边操作数</td><td>C %= A 相当于 C = C % A</td></tr><tr><td>&lt;&lt;=</td><td>左移且赋值运算符</td><td>C &lt;&lt;= 2 等同于 C = C &lt;&lt; 2</td></tr><tr><td>&gt;&gt;=</td><td>右移且赋值运算符</td><td>C &gt;&gt;= 2 等同于 C = C &gt;&gt; 2</td></tr><tr><td>&amp;=</td><td>按位与且赋值运算符</td><td>C &amp;= 2 等同于 C = C &amp; 2</td></tr><tr><td>^=</td><td>按位异或且赋值运算符</td><td>C ^= 2 等同于 C = C ^ 2</td></tr><tr><td>|=</td><td>按位或且赋值运算符</td><td>C |= 2 等同于 C = C | 2</td></tr></tbody></table><h3 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h3><p>除了上面介绍的运算符之外，C# 中还支持一些其他的重要运算符，如下表所示：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>sizeof()</td><td>返回数据类型的大小</td><td>sizeof(int)，将返回 4</td></tr><tr><td>typeof()</td><td>返回 class 的类型</td><td>typeof(StreamReader);</td></tr><tr><td>&amp;</td><td>返回变量的地址</td><td>&amp;a 将得到变量的实际地址</td></tr><tr><td>*</td><td>变量的指针</td><td>*a; 将指向一个变量。</td></tr><tr><td>? :</td><td>三元（三目）运算符</td><td>a&gt;b ? X : Y; 如果条件为真，则值为 X : 否则值为 Y</td></tr><tr><td>is</td><td>判断对象是否为某一类型</td><td>if( Ford is Car) // 检查 Ford 是否是 Car 类的一个对象</td></tr><tr><td>as</td><td>强制转换，即使转换失败也不会抛出异常。</td><td>Object obj = new StringReader(“Hello”); StringReader r = obj as StringReader;</td></tr></tbody></table><p><strong>关于三目运算</strong></p><p>在C/C++中可以这么写</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;int main()&#123;int a&#x3D;2,b&#x3D;1,t;a&gt;b?t&#x3D;a:t&#x3D;b;cout&lt;&lt;t;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但在C#中就不能这么写</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;    class test    &#123;        static void Main(string[] args)                &#123;                    int a &#x3D; 2, b &#x3D; 1, t;                    a &gt; b ? t &#x3D; a : t &#x3D; b;                    &#x2F;&#x2F;会报错                    Console.WriteLine(&quot;t&#x3D;&#123;0&#125;&quot;, t);                &#125;     &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <font color="red">编译器错误消息: CS0201: 只有 assignment、call、increment、decrement 和 new 对象表达式可用作语句</font></p><p>只能写成</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace test1&#123;    class test    &#123;        static void Main(string[] args)                &#123;                    int a &#x3D; 2, b &#x3D; 1, t;                    t &#x3D; a &gt; b ? a : b;                    Console.WriteLine(&quot;t&#x3D;&#123;0&#125;&quot;, t);                &#125;     &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-C-常量"><a href="#8-C-常量" class="headerlink" title="8. C#常量"></a>8. C#常量</h2><p>常量和我们前面介绍的《<a href="http://m.biancheng.net/csharp/variable.html">变量</a>》类似，唯一不同的是常量的值在程序的编译阶段就已经确定了，而且在程序的运行期间不允许修改。常量可以是任何基本数据类型，例如整数常量、浮点常量、字符串常量等等。</p><h3 id="1）定义常量"><a href="#1）定义常量" class="headerlink" title="1）定义常量"></a>1）定义常量</h3><p>常量需要使用  <strong>const</strong>  关键字定义，语法格式如下所示：</p><p>const data_type constant_name = value;</p><p>其中，data_type 为常量的数据类型；constant_name 为常量名（类似于变量名）；value 为常量的值。</p><h3 id="2）整数常量"><a href="#2）整数常量" class="headerlink" title="2）整数常量"></a>2）整数常量</h3><p>整数常量可以是 <strong>八进制、十进制或者十六进制</strong>，可以使用前缀指定具体的进制，例如<code>0x</code>或<code>0X</code>表示 <strong>十六进制</strong>，<code>0</code>表示 <strong>八进制</strong>，没有前缀则表示 <strong>十进制</strong> 。</p><p><strong>除了前缀外，整数常量还可以包含后缀</strong> ，后缀可以是 U 和 L 的组合，U 和 L 分别表示 unsigned 和 long。后缀既可以大写也可以小写，而且可以以任意顺序进行组合，但是不能重复。</p><p>下面列举了一些整数常量的示例：</p><pre class="line-numbers language-none"><code class="language-none">85    &#x2F;&#x2F; 合法：十进制常量0213  &#x2F;&#x2F; 合法：八进制常量0x4b  &#x2F;&#x2F; 合法：十六进制常量30    &#x2F;&#x2F; 合法：int 类型常量30u   &#x2F;&#x2F; 合法：无符号 int 类型常量30l   &#x2F;&#x2F; 合法：long 类型常量30ul  &#x2F;&#x2F; 合法：无符号 long 类型常量068   &#x2F;&#x2F; 非法：8 不是一个八进制数字032UU  &#x2F;&#x2F; 非法：后缀不能重复<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            int a &#x3D; 66;            int b &#x3D; 0100;            int t &#x3D; a &gt; b ? 10 : 8;            Console.WriteLine(&quot;t&#x3D;&#123;0&#125;&quot;, t);            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这个例子，a为十进制66，b为八进制100，既十进制为64，结果应为10，但是编译器给的结果是8，可见不能直接用&gt;直接比较10进制数和8进制数。</p><h3 id="3）浮点常量"><a href="#3）浮点常量" class="headerlink" title="3）浮点常量"></a>3）浮点常量</h3><p>浮点常量由整数部分、小数点、小数部分和指数部分组成。您可以用小数或指数形式来表示浮点常量。</p><p>下面列举了一些浮点常量的示例：</p><pre class="line-numbers language-none"><code class="language-none">3.14159       &#x2F;&#x2F; 合法314159E-5    &#x2F;&#x2F; 合法，等价于3.14159510E         &#x2F;&#x2F; 非法：不完全指数210f         &#x2F;&#x2F; 非法：没有小数或指数.e55         &#x2F;&#x2F; 非法：缺少整数或小数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当使用小数形式表示浮点常量时，必须包含小数点、指数或同时包含两者。当使用指数形式表示浮点常量时，必须包括整数部分、小数部分或同时包含两者。有符号的指数使用 e 或 E 表示。</p><h4 id="浮点数精度问题"><a href="#浮点数精度问题" class="headerlink" title="浮点数精度问题"></a>浮点数精度问题</h4><p><strong>解决方案是使用【decimal】</strong></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            double x &#x3D; 88.8;            double y &#x3D; 88;            Console.WriteLine(&quot;失去精度结果为:&#123;0&#125;&quot;, x - y);            decimal d1 &#x3D; decimal.Parse(&quot;88.8&quot;);            decimal d2 &#x3D; decimal.Parse(&quot;88&quot;);            Console.WriteLine(&quot;decimal计算结果为:&#123;0&#125;&quot;, d1 - d2);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为：</p><p><img src="/source/images/c-sharp/image-20220822113001755.png" alt="image-20220822113001755"></p><h3 id="4）字符常量"><a href="#4）字符常量" class="headerlink" title="4）字符常量"></a>4）字符常量</h3><p>字符常量需要使用单引号括起来，类似于定义字符串类型的变量，例如<code>&#39;x&#39;</code>。一个字符常量可以是一个普通字符（例如<code>&#39;x&#39;</code>）、转义序列（例如<code>&#39;\t&#39;</code>）或 Unicode 字符（例如<code>&#39;\u02C0&#39;</code>）。</p><p>在 C# 中，有些字符前面带有一个反斜杠，这样的字符具有特殊含义，例如<code>\n</code>用于表示换行符、<code>\t</code>表示制表符。下表中列举了一些常用的转义字符：</p><table><thead><tr><th>转义序列</th><th>含义</th></tr></thead><tbody><tr><td>\</td><td>\ 字符</td></tr><tr><td>&#39;</td><td>‘ 字符</td></tr><tr><td>&quot;</td><td>“ 字符</td></tr><tr><td>?</td><td>? 字符</td></tr><tr><td>\a</td><td>Alert 或 bell</td></tr><tr><td>\b</td><td>退格键（Backspace）</td></tr><tr><td>\f</td><td>换页符（Form feed）</td></tr><tr><td>\n</td><td>换行符（Newline）</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\t</td><td>水平制表符 tab</td></tr><tr><td>\v</td><td>垂直制表符 tab</td></tr><tr><td>\ooo</td><td>一到三位的八进制字符</td></tr><tr><td>\xhh . . .</td><td>一个或多个数字的十六进制字符</td></tr></tbody></table><p>下面通过示例演示一下转义字符的使用：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;                     Console.WriteLine(&quot;a\nb\nc\n2333\t666&quot;);            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><pre class="line-numbers language-none"><code class="language-none">abc2333    666<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5）字符串常量"><a href="#5）字符串常量" class="headerlink" title="5）字符串常量"></a>5）字符串常量</h3><p>字符串常量需要使用双引号<code>&quot; &quot;</code>或<code>@&quot; &quot;</code>引起来。字符串常量与字符常量相似，可以是纯字符、转义序列或 Unicode 字符。</p><h2 id="9-C-循环示例"><a href="#9-C-循环示例" class="headerlink" title="9. C#循环示例"></a>9. C#循环示例</h2><h3 id="1）for循环"><a href="#1）for循环" class="headerlink" title="1）for循环"></a>1）for循环</h3><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;                      for(int i &#x3D; 1; i &lt; 10; i++)            &#123;                for(int j &#x3D; i; j &lt; 10; j++)                &#123;                    Console.Write(&quot;&#123;0&#125; x &#123;1&#125; &#x3D; &#123;2&#125;  &quot;, i, j, i * j);                &#125;                Console.WriteLine();&#x2F;&#x2F;换行            &#125;            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2）While-循环"><a href="#2）While-循环" class="headerlink" title="2）While 循环"></a>2）While 循环</h3><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            int i &#x3D; 1;            while (i &lt;&#x3D; 9)            &#123;                int j &#x3D; 1;                while (j &lt;&#x3D; i)                &#123;                    Console.Write(&quot;&#123;0&#125; x &#123;1&#125; &#x3D; &#123;2&#125;  &quot;, j, i, i * j);                    j++;                &#125;                i++;                Console.WriteLine();            &#125;            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><pre class="line-numbers language-none"><code class="language-none">1 x 1 &#x3D; 1  1 x 2 &#x3D; 2  1 x 3 &#x3D; 3  1 x 4 &#x3D; 4  1 x 5 &#x3D; 5  1 x 6 &#x3D; 6  1 x 7 &#x3D; 7  1 x 8 &#x3D; 8  1 x 9 &#x3D; 92 x 2 &#x3D; 4  2 x 3 &#x3D; 6  2 x 4 &#x3D; 8  2 x 5 &#x3D; 10  2 x 6 &#x3D; 12  2 x 7 &#x3D; 14  2 x 8 &#x3D; 16  2 x 9 &#x3D; 183 x 3 &#x3D; 9  3 x 4 &#x3D; 12  3 x 5 &#x3D; 15  3 x 6 &#x3D; 18  3 x 7 &#x3D; 21  3 x 8 &#x3D; 24  3 x 9 &#x3D; 274 x 4 &#x3D; 16  4 x 5 &#x3D; 20  4 x 6 &#x3D; 24  4 x 7 &#x3D; 28  4 x 8 &#x3D; 32  4 x 9 &#x3D; 365 x 5 &#x3D; 25  5 x 6 &#x3D; 30  5 x 7 &#x3D; 35  5 x 8 &#x3D; 40  5 x 9 &#x3D; 456 x 6 &#x3D; 36  6 x 7 &#x3D; 42  6 x 8 &#x3D; 48  6 x 9 &#x3D; 547 x 7 &#x3D; 49  7 x 8 &#x3D; 56  7 x 9 &#x3D; 638 x 8 &#x3D; 64  8 x 9 &#x3D; 729 x 9 &#x3D; 81<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3）foreach循环"><a href="#3）foreach循环" class="headerlink" title="3）foreach循环"></a>3）foreach循环</h3><p>除了前面介绍的几种循环语句外，C# 同样也支持 foreach 循环，使用 foreach 可以遍历数组或者集合对象中的每一个元素，其语法格式如下：</p><p>foreach(数据类型 变量名 in 数组或集合对象){<br>  语句块;<br>}</p><p>foreach 会在每次循环的过程中，依次从数组或集合对象中取出一个新的元素放到<code>foreach( )</code>里定义的变量中，直到所有元素都成功取出后退出循环。</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            int[] a &#x3D; new int[] &#123; 1, 2, 3, 4, 5 &#125;;            foreach(int i in a)            &#123;                Console.Write(&quot;&#123;0&#125;  &quot;, i);            &#125;            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><p>1  2  3  4  5</p><h2 id="10-C-函数-方法"><a href="#10-C-函数-方法" class="headerlink" title="10. C#函数/方法"></a>10. C#函数/方法</h2><p>C# 中的函数（也可以称为方法）是一段具有签名（由函数名、参数类型和参数修饰符组成的函数信息）的代码块，可以用来实现特定的功能。一般情况下一个函数由以下几个部分组成：</p><ul><li>访问权限修饰符：用于指定函数对一个类的可见性；</li><li>返回值类型：用于指定函数返回值的数据类型；</li><li>函数名称：用于进行函数调用的唯一名称；</li><li>参数列表：在调用函数时需要传递给函数的参数，参数列表是可选的，可以为空；</li><li>函数主体：其中包含了实现函数功能的若干代码。</li></ul><p><code>函数的命名规则:</code></p><ul><li>函数命名使用<strong>大驼峰命名</strong>，即开头<strong>首字母大写</strong></li><li>多个单词拼接时，所有单词<strong>首字母大写</strong></li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Add();AddResult();GetUserInfo();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1）函数声明"><a href="#1）函数声明" class="headerlink" title="1）函数声明"></a>1）函数声明</h3><p>C# 中声明函数的语法格式如下所示：</p><pre class="line-numbers language-none"><code class="language-none">Access_Specifier Return_Type FunctionName(Parameter List)&#123;  Function_Body  Return_Statement&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，Access_Specifier 为访问权限修饰符；Return_Type 为返回值类型；FunctionName 为函数名称；Parameter List 为参数列表；Function_Body 为函数主体；Return_Statement 为返回语句，用来返回数据。另外需要注意的是，访问权限修饰符、参数列表和返回语句是可选的，可以省略。</p><pre class="line-numbers language-none"><code class="language-none">访问权限修饰符 返回值类型 函数名称（参数列表）&#123;函数主体返回语句&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2）函数调用"><a href="#2）函数调用" class="headerlink" title="2）函数调用"></a>2）函数调用</h3><p>想要调用我们定义好的函数，首先需要将函数所在的类实例化为对象，然后通过<code>对象.函数名() </code>的形式即可调用指定的函数，这里有几点需要注意：</p><ul><li>若函数在定义时参数列表中定义了若干参数，那么在调用时也应该在函数名后面的括号中填入相应数量的参数，并且与参数列表中的参数类型一一对应；</li><li>若函数在定义时没有定义参数列表，那么在调用函数时也不需要在函数名后面填入参数；</li><li>对于有返回值的函数，在调用函数时可以使用一个变量（可选）来接收函数的返回值，变量的类型要与函数返回值的类型相同。</li></ul><p> <strong>提示：若调用同一个类中静态函数（使用 static 修饰的函数），则可以省略实例化对象的过 程，直接使用<code>函数名()</code>的形式调用。</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            test t &#x3D; new test(); &#x2F;&#x2F;实例化当前类的对象                        t.a();          &#x2F;&#x2F;调用a函数            string s1 &#x3D; &quot;bbbb&quot;;            t.b(s1);         &#x2F;&#x2F;调用b函数            string s2 &#x3D; &quot;cccc&quot;;            Console.WriteLine(t.c(s2));    &#x2F;&#x2F;调用c函数            string s3 &#x3D; &quot;dddd&quot;;            Console.WriteLine(d(s3));       &#x2F;&#x2F;调用类中的静态函数d        &#125;        public void a()         &#x2F;&#x2F;没有参数和返回值的函数        &#123;            Console.WriteLine(&quot;aaaa&quot;);        &#125;        public void b(string s) &#x2F;&#x2F;有参数没有返回值的函数        &#123;            Console.WriteLine(s);        &#125;        public string c(string s)   &#x2F;&#x2F;有参数且有返回值的函数        &#123;            string str &#x3D; s;            return str;        &#125;        static string d(string s)   &#x2F;&#x2F;类中的静态函数，无需实例化即可调用        &#123;            string str &#x3D; s;            return s;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><pre class="line-numbers language-none"><code class="language-none">aaaabbbbccccdddd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3）拓展——参数修饰符"><a href="#3）拓展——参数修饰符" class="headerlink" title="3）拓展——参数修饰符"></a>3）拓展——参数修饰符</h3><p>无参数修饰符，<strong>按值进行传递</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public int Add(int count)&#123;..&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>ref 引用传递</p><p>out 输出传递</p><h2 id="11-C-封装"><a href="#11-C-封装" class="headerlink" title="11. C#封装"></a>11. C#封装</h2><p>C# 是一门面向对象编程语言，面向对象编程语言有三大特性，分别是 **封装、<a href="http://m.biancheng.net/csharp/inheritance.html">继承</a>和<a href="http://m.biancheng.net/csharp/polymorphism.html">多态</a>**。 <strong>所谓封装就是将一个或多个项目（函数）集合在一个单元中，这个单元称之为类</strong>，我们可以根据需要通过访问权限修饰符来设定类中成员的范围和可见性。C# 中的访问权限修饰符有以下几种：</p><ul><li>public：公共的，所有对象都可以访问，但是需要引用命名空间；</li><li>private：私有的，类的内部才可以访问；</li><li>internal：内部的，同一个程序集的对象可以访问，程序集就是命名空间；</li><li>protected：受保护的，类的内部或类的父类和子类中可以访问；</li><li>Protected internal：protected 和 internal 的并集，符合任意一条都可以访问。</li></ul><h3 id="1）public"><a href="#1）public" class="headerlink" title="1）public"></a>1）public</h3><p>类中使用 public 访问权限修饰符修饰的成员变量或成员函数可以在其他函数和对象，我们可以从类的外部访问类中的公共成员（使用 public 修饰的类成员）。</p><h3 id="2）private"><a href="#2）private" class="headerlink" title="2）private"></a>2）private</h3><p>类中使用 private 访问权限修饰符修饰的成员变量或成员函数不能在其它函数或对象访问，即使是类的实例也不能访问这个类中的私有成员，只有 <strong>同属一个类的函数才可以访问</strong> 这个类的私有成员。</p><h3 id="3）protected"><a href="#3）protected" class="headerlink" title="3）protected"></a>3）protected</h3><p>类中使用 protected 访问权限修饰符修饰的成员变量和成员函数可以在其子类中访问，也就是说基类（父类）中使用 protected 访问权限修饰符修饰的成员变量和成员函数可以在其子类中访问，这样有助于 <strong>实现继承</strong>。</p><h3 id="4）internal"><a href="#4）internal" class="headerlink" title="4）internal"></a>4）internal</h3><p>类中使用 internal 访问权限修饰符修饰的成员变量和成员函数可以在当前程序集中的其他函数或对象中使用。换句话说就是， <strong>任何使用 internal 修饰的成员都可以被同一命名空间下的任何类或方法访问</strong>。</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            &#x2F;&#x2F;实例化对象            Rectangle rec &#x3D; new Rectangle();            rec.length &#x3D; 23.3;            rec.width &#x3D; 23.3;            rec.Display();            Console.ReadKey();        &#125;    &#125;    class Rectangle &#x2F;&#x2F;定义一个名为Rectangle的类    &#123;        &#x2F;&#x2F;internal修饰的成员变量        internal double width, length;        double GetArea()    &#x2F;&#x2F;没有使用任何访问权限修饰符修饰的成员函数 GetArea() 默认是私有的        &#123;            return width * length;        &#125;        public void Display()        &#123;            Console.WriteLine(&quot;长方形的长：&#123;0&#125;&quot;, length);            Console.WriteLine(&quot;长方形的宽：&#123;0&#125;&quot;, width);            Console.WriteLine(&quot;长方形的面积：&#123;0&#125;&quot;, GetArea());        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><pre class="line-numbers language-none"><code class="language-none">长方形的长：23.3长方形的宽：23.3长方形的面积：542.89<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5）protected-internal"><a href="#5）protected-internal" class="headerlink" title="5）protected internal"></a>5）protected internal</h3><p>类中使用 protected internal 访问权限修饰符修饰的成员可以在本类、派生类或者包含该类（使用 using 引入）的程序集中访问，在实现继承时也使用此方法。</p><h2 id="12-C-值传递、引用传递、输出传递"><a href="#12-C-值传递、引用传递、输出传递" class="headerlink" title="12. C#值传递、引用传递、输出传递"></a>12. C#值传递、引用传递、输出传递</h2><p>通过前面的学习我们知道，在调用带有参数的函数时，需要将参数传递给函数。在介绍这几种传递方式之前，我们先来介绍一下形式参数（形参）和实际参数（实参）这两个概念：</p><ul><li>形式参数： <strong>在定义函数阶段参数列表中定义的参数称之为形式参数</strong>，简称形参，可以将它看作变量的名称，它没有具体的值，只是用来接收函数调用时传递过来的数据；</li><li>实际参数： <strong>在函数被调用时传递给函数的参数称之为实际参数</strong>，简称实参，可以将它看作变量的值，用来为形参赋值。</li></ul><p>参数可以通过三种方式传递给函数，如下表所示：</p><table><thead><tr><th>方式</th><th>描述</th></tr></thead><tbody><tr><td>值传递</td><td>值传递会复制参数的实际值并赋值给函数的形式参数，实参和形参使用的是两个不同内存位置中的值，<strong>当形参的值发生改变时，不会影响实参的值</strong>，从而保证了实参数据的安全</td></tr><tr><td>引用传递</td><td>引用传递会复制参数的内存位置并传递给形式参数，<strong>当形参的值发生改变时，同时也会改变实参的值</strong></td></tr><tr><td>输出传递</td><td>输出传递可以一次返回多个值</td></tr></tbody></table><h3 id="1）值传递"><a href="#1）值传递" class="headerlink" title="1）值传递"></a>1）值传递</h3><p>在 C# 中，值传递是将参数传递给函数的默认方式，值传递的本质就是将实参的副本（将实参的值复制一份）传递给函数的形参。当调用函数时，将使用实参为每个形参赋值，并为每个形参创建一个新的存储位置，由于形参和实参指向不同的内存位置，所以无论是修改实参的值还是修改形参的值都不会对彼此造成影响。</p><p>下面通过示例来演示一下如何使用值传递的方式将参数传递给函数：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)&#123;            int val &#x3D; 10;            Demo Obj &#x3D; new Demo();            Console.WriteLine(&quot;调用函数之前：&#123;0&#125;&quot;, val);            Obj.Func(val);            Console.WriteLine(&quot;调用函数之后：&#123;0&#125;&quot;, val);        &#125;        public void Func(int val)&#123;            val *&#x3D; val;            Console.WriteLine(&quot;函数内部的值：&#123;0&#125;&quot;, val);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">调用函数之前：10函数内部的值：100调用函数之后：10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过运行结果可以看出，<strong>尽管我们在函数内部对形参 val 的值进行的修改，但是并不会影响函数外面实参 val 的值。</strong></p><h3 id="2）引用传递"><a href="#2）引用传递" class="headerlink" title="2）引用传递"></a>2）引用传递</h3><p>引用传递是对变量内存位置的引用。与值传递不同，使用引用传递的形式传递参数时，并不会为形参创建新的内存地址，而是与实参共同指向相同的内存地址。正因为如此，当修改形参的值时，实参的值也会被修改。</p><p>在 C# 中，需要使用 **ref **关键字来使用引用传递，下面通过示例来演示一下：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)&#123;            int val &#x3D; 10;            Demo Obj &#x3D; new Demo();            Console.WriteLine(&quot;调用函数之前：&#123;0&#125;&quot;, val);            Obj.Func(ref val);            Console.WriteLine(&quot;调用函数之后：&#123;0&#125;&quot;, val);        &#125;        public void Func(ref int val)&#123;            val *&#x3D; val;            Console.WriteLine(&quot;函数内部的值：&#123;0&#125;&quot;, val);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">调用函数之前：10函数内部的值：100调用函数之后：100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3）输出传递"><a href="#3）输出传递" class="headerlink" title="3）输出传递"></a>3）输出传递</h3><p>使用 return 语句可以从函数中返回一个值，但是使用输出传递则<strong>可以从函数中一次性返回多个值</strong>。输出传递与引用传递相似，不同之处在于输出传递是将数据从函数中传输出来而不是传输到函数中。</p><p>在 C# 中，需要使用 <strong>out</strong> 关键字来使用输出传递，下面通过示例来演示一下：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)&#123;            int val &#x3D; 33;            Demo Obj &#x3D; new Demo();            Console.WriteLine(&quot;调用函数之前 val 的值：&#123;0&#125;&quot;, val);            Obj.getValue(out val);            Console.WriteLine(&quot;调用函数之后 val 的值：&#123;0&#125;&quot;, val);        &#125;        public void getValue(out int x)&#123;            int temp &#x3D; 11;            x &#x3D; temp;            x *&#x3D; x;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">调用函数之前 val 的值：33调用函数之后 val 的值：121<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在使用输出传递时，也可以不为实参赋值，如下例所示：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)&#123;            int a, b;            Demo Obj &#x3D; new Demo();            Obj.getValues(out a, out b);            Console.WriteLine(&quot;调用函数之后 a 的值：&#123;0&#125;&quot;, a);            Console.WriteLine(&quot;调用函数之后 b 的值：&#123;0&#125;&quot;, b);        &#125;        public void getValues(out int x, out int y)&#123;            Console.WriteLine(&quot;请输入第一个值： &quot;);            x &#x3D; Convert.ToInt32(Console.ReadLine());            Console.WriteLine(&quot;请输入第二个值： &quot;);            y &#x3D; Convert.ToInt32(Console.ReadLine());        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">请输入第一个值：123请输入第二个值：321调用函数之后 a 的值：123调用函数之后 b 的值：321<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ref需要对变量赋初值，而out可以不赋初值</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test&#123;    class Program    &#123;        static void Main(string[] args)        &#123;            int val;            Program p &#x3D; new Program();            p.Func(ref val);            &#x2F;&#x2F;这里会报错，使用了未赋值的局部变量“val”        &#125;        public void Func(ref int val)        &#123;            val &#x3D; 99;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果改成</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test&#123;    class Program    &#123;        static void Main(string[] args)        &#123;            int val;            Program p &#x3D; new Program();            p.Func(out val);        &#125;        public void Func(out int val)        &#123;            val &#x3D; 99;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>则不会报错</p><h3 id="4）out-输出-和ref-引用-的区别"><a href="#4）out-输出-和ref-引用-的区别" class="headerlink" title="4）out(输出)和ref(引用)的区别"></a>4）out(输出)和ref(引用)的区别</h3><ul><li><code>out</code>修饰的参数<strong>必须在方法内修改</strong>，而<code>ref</code><strong>可以修改也可以不修改</strong></li><li><code>out</code>在传入参数的时候，参数是局部变量的话，可以不赋值，因为<code>out</code>一定会对其进行赋值</li><li>而<code>ref</code>修饰的参数，在实参<strong>必须有初始值才能进行调用</strong>。因为<code>ref</code>修饰的不一定会对其赋值</li></ul><h2 id="13-C-nullable：可空类型"><a href="#13-C-nullable：可空类型" class="headerlink" title="13. C# nullable：可空类型"></a>13. C# nullable：可空类型</h2><p>在 C# 1.x 的版本中，一个值类型的变量是不可以被赋值为 null（空值）的，否则会产生异常。而在 C# 2.0 中，新增了一个 nullable 类型，可以使用 nullable 类型定义包含 null 值的数据，例如，您可以在 nullable <Int32>（可为空的 int32 类型）类型的变量中存储 -2147483648 到 2147483647 之间的任何值或者 null。同样，您可以在 nullable <bool>（可为空的 bool 类型）类型的变量中存储 true、false 或 null。声明可空类型的语法如下：</bool></Int32></p><pre class="line-numbers language-none"><code class="language-none">data_type? variable_name &#x3D; null;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，data_type 为要声明的数据类型，后面紧跟一个问号；variable_name 则为变量的名称。</p><p>【示例】下面通过示例来演示可空类型的用法：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)&#123;            int? num1;            int? num2 &#x3D; 123;            num1 &#x3D; null;                    double? num3 &#x3D; new double?();            double? num4 &#x3D; 3.1415926;            bool? boolval &#x3D; null;            &#x2F;&#x2F; 输出这些值            Console.WriteLine(&quot; num1 &#x3D; &#123;0&#125; \r\n num2 &#x3D; &#123;1&#125; \r\n num3 &#x3D; &#123;2&#125; \r\n num4 &#x3D; &#123;3&#125; \r\n boolval &#x3D; &#123;4&#125;&quot;, num1, num2, num3, num4, boolval);            Console.ReadLine();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">num1 &#x3D;num2 &#x3D; 123num3 &#x3D;num4 &#x3D; 3.1415926boolval &#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Null-合并运算符（-）"><a href="#Null-合并运算符（-）" class="headerlink" title="Null 合并运算符（??）"></a>Null 合并运算符（??）</h3><p>在 C# 中 Null 合并运算符用于定义可空类型和引用类型的默认值。如果此运算符的左操作数不为 null，那么运算符将返回左操作数，否则返回右操作数。<strong>例如表达式<code>a??b</code>中，如果 a 不为空，那么表达式的值则为 a，反之则为 b。</strong></p><p>需要注意的是，Null 合并运算符左右两边操作数的类型必须相同，或者右操作数的类型可以隐式的转换为左操作数的类型，否则将编译错误。</p><p>【示例】下面通过示例来演示 Null 合并运算符的使用：</p><pre class="line-numbers language-none"><code class="language-none">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)&#123;            int? num1 &#x3D; null;            int? num2 &#x3D; 123;            int num3;                    num3 &#x3D; num1 ?? 321;            Console.WriteLine(&quot;num3 &#x3D; &#123;0&#125;&quot;, num3);            num3 &#x3D; num2 ?? 321;            Console.WriteLine(&quot;num3 &#x3D; &#123;0&#125;&quot;, num3);            Console.ReadLine();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">num3 &#x3D; 321num3 &#x3D; 123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="14-C-数组"><a href="#14-C-数组" class="headerlink" title="14. C#数组"></a>14. C#数组</h2><h3 id="1）声明数组"><a href="#1）声明数组" class="headerlink" title="1）声明数组"></a>1）声明数组</h3><p>在 C# 中声明一个数组的语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">data_type[] array_name;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，data_type 用来指定数组中元素的类型；<code>[ ]</code>用来指定数组的维度；array_name 为数组的名称。</p><p>示例代码如下：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">int[] array1      &#x2F;&#x2F; 声明一个整型数组double[] array2   &#x2F;&#x2F; 声明一个浮点型数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2）初始化数组"><a href="#2）初始化数组" class="headerlink" title="2）初始化数组"></a>2）初始化数组</h3><p>仅仅是声明数组还不够，数组只有经过初始化后才可以为其中的每个元素赋值。因为数组是引用类型的，所以您需要使用 new 关键字来对数组进行初始化，例如：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">int[] array1            &#x2F;&#x2F; 声明一个整型数组array1 &#x3D; new int[10]    &#x2F;&#x2F; 初始化数组 array1double[] array2         &#x2F;&#x2F; 声明一个浮点型数组array2 &#x3D; new double[5]  &#x2F;&#x2F; 初始化数组 array2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>另外，数组的声明和初始化还可以放在一起进行，如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int[] array1 &#x3D; new int[10]        &#x2F;&#x2F; 初始化一个长度为 10 的整型数组double[] array2 &#x3D; new double[5]   &#x2F;&#x2F; 初始化一个长度为 5 的浮点型数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>提示：初始化数组的过程中，new int[10] 中<code>[ ]</code>里面的数字代表数组的长度，也就是数组中最多可以存放多少个元素，我们可以根据需要来设定数组的长度。</p><h3 id="3）为数组元素赋值"><a href="#3）为数组元素赋值" class="headerlink" title="3）为数组元素赋值"></a>3）为数组元素赋值</h3><p>我们可以使用数组的索引来为数组中的各个元素赋值，如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int[] arr &#x3D; new int[10];arr[0] &#x3D; 10;arr[1] &#x3D; 11;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>单独为数组中的各个元素赋值太过麻烦了，我们也可以在声明数组时直接为数组赋值，只需要将数组中的每个元素依次放入到一个<code>&#123; &#125;</code>中，并将每个元素使用<code>,</code>分隔开即可，如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">double[] arr1 &#x3D; &#123;96.5, 98.0, 99.5, 90.0&#125;;int[] arr2 &#x3D; &#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用上面的方法并不用提前设定数组的长度，那如果想要指定数组的长度该怎么办呢？只需要像下面这样即可：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">double[] arr1 &#x3D; new double[4]&#123;96.5, 98.0, 99.5, 90.0&#125;;int[] arr2 &#x3D; new int[10]&#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当然像下面这样省略数组的长度也是可以的，例如：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">double[] arr1 &#x3D; new double[]&#123;96.5, 98.0, 99.5, 90.0&#125;;int[] arr2 &#x3D; new int[]&#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>数组也可以像变量一样，使用一个定义好的数组为另一个相同类型的数组赋值，这种情况下，两个数组将指向相同的内存地址，如下所示：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">int[] arr1 &#x3D; new int[]&#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;int[] arr2 &#x3D; arr1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>提示：当我们创建一个数组时，C# 的编译器会根据数组类型隐式的为数组中的每个元素初始化一个默认值。例如 int 类型的数组中所有元素都会被初始化为 0。</p><h3 id="4）访问数组中的元素"><a href="#4）访问数组中的元素" class="headerlink" title="4）访问数组中的元素"></a>4）访问数组中的元素</h3><p>我们可以通过数组的索引（也可称为下标）来访问数组中的指定元素，只需要在数组名的后面加上一个方括号<code>[ ]</code>，并在其中填写对应的数组索引即可，如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int[] arr &#x3D; new int[]&#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;int a &#x3D; arr[0];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5）使用-foreach-遍历数组"><a href="#5）使用-foreach-遍历数组" class="headerlink" title="5）使用 foreach 遍历数组"></a>5）使用 foreach 遍历数组</h3><p>前面的示例中我们使用了 <a href="http://m.biancheng.net/csharp/for.html">for 循环</a>来访问数组中的每个元素，另外还可以使用 <a href="http://m.biancheng.net/csharp/foreach.html">foreach 循环</a>来遍历数组中的元素，示例代码如下：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)&#123;            int[] arr &#x3D; new int[]&#123;100, 101, 102, 103, 104, 105, 106, 107, 108, 109&#125;;            int index &#x3D; 0;            foreach(int i in arr)&#123;                Console.WriteLine(&quot;arr[&#123;0&#125;] &#x3D; &#123;1&#125;&quot;, index, i);                index++;            &#125;            Console.ReadLine();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">arr[0] &#x3D; 100arr[1] &#x3D; 101arr[2] &#x3D; 102arr[3] &#x3D; 103arr[4] &#x3D; 104arr[5] &#x3D; 105arr[6] &#x3D; 106arr[7] &#x3D; 107arr[8] &#x3D; 108arr[9] &#x3D; 109<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-C-二维数组与多维数组"><a href="#15-C-二维数组与多维数组" class="headerlink" title="15. C#二维数组与多维数组"></a>15. C#二维数组与多维数组</h2><p>C# 中同样支持多维数组（也可称为矩形数组），它可以是二维的，也可以是三维的，多维数组中的数据以类似表格（行、列）的形式存储，因此也被称为矩阵。</p><p>要创建多维数组，我们需要在声明数组的方括号内添加逗号，例如：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int[,] arr&#x3D;new int[3,3];      &#x2F;&#x2F; 声明一个二维数组int[,,] arr&#x3D;new int[3,3,3];   &#x2F;&#x2F; 声明一个三维数组 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1）初始化二维数组"><a href="#1）初始化二维数组" class="headerlink" title="1）初始化二维数组"></a>1）初始化二维数组</h3><p>二维数组的初始化与一维数组类似，例如我们要定义一个 3 行 4 列的整型数组，可以使用以下几种方式：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F; 第一种方式int[,] arr &#x3D; new int[3,4]&#123;  &#123;0, 1, 2, 3&#125;,  &#123;4, 5, 6, 7&#125;,  &#123;8, 9, 10, 11&#125;&#125;;&#x2F;&#x2F; 第二种方式int[,] arr &#x3D; new int[,]&#123;  &#123;0, 1, 2, 3&#125;,  &#123;4, 5, 6, 7&#125;,  &#123;8, 9, 10, 11&#125;&#125;;&#x2F;&#x2F; 第三种方式int[,] arr &#x3D; &#123;  &#123;0, 1, 2, 3&#125;,  &#123;4, 5, 6, 7&#125;,  &#123;8, 9, 10, 11&#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2）访问二维数组种的元素"><a href="#2）访问二维数组种的元素" class="headerlink" title="2）访问二维数组种的元素"></a>2）访问二维数组种的元素</h3><p>二维数组中的元素同样可以通过索引（行索引和列索引）来访问的，例如：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">int[,] arr &#x3D; new int[3,4]&#123;  &#123;0, 1, 2, 3&#125;,  &#123;4, 5, 6, 7&#125;,  &#123;8, 9, 10, 11&#125;&#125;;int a &#x3D; arr[1, 0];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>上例中<code>arr[1, 0]</code>代表了数组 arr 中第二行中的第一个元素</strong>。</p><h2 id="16-C-交错数组-Jagged-Arrays"><a href="#16-C-交错数组-Jagged-Arrays" class="headerlink" title="16. C#交错数组(Jagged Arrays)"></a>16. C#交错数组(Jagged Arrays)</h2><p>C# 中的交错数组其实就是<strong>元素为数组的数组</strong>，换句话说就是交错数组中的每个元素都可以是维度和大小不同的数组，所以有时交错数组也被称为“数组的数组”。</p><h3 id="1）声明交错数组"><a href="#1）声明交错数组" class="headerlink" title="1）声明交错数组"></a>1）声明交错数组</h3><p>交错数组的声明语法如下所示：</p><pre class="line-numbers language-none"><code class="language-none">data_type[][] array_name;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假如要声明一个<strong>具有三个元素的一维交错数组</strong>，并且数组中的每个元素都是一个一维的整型数组，示例代码如下：</p><pre class="line-numbers language-none"><code class="language-none">int[][] jaggedArray &#x3D; new int[3][];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2）初始化交错数组"><a href="#2）初始化交错数组" class="headerlink" title="2）初始化交错数组"></a>2）初始化交错数组</h3><p>和普通数组相同，交错数组也需要初始化后才可以使用，可以使用下面的方式初始化一个交错数组。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int[][] jaggedArray &#x3D; new int[3][]; &#x2F;&#x2F; 定义一个交错数组jaggedArray[0] &#x3D; new int[5];    &#x2F;&#x2F; 对数组的第一个元素初始化jaggedArray[1] &#x3D; new int[4];   &#x2F;&#x2F; 对数组的第二个元素初始化jaggedArray[2] &#x3D; new int[2];    &#x2F;&#x2F; 对数组的第三个元素初始化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的交错数组中包含三个元素，第一个元素是长度为 5 的整型数组，第二个元素是长度为 4 的整型数组，第三个元素是长度为 2 的整型数组。</p><p>除了上面的方法外，还可以直接使用具体的值来填充数组，这种情况下就不需要再设定数组的大小了，如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int[][] jaggedArray &#x3D; new int[3][]; &#x2F;&#x2F; 定义一个交错数组jaggedArray[0] &#x3D; new int[] &#123;1, 2, 3, 4, 5&#125;;jaggedArray[1] &#x3D; new int[] &#123;6, 7, 8, 9&#125;;jaggedArray[2] &#x3D; new int[] &#123;10, 11&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还可以在声明数组时，直接将数组初始化，如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int[][] jaggedArray &#x3D; new int[][]&#123;  new int[] &#123;1, 2, 3, 4, 5&#125;,  new int[] &#123;6, 7, 8, 9&#125;,  new int[] &#123;10, 11&#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的声明方式还有一种简写形式，如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int[][] jaggedArray &#x3D; &#123;  new int[] &#123;1, 2, 3, 4, 5&#125;,  new int[] &#123;6, 7, 8, 9&#125;,  new int[] &#123;10, 11&#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：不能从元素初始化中省略 new 运算符，因为不存在元素的默认初始化。</strong></p><h3 id="3）访问数组中的元素"><a href="#3）访问数组中的元素" class="headerlink" title="3）访问数组中的元素"></a>3）访问数组中的元素</h3><p>以上面定义的交错数组 jaggedArray 为例，可以使用如下所示的方法来获取数组的中每个元素或者为指定的元素赋值：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int a &#x3D; jaggedArray[0][1]  &#x2F;&#x2F; 变量 a 的值为：2jaggedArray[2][1] &#x3D; 0      &#x2F;&#x2F; 将交错数组中第三个数组元素中的第二个元素赋值为 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4）交错数组和多维数组"><a href="#4）交错数组和多维数组" class="headerlink" title="4）交错数组和多维数组"></a>4）交错数组和多维数组</h3><p>交错数组中的元素不仅可以是一维数组，还可以是多维数组，例如下面的代码中定义了一个包含<strong>三个二维数组元素的一维交错数组</strong>：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int[][,] jaggedArray &#x3D; new int[3][,]&#123;  new int[,] &#123;    &#123;1, 1&#125;,    &#123;2, 3&#125;  &#125;,  new int[,] &#123;    &#123;5, 8&#125;,    &#123;13, 21&#125;,    &#123;34, 55&#125;  &#125;,  new int[,] &#123;    &#123;89, 144&#125;,    &#123;233, 377&#125;,    &#123;610, 987&#125;  &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于这样的交错数组，在访问数组中的每个元素时也需要做出相应的改变，如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int a &#x3D; jaggedArray[1][1,1]   &#x2F;&#x2F; 变量 a 的值为 21int b &#x3D; jaggedArray[2][0,0]   &#x2F;&#x2F; 变量 b 的值为 89<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>【示例1】定义一个交错数组，并遍历数组中的内容（三个一维数组元素的一维交错数组）：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)&#123;            int[][] arr &#x3D; new int[3][]&#123;                  new int[]&#123;31, 22, 16, 88&#125;,                new int[]&#123;21, 54, 6, 77, 98, 52&#125;,                new int[]&#123;112, 25&#125;            &#125;;            &#x2F;&#x2F; 遍历数组            for(int i &#x3D; 0; i &lt; arr.Length; i++)&#123;                for(int j &#x3D; 0; j &lt; arr[i].Length; j++)&#123;                    Console.Write(arr[i][j]+&quot; &quot;);                &#125;                Console.WriteLine();            &#125;            Console.ReadLine();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">31 22 16 8821 54 6 77 98 52112 25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>提示：示例中用到了 Length 属性，它是数组的一个属性，代表数组的长度（元素个数）。</strong></p><p>【示例2】定义一个交错数组，并遍历数组中的内容（三个二维数组元素的一维交错数组）：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            int[][,] a &#x3D; new int[3][,]            &#123;                new int[,]                &#123;                    &#123;1,2 &#125;,                    &#123;3,4 &#125;                &#125;,                new int[,]                &#123;                    &#123;3,4 &#125;,                    &#123;5,6 &#125;                &#125;,                new int[,]                &#123;                    &#123;5,6 &#125;,                    &#123;7,8 &#125;                &#125;            &#125;;            for(int i &#x3D; 0; i &lt; a.Length; i++)            &#123;                                for(int j &#x3D; 0; j &lt; a[i].GetLength(0); j++)                &#123;                   for(int k &#x3D; 0; k &lt; a[i].GetLength(1); k++)                    &#123;                        Console.Write(a[i][j, k]+&quot; &quot;);                    &#125;                &#125;                Console.WriteLine();            &#125;            Console.ReadLine();        &#125;    &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">1 2 3 43 4 5 65 6 7 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>提示：GetLength()是数组类的一个预定义方法。它有一个指定维度的参数。如果我们将0传递给GetLenth()方法，那么它将返回第一个维度的大小。如果我们将1传递给getlengthth()方法，那么它将返回第二个维度的大小。</strong></p><h2 id="17-C-params：参数数组"><a href="#17-C-params：参数数组" class="headerlink" title="17. C# params：参数数组"></a>17. C# params：参数数组</h2><p>某些情况下，我们在定义函数时可能并不能提前确定参数的数量，这时可以使用 C# 提供的参数数组，参数数组通常用于为函数传递未知数量的参数。</p><p>若要使用参数数组，则需要利用 **params **关键字，语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">访问权限修饰符 返回值类型 函数名(params 类型名称[] 数组名称)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>提示：使用参数数组时，既可以直接为函数传递一个数组作为参数，也可以使用<code>函数名(参数1, 参数2, ..., 参数n)</code>的形式传递若干个具体的值作为参数。</strong></p><p>下面通过示例来演示以下参数数组的使用：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)&#123;            Demo Obj &#x3D; new Demo();&#x2F;&#x2F;类的实例化            &#x2F;&#x2F;使用函数名(参数1, 参数2, ..., 参数n)的形式传递若干个具体的值作为参数            string str &#x3D; Obj.getSum(1, 2, 3, 4, 5, 6);            Console.WriteLine(str);            &#x2F;&#x2F;直接为函数传递一个数组作为参数            int[] arr &#x3D; &#123;2, 4, 6, 8, 10&#125;;            string str2 &#x3D; Obj.getSum(arr);            Console.WriteLine(str2);        &#125;        public string getSum(params int[] arr)&#123;            int sum &#x3D; 0;            string str &#x3D; &quot;&quot;;            foreach(int i in arr)&#123;                sum +&#x3D; i;                str +&#x3D; &quot;+ &quot; + i + &quot; &quot;;            &#125;            str &#x3D; str.Trim(&#39;+&#39;);&#x2F;&#x2F;清除第一个+号            str +&#x3D; &quot;&#x3D; &quot;+sum;            return str;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">1 + 2 + 3 + 4 + 5 + 6 &#x3D; 212 + 4 + 6 + 8 + 10 &#x3D; 30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示：示例中用到的 Trim 方法可以用来去除字符串左右两边指定的字符，这里大家了解 即可。</strong></p><h2 id="18-C-Array类"><a href="#18-C-Array类" class="headerlink" title="18. C# Array类"></a>18. C# Array类</h2><p>Array 类是 C# 中<strong>所有数组的基类</strong>，其中提供了一系列用来处理数组的操作，例如对数组元素进行排序、搜索数组中指定的元素等。</p><p>Array 类的签名如下所示：</p><pre class="line-numbers language-none"><code class="language-none">[SerializableAttribute] [ComVisibleAttribute(true)] public abstract class Array : ICloneable, IList, ICollection, IEnumerable, IStructuralComparable, IStructuralEquatable <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Array-类中的属性"><a href="#Array-类中的属性" class="headerlink" title="Array 类中的属性"></a>Array 类中的属性</h3><p>Array 类中提供了一系列属性，通过这些属性可以获取数组的各种信息。Array 类中的常用属性如下表所示：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>IsFixedSize</td><td>检查数组是否具有固定大小</td></tr><tr><td>IsReadOnly</td><td>检查数组是否为只读</td></tr><tr><td>IsSynchronized</td><td>检查是否同步对数组的访问（线程安全）</td></tr><tr><td>Length</td><td>获取数组中所有维度中元素的总数</td></tr><tr><td>LongLength</td><td>获取数组中所有维数中元素的总数，并返回一个 64 位整数</td></tr><tr><td>Rank</td><td>获取数组的秩（维数），例如一维数组返回 1，二维数组返回 2，依次类推</td></tr><tr><td>SyncRoot</td><td>用来获取一个对象，该对象可以用于同步对数组的访问</td></tr></tbody></table><h3 id="Array-类中的方法"><a href="#Array-类中的方法" class="headerlink" title="Array 类中的方法"></a>Array 类中的方法</h3><p>除了属性之外，Array 类中还提供了一系列的方法，如下表所示：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Clear(Array, Int32, Int32)</td><td>将数组中指定范围内的元素设置为该元素所属类型的默认值</td></tr><tr><td>Copy(Array, Array, Int32)</td><td>从第一个元素开始拷贝数组中指定长度的元素，并将其粘贴到另一个数组中（从第一个元素开始粘贴），使用 32 位整数来指定要拷贝的长度</td></tr><tr><td>CopyTo(Array, Int32)</td><td>从指定的目标数组索引处开始，将当前一维数组的所有元素复制到指定的一维数组中，索引使用 32 位整数指定</td></tr><tr><td>GetLength</td><td>获取数组指定维度中的元素数，并返回一个 32 位整数</td></tr><tr><td>GetLongLength</td><td>获取数组指定维度中的元素数，并返回一个 64 位整数</td></tr><tr><td>GetLowerBound</td><td>获取数组中指定维度第一个元素的索引</td></tr><tr><td>GetType</td><td>获取当前实例的类型（继承自 Object ）</td></tr><tr><td>GetUpperBound</td><td>获取数组中指定维度最后一个元素的索引</td></tr><tr><td>GetValue(Int32)</td><td>获取一维数组中指定位置的值</td></tr><tr><td>IndexOf(Array, Object)</td><td>在一个一维数组中搜索指定对象，并返回其首个匹配项的索引</td></tr><tr><td>Reverse(Array)</td><td>反转整个一维数组中元素的顺序</td></tr><tr><td>SetValue(Object, Int32)</td><td>设置一维数组中指定元素的值</td></tr><tr><td>Sort(Array)</td><td>对一维数组中的元素排序</td></tr><tr><td>ToString()</td><td>返回一个表示当前对象的字符串（继承自 Object）</td></tr></tbody></table><h2 id="19-C-String：字符串"><a href="#19-C-String：字符串" class="headerlink" title="19. C# String：字符串"></a>19. C# String：字符串</h2><p>在 C# 中，string（或 String）关键字是 System.String 类的别名，其中提供了定义字符串以及操作字符串的一系列方法，下面就来详细介绍一下。</p><h3 id="1）声明和初始化字符串"><a href="#1）声明和初始化字符串" class="headerlink" title="1）声明和初始化字符串"></a>1）声明和初始化字符串</h3><p>您可以使用以下方式来创建字符串</p><ul><li><p>为 String 类型的变量赋值一个字符串；</p></li><li><p>使用 String 类的构造函数；</p></li><li><p>使用字符串串联运算符<code>+</code>；</p></li><li><p>通过检索属性或调用返回字符串的方法；</p></li><li><p>通过调用格式化方法将值或对象转换为其字符串表示形式。</p><p>定义一个空字符串</p></li></ul><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">string str1 &#x3D; System.String.Empty;&#x2F;&#x2F;String.Empty是在语法级别对“”的优化，而且从美观角度看，也占优势。string str2 &#x3D; &quot;&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Empty是string类中的一个静态的只读字段，他的定义是这样的：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public static readonly String Empty &#x3D; “”;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也就是说string.Empty的内部实现是等于””的。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">string str &#x3D; null;&#x2F;&#x2F;在栈上有地址，但在堆上没有空间；null是string的默认值；string str1 &#x3D;“”;  &#x2F;&#x2F;空字符串，堆栈都有，并且堆上地址为空；string str2 &#x3D; string.empty; &#x2F;&#x2F;它和str1差不多，在堆栈都有空间，不同就是在语法级上对str1的优化。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)         &#123;             &#x2F;&#x2F; 使用常规字符串为字符串变量赋值            string name &#x3D; &quot;C语言中文网&quot;;                        &#x2F;&#x2F; 声明一个字符串并初始化为空            string str1 &#x3D; &quot;欢迎访问：&quot; + name;            Console.WriteLine(&quot;str1 的值为：&quot; + str1);                        &#x2F;&#x2F; 使用 System.String.Empty 定义一个空字符串            string str2 &#x3D; System.String.Empty;            Console.WriteLine(&quot;str2 的值为：&quot; + str2);                        &#x2F;&#x2F; 使用 System.String 类            System.String url &#x3D; &quot;http:&#x2F;&#x2F;c.biancheng.net&quot;;;            Console.WriteLine(&quot;url 的值为：&quot; + url);                        &#x2F;&#x2F; 在局部变量中（即在方法体中）可以使用 var 来代替具体数据类型来定义变量            var temp &#x3D; &quot;C#教程&quot;;            Console.WriteLine(&quot;temp 的值为：&quot; + temp);                        &#x2F;&#x2F; 定义一个常量字符串            const string str3 &#x3D; &quot;这是一个常量字符串&quot;;            Console.WriteLine(&quot;str3 的值为：&quot; + str3);                        &#x2F;&#x2F; 使用字符串构造函数定义字符串            char[] letters &#x3D; &#123; &#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39; &#125;;            &#x2F;&#x2F; string[] letters &#x3D; &#123; &quot;C&quot;,&quot;语&quot;,&quot;言&quot;&#125;;            string message &#x3D; new string(letters);            Console.WriteLine(&quot;message 的值为：&quot; + message);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">str1 的值为：欢迎访问：C语言中文网str2 的值为：url 的值为：http:&#x2F;&#x2F;c.biancheng.nettemp 的值为：C#教程str3 的值为：这是一个常量字符串message 的值为：Hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、String-类中的属性"><a href="#2、String-类中的属性" class="headerlink" title="2、String 类中的属性"></a>2、String 类中的属性</h2><p>String 类中提供了两个属性，如下表所示：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Chars[Int32]</td><td>获取指定字符在字符串中的位置</td></tr><tr><td>Length</td><td>获取当前 String 对象中的字符数（字符串的长度）</td></tr></tbody></table><h2 id="3、String-类中的方法"><a href="#3、String-类中的方法" class="headerlink" title="3、String 类中的方法"></a>3、String 类中的方法</h2><p>String 类中提供了许多用来操作字符串的方法，下表中为大家列举了 String 类中一些比较常用的方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Clone()</td><td>返回对此 String 实例的引用</td></tr><tr><td>Compare(String, String)</td><td>比较两个指定的 String 对象，并返回一个指示二者在排序顺序中的相对位置的整数</td></tr><tr><td>CompareOrdinal(String, String)</td><td>通过比较每个字符串中的字符，来比较两个字符串是否相等</td></tr><tr><td>CompareTo(String)</td><td>将一个字符串与另一个字符串进行比较</td></tr><tr><td>Concat(String, String)</td><td>连接两个指定的字符串</td></tr><tr><td>Contains(String)</td><td>判断一个字符串中是否包含零一个字符串</td></tr><tr><td>Copy(String)</td><td>将字符串的值复制一份，并赋值给另一个字符串</td></tr><tr><td>CopyTo(Int32, Char[], Int32, Int32)</td><td>从字符串中复制指定数量的字符到一个字符数组中</td></tr><tr><td>EndsWith(String)</td><td>用来判断字符串是否以指定的字符串结尾</td></tr><tr><td>Equals(String, String)</td><td>判断两个字符串是否相等</td></tr><tr><td>Format(String, Object)</td><td>将字符串格式化为指定的字符串表示形式</td></tr><tr><td>GetEnumerator()</td><td>返回一个可以循环访问此字符串中的每个字符的对象</td></tr><tr><td>GetHashCode()</td><td>返回该字符串的哈希代码</td></tr><tr><td>GetType()</td><td>获取当前实例的类型</td></tr><tr><td>GetTypeCode()</td><td>返回字符串的类型代码</td></tr><tr><td>IndexOf(String)</td><td>返回字符在字符串中的首次出现的索引位置，索引从零开始</td></tr><tr><td>Insert(Int32, String)</td><td>在字符串的指定位置插入另一个字符串，并返回新形成的字符串</td></tr><tr><td>Intern(String)</td><td>返回指定字符串的内存地址</td></tr><tr><td>IsInterned(String)</td><td>返回指定字符串的内存地址</td></tr><tr><td>IsNormalized()</td><td>判断此字符串是否符合 Unicode 标准</td></tr><tr><td>IsNullOrEmpty(String)</td><td>判断指定的字符串是否为空（null）或空字符串（””）</td></tr><tr><td>IsNullOrWhiteSpace(String)</td><td>判断指定的字符串是否为 null、空或仅由空白字符组成</td></tr><tr><td>Join(String, String[])</td><td>串联字符串数组中的所有元素，并将每个元素使用指定的分隔符分隔开</td></tr><tr><td>LastIndexOf(Char)</td><td>获取某个字符在字符串中最后一次出现的位置</td></tr><tr><td>LastIndexOfAny(Char[])</td><td>获取一个或多个字符在字符串中最后一次出现的位置</td></tr><tr><td>Normalize()</td><td>返回一个新字符串，新字符串与原字符串的值相等，但其二进制表示形式符合 Unicode 标准</td></tr><tr><td>PadLeft(Int32)</td><td>返回一个指定长度的新字符串，新字符串通过在原字符串左侧填充空格来达到指定的长度，从而实现右对齐</td></tr><tr><td>PadRight(Int32)</td><td>返回一个指定长度的新字符串，新字符串通过在原字符串右侧填充空格来达到指定的长度，从而实现左对齐</td></tr><tr><td>Remove(Int32)</td><td>返回一个指定长度的新字符串，将字符串中超出长度以外的部分全部删除</td></tr><tr><td>Replace(String, String)</td><td>使用指定字符替换字符串中的某个字符，并返回新形成的字符串</td></tr><tr><td>Split(Char[])</td><td>按照某个分隔符将一个字符串拆分成一个字符串数组</td></tr><tr><td>StartsWith(String)</td><td>判断字符串是否使用指定的字符串开头</td></tr><tr><td>Substring(Int32)</td><td>从指定的位置截取字符串</td></tr><tr><td>ToCharArray()</td><td>将字符串中的字符复制到 Unicode 字符数组</td></tr><tr><td>ToLower()</td><td>将字符串中的字母转换为小写的形式</td></tr><tr><td>ToLowerInvariant()</td><td>使用固定区域性的大小写规则将字符串转换为小写的形式</td></tr><tr><td>ToString()</td><td>将其它数据类型转换为字符串类型</td></tr><tr><td>ToUpper()</td><td>将字符串中的字母转换为大写形式</td></tr><tr><td>Trim()</td><td>删除字符串首尾的空白字符</td></tr><tr><td>TrimEnd(Char[])</td><td>删除字符串尾部的空白字符</td></tr><tr><td>TrimStart(Char[])</td><td>删除字符串首部的空白字符</td></tr></tbody></table><p>上表中只列举了一些 String 类中常用方法，大家可以通过查阅 C# 的<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.string?view=netcore-3.1#methods">官方文档</a>来了解 String 类中的全部的方法介绍。</p><h3 id="4）示例"><a href="#4）示例" class="headerlink" title="4）示例"></a>4）示例</h3><h4 id="【示例】比较两个字符串是否相同："><a href="#【示例】比较两个字符串是否相同：" class="headerlink" title="【示例】比较两个字符串是否相同："></a>【示例】比较两个字符串是否相同：</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            string s1 &#x3D; &quot;66333&quot;;            string s2 &#x3D; &quot;66666&quot;;            if (String.Compare(s1, s2) &#x3D;&#x3D; 0)&#123;                Console.WriteLine(s1 + &quot; 与 &quot; + s2 + &quot; 相同&quot;);            &#125;            else            &#123;                Console.WriteLine(s1 + &quot; 与 &quot; + s2 + &quot; 不同&quot;);            &#125;            Console.WriteLine(String.Compare(s1, s2));            Console.ReadKey();        &#125;           &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">66333 与 66666 不同-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【示例】判断一个字符串是否包含在另一个字符串中："><a href="#【示例】判断一个字符串是否包含在另一个字符串中：" class="headerlink" title="【示例】判断一个字符串是否包含在另一个字符串中："></a>【示例】判断一个字符串是否包含在另一个字符串中：</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            string s1 &#x3D; &quot;23333&quot;;            string s2 &#x3D; &quot;2333&quot;;            if (s1.Contains(s2))            &#123;                Console.WriteLine(s1 + &quot; 中包含了 &quot; + s2);            &#125;            else            &#123;                Console.WriteLine(s1 + &quot; 中不包含 &quot; + s2);            &#125;            Console.ReadKey();                &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">23333 中包含了 2333<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【示例】从一个字符串中截取指定的字符串："><a href="#【示例】从一个字符串中截取指定的字符串：" class="headerlink" title="【示例】从一个字符串中截取指定的字符串："></a>【示例】从一个字符串中截取指定的字符串：</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            string s1 &#x3D; &quot;23333&quot;;            Console.WriteLine(&quot;源字符串：&quot; + s1);            string s2 &#x3D; s1.Substring(2);            Console.WriteLine(&quot;截取之后的字符串：&quot; + s2);            Console.ReadKey();                &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">源字符串：23333截取之后的字符串：333<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【示例】将数组中的元素合并为字符串："><a href="#【示例】将数组中的元素合并为字符串：" class="headerlink" title="【示例】将数组中的元素合并为字符串："></a>【示例】将数组中的元素合并为字符串：</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            string[] strarray &#x3D; new string[]            &#123;                &quot;2333&quot;,                &quot;666&quot;,                &quot;888&quot;            &#125;;            string str &#x3D; string.Join(&quot;-&quot;, strarray);            Console.WriteLine(str);            Console.ReadKey();                &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">2333-666-888<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="20-C-struct：结构体"><a href="#20-C-struct：结构体" class="headerlink" title="20. C# struct：结构体"></a>20. C# struct：结构体</h2><p>在 C# 中，结构体也被称为结构类型（“structure type”或“struct type”），它是一种可封装数据和相关功能的值类型，在语法上结构体与类（class）非常相似，它们都可以用来封装数据，并且都可以包含成员属性和成员方法。</p><h3 id="1）定义结构体"><a href="#1）定义结构体" class="headerlink" title="1）定义结构体"></a>1）定义结构体</h3><p>要定义一个结构体需要使用 **struct ** 关键字，每个结构体都可以被看作是一种新的数据类型，其中可以包含多个成员（成员属性和成员方法），例如下面声明的 Books 结构体：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">struct Books &#123;  public string title;  public string author;  public string subject;  public int book_id;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在设计结构体时有以下几点需要注意：</p><ul><li>不能为结构体声明无参数的构造函数，因为每个结构体中都已经默认创建了一个隐式的、无参数的构造函数；</li><li>不能在声明成员属性时对它们进行初始化，静态属性和常量除外；</li><li>结构体的构造函数必须初始化该结构体中的所有成员属性；</li><li>结构体不能从其他类或结构体中继承，也不能作为类的基础类型，但是结构类型可以实现接口；</li><li>不能在结构体中声明析构函数。</li></ul><p>下面通过一个示例来演示结构体的使用：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;    struct books    &#123;        public string title;        public string author;        public string subject;        public int book_id;    &#125;    class test    &#123;        static void Main(string[] args)        &#123;            &#x2F;&#x2F;声明books类型的book1和book2            books book1;            books book2;            &#x2F;&#x2F;定义book1的属性            book1.title &#x3D; &quot;c#教程&quot;;            book1.author &#x3D; &quot;c语言中文网&quot;;            book1.subject &#x3D; &quot;c#编程教程&quot;;            book1.book_id &#x3D; 123456;            &#x2F;&#x2F;定义book2的属性            book2.title &#x3D; &quot;c教程&quot;;            book2.author &#x3D; &quot;c语言中文网&quot;;            book2.subject &#x3D; &quot;c编程教程&quot;;            book2.book_id &#x3D; 133333;            &#x2F;&#x2F;输出boo1和book2的属性信息            Console.WriteLine(&quot;book1&#39;s title：&quot; + book1.title);            Console.WriteLine(&quot;book1&#39;s author：&quot; + book1.author);            Console.WriteLine(&quot;book1&#39;s subject：&quot; + book1.subject);            Console.WriteLine(&quot;book1&#39;s book_id：&quot; + book1.book_id);            Console.WriteLine(&quot;book2&#39;s title：&quot; + book2.title);            Console.WriteLine(&quot;book2&#39;s author：&quot; + book2.author);            Console.WriteLine(&quot;book2&#39;s subject：&quot; + book2.subject);            Console.WriteLine(&quot;book2&#39;s book_id：&quot; + book2.book_id);            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">book1&#39;s title：c#教程book1&#39;s author：c语言中文网book1&#39;s subject：c#编程教程book1&#39;s book_id：123456book2&#39;s title：c教程book2&#39;s author：c语言中文网book2&#39;s subject：c编程教程book2&#39;s book_id：133333<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2）结构体的特征"><a href="#2）结构体的特征" class="headerlink" title="2）结构体的特征"></a>2）结构体的特征</h3><p>C# 中的结构体与 C/C++ 中的结构体有很大的不同，在 C# 中结构体具有以下功能：</p><ul><li>结构体中可以具有方法、字段、索引、属性、运算符方法和事件；</li><li>结构体中可以定义构造函数，但不能定义析构函数，需要注意的是，定义的构造函数不能没有参数，因为没有参数的构造函数是 C# 默认自动定义的，而且不能更改；</li><li>与类不同，结构体不能继承其他结构体或类；</li><li>结构体不能用作其他结构体或类的基础结构；</li><li>一种结构体可以实现一个或多个接口；</li><li>结构体成员不能被设定为 abstract、virtual 或 protected；</li><li>与类不同，结构体可以不用 New 操作符来实例化，当使用 New 操作符来实例化结构体时会自动调用结构体中的构造函数；</li><li>如果不使用 New 操作符来实例化结构体，结构体对象中的字段将保持未分配状态，并且在所有字段初始化之前无法使用该结构体实例。</li></ul><h3 id="3）类与结构体"><a href="#3）类与结构体" class="headerlink" title="3）类与结构体"></a>3）类与结构体</h3><p>类和结构体的主要区别如下所示：</p><ul><li>类是引用类型，结构体是值类型；</li><li>结构体不支持继承，但可以实现接口；</li><li>结构体中不能声明默认的构造函数。</li></ul><p>根据以上特征，让我们来完善一下前面的示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;    struct books    &#123;        &#x2F;&#x2F;成员属性        public string title;        public string author;        public string subject;        public int book_id;        &#x2F;&#x2F;成员方法        public void getValue(string t,string a,string s,int id)        &#123;            title &#x3D; t;            author &#x3D; a;            subject &#x3D; s;            book_id &#x3D; id;        &#125;        public void disPlay()        &#123;            Console.WriteLine(&quot;title：&quot; + title);            Console.WriteLine(&quot;author：&quot; + author);            Console.WriteLine(&quot;subject：&quot; + subject);            Console.WriteLine(&quot;book_id：&quot; + book_id);        &#125;    &#125;    class test    &#123;        static void Main(string[] args)        &#123;            &#x2F;&#x2F;实例化books结构体            books book1&#x3D;new books();            books book2&#x3D;new books();            &#x2F;&#x2F;定义book1的属性            book1.getValue(&quot;C#教程&quot;, &quot;C语言中文网&quot;, &quot;C#编程教程&quot;, 123456);            &#x2F;&#x2F;定义book2的属性            book2.getValue(&quot;HTTP教程&quot;, &quot;C语言中文网&quot;, &quot;HTTP协议教程&quot;, 123455);            &#x2F;&#x2F;输出boo1和book2的属性信息            book1.disPlay();            book2.disPlay();            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">title：C#教程author：C语言中文网subject：C#编程教程book_id：123456title：HTTP教程author：C语言中文网subject：HTTP协议教程book_id：123455<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-C-enum：枚举类型"><a href="#21-C-enum：枚举类型" class="headerlink" title="21. C# enum：枚举类型"></a>21. C# enum：枚举类型</h2><p>枚举类型（也可以称为“枚举器”）由一组具有独立标识符（名称）的<strong>整数类型常量</strong>构成，在 C# 中枚举类型不仅可以在类或结构体的内部声明，也可以在类或结构体的外部声明，默认情况下<strong>枚举类型中成员的默认值是从 0 开始的</strong>，然后逐一递增。</p><p>在 C# 中可以使用 <strong>enum</strong> 关键字来声明枚举类型，语法格式如下所示：</p><pre class="line-numbers language-none"><code class="language-none">enum enum_name&#123;  enumeration list;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中，enum_name 为枚举类型变量的名称；enumeration list 为枚举类型中的成员列表，其中包含若干使用逗号分隔的标识符，每个标识符都代表了一个整数值。</p><p>在使用枚举类型时有以下几点需要注意：</p><ul><li>枚举类型中不能定义方法；</li><li>枚举类型具有固定的常量集；</li><li>枚举类型可提高类型的安全性；</li><li>枚举类型可以遍历。</li></ul><p>示例如下：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;        class test    &#123;        enum Day &#123; Sun, Mon, Tue, Wed, Thu, Fri, Sat &#125;;        enum Season        &#123;            spring &#x3D;10,            summer,            autumn&#x3D;15,            winter        &#125;        static void Main(string[] args)        &#123;            &#x2F;&#x2F;默认情况下枚举类型中成员的默认值是从 0 开始的            Console.WriteLine(&quot;Sun &#x3D; &#123;0&#125;&quot;, (int)Day.Sun);            Console.WriteLine(&quot;Mon &#x3D; &#123;0&#125;&quot;, (int)Day.Mon);            Console.WriteLine(&quot;Tue &#x3D; &#123;0&#125;&quot;, (int)Day.Tue);            Console.WriteLine(&quot;Wed &#x3D; &#123;0&#125;&quot;, (int)Day.Wed);            Console.WriteLine(&quot;Thu &#x3D; &#123;0&#125;&quot;, (int)Day.Thu);            Console.WriteLine(&quot;Fri &#x3D; &#123;0&#125;&quot;, (int)Day.Fri);            Console.WriteLine(&quot;Sat &#x3D; &#123;0&#125;&quot;, (int)Day.Sat);            Console.WriteLine();            &#x2F;&#x2F;默认情况下，枚举类型中的每个成员都为 int 类型，            &#x2F;&#x2F;它们的值从零开始，并按定义顺序依次递增。但是我们            &#x2F;&#x2F;也可以显式的为每个枚举类型的成员赋值            foreach (Season i in Enum.GetValues(typeof(Season)))&#123;                Console.WriteLine(i + &quot; &#x3D; &quot; + (int)i);            &#125;            Console.WriteLine();            &#x2F;&#x2F;使用 GetNames() 遍历枚举类型中的所有成员            foreach(string i  in Enum.GetNames(typeof(Season)))            &#123;                Console.WriteLine(i);            &#125;            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">Sun &#x3D; 0Mon &#x3D; 1Tue &#x3D; 2Wed &#x3D; 3Thu &#x3D; 4Fri &#x3D; 5Sat &#x3D; 6spring &#x3D; 10summer &#x3D; 11autumn &#x3D; 15winter &#x3D; 16springsummerautumnwinter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="22-C-class：类"><a href="#22-C-class：类" class="headerlink" title="22. C# class：类"></a>22. C# class：类</h2><p>在 C# 中，类是引用类型的，其中包括状态（成员属性）和操作（成员方法和其它函数成员），我们可以动态创建类的实例（instance），这个实例也被称为对象（object），我们可以通过类和对象来设计程序。</p><h3 id="1）类的定义"><a href="#1）类的定义" class="headerlink" title="1）类的定义"></a>1）类的定义</h3><p>类的定义需要使用 <strong>class</strong> 关键字，语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;access specifier&gt; class class_name&#123;  &#x2F;&#x2F; 成员属性  &lt;access specifier&gt; &lt;data type&gt; variable1;  &lt;access specifier&gt; &lt;data type&gt; variable2;  ...  &lt;access specifier&gt; &lt;data type&gt; variableN;  &#x2F;&#x2F; 成员函数&#x2F;成员方法  &lt;access specifier&gt; &lt;return type&gt; method1(parameter_list)  &#123;    &#x2F;&#x2F; 函数体  &#125;  &lt;access specifier&gt; &lt;return type&gt; method2(parameter_list)  &#123;    &#x2F;&#x2F; 函数体  &#125;  ...  &lt;access specifier&gt; &lt;return type&gt; methodN(parameter_list)  &#123;    &#x2F;&#x2F; 函数体  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>语法说明如下：</p><ul><li><access specifier> 为访问权限修饰符，用来指定类或类中成员的访问规则，可以忽略不写，如果没有指定，则使用默认的访问权限修饰符，类的默认访问权限修饰符是 internal，类中成员的默认访问权限修饰符是 private；</access></li><li>class_name 为类的名称；</li><li><data type> 为数据类型，用来指定成员属性的数据类型；</data></li><li>variable1、variable2 等为成员属性的名称，类似于变量名；</li><li><return type> 为返回值类型，用来指定成员函数的返回值类型；</return></li><li>method1、method2 等为成员函数的名称。</li></ul><h3 id="2）对象"><a href="#2）对象" class="headerlink" title="2）对象"></a>2）对象</h3><p>类和对象是不同的概念，类决定了对象的类型，但不是对象本身。另外，类是在开发阶段创建的，而对象则是在程序运行期间创建的。我们可以将对象看作是基于类创建的实体，所以<strong>对象也可以称为类的实例</strong>。</p><p>想要创建一个类的实例需要使用 new 关键字，假如我们创建了一个名为 Student 的类，若要创建这个类的对象，语法格式如下：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Student Object &#x3D; new Student();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="23-C-构造函数"><a href="#23-C-构造函数" class="headerlink" title="23. C#构造函数"></a>23. C#构造函数</h2><p>在 C# 中，<strong>构造函数就是与类（或结构体）具有相同名称的成员函数</strong>，它在类中的地位比较特殊，不需要我们主动调用，当创建一个类的对象时会自动调用类中的构造函数。在程序开发的过程中，我们通常使用类中的构造函数来初始化类中的成员属性。</p><p>C# 中的构造函数有三种：</p><ul><li>实例构造函数；</li><li>静态构造函数；</li><li>私有构造函数。</li></ul><h3 id="1）实例构造函数"><a href="#1）实例构造函数" class="headerlink" title="1）实例构造函数"></a>1）实例构造函数</h3><p>构造函数是类中特殊的成员函数，它的名称与它所在类的名称相同，并且没有返回值。当我们使用 new 关键字创建类的对象时，可以使用实例构造函数来创建和初始化类中的任意成员属性。下面示例中演示了一个名为 Person 的类，以及类中的实例构造函数。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class Person&#123;    private string name;    private int age;    &#x2F;&#x2F;构造函数    public Person(string n, int a)    &#123;        name &#x3D; n;        age &#x3D; a;    &#125;    &#x2F;&#x2F; 类中剩余的成员&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只要创建 Person 类的对象，就会调用类中的实例构造函数，我们只需要在实例化对象时将具体的值传递给类中的构造函数即可，如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Person P &#x3D; new Person(&quot;张三&quot;, 18);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>如果没有为类显式的创建构造函数，那么 C# 将会为这个类隐式的创建一个没有参数的构造函数（无参数构造函数）</strong>，这个无参的构造函数会在实例化对象时为类中的成员属性设置默认值（关于 C# 中类型的默认值大家可以查阅《<a href="http://m.biancheng.net/csharp/data-type.html">数据类型</a>》一节）。在结构体中也是如此，如果没有为结构体创建构造函数，那么 C# 将隐式的创建一个无参数的构造函数，用来将每个字段初始化为其默认值。</p><p>若要初始化静态类或非静态类中的静态属性，则需要使用下面将要介绍的静态构造函数。</p><h3 id="2）静态构造函数"><a href="#2）静态构造函数" class="headerlink" title="2）静态构造函数"></a>2）静态构造函数</h3><p>静态构造函数<strong>用于初始化类中的静态数据或执行仅需执行一次的特定操作</strong>。静态构造函数将在创建第一个实例或引用类中的静态成员之前自动调用。</p><p>静态构造函数具有以下特性：</p><ul><li>静态构造函数不使用访问权限修饰符修饰或不具有参数；</li><li>类或结构体中<strong>只能具有一个静态构造函数</strong>；</li><li>静态构造函数不能继承或重载；</li><li>静态构造函数不能直接调用，仅可以由公共语言运行时 (CLR) 调用；</li><li>用户无法控制程序中静态构造函数的执行时间；</li><li>在创建第一个实例或引用任何静态成员之前，将自动调用静态构造函数以初始化类；</li><li>静态构造函数会在实例构造函数之前运行。</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;        class test    &#123;        public static int num &#x3D; 0;        &#x2F;&#x2F;构造函数        test()        &#123;            num &#x3D; 1;        &#125;        &#x2F;&#x2F;静态构造函数        static test()        &#123;            num &#x3D; 2;        &#125;                static void Main(string[] args)        &#123;            &#x2F;&#x2F;在创建第一个实例或引用任何静态成员之前，将自动调用静态构造函数以初始化类；            Console.WriteLine(&quot;num &#x3D; &quot; + num);  &#x2F;&#x2F;所以结果为2            test obj &#x3D; new test();            Console.WriteLine(&quot;num &#x3D; &quot; + num);              &#x2F;&#x2F;创建示例后，调用构造函数，结果为1            Console.Read();        &#125;    &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当执行上面程序时，会首先执行<code>public static int num = 0</code>，接着执行类中的静态构造函数，此时 num = 2，然后执行 Main 函数里面的内容，此时打印 num 的值为 2，接着初始化 Demo 类，这时会执行类中的构造函数，此时 num 会重新赋值为 1，所以上例的运行结果如下所示：</p><pre class="line-numbers language-none"><code class="language-none">num &#x3D; 2num &#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3）私有构造函数"><a href="#3）私有构造函数" class="headerlink" title="3）私有构造函数"></a>3）私有构造函数</h3><p>私有构造函数是一种特殊的实例构造函数，<strong>通常用在只包含静态成员的类中</strong>。如果一个类中具有一个或多个私有构造函数而没有公共构造函数的话，那么其他类（除嵌套类外）则无法创建该类的实例。 例如：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">class NLog&#123;    &#x2F;&#x2F; 私有构造函数    private NLog() &#123; &#125;    public static double e &#x3D; Math.E;  &#x2F;&#x2F;2.71828...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上例中定义了一个空的私有构造函数，这么做的好处就是空构造函数可阻止自动生成无参数构造函数。需要注意的是，如果不对构造函数使用访问权限修饰符，则默认它为私有构造函数。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;        class test    &#123;       public class student        &#123;            &#x2F;&#x2F;定义一个空的私有构造函数            private student() &#123; &#125;            public static int id;            public static string name;            public static void Display()            &#123;                Console.WriteLine(&quot;姓名：&quot; + name + &quot;\n编号：&quot; + id);            &#125;        &#125;                static void Main(string[] args)        &#123;            student.id &#x3D; 101;            student.name &#x3D; &quot;张三&quot;;            student.Display();            Console.Read();        &#125;    &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">姓名：张三编号：101<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上述代码如果写成<code>student stu = new student();</code>，程序就会出错，因为 student 类的构造函数是私有静态函数，受其保护级别的限制不能访问。</p><h2 id="24-C-析构函数"><a href="#24-C-析构函数" class="headerlink" title="24. C#析构函数"></a>24. C#析构函数</h2><p>与《<a href="http://m.biancheng.net/csharp/constructor.html">构造函数</a>》类似，C# 中的析构函数（也被称作“终结器”）同样是类中的一个特殊成员函数，<strong>主要用于在垃圾回收器回收类实例时执行一些必要的清理操作</strong>。</p><p>C# 中的析构函数具有以下特点：</p><ul><li>析构函数只能在类中定义，不能用于结构体；</li><li>一个类中只能定义一个析构函数；</li><li>析构函数不能继承或重载；</li><li>析构函数没有返回值；</li><li>析构函数是自动调用的，不能手动调用；</li><li>析构函数不能使用访问权限修饰符修饰，也不能包含参数。</li></ul><p>析构函数的名称同样与类名相同，不过需要在名称的前面加上一个波浪号<code>~</code>作为前缀，如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">class Car&#123;  ~Car() &#x2F;&#x2F; 析构函数  &#123;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;        class test    &#123;       public class student        &#123;            &#x2F;&#x2F;定义一个构造函数            public student() &#123; Console.WriteLine(&quot;类中的构造函数&quot;); &#125;            &#x2F;&#x2F;定义一个析构函数            ~student()&#123; Console.WriteLine(&quot;类中的析构函数&quot;); &#125;        &#125;                static void Main(string[] args)        &#123;            student stu1 &#x3D; new student();            student stu2 &#x3D; new student();        &#125;    &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">类中的析构函数类中的析构函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：析构函数不能对外公开，所以我们不能在析构函数上应用任何访问权限修饰符。</p><h2 id="25-C-this关键字"><a href="#25-C-this关键字" class="headerlink" title="25. C# this关键字"></a>25. C# this关键字</h2><p>在 C# 中，可以使用 this 关键字来表示当前对象，日常开发中我们可以使用 this 关键字来访问类中的成员属性以及函数。不仅如此 this 关键字还有一些其它的用法，下面就通过一些示例来分别演示一下。</p><h3 id="1-使用-this-表示当前类的对象"><a href="#1-使用-this-表示当前类的对象" class="headerlink" title="1) 使用 this 表示当前类的对象"></a>1) 使用 this 表示当前类的对象</h3><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class Website    &#123;        private string name;        private string url;        public Website(string n, string u)&#123;            this.name &#x3D; n;            this.url &#x3D; u;        &#125;        public void Display()&#123;            Console.WriteLine(name +&quot; &quot;+ url);        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用-this-关键字串联构造函数"><a href="#2-使用-this-关键字串联构造函数" class="headerlink" title="2) 使用 this 关键字串联构造函数"></a>2) 使用 this 关键字串联构造函数</h3><p>目的是为了实例化该类时 还会先自动调用一次this()中对应参数的方法，再继续执行原本的方法</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;    public class student        &#123;           public student()            &#123;                Console.WriteLine(&quot;无参的构造函数&quot;);            &#125;            &#x2F;&#x2F; 这里的 this()代表无参构造函数 student()            &#x2F;&#x2F; 先执行 student()，后执行 student(string text)            public student(string text) : this()            &#123;                Console.WriteLine(text);                Console.WriteLine(&quot;有参的构造函数&quot;);            &#125;        &#125;        class test    &#123;        static void Main(string[] args)        &#123;            student stu &#x3D; new student(&quot;2333&quot;);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">无参的构造函数2333有参的构造函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在一个类中如果需要实现多个自定义构造函数,通常做法是在构造函数中实现各自的业务逻辑,如果这些业务逻辑的实现并非截然不同的话,显然不符合**oop(面向对象编程思想)**编程思想,极不利于维护,当然,我们也可以通过将相同的逻辑部分封装成一个方法,但还有一种更为合理简单的方法，下面就通过this关键字来实现串联构造函数做一简单示例。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;    public class student    &#123;        public string name;        &#x2F;&#x2F;定义年龄为可空类型，这样就可以赋予其null值        public int? age;        &#x2F;&#x2F;下面前三个构造函数都是去调用参数最多的第四个构造函数，只取它们所需要的部分参数即可        &#x2F;&#x2F;这样的作法就是用this串联构造函数        public student() : this(&quot;&quot;, 0) &#123; &#125;        public student(string name) : this(&quot;evan&quot;, null) &#123; &#125;        public student(int? age) : this(&quot;&quot;, 20) &#123; &#125;        public student(string name,int? age)        &#123;            this.name &#x3D; name;            &#x2F;&#x2F;通过??判断传入的age是否null            &#x2F;&#x2F;如果属于null,则赋值100            this.age &#x3D; age ?? 100;        &#125;        public void Display()        &#123;            Console.WriteLine(&quot;Name:&#123;0&#125;,Age:&#123;1&#125;&quot;, name, age);        &#125;    &#125;    class test    &#123;                       static void Main(string[] args)        &#123;            student s1 &#x3D; new student();            s1.Display();            student s2 &#x3D; new student(20);            s2.Display();            student s3 &#x3D; new student(&quot;evan&quot;);            s3.Display();            student s4 &#x3D; new student(&quot;evan&quot;,20);            s4.Display();            Console.ReadLine();        &#125;    &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">Name:,Age:0Name:,Age:20Name:evan,Age:100Name:evan,Age:20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样的做法就是让一个接受参数最多的构造函数做”主构造函数”, 且在主构造函数中实现必须的业务逻辑,其余的构造函数只要使用this关键字把传入的参数转发给主构造函数,并且提供必须的其它参数，这样子,我们整个类中需要我们操心的就是那个主构造函数了,其余构造函数基本上可以为空。</p><p>注意:如果构造函数链中还有实现各自的逻辑,那么实际上是先执行主构造函数的代码,再执行各自逻辑，使用这种做法,真正的工作都交给了一个构造函数,类定义就会更简洁、更易维护、简化了编程任务。</p><p>参考<a href="https://blog.csdn.net/m0_56494923/article/details/125794784">https://blog.csdn.net/m0_56494923/article/details/125794784</a></p><h3 id="3-使用-this-关键字作为类的索引器"><a href="#3-使用-this-关键字作为类的索引器" class="headerlink" title="3) 使用 this 关键字作为类的索引器"></a>3) 使用 this 关键字作为类的索引器</h3><p>索引器可以同时给多个字段赋值，比属性功能多些</p><p>比较简单但并不完全正确的理解，索引器就是与对象同名的数组</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;    public class student        &#123;            int t1; &#x2F;&#x2F;index &#x3D; 0            int t2;&#x2F;&#x2F;index &#x3D; 1           &#x2F;&#x2F;索引器必须以this关键字定义，其实这个this就是类实例化之后的对象            public int this[int index]            &#123;                get                &#123;                    return (0 &#x3D;&#x3D; index) ? t1 : t2;                &#125;                set                &#123;                    if (0 &#x3D;&#x3D; index) t1 &#x3D; value;                    else t2 &#x3D; value;                &#125;            &#125;        &#125;        class test    &#123;        static void Main(string[] args)        &#123;            student a &#x3D; new student();            Console.WriteLine(&quot;t1:&#123;0&#125;,t2:&#123;1&#125;&quot;, a[0], a[1]);            &#x2F;&#x2F;调用set方法            a[0] &#x3D; 15;&#x2F;&#x2F;t1            a[1] &#x3D; 20;&#x2F;&#x2F;t2            &#x2F;&#x2F;调用get方法            Console.WriteLine(&quot;t1:&#123;0&#125;,t2:&#123;1&#125;&quot;, a[0], a[1]);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">t1:0,t2:0t1:15,t2:20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-使用-this-关键字作为原始类型的扩展方法"><a href="#4-使用-this-关键字作为原始类型的扩展方法" class="headerlink" title="4) 使用 this 关键字作为原始类型的扩展方法"></a>4) 使用 this 关键字作为原始类型的扩展方法</h3><p>注意要写在静态类中的静态方法，不然有些情况下访问不到</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;    public static class student    &#123;        public static string ExpandString(this string name)        &#123;            return name + &quot;2333&quot;;        &#125;    &#125;    class test    &#123;                      static void Main(string[] args)        &#123;            string str &#x3D; &quot;666&quot;;            string newstr &#x3D; str.ExpandString();            Console.WriteLine(newstr);            Console.ReadLine();        &#125;    &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">6662333<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="26-C-static：静态成员"><a href="#26-C-static：静态成员" class="headerlink" title="26. C# static：静态成员"></a>26. C# static：静态成员</h2><p>在 C# 中，我们可以使用 static 关键字声明属于类型本身而不是属于特定对象的静态成员，因此不需要使用对象来访问静态成员。在类、接口和结构体中可以使用 static 关键字修饰变量、函数、构造函数、类、属性、运算符和事件。</p><p><strong>注意：索引器和析构函数不能是静态的。</strong></p><p>若在定义某个成员时使用 static 关键字，则表示该类仅存在此成员的一个实例，也就是说当我们将一个类的成员声明为静态成员时，无论创建多少个该类的对象，静态成员只会被创建一次，这个静态成员会被所有对象共享。</p><h3 id="1）静态属性"><a href="#1）静态属性" class="headerlink" title="1）静态属性"></a>1）静态属性</h3><p>使用 static 定义的成员属性称为“静态属性”，静态属性可以直接通过<code>类名.属性名</code>的形式直接访问，不需要事先创建类的实例。静态属性不仅可以使用成员函数来初始化，还可以直接在类外进行初始化。</p><p>下面通过一个示例来演示一下静态变量的使用：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;    class student    &#123;        public static string Name;        public void setName(string name)        &#123;            Name &#x3D; name;        &#125;        public void getName()        &#123;            Console.WriteLine(Name);        &#125;    &#125;       class test    &#123;                      static void Main(string[] args)        &#123;            student.Name &#x3D; &quot;8&quot;;            Console.WriteLine(student.Name);            student stu &#x3D; new student();            stu.getName();            student stu1 &#x3D; new student();            stu1.getName();            stu1.setName(&quot;666&quot;);            stu1.getName();            stu1.getName();        &#125;    &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">888666666<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2）静态函数"><a href="#2）静态函数" class="headerlink" title="2）静态函数"></a>2）静态函数</h3><p>除了可以定义静态属性外，static 关键字还可以用来定义成员函数，使用 static 定义的成员函数称为“静态函数”，<strong>静态函数只能访问静态属性</strong>。</p><p>下面通过示例来演示静态函数的使用：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;    class student    &#123;        public static string Name;        public void setName(string name)        &#123;            Name &#x3D; name;        &#125;        public static void getName()        &#123;            Console.WriteLine(Name);        &#125;    &#125;       class test    &#123;                      static void Main(string[] args)        &#123;            student.Name &#x3D; &quot;8&quot;;            Console.WriteLine(student.Name);            student stu &#x3D; new student();            student.getName();&#x2F;&#x2F;注意这里不能写出stu.getName();            student stu1 &#x3D; new student();            student.getName();            stu1.setName(&quot;666&quot;);            student.getName();            student.getName();        &#125;    &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">888666666<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="27-C-继承"><a href="#27-C-继承" class="headerlink" title="27. C#继承"></a>27. C#继承</h2><p>在创建一个新类时，我们可以使用这个新定义的类继承一个已有的类，<strong>通过继承可以在创建新类时重用、扩展和修改被继承类中定义的成员</strong>。<strong>被继承的类称为“基类（父类）”，继承基类的类称为“派生类（子类）”</strong>。</p><p>需要注意的是，<strong>C# 中只支持单继承，</strong>也就是说一个派生类只能继承一个基类，但是继承是可以传递的，例如 ClassC 继承了 ClassB，而 ClassB 继承了 ClassA，那么 ClassC 将继承 ClassB 和 ClassA 中的所有成员。</p><p>要使用一个类继承另一个类需要使用到**冒号<code>:</code>**，如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">class 派生类 : 基类&#123;  ... ...c&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>与单继承相反，多重继承则是指一个类可以同时继承多个基类，<strong>C# 并不支持多重继承，但是可以借助接口来实现多重继承</strong>。下面就通过一个示例来演示一下：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            &#x2F;&#x2F;定义一个对象            Rectangle rec &#x3D; new Rectangle();            rec.setHeight(4);            rec.setWidth(3);            Console.WriteLine(&quot;长方形的面积为：&quot; + rec.getArea());            Console.WriteLine(&quot;长方形的周长为：&quot; + rec.getGirth());        &#125;    &#125;    &#x2F;&#x2F;定义一个基类Shape    class Shape &#123;        protected int width, height;        public void setWidth(int w)        &#123;            width &#x3D; w;        &#125;        public void setHeight(int h)        &#123;            height &#x3D; h;        &#125;    &#125;    &#x2F;&#x2F;定义接口    public interface Perimeter    &#123;        int getGirth();    &#125;    &#x2F;&#x2F;派生类    class Rectangle : Shape, Perimeter    &#123;        public int getArea()        &#123;            return width * height;        &#125;        &#x2F;&#x2F;派生类必须实现接口的所有成员        public int getGirth()        &#123;            return (width * height) * 2;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">长方形的面积为：12长方形的周长为：24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="28-C-多态"><a href="#28-C-多态" class="headerlink" title="28. C#多态"></a>28. C#多态</h2><p>多态（Polymorphism）是一个希腊词，指“多种形态”，在 C# 中具有两种类型的多态：</p><ul><li>编译时多态：通过 C# 中的方法重载和运算符重载来实现编译时多态，也称为静态绑定或早期绑定；</li><li>运行时多态：通过方法重载实现的运行时多态，也称为动态绑定或后期绑定。</li></ul><h3 id="1）编译时多态"><a href="#1）编译时多态" class="headerlink" title="1）编译时多态"></a>1）编译时多态</h3><p>在编译期间将函数与对象链接的机制称为早期绑定，也称为静态绑定。C# 提供了两种技术来实现编译时多态，分别是函数重载和运算符重载，本节主要来介绍一下函数重载，运算符重载会在后面进行讲解。</p><h4 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h4><p>在同一个作用域中，可以定义多个同名的函数，但是这些函数彼此之间必须有所差异，比如参数个数不同或参数类型不同等等，返回值类型不同除外。</p><p>【示例】定义名为 print 的函数来打印不同类型的数据：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        void print(int i)&#123;            Console.WriteLine(&quot;打印 int 类型的数据：&#123;0&#125;&quot;, i);        &#125;        void print(double d)&#123;            Console.WriteLine(&quot;打印 double 类型的数据：&#123;0&#125;&quot;, d);        &#125;        void print(string s)&#123;            Console.WriteLine(&quot;打印 string 类型的数据：&#123;0&#125;&quot;, s);        &#125;        static void Main(string[] args)         &#123;            Demo p &#x3D; new Demo();            p.print(123);            p.print(&quot;C语言中文网&quot;);            p.print(3.1415926);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2）运行时多态"><a href="#2）运行时多态" class="headerlink" title="2）运行时多态"></a>2）运行时多态</h3><p>C# 允许您使用 <strong>abstract</strong> 关键字来创建抽象类，抽象类用于实现部分接口。另外，抽象类包含抽象方法，可以在派生类中实现。</p><p>下面列举了一些有关抽象类的规则：</p><ul><li>不能创建一个抽象类的实例；</li><li>不能在一个抽象类外部声明抽象方法；</li><li>通过在类定义时使用 sealed 关键字，可以将类声明为密封类，密封类不能被继承，因此抽象类中不能声明密封类。</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace c.biancheng.net&#123;    &#x2F;&#x2F;创建一个抽象类Shape    abstract class Shape&#123;        &#x2F;&#x2F;抽象类包含抽象方法，可以在派生类中实现        public abstract int area();    &#125;    class Rectangle : Shape&#123;        private int width, height;        public Rectangle(int w, int h)&#123;            width &#x3D; w;            height &#x3D; h;        &#125;        &#x2F;&#x2F;在派生类中实现抽象类中的抽象方法        public override int area()&#123;            return (width * height);        &#125;    &#125;    class Demo    &#123;        static void Main(string[] args)         &#123;            Rectangle r &#x3D; new Rectangle(12,15);            double a &#x3D; r.area();            Console.WriteLine(&quot;长方形的面积为： &#123;0&#125;&quot;,a);            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="我们什么时候应该用抽象类呢？"><a href="#我们什么时候应该用抽象类呢？" class="headerlink" title="我们什么时候应该用抽象类呢？"></a>我们什么时候应该用抽象类呢？</h4><p><strong>如果一个类设计的目点是用来被其它类继承的</strong>，它代表一类对象的所具有的公共属性或方法，那个这个类就应该设置为抽象类。</p><h4 id="抽象类与其它的类有什么区别呢"><a href="#抽象类与其它的类有什么区别呢" class="headerlink" title="抽象类与其它的类有什么区别呢?"></a>抽象类与其它的类有什么区别呢?</h4><p>抽象类是不能够被实例化的。如果一个类中包含有抽象方法，那么这个类一定要声明为抽象类。同时，<strong>抽象方法一定需要在子类中重写</strong>，让抽象方法成为一个具体的实实在在的方法。</p><p>比如，我们要声明一个动物类animal，然后有其它的类Cat(猫)，Dog(狗)等具体的类来继承它，那么这个动物类就应该声明为抽象类。因为animal只是一个名词，不代表任何具体的对象，它只是代表所有动物所拥有的共同特征，所以animal类是根本不可能被实例化的。同时，如果所有动物都必须声明”叫”这样一个方法的话，那么，我们可以在animal类中声明一个抽象方法shout()，因为抽象方法是必须在子类中重写的，所以这就限制了所有继承自animal类都必须重写shout()方法。</p><h2 id="29-C-运算符重载"><a href="#29-C-运算符重载" class="headerlink" title="29. C#运算符重载"></a>29. C#运算符重载</h2><p>C# 中支持运算符重载，<strong>所谓运算符重载就是我们可以使用自定义类型来重新定义 C# 中大多数运算符的功能</strong>。运算符重载需要通过 <strong>operator</strong> 关键字后跟运算符的形式来定义的，我们可以将被重新定义的运算符看作是具有特殊名称的函数，与其他函数一样，该函数也有返回值类型和参数列表，如下例所示：</p><pre class="line-numbers language-none"><code class="language-none">public static Box operator+ (Box b, Box c) &#123;  Box box &#x3D; new Box();  box.length &#x3D; b.length + c.length;  box.breadth &#x3D; b.breadth + c.breadth;  box.height &#x3D; b.height + c.height;  return box;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述函数中实现了对加法运算符<code>+</code>的重载，该函数需要两个 Box 对象的属性，并返回一个 Box 对象。</p><h3 id="运算符重载的实现"><a href="#运算符重载的实现" class="headerlink" title="运算符重载的实现"></a>运算符重载的实现</h3><p>下面通过完整的示例来演示一下运算符重载：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace c.biancheng.net&#123;    class Box    &#123;        private double length;      &#x2F;&#x2F; 长度        private double breadth;     &#x2F;&#x2F; 宽度        private double height;      &#x2F;&#x2F; 高度        public double getVolume()        &#123;            return length * breadth * height;        &#125;        public void setLength( double len )        &#123;            length &#x3D; len;        &#125;        public void setBreadth( double bre )        &#123;            breadth &#x3D; bre;        &#125;        public void setHeight( double hei )        &#123;            height &#x3D; hei;        &#125;        &#x2F;&#x2F; 重载 + 运算符，把两个 Box 对象相加        public static Box operator+ (Box b, Box c)        &#123;            Box box &#x3D; new Box();            box.length &#x3D; b.length + c.length;            box.breadth &#x3D; b.breadth + c.breadth;            box.height &#x3D; b.height + c.height;            return box;        &#125;    &#125;    class Demo    &#123;        static void Main(string[] args)         &#123;            Box Box1 &#x3D; new Box();         &#x2F;&#x2F; 声明 Box1，类型为 Box            Box Box2 &#x3D; new Box();         &#x2F;&#x2F; 声明 Box2，类型为 Box            Box Box3 &#x3D; new Box();         &#x2F;&#x2F; 声明 Box3，类型为 Box            double volume &#x3D; 0.0;          &#x2F;&#x2F; 体积            &#x2F;&#x2F; Box1 详述            Box1.setLength(6.0);            Box1.setBreadth(7.0);            Box1.setHeight(5.0);            &#x2F;&#x2F; Box2 详述            Box2.setLength(12.0);            Box2.setBreadth(13.0);            Box2.setHeight(10.0);            &#x2F;&#x2F; Box1 的体积            volume &#x3D; Box1.getVolume();            Console.WriteLine(&quot;Box1 的体积： &#123;0&#125;&quot;, volume);            &#x2F;&#x2F; Box2 的体积            volume &#x3D; Box2.getVolume();            Console.WriteLine(&quot;Box2 的体积： &#123;0&#125;&quot;, volume);            &#x2F;&#x2F; 把两个对象相加            Box3 &#x3D; Box1 + Box2;            &#x2F;&#x2F; Box3 的体积            volume &#x3D; Box3.getVolume();            Console.WriteLine(&quot;Box3 的体积： &#123;0&#125;&quot;, volume);            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">Box1 的体积： 210Box2 的体积： 1560Box3 的体积： 5400<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="可重载与不可重载的运算符"><a href="#可重载与不可重载的运算符" class="headerlink" title="可重载与不可重载的运算符"></a>可重载与不可重载的运算符</h3><p>下表提供了 C# 运算符可重载性的相关信息：</p><table><thead><tr><th>运算符</th><th>可重载性</th></tr></thead><tbody><tr><td>+、-、!、~、++、–</td><td>这些一元运算符可以进行重载</td></tr><tr><td>+、-、*、/、%、&amp;、|、^、&lt;&lt;、&gt;&gt;、=、!=、&lt;、&gt;、&lt;=、&gt;=</td><td>这些二元运算符可以进行重载，需要注意的是某些运算符必须成对重载</td></tr><tr><td>&amp;&amp;、||</td><td>无法重载逻辑运算符</td></tr><tr><td>(type)var_name</td><td>强制类型转换运算符不能重载</td></tr><tr><td>+=、-=、*=、/=、%=、&amp;=、|=、^=、&lt;&lt;=、&gt;&gt;=</td><td>复合赋值运算符不能显式重载。 但在重载二元运算符时，也会隐式重载相应的复合赋值运算符，例如重载了<code>+</code>运算符也会隐式的重载<code>+=</code></td></tr><tr><td>^、=、.、?.、?  : 、??、??=、..、-&gt;、=&gt;、as、await、checked、unchecked、default、delegate、is、nameof、new、sizeof、stackalloc、switch、typeof</td><td>这些运算符无法进行重载</td></tr></tbody></table><p><strong>注意：比较运算符必须成对重载，也就是说，如果重载一对运算符中的任意一个，则另一个运算符也必须重载。比如<code>==</code>和<code>!=</code>运算符、<code>&lt;</code>和<code>&gt;</code>运算符、<code>&lt;=</code>和<code>&gt;=</code>运算符。</strong></p><h2 id="30-C-接口（interface）"><a href="#30-C-接口（interface）" class="headerlink" title="30. C#接口（interface）"></a>30. C#接口（interface）</h2><p>接口可以看作是一个约定，其中定义了类或结构体继承接口后需要实现功能，接口的特点如下所示：</p><ul><li>接口是一个引用类型，通过接口可以实现多重继承；</li><li>接口中只能声明”抽象”成员，所以不能直接对接口进行实例化；</li><li>接口中可以包含方法、属性、事件、索引器等成员；</li><li>接口名称一般习惯使用字母“I”作为开头（不是必须的，不这样声明也可以）；</li><li>接口中成员的访问权限默认为 public，所以我们在定义接口时不用再为接口成员指定任何访问权限修饰符，否则编译器会报错；</li><li>在声明接口成员的时候，<strong>不能为接口成员编写具体的可执行代码</strong>，也就是说，只要在定义成员时指明成员的名称和参数就可以了；</li><li>接口一旦被实现（被一个类继承），<strong>派生类就必须实现接口中的所有成员</strong>，除非派生类本身也是抽象类。</li></ul><h3 id="声明接口"><a href="#声明接口" class="headerlink" title="声明接口"></a>声明接口</h3><p>在 C# 中声明接口需要使用 **interface **关键字，语法结构如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public interface InterfaceName&#123;  returnType funcName1(type parameterList);  returnType funcName2(type parameterList);  ... ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，InterfaceName 为接口名称，returnType 为返回值类型，funcName 为成员函数的名称，parameterList 为参数列表。</p><p>【示例】下面通过具体的示例演示一下接口的使用：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace c.biancheng.net&#123;    &#x2F;&#x2F;定义一个接口Iwebsite    public interface Iwebsite&#123;        void setValue(string str1, string str2);        void disPlay();    &#125;    &#x2F;&#x2F;定义一个派生类Website，继承接口Iwebsite    public class Website : Iwebsite&#123;        public string name, url;        &#x2F;&#x2F;派生类必须实现接口的所有成员        public void setValue(string n, string u)&#123;            name &#x3D; n;            url &#x3D; u;        &#125;        public void disPlay()&#123;            Console.WriteLine(&quot;&#123;0&#125; &#123;1&#125;&quot;, name, url);        &#125;    &#125;    class Demo    &#123;        static void Main(string[] args)         &#123;            Website web &#x3D; new Website();            web.setValue(&quot;C语言中文网&quot;, &quot;http:&#x2F;&#x2F;c.biancheng.net&quot;);            web.disPlay();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">C语言中文网 http:&#x2F;&#x2F;c.biancheng.net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h3><p>在 C# 中，一个接口可以继承另一个接口，例如可以使用接口 1 继承接口 2，<strong>当用某个类来实现接口 1 时，必须同时实现接口 1 和接口 2 中的所有成员</strong>，下面通过一个示例来演示一下：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace c.biancheng.net&#123;    &#x2F;&#x2F;定义一个接口IParentInterface    public interface IParentInterface    &#123;        void ParentInterfaceMethod();    &#125;    &#x2F;&#x2F;定义一个接口IMyInterface，继承接口IParentInterface    public interface IMyInterface : IParentInterface    &#123;        void MethodToImplement();    &#125;    &#x2F;&#x2F;定义一个类Demo，继承接口IMyInterface    class Demo : IMyInterface    &#123;        static void Main(string[] args)         &#123;            Demo demo &#x3D; new Demo();            demo.MethodToImplement();            demo.ParentInterfaceMethod();        &#125;        &#x2F;&#x2F;必须同时实现接口 IParentInterface 和接口 IMyInterface 中的所有成员        public void MethodToImplement()&#123;            Console.WriteLine(&quot;实现 IMyInterface 接口中的 MethodToImplement 函数&quot;);        &#125;        public void ParentInterfaceMethod()&#123;            Console.WriteLine(&quot;实现 IParentInterface 接口中的 ParentInterfaceMethod 函数&quot;);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">实现 IMyInterface 接口中的 MethodToImplement 函数实现 IParentInterface 接口中的 ParentInterfaceMethod 函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="31-C-namespace：命名空间"><a href="#31-C-namespace：命名空间" class="headerlink" title="31. C# namespace：命名空间"></a>31. C# namespace：命名空间</h2><p>在 C# 中，可以将命名空间看作是一个范围，用来标注命名空间中成员的归属，一个命名空间中类与另一个命名空间中同名的类互不冲突，但在同一个命名空间中类的名称必须是唯一的。</p><p><strong>举个简单的例子，在一个简单的 C# 程序中，假如我们要输出某些数据，就需要使用<code>System.Console.WriteLine()</code>，</strong></p><p><strong>其中 System 就是命名空间，而 Console 是类的名字，WriteLine 则是具体要使用方法。</strong></p><p><strong>也就是说，如果要访问某个命名空间中的类，我们需要使用<code>namespacename.classname.funcname()</code>的形式。</strong></p><p><strong>当然也可以使用 using 关键字来引用需要的命名空间，例如<code>using System</code>，这样我们就可以直接使用<code>Console.WriteLine()</code>来输出指定的数据了。</strong></p><p>命名空间的结构类似于我们计算机系统中的目录，我们可以将某个目录看作是一个命名空间，在这个目录下可以存在若干不同的文件夹，这些文件夹就可以看作是命名空间下的类。而在每个文件夹下又存放着一些文件或文件夹，这些文件和文件夹则可以看作是类中的成员。</p><p>使用命名空间的好处是可以避免命名冲突，同时也便于查找类的位置。</p><h3 id="定义命名空间"><a href="#定义命名空间" class="headerlink" title="定义命名空间"></a>定义命名空间</h3><p>在 C# 中定义命名空间需要使用 namespace 关键字，语法格式如下：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">namespace namespaceName&#123;  &#x2F;&#x2F; 命名空间中的代码&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>若要调用指定命名空间下的成员，则需要使用<code>namespaceName.className.funcName()</code>的形式，下面通过一个示例来演示命名空间的使用：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)         &#123;            First.demoClass demo1 &#x3D; new First.demoClass();            Second.demoClass demo2 &#x3D; new Second.demoClass();            demo1.sayHello();            demo2.sayHello();        &#125;    &#125;&#125;&#x2F;&#x2F;定义一个命名空间Firstnamespace First&#123;    &#x2F;&#x2F;在命名空间First里定义一个类demoClass    public class demoClass&#123;        &#x2F;&#x2F;定义一个方法sayHello()        public void sayHello()&#123;            System.Console.WriteLine(&quot;First 命名空间下 demoClass 类中的 sayHello 函数&quot;);        &#125;    &#125;&#125;namespace Second&#123;    public class demoClass&#123;        public void sayHello()&#123;            System.Console.WriteLine(&quot;Second 命名空间下 demoClass 类中的 sayHello 函数&quot;);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">First 命名空间下 demoClass 类中的 sayHello 函数Second 命名空间下 demoClass 类中的 sayHello 函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="using关键字"><a href="#using关键字" class="headerlink" title="using关键字"></a>using关键字</h3><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using first;&#x2F;&#x2F;使用 using 关键字来引用需要的命名空间firstnamespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            a aa &#x3D; new a();            aa.hello();        &#125;    &#125;&#125;namespace first&#123;    public class a    &#123;        public void hello()        &#123;            Console.WriteLine(&quot;First&quot;);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">First<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命名空间嵌套"><a href="#命名空间嵌套" class="headerlink" title="命名空间嵌套"></a>命名空间嵌套</h3><p>命名空间可以嵌套使用，也就是说我们可以在一个命名空间中再定义一个或几个命名空间，如下所示：</p><pre class="line-numbers language-none"><code class="language-none">namespace namespaceName1&#123;  &#x2F;&#x2F; namespaceName1 下的代码  namespace namespaceName2&#123;    &#x2F;&#x2F; namespaceName2 下的代码  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>您可以使用点<code>.</code>运算符来访问嵌套的命名空间成员，例如<code>namespaceName1.namespaceName2</code>。下面通过示例来演示一下命名空间的嵌套使用：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using first;using first.second;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            a aa &#x3D; new a();            aa.hello();            b bb &#x3D; new b();            bb.hello();        &#125;    &#125;&#125;namespace first&#123;    public class a    &#123;        public void hello()        &#123;            Console.WriteLine(&quot;First&quot;);        &#125;    &#125;    namespace second    &#123;        public class b        &#123;            public void hello()            &#123;                Console.WriteLine(&quot;First.second&quot;);            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">FirstFirst.second<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="32-C-预处理器指令"><a href="#32-C-预处理器指令" class="headerlink" title="32. C#预处理器指令"></a>32. C#预处理器指令</h2><p>预处理指令的作用主要是向编译器发出指令，以便在程序编译开始之前对信息进行一些预处理操作。在 C# 中，预处理器指令均以<code>#</code>开头，并且预处理器指令之前只能出现空格不能出现任何代码。另外，预处理器指令不是语句，因此它们不需要以分号<code>;</code>结尾。</p><p>在 C# 中，预处理指令用于帮助条件编译。不同于 C 和 C++ 中的指令，在 C# 中不能使用这些指令来创建宏，而且预处理器指令必须是一行中唯一的代码，不能掺杂其它。</p><h3 id="C-中的预处理器指令"><a href="#C-中的预处理器指令" class="headerlink" title="C# 中的预处理器指令"></a>C# 中的预处理器指令</h3><p>下表中列出了 C# 中提供的预处理器指令：</p><table><thead><tr><th>预处理器指令</th><th>描述</th></tr></thead><tbody><tr><td>#define</td><td>用于定义一系列字符，可以将这些字符称为符号</td></tr><tr><td>#undef</td><td>用于取消一个已定义符号</td></tr><tr><td>#if</td><td>用于测试符号是否为真</td></tr><tr><td>#else</td><td>用于创建复合条件指令，与 #if 一起使用</td></tr><tr><td>#elif</td><td>用于创建复合条件指令</td></tr><tr><td>#endif</td><td>指定一个条件指令的结束</td></tr><tr><td>#line</td><td>用于修改编译器的行数以及（可选地）输出错误和警告的文件名</td></tr><tr><td>#error</td><td>用于在代码的指定位置生成一个错误</td></tr><tr><td>#warning</td><td>用于在代码的指定位置生成一级警告</td></tr><tr><td>#region</td><td>用于在使用 Visual Studio Code Editor 的大纲特性时，指定一个可展开或折叠的代码块</td></tr><tr><td>#endregion</td><td>用于标识 #region 块的结束</td></tr></tbody></table><h4 id="define-预处理器"><a href="#define-预处理器" class="headerlink" title="#define 预处理器"></a>#define 预处理器</h4><p>#define 预处理器指令用来创建符号常量，这个符号可以作为传递给 #if 指令的表达式，表达式将返回 true。#define 的语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">#define symbol<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>【示例】下面通过示例来演示 #define 预处理器指令的使用：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#define PIusing System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)         &#123;            #if (PI)                Console.WriteLine(&quot;PI 已定义&quot;);            #else                Console.WriteLine(&quot;PI 未定义&quot;);            #endif            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在C#中不能定义类似于这种</p><pre class="line-numbers language-none"><code class="language-none">#define inf 0x3f3f3f3f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会报错，<font color="red">应输入单行注释或行尾</font></p><ol><li><p>不能像在 C 和 C++ 中的通常做法一样，使用 <strong>#define</strong> 指令来声明常数值。最好是将 C# 中的常数定义为类或结构的静态成员。如果具有多个像这样的常数，可以考虑创建一个单独的“Constants”类来保存这些常数。</p></li><li><p>#define可以定义符号，但是无法对符号赋值。</p></li><li><p>对于<a href="https://www.baidu.com/link?url=_2JL35X9_3fvhAKufZ7U5feJnH1LnYBRCUHS6dwMwaFbsePIeSZDva6jQBkW4QSrHg_iM8XQECwDWfjHrgjcpCHz-GUOLIUPfHIDPKcBlO3&wd=&eqid=97e0d3c90004b7f700000004630dce11">#IF</a>，C# 中的 #if 语句是 Boolean，仅测试符号是否已定义。</p></li><li><p>#define单独用没什么意义，一般是和#if或者Conditional特性结合使用</p></li><li><p>#define必须定义在所有using命名空间前面；</p></li></ol><p>可以参考：<a href="https://article.itxueyuan.com/bKRL8x">C#—#define条件编译</a></p><h4 id="条件指令"><a href="#条件指令" class="headerlink" title="条件指令"></a>条件指令</h4><p>您可以使用 #if 来创建条件指令，条件指令可以用于测试一个或多个符号的值是否为 true 。如果符号的值为 true，那么编译器将评估 #if 指令和下一个指令之间的所有代码。在语法上 #if 预处理器语句与 C# 中的 if 条件判断语句比较相似，如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#if symbol_1  &#x2F;&#x2F; 要执行的代码#elif symbol_2  &#x2F;&#x2F; 要执行的代码#else  &#x2F;&#x2F; 要执行的代码#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，symbol 是要测试的符号的名称。</p><p>条件指令中仅可以使用运算符<code>==</code>（相等）和<code>!=</code>（不相等）来测试布尔值 true 或 false，例如 true 表示已定义该符号。另外，还可以使用<code>&amp;&amp; (and)</code>、<code>|| (or)</code>和<code>! (not)</code>运算符来同时测试多个符号，以及使用括号对符号和运算符分组。</p><pre class="line-numbers language-none"><code class="language-none">注意：以 #if 指令开头的条件指令必须以 #endif 指令显式结束。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面通过示例来演示条件指令的使用：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#define DEBUG#define VC_V10using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)         &#123;            #if (DEBUG &amp;&amp; !VC_V10)                Console.WriteLine(&quot;DEBUG 已定义&quot;);            #elif (!DEBUG &amp;&amp; VC_V10)                Console.WriteLine(&quot;VC_V10 已定义&quot;);            #elif (DEBUG &amp;&amp; VC_V10)                Console.WriteLine(&quot;DEBUG and VC_V10 已定义&quot;);            #else                Console.WriteLine(&quot;DEBUG and VC_V10 未定义&quot;);            #endif            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">DEBUG and VC_V10 已定义<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="33-C-正则表达式"><a href="#33-C-正则表达式" class="headerlink" title="33. C#正则表达式"></a>33. C#正则表达式</h2><p>正则表达式是一种匹配输入文本的模式，可以用于解析和验证给定文本以及模式之间是否匹配，模式可以包含运算符、字符字面值或结构。</p><p><strong>正则表达式的组成</strong></p><p>我们可以使用正则表达式检查给定字符串是否与指定模式相匹配。正则表达式的匹配模式由一系列字符组成，其中可以包括数子、文字、运算符、字符等等。我们可以使用这些模式来搜索字符串或文件，并查看是否找到了匹配的项。</p><p>开发中我们一般使用正则表达式来验证用户输入的信息是否正确，比如邮箱地址、手机号码等等。下面列举了用于定义正则表达式的各种类别的字符、运算符和结构：</p><ul><li>转义字符；</li><li>字符类；</li><li>定位符；</li><li>分组构造；</li><li>限定符；</li><li>反向引用构造；</li><li>备用构造；</li><li>替换；</li><li>杂项构造。</li></ul><h3 id="1-转义字符"><a href="#1-转义字符" class="headerlink" title="1) 转义字符"></a>1) 转义字符</h3><p>正则表达式中的反斜杠<code>\</code>用来表示它后面跟随的字符是特殊字符，具有特殊的含义</p><h3 id="2-字符类"><a href="#2-字符类" class="headerlink" title="2) 字符类"></a>2) 字符类</h3><p>字符类可以与一个字符串中的任何一个字符相匹配</p><h3 id="3-定位符"><a href="#3-定位符" class="headerlink" title="3) 定位符"></a>3) 定位符</h3><p>定位符可以根据字符串出现的具体位置来判断匹配是成功还是失败</p><h3 id="4-分组构造"><a href="#4-分组构造" class="headerlink" title="4) 分组构造"></a>4) 分组构造</h3><p>分组构造描述了正则表达式的子表达式，并捕获输入字符串的子字符串</p><h3 id="5-限定符"><a href="#5-限定符" class="headerlink" title="5) 限定符"></a>5) 限定符</h3><p>限定符用来指定在字符串中必须存在某个元素（可以是字符、组或字符类）才能匹配成功</p><h3 id="6-反向引用构造"><a href="#6-反向引用构造" class="headerlink" title="6) 反向引用构造"></a>6) 反向引用构造</h3><p>反向引用构造允许先前匹配的子表达式随后在相同的正则表达式中进行标识</p><h3 id="7-备用构造"><a href="#7-备用构造" class="headerlink" title="7) 备用构造"></a>7) 备用构造</h3><p>备用构造用于修改正则表达式以启用 either/or 匹配</p><h3 id="8-替换"><a href="#8-替换" class="headerlink" title="8) 替换"></a>8) 替换</h3><p>替换是替换模式中使用的正则表达式</p><p>具体可参考<a href="http://m.biancheng.net/csharp/regular-expressions.html">C编程网</a></p><h2 id="34-C-异常处理"><a href="#34-C-异常处理" class="headerlink" title="34. C#异常处理"></a>34. C#异常处理</h2><p>在 C# 中，异常是在程序运行出错时引发的，例如以一个数字除以零，<strong>所有异常都派生自 System.Exception 类</strong>。异常处理则是处理运行时错误的过程，使用异常处理可以使程序在发生错误时保持正常运行。</p><p><strong>C# 中的异常处理基于四个关键字构建，分别是 try、catch、finally 和 throw。</strong></p><ul><li>try：try 语句块中通常用来存放容易出现异常的代码，其后面紧跟一个或多个 catch 语句块；</li><li>catch：catch 语句块用来捕获 try 语句块中的出现的异常；</li><li>finally：finally 语句块用于执行特定的语句，不管异常是否被抛出都会执行；</li><li>throw：throw 用来抛出一个异常。</li></ul><h3 id="1）try-catch语句"><a href="#1）try-catch语句" class="headerlink" title="1）try/catch语句"></a>1）try/catch语句</h3><p>假设一段代码引发了异常，则可以使用 try 和 catch 组合来捕获这个异常，其语法格式如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">try&#123;  &#x2F;&#x2F; 引起异常的语句&#125;catch( ExceptionName e1 )&#123;  &#x2F;&#x2F; 错误处理代码&#125;catch( ExceptionName e2 )&#123;  &#x2F;&#x2F; 错误处理代码&#125;...catch( ExceptionName eN )&#123;  &#x2F;&#x2F; 错误处理代码&#125;finally&#123;  &#x2F;&#x2F; 要执行的语句&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上所示，可以列出多个 catch 语句块来捕获不同类型的异常，以防止 try 语句块在不同的情况下产生多个异常。</p><p>【示例】使用 try/catch 语句捕获程序中的异常：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;    class test    &#123;        static void Main(string[] args)        &#123;            &#x2F;&#x2F;try用来存放容易出现异常的代码            try            &#123;                int a &#x3D; 123;                int b &#x3D; 0;                int x &#x3D; a &#x2F; b;      &#x2F;&#x2F;分母为0，会抛出异常，line 14            &#125;            &#x2F;&#x2F;catch用来捕获 try 语句块中的出现的异常            catch(Exception e)            &#123;                Console.WriteLine(&quot;捕获到的异常：&quot; + e);            &#125;            &#x2F;&#x2F;finally用于执行特定的语句，不管异常是否被抛出都会执行            finally            &#123;                Console.WriteLine(&quot;这是一定会执行的语句&quot;);            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">捕获到的异常：System.DivideByZeroException: Attempted to divide by zero.   at test1.test.Main(String[] args) in 目录:line 14这是一定会执行的语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2）C-中的异常类"><a href="#2）C-中的异常类" class="headerlink" title="2）C#中的异常类"></a>2）C#中的异常类</h3><p><strong>C# 中的异常类主要是从 System.Exception 类派生的</strong>，比如 System.ApplicationException 和 System.SystemException 两个异常类就是从 System.Exception 类派生的。</p><ul><li>System.ApplicationException 类支持由程序产生的异常，因此我们<strong>自定义</strong>的异常都应继承此类；</li><li>System.SystemException 类是所有<strong>系统预定义</strong>异常的基类。</li></ul><p>下表中列举了一些从 Sytem.SystemException 类派生的预定义异常类：</p><table><thead><tr><th>异常类</th><th>描述</th></tr></thead><tbody><tr><td>System.IO.IOException</td><td>处理 I/O 错误</td></tr><tr><td>System.IndexOutOfRangeException</td><td>处理当方法引用超出范围的数组索引时产生的错误</td></tr><tr><td>System.ArrayTypeMismatchException</td><td>处理当数组类型不匹配时产生的错误</td></tr><tr><td>System.NullReferenceException</td><td>处理引用一个空对象时产生的错误</td></tr><tr><td>System.DivideByZeroException</td><td>处理当除以零时产生的错误</td></tr><tr><td>System.InvalidCastException</td><td>处理在类型转换期间产生的错误</td></tr><tr><td>System.OutOfMemoryException</td><td>处理空闲内存不足产生的错误</td></tr><tr><td>System.StackOverflowException</td><td>处理栈溢出产生的错误</td></tr></tbody></table><h3 id="3）自定义异常类"><a href="#3）自定义异常类" class="headerlink" title="3）自定义异常类"></a>3）自定义异常类</h3><p>除了可以使用系统预定义的异常类外，我们还可以自行定义异常类，自定义的异常类都应继承 System.ApplicationException 类。下面通过示例来演示一下自定义异常类的使用：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)        &#123;            TestUserDefinedException test &#x3D; new TestUserDefinedException();            try            &#123;                test.validate(12);            &#125;            catch (InvalidAgeException e)            &#123;                Console.WriteLine(&quot;InvalidAgeException: &#123;0&#125;&quot;, e);            &#125;            Console.WriteLine(&quot;其它代码&quot;);        &#125;    &#125;&#125;&#x2F;&#x2F;自定义异常类，自定义的异常都应继承System.ApplicationExceptionpublic class InvalidAgeException : ApplicationException&#123;    &#x2F;&#x2F;构造函数, Base 是子类构造函数中引用父类构造函数    public InvalidAgeException(string message) : base(message)    &#123;    &#125;&#125;public class TestUserDefinedException&#123;    public void validate(int age)    &#123;        if (age &lt; 18)        &#123;            throw (new InvalidAgeException(&quot;Sorry, Age must be greater than 18&quot;));        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在构造方法后面加上了:base(message)，该类如下：</p><p>public InvalidAgeException(string message)是InvalidAgeException的构造函数，base(message)是其父类的构造函数</p><p>public InvalidAgeException(string message) : base(message)指的是在InvalidAgeException中调用其父类的带string类型的构造函数。因为在子类不能直接继承父类的构造函数，</p><p>只能通过这种方式调用。</p><p>我的理解是，当父类有多个构造函数时，通过:base()来指定父类该调哪个构造函数</p><p>可参考<a href="https://www.cnblogs.com/topsyuan/p/11243890.html">C# 构造函数base()实例演示 </a></p><h3 id="4）抛出异常"><a href="#4）抛出异常" class="headerlink" title="4）抛出异常"></a>4）抛出异常</h3><p>如果异常是直接或间接派生自 System.Exception 类，则可以在 catch 语句块中使用 throw 语句抛出该异常，所谓抛出异常这里可以理解为重新引发该异常。throw 语句的语法格式如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">catch(Exception e) &#123;  ...  Throw e&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="35-C-文件读写"><a href="#35-C-文件读写" class="headerlink" title="35. C#文件读写"></a>35. C#文件读写</h2><p>文件是存储在磁盘中的具有特定名称和目录路径的数据集合，当我们使用程序对文件进行读取或写入时，程序会将文件以<strong>数据流（简称流）</strong>的形式读入内存中。我们<strong>可以将流看作是通过通信路径传递的字节序列</strong>，流主要分为<strong>输入流和输出流</strong>，输入流主要用于从文件读取数据（读操作），输出流主要用于向文件中写入数据（写操作）。</p><p>具体可参考C编程网<a href="http://m.biancheng.net/csharp/file-io.html">C#文件读写</a></p><h3 id="C-中的-I-O-类"><a href="#C-中的-I-O-类" class="headerlink" title="C# 中的 I/O 类"></a>C# 中的 I/O 类</h3><p>System.IO 命名空间中包含了各种用于文件操作的类，例如文件的创建、删除、读取、写入等等。如下表中所示：</p><table><thead><tr><th>I/O 类</th><th>描述</th></tr></thead><tbody><tr><td>BinaryReader</td><td>从二进制流中读取原始数据</td></tr><tr><td>BinaryWriter</td><td>以二进制格式写入原始数据</td></tr><tr><td>BufferedStream</td><td>临时存储字节流</td></tr><tr><td>Directory</td><td>对目录进行复制、移动、重命名、创建和删除等操作</td></tr><tr><td>DirectoryInfo</td><td>用于对目录执行操作</td></tr><tr><td>DriveInfo</td><td>获取驱动器的信息</td></tr><tr><td>File</td><td>对文件进行操作</td></tr><tr><td>FileInfo</td><td>用于对文件执行操作</td></tr><tr><td>FileStream</td><td>用于文件中任何位置的读写</td></tr><tr><td>MemoryStream</td><td>用于随机访问存储在内存中的数据流</td></tr><tr><td>Path</td><td>对路径信息执行操作</td></tr><tr><td>StreamReader</td><td>用于从字节流中读取字符</td></tr><tr><td>StreamWriter</td><td>用于向一个流中写入字符</td></tr><tr><td>StringReader</td><td>用于从字符串缓冲区读取数据</td></tr><tr><td>StringWriter</td><td>用于向字符串缓冲区写入数据</td></tr></tbody></table><h4 id="1）FileStream-类"><a href="#1）FileStream-类" class="headerlink" title="1）FileStream 类"></a>1）FileStream 类</h4><p>FileStream 类在 System.IO 命名空间下，使用它可以读取、写入和关闭文件。创建 FileStream 类对象的语法格式如下所示：</p><pre class="line-numbers language-none"><code class="language-none">FileStream &lt;object_name&gt; &#x3D; new FileStream(&lt;file_name&gt;, &lt;FileMode Enumerator&gt;, &lt;FileAccess Enumerator&gt;, &lt;FileShare Enumerator&gt;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明如下：</p><ul><li>object_name：创建的对象名称；</li><li>file_name：文件的路径（包含文件名在内）；</li><li>FileMode：枚举类型，用来设定文件的打开方式，可选值如下：<ul><li>Append：打开一个已有的文件，并将光标放置在文件的末尾。如果文件不存在，则创建文件；</li><li>Create：创建一个新的文件，如果文件已存在，则将旧文件删除，然后创建新文件；</li><li>CreateNew：创建一个新的文件，如果文件已存在，则抛出异常；</li><li>Open：打开一个已有的文件，如果文件不存在，则抛出异常；</li><li>OpenOrCreate：打开一个已有的文件，如果文件不存在，则创建一个新的文件并打开；</li><li>Truncate：打开一个已有的文件，然后将文件清空（删除原有内容），如果文件不存在，则抛出异常。</li></ul></li><li>FileAccess：枚举类型，用来设置文件的存取，可选值有 Read、ReadWrite 和 Write；</li><li>FileShare：枚举类型，用来设置文件的权限，可选值如下：<ul><li>Inheritable：允许子进程继承文件句柄，Win32 不直接支持此功能；</li><li>None：在文件关闭前拒绝共享当前文件，打开该文件的任何请求（由此进程或另一进程发出的请求）都将失败；</li><li>Read：允许随后打开文件读取，如果未指定此标志，则文件关闭前，任何打开该文件以进行读取的请求都将失败，需要注意的是，即使指定了此标志，仍需要附加权限才能够访问该文件；</li><li>ReadWrite：允许随后打开文件读取或写入，如果未指定此标志，则文件关闭前，任何打开该文件以进行读取或写入的请求都将失败，需要注意的是，即使指定了此标志，仍需要附加权限才能够访问该文件；</li><li>Write：允许随后打开文件写入，如果未指定此标志，则文件关闭前，任何打开该文件以进行写入的请求都将失败，需要注意的是，即使指定了此标志，仍可能需要附加权限才能够访问该文件；</li><li>Delete：允许随后删除文件。</li></ul></li></ul><p>例如，我们创建一个 FileStream 对象 F 来读取一个名为 sample.txt 的文件，示例代码如下所示：</p><pre class="line-numbers language-none"><code class="language-none">FileStream F &#x3D; new FileStream(&quot;sample.txt&quot;, FileMode.Open, FileAccess.Read, FileShare.Read);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>FileStream 类中的常用方法如下所示：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Close()</td><td>关闭当前流并释放与之关联的所有资源（如套接字和文件句柄）</td></tr><tr><td>CopyTo(Stream)</td><td>从当前流中读取字节并将其写入到另一流中</td></tr><tr><td>Dispose()</td><td>释放由 Stream 使用的所有资源</td></tr><tr><td>Equals(Object)</td><td>判断指定对象是否等于当前对象</td></tr><tr><td>Finalize()</td><td>确保垃圾回收器回收 FileStream 时释放资源并执行其他清理操作</td></tr><tr><td>Flush()</td><td>清除此流的缓冲区，使得所有缓冲数据都写入到文件中</td></tr><tr><td>GetHashCode()</td><td>默认哈希函数</td></tr><tr><td>GetType()</td><td>获取当前实例的 Type</td></tr><tr><td>Lock(Int64, Int64)</td><td>防止其他进程读取或写入 FileStream</td></tr><tr><td>Read(Byte[], Int32, Int32)</td><td>从流中读取字节块并将该数据写入给定缓冲区中</td></tr><tr><td>ReadByte()</td><td>从文件中读取一个字节，并将读取位置提升一个字节</td></tr><tr><td>ToString()</td><td>返回表示当前对象的字符串</td></tr><tr><td>Unlock(Int64, Int64)</td><td>允许其他进程访问以前锁定的某个文件的全部或部分</td></tr><tr><td>Write(Byte[], Int32, Int32)</td><td>将字节块写入文件流</td></tr><tr><td>WriteByte(Byte)</td><td>将一个字节写入文件流中的当前位置</td></tr></tbody></table><p>【示例】使用 FileStream 类读取指定的文件：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using System.IO;&#x2F;&#x2F;System.IO 命名空间中包含了各种用于文件操作的类namespace test1&#123;    class test    &#123;        static void Main(string[] args)        &#123;            FileStream file &#x3D; new FileStream(&quot;test.txt&quot;, FileMode.OpenOrCreate, FileAccess.ReadWrite);                        &#x2F;*            创建一个文件，名为test.txt；            FileMode.OpenOrCreate 打开一个已有的文件，            如果文件不存在，则创建一个新的文件并打开；                        FileAccess.ReadWrite 允许随后打开文件读取或写入，            如果未指定此标志，则文件关闭前，任何打开该文件以进行            读取或写入的请求都将失败，需要注意的是，即使指定了此            标志，仍需要附加权限才能够访问该文件；            *&#x2F;                        for(int i &#x3D; 0; i &lt; 20; i++)            &#123;                file.WriteByte((byte)i);                &#x2F;&#x2F;将一个字节写入文件流中的当前位置                &#x2F;&#x2F;byte为8位无符号整数，即一个字节            &#125;            file.Position &#x3D; 0;            &#x2F;&#x2F;当前FileStream所在的流位置设置为0            for(int i &#x3D; 0; i &lt; 20; i++)            &#123;                Console.Write(file.ReadByte() + &quot; &quot;);                &#x2F;&#x2F;从流中读取字节块并将该数据写入给定缓冲区中            &#125;            file.Close();            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从文件夹中可以看到文件已被创建</p><p><strong>System.IO 命名空间下的 StreamReader 和 StreamWriter 类可以用于文本文件的数据读写。这些类继承自抽象基类 Stream，Stream 类提供了对文件流读写的功能。</strong></p><h3 id="文件流读写"><a href="#文件流读写" class="headerlink" title="文件流读写"></a>文件流读写</h3><h4 id="1）StreamReader"><a href="#1）StreamReader" class="headerlink" title="1）StreamReader"></a>1）StreamReader</h4><p>StreamReader 类继承自抽象基类 TextReader，用来从文件中读取一系列<strong>字符</strong>，下表列出了 StreamReader 类中一些常用的方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public override void Close()</td><td>关闭 StreamReader 对象和基础流，并释放任何与之相关的系统资源</td></tr><tr><td>public override int Peek()</td><td>返回下一个可用的字符，但不使用它</td></tr><tr><td>public override int Read()</td><td>从输入流中读取下一个字符，并把字符位置往前移一个字符</td></tr></tbody></table><p>如果想查阅完整的方法列表，可以访问 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.io.streamreader">C# 的官网文档</a>。</p><p>test.txt的内容为123</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using System.IO;&#x2F;&#x2F;System.IO 命名空间中包含了各种用于文件操作的类namespace test1&#123;    class test    &#123;        static void Main(string[] args)        &#123;            try            &#123;                &#x2F;&#x2F;创建StreamReader类的对象                StreamReader sr &#x3D; new StreamReader(&quot;test.txt&quot;);                string line;                &#x2F;&#x2F;从文件中读取内容                while ((line &#x3D; sr.ReadLine()) !&#x3D; null)                    &#x2F;&#x2F;从当前流中读取一行字符并将数据作为字符串返回                &#123;                    Console.WriteLine(line);                &#125;            &#125;            catch(Exception e)            &#123;                &#x2F;&#x2F;展示出错信息                Console.WriteLine(&quot;无法读取文件&quot;);                Console.WriteLine(e.Message);            &#125;            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2）StreamWriter"><a href="#2）StreamWriter" class="headerlink" title="2）StreamWriter"></a>2）StreamWriter</h4><p>StreamWriter 类同样继承自抽象类 TextWriter，用来向文件中写入一系列<strong>字符</strong>，下表列出了 StreamWriter 类中一些常用的方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public override void Close()</td><td>关闭当前的 StreamWriter 对象和基础流</td></tr><tr><td>public override void Flush()</td><td>清理当前所有的缓冲区，使所有缓冲数据写入基础流</td></tr><tr><td>public virtual void Write(bool value)</td><td>将布尔值的文本表示形式写入文本流</td></tr><tr><td>public override void Write(char value)</td><td>将一个字符写入流</td></tr><tr><td>public virtual void Write(decimal value)</td><td>将一个小数值的文本表示形式写入文本流</td></tr><tr><td>public virtual void Write(double value)</td><td>将一个 8 字节浮点值的文本表示形式写入文本流</td></tr><tr><td>public virtual void Write(int value)</td><td>将一个 4 字节有符号整数的文本表示形式写入文本流</td></tr><tr><td>public override void Write(string value)</td><td>将一个字符串写入文本流</td></tr><tr><td>public virtual void WriteLine()</td><td>将行结束符写入文本流</td></tr></tbody></table><p>完整的方法列表请查阅 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.io.streamwriter">C# 的官方文档</a>。</p><h3 id="二进制文件读写"><a href="#二进制文件读写" class="headerlink" title="二进制文件读写"></a>二进制文件读写</h3><h4 id="1-BinaryReader-类"><a href="#1-BinaryReader-类" class="headerlink" title="1) BinaryReader 类"></a>1) BinaryReader 类</h4><p>BinaryReader 类用于从文件读取二进制数据，类中的常用方法如下所示：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public override void Close()</td><td>关闭 BinaryReader 对象和基础流</td></tr><tr><td>public virtual int Read()</td><td>从基础流中读取字符，并根据所使用的编码和从流中读取的特定字符，将流的当前位置前移</td></tr><tr><td>public virtual bool ReadBoolean()</td><td>从当前流中读取一个布尔值，并将流的当前位置前移一个字节</td></tr><tr><td>public virtual byte ReadByte()</td><td>从当前流中读取下一个字节，并将流的当前位置前移一个字节</td></tr><tr><td>public virtual byte[] ReadBytes(int count)</td><td>从当前流中读取指定数目的字节到一个字节数组中，并将流的当前位置前移指定数目的字节</td></tr><tr><td>public virtual char ReadChar()</td><td>从当前流中读取下一个字节，并把流的当前位置按照所使用的编码和从流中读取的指定的字符往前移</td></tr><tr><td>public virtual char[] ReadChars(int count)</td><td>从当前流中读取指定数目的字符，并以字符数组的形式返回数据，并把流的当前位置按照所使用的编码和从流中读取的指定的字符往前移</td></tr><tr><td>public virtual double ReadDouble()</td><td>从当前流中读取一个 8 字节浮点值，并把流的当前位置前移八个字节</td></tr><tr><td>public virtual int ReadInt32()</td><td>从当前流中读取一个 4 字节有符号整数，并把流的当前位置前移四个字节</td></tr><tr><td>public virtual string ReadString()</td><td>从当前流中读取一个字符串，字符串以长度作为前缀，同时编码为一个七位的整数</td></tr></tbody></table><p>完整的方法列表请查阅 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.io.binaryreader">C# 的官方文档</a>。</p><h4 id="2-BinaryWriter-类"><a href="#2-BinaryWriter-类" class="headerlink" title="2) BinaryWriter 类"></a>2) BinaryWriter 类</h4><p>BinaryWriter 类用于向文件写入二进制数据，类中的常用方法如下表所示：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public override void Close()</td><td>关闭 BinaryWriter 对象和基础流</td></tr><tr><td>public virtual void Flush()</td><td>清理当前编写器的所有缓冲区，使得所有缓冲数据写入基础设备</td></tr><tr><td>public virtual long Seek(int offset,SeekOrigin origin)</td><td>设置当前流中的位置</td></tr><tr><td>public virtual void Write(bool value)</td><td>将一个字节的布尔值写入到当前流中，0 表示 false，1 表示 true</td></tr><tr><td>public virtual void Write(byte value)</td><td>将一个无符号字节写入到当前流中，并把流的位置前移一个字节</td></tr><tr><td>public virtual void Write(byte[] buffer)</td><td>将一个字节数组写入到基础流中</td></tr><tr><td>public virtual void Write(char ch)</td><td>将一个 Unicode 字符写入到当前流中，并把流的当前位置按照所使用的编码和要写入到流中的指定字符往前移</td></tr><tr><td>public virtual void Write(char[] chars)</td><td>将一个字符数组写入到当前流中，并把流的当前位置按照所使用的编码和要写入到流中的指定字符往前移</td></tr><tr><td>public virtual void Write(double value)</td><td>将一个 8 字节浮点值写入到当前流中，并把流位置前移八个字节</td></tr><tr><td>public virtual void Write(int value)</td><td>将一个 4 字节有符号整数写入到当前流中，并把流位置前移四个字节</td></tr><tr><td>public virtual void Write(string value)</td><td>将一个有长度前缀的字符串按 BinaryWriter 的当前编码写如到流中，并把流的当前位置按照所使用的编码和要写入到流中的指定字符往前移</td></tr></tbody></table><p>完整的方法列表请查阅 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.io.binarywriter">C# 的官方文档</a>。</p><p>【示例】下面通过示例演示二进制文件的读取和写入：</p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">B b &#x3D; new B();A a &#x3D; new A(b); &#x2F;&#x2F;这和 A a&#x3D;new A(new B())一样class A&#123;&#x2F;&#x2F;在A中有这样一个有构造函数    public A(B b)&#123;    ...    &#125;&#125;class B&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录下自己搭建博客的过程和注意事项</title>
      <link href="/2022/01/23/%E8%AE%B0%E5%BD%95%E4%B8%8B%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2022/01/23/%E8%AE%B0%E5%BD%95%E4%B8%8B%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>自己搭建此博客花了很长，前前后后也踩了不少坑。采用的是hexo(读音/hækso)/框架+matery主题，编写文章采用的是typora，记录下主要的过程和注意事项。</p><h2 id="2、博客环境搭建"><a href="#2、博客环境搭建" class="headerlink" title="2、博客环境搭建"></a>2、博客环境搭建</h2><p> Hexo 是一个静态博客框架，基于 Node.js，将 Markdown 文章通过渲染引擎，生成一个静态网页，再结合 Git 命令（ssh），Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="1-下载-Git-与Node-js"><a href="#1-下载-Git-与Node-js" class="headerlink" title="1.下载 Git 与Node.js"></a>1.下载 Git 与Node.js</h3><p>Node官网链接：<a href="https://nodejs.org/en/download/">Node.js 官网</a> </p><p>Git官网链接：<a href="https://gitit-scm.com/">Git 官网</a> </p><ul><li>验证安装，并测试 Node.js 和Git是否加入环境变量，当出现如下图的情况，Node.js 安装大功告成。</li></ul><pre class="line-numbers language-none"><code class="language-none">node -vgit --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>**注意： 如果报错的话，那么手动将 Node.js和Git 的安装路径添加到环境变量中，右击点击我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量，在系统变量下找到名为 path 的变量名，如下图：</p><pre class="line-numbers language-none"><code class="language-none">E:\node-v12.19.0-win-x64C:\Program Files\Git\bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-GitHub-账号的创建以及-Git-的配置"><a href="#2-GitHub-账号的创建以及-Git-的配置" class="headerlink" title="2. GitHub 账号的创建以及 Git 的配置"></a>2. GitHub 账号的创建以及 Git 的配置</h3><p> <strong>2.1 GitHub 账号的创建</strong></p><p> GitHub 账号的创建比较简单，网上也有许多教程，此处便不再赘述</p><p> <strong>2.2 Git 的配置</strong></p><ul><li><p><strong>配置Git 用户名和邮箱</strong></p><p>在桌面点击鼠标右键，点击 Git Bash Here，然后分别输入下面的两个命令，并回车：</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;此处填写你注册时的用户名&quot;git config --global user.email &quot;此处填写你注册时的邮箱&quot;# 一般只要不报错，可以跳过下面寻找.gitconfig文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p> 然后找到<code>.gitconfig</code> 文件，文件存放位置在 <code>C:/Users/[username]/.gitconfig</code>（未找到的话，请开启显示隐藏文件的功能），用编辑器打开，看到如下图所示的内容，即配置成功！</p><pre class="line-numbers language-none"><code class="language-none">[user]name &#x3D; xxxemail &#x3D; xxx@xxx.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>配置GitHub</strong></p><p><strong>创建：</strong></p><ul><li>新建一个名为你的用户名.github.io的仓库</li><li>比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://test.github.io/">http://test.github.io</a> 了，是不是很方便？由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。</li></ul><p><strong>注意：</strong></p><ul><li>注册的邮箱一定要验证，否则不会成功；</li><li>仓库名字必须是：username.github.io，其中username是你的用户名；</li><li>仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久；</li><li>创建页面如下：</li></ul><p><img src="/images/%E8%AE%B0%E5%BD%95%E4%B8%8B%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/1.jpg"></p><p><strong>在github上创建仓库</strong></p></li><li><p><strong>配置SSH 免密登录</strong></p><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。</p><p><strong>简单的来说就是给予你当前电脑访问你GitHub 仓库的权限 ~</strong></p><p><strong>操作步骤</strong></p></li></ul><ol><li><p>在 git bash here 中创建一个ssh密钥</p><p> 指令：<code>cd ~/.ssh</code></p><p>如果本地有的话，它会自动进入到了ssh目录下；</p><p> 若没有则创建： <code>ssh-keygen -t rsa -C &quot;邮箱&quot;</code> 此处邮箱填写自己的邮箱</p><p>然后enter三连</p><p>生成两个文件： id_rsa id_rsa.pub 存放在 C:\Users\admin.ssh 文件夹下</p><p><strong>注意：pub文件放置的，就是我们的公开的ssh码，也是给管理员这个ssh，让他来添加</strong></p></li><li><p>在GitHub 或者 Gitee 上添加 SSH key</p><p>Title：随意填写</p><p>Key：将本地的id_rsa.pub文件用记事本打开，复制全部内容粘贴到GitHub 仓库的SSH Keys 位置</p><p>如下图所示：</p><p><img src="/images/%E8%AE%B0%E5%BD%95%E4%B8%8B%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/2.jpg"></p><p><strong>添加密钥到github</strong></p></li></ol><p><strong>至此，你的全部环境均以搭建好，接下来让我们快速开始搭建博客吧 ~</strong></p><h2 id="3、本地安装-Hexo-博客框架并推送到-GitHub"><a href="#3、本地安装-Hexo-博客框架并推送到-GitHub" class="headerlink" title="3、本地安装 Hexo 博客框架并推送到 GitHub"></a>3、本地安装 Hexo 博客框架并推送到 GitHub</h2><h3 id="3-1-博客初始化"><a href="#3-1-博客初始化" class="headerlink" title="3.1 博客初始化"></a>3.1 博客初始化</h3><ol><li><p>命令行安装cnpm （加速以后的插件下载，建议git bash here 处安装）</p><p>命令：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p>安装后验证：<code>cnpm -v</code> 出现版本号说明安装成功</p></li><li><p>命令行安装hexo （安装博客框架）</p><p>命令：<code>cnpm install -g hexo-cli</code></p><p>安装后验证：<code>hexo -v</code> 出现版本号说明安装成功</p></li><li><p>在电脑的某个地方新建一个名为HexoData的文件夹（名字可以随便取），比如我的是<code>D:\JAVA项目\HexoData</code></p><p>这个文件夹将来就作为你存放代码的地方，所以最好不要随便放</p></li><li><p>在D:\JAVA项目\HexoData 文件夹下右键打开 Git Bash</p><p>并依次执行以下命令</p><p><code>hexo init</code> 初始化命令，hexo会自动下载一些文件到这个目录，包括node_modules等</p><p><code>hexo g</code> 生成命令</p><p><code>hexo s</code> 启动服务</p><p><strong>说明：</strong><code>hexo s</code> 是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到内容，说明博客初始化以及成功！</p><p>很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，</p><p>因为4000这个端口太常见了， 只需要关闭4000端口并重新启动即可</p><p><strong>到此博客的初始化便完成了，此时你可以本地开启服务并访问，下一步便是推送到GitHub 上！</strong></p></li></ol><p><strong>3.2 将博客部署到 github 个人主页上</strong></p><ul><li><p>第一步：在D:\JAVA项目\HexoData目录下安装 hexo-deployer-git 插件 （git bash here 处安装）</p><p>命令：<code>npm install hexo-deployer-git --save</code></p><p>说明：必须安装，否则执行hexo d 的话会报错</p></li><li><p>第二步：编辑D:\JAVA项目\HexoData目录下的 _config.yml 文件, 在文件末尾修改配置文件：</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repo: github上对应仓库的ssh 链接      &#x2F;&#x2F;也可使用https地址，如：https:&#x2F;&#x2F;github.com&#x2F;Github用户名&#x2F;Github用户名.github.io.git              branch: main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明：</strong>仓库的ssh链接如下</p><p><img src="/images/%E8%AE%B0%E5%BD%95%E4%B8%8B%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/2.jpg"></p><p><strong>SSH链接</strong></p><p><strong>切记：分支branch切记修改为 main，之前github的默认主分支为master，现已经改为main</strong> ！！！</p></li><li><p>第三步：在D:\JAVA项目\HexoData目录下, 将本地 blog 推送到 github仓库</p><p>输入命令：<code>hexo d</code></p><p>也可能需要输入 username &amp; pwd</p><p>推送成功后, 在浏览器中输入对应域名, 即可访问 <a href="https://motherkillermaker.github.io/">https://motherkillermaker.github.io/</a></p><p><strong>至此，你便初步搭建好了一个属于自己的博客！（本地服务不用启动依然可以访问）</strong></p><p><strong>下一步便是进行博客的美化 ~</strong></p><p><strong>此处附加上 hexo 框架常用的指令：</strong></p><table><thead><tr><th align="left">指令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>hexo clean &amp;&amp; hexo g</code></td><td align="left">清除本地项目并重新生成 （重新部署时使用）</td></tr><tr><td align="left"><code>hexo g</code></td><td align="left">重新生成</td></tr><tr><td align="left"><code>Hexo s</code></td><td align="left">开启本地预览</td></tr><tr><td align="left"><code>Hexo d</code></td><td align="left">推送到github</td></tr></tbody></table></li></ul><h2 id="4、hexo-博客的主题安装以及个性化修改"><a href="#4、hexo-博客的主题安装以及个性化修改" class="headerlink" title="4、hexo 博客的主题安装以及个性化修改"></a>4、hexo 博客的主题安装以及个性化修改</h2><h3 id="4-1-主题下载与安装"><a href="#4-1-主题下载与安装" class="headerlink" title="4.1 主题下载与安装"></a>4.1 主题下载与安装</h3><p> 点击 <a href="https://github.com/blinkfox/hexo-theme-matery">传送门</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的站点目录文件夹下使用 <code>git clone</code> 命令来下载（推荐）：</p><p> 直接在..\博客主目录\themes目录下执行下面的命令（git bash here 处）：</p><p> <code>git clone git@github.com:blinkfox/hexo-theme-matery.git</code> 下载完成后便可看到对应的主题文件</p><h3 id="4-2-主题的配置与使用"><a href="#4-2-主题的配置与使用" class="headerlink" title="4.2 主题的配置与使用"></a>4.2 主题的配置与使用</h3><h4 id="4-2-1-切换主题"><a href="#4-2-1-切换主题" class="headerlink" title="4.2.1 切换主题"></a>4.2.1 切换主题</h4><p><strong>注意：</strong>首先需要明白什么是站点配置文件，什么是主题配置文件。</p><p>站点配置文件就是根目录下的配置文件，比如我的博客文件在 <code>..\博客主目录</code> 下，那么站点配置文件就是 <code>D:\JAVA项目\HexoData\_config.yml</code>，</p><p>主题配置文件就是 <code>D:\JAVA项目\HexoData\themes\hexo-theme-matery\_config.yml</code>。</p><p>另外注意，配置文件中的标点符号不要出现中文格式的标点符号，不然运行会出错。</p><p>主题下载完成后，将站点配置文件中的 <code>theme</code> 值修改为你下载主题的文件名，此处为 <code>hexo-theme-matery</code>，那么值就修改为 <code>theme: hexo-theme-matery</code></p><p>一些站点配置文件的其他地方的修改：</p><ul><li>语言选择：如果为中文用户，则在 <code>language:</code> 后添加值 <code>zh-CN</code>，如果不修改，默认为英语；</li><li>网址修改：<code>url:</code> 的值为你的网址名，如 <code>http://xxxx.github.io</code>，如果有域名，则修改为你的域名即可;</li><li>站点配置文件有个 <code>per_page属性</code>，建议修改为 6 的倍数，这样网站在适应设备时，有较好的显示效果。</li></ul><h4 id="4-2-2-创建标签页面-（首页的标签选项"><a href="#4-2-2-创建标签页面-（首页的标签选项" class="headerlink" title="4.2.2 创建标签页面 （首页的标签选项"></a>4.2.2 创建标签页面 （首页的标签选项</h4><ul><li><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下（source目录下 右键 git bash here）：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;tags&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p></li></ul><pre class="line-numbers language-none"><code class="language-none">---title: tagsdate: 2018-09-30 18:23:38type: &quot;tags&quot;layout: &quot;tags&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code>文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;categories&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: categoriesdate: 2018-09-30 17:25:30type: &quot;categories&quot;layout: &quot;categories&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</li></ul><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;about&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: aboutdate: 2018-09-30 17:25:30type: &quot;about&quot;layout: &quot;about&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</li></ul><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;contact&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: contactdate: 2018-09-30 17:25:30type: &quot;contact&quot;layout: &quot;contact&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的 “<strong>菜单</strong>” 配置，取消关于留言板的注释即可。</p><h4 id="4-2-3-添加emoji表情支持"><a href="#4-2-3-添加emoji表情支持" class="headerlink" title="4.2.3 添加emoji表情支持"></a>4.2.3 添加emoji表情支持</h4><p>安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-none"><code class="language-none">ithubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用 <code>emoji</code> 语法写的表情了。</p><h4 id="4-2-4-代码高亮"><a href="#4-2-4-代码高亮" class="headerlink" title="4.2.4 代码高亮"></a>4.2.4 代码高亮</h4><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，matery主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&#123;</code> 和 <code>&#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="line-numbers language-none"><code class="language-none">highlight:  enable: false  line_number: true  auto_detect: false  tab_replace: &#39;&#39;  wrap: true  hljs: falseprismjs:  enable: true  preprocess: true  line_number: true  tab_replace: &#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而我之前就是因为安装了<code>hexo-prism-plugin</code>导致了一系列的问题，所以如果安装了<code>hexo-prism-plugin</code>，务必先删干净了</p><h4 id="4-2-5-开启主页搜索功能"><a href="#4-2-5-开启主页搜索功能" class="headerlink" title="4.2.5 开启主页搜索功能"></a>4.2.5 开启主页搜索功能</h4><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-none"><code class="language-none">search:  path: search.xml  field: post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-2-6-开启中文链接转拼音功能"><a href="#4-2-6-开启中文链接转拼音功能" class="headerlink" title="4.2.6 开启中文链接转拼音功能"></a>4.2.6 开启中文链接转拼音功能</h4><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-none"><code class="language-none">permalink_pinyin:  enable: true  separator: &#39;-&#39; # default: &#39;-&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p><h4 id="4-2-7-开启文章字数统计插件"><a href="#4-2-7-开启文章字数统计插件" class="headerlink" title="4.2.7 开启文章字数统计插件"></a>4.2.7 开启文章字数统计插件</h4><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a> 插件。</p><p>安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p><pre class="line-numbers language-none"><code class="language-none">wordCount:  enable: false # 将这个值设置为 true 即可.  postWordCount: true  min2read: true  totalCount: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-8-修改页脚"><a href="#4-2-8-修改页脚" class="headerlink" title="4.2.8 修改页脚"></a>4.2.8 修改页脚</h4><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h4 id="4-2-9-新增和修改社交链接"><a href="#4-2-9-新增和修改社交链接" class="headerlink" title="4.2.9 新增和修改社交链接"></a>4.2.9 新增和修改社交链接</h4><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><p>新增我的CSDN链接</p><pre class="line-numbers language-none"><code class="language-none">&lt;% if (theme.socialLink.csdn) &#123; %&gt;    &lt;a href&#x3D;&quot;&lt;%&#x3D; theme.socialLink.csdn %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;关注我的CSDN: &lt;%&#x3D; theme.socialLink.csdn %&gt;&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fab fa-csdn&quot;&gt;CSDN&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着你需要在主题配置文件下新增CSDN链接</p><pre class="line-numbers language-none"><code class="language-none">socialLink:  qq: 624597867  weixin: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;Yafine-imgs&#x2F;images&#x2F;wechat.png  github:   email:   facebook: # https:&#x2F;&#x2F;www.facebook.com&#x2F;xxx  twitter: # https:&#x2F;&#x2F;twitter.com&#x2F;xxx  weibo: # https:&#x2F;&#x2F;weibo.com&#x2F;xxx  csdn: https:&#x2F;&#x2F;blog.csdn.net&#x2F;victoryxa  # 新增CSDN链接 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-10-添加评论系统"><a href="#4-2-10-添加评论系统" class="headerlink" title="4.2.10 添加评论系统"></a>4.2.10 添加评论系统</h4><p>首先去<a href="https://livere.com/">来必力官网</a>，点击导航栏上的安装，会出现如下图的页面：</p><ul><li><p>City 版：是一款适合所有人使用的免费版本；</p></li><li><p>Premium 版：是一款能够帮助企业实现自动化管理的多功能收费版本。</p><p><img src="/images/%E8%AE%B0%E5%BD%95%E4%B8%8B%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/20200115142313.png"></p><p>注册完之后，会提示你填写网站的相关信息，如网站链接，网站名称等等，填写完毕之后，会给你一段代码，如下图所示:</p><p><img src="/images/%E8%AE%B0%E5%BD%95%E4%B8%8B%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/image-20200115142709585.png"></p><pre class="line-numbers language-none"><code class="language-none"># Livere comment configuration, the default is not activated# Livere 来必力评论模块的配置，默认为不激活livere:  enable: true   # true即为开启评论系统  uid: #这里填写你的uid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>然后在<strong>主题配置文件</strong>相关的部署命令，然后查看效果即可。</p><h3 id="4-3-自定义修改"><a href="#4-3-自定义修改" class="headerlink" title="4.3 自定义修改"></a>4.3 自定义修改</h3><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h4 id="4-3-1-修改主题颜色"><a href="#4-3-1-修改主题颜色" class="headerlink" title="4.3.1 修改主题颜色"></a>4.3.1 修改主题颜色</h4><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. *&#x2F;.bg-color &#123;    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);&#125;&#x2F;*如果想去掉banner图的颜色渐变效果，请将以下的css属性注释掉或者删除掉即可*&#x2F;@-webkit-keyframes rainbow &#123;   &#x2F;* 动态切换背景颜色. *&#x2F;&#125;@keyframes rainbow &#123;    &#x2F;* 动态切换背景颜色. *&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Tips：建议使用第三方工具（如IDE）打开css文件，使用查找功能（ctrl + f）来快速定位</strong></p><h4 id="4-3-2-修改banner图和文章特色图"><a href="#4-3-2-修改banner图和文章特色图" class="headerlink" title="4.3.2 修改banner图和文章特色图"></a>4.3.2 修改banner图和文章特色图</h4><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 `` 代码中：</p><pre class="line-numbers language-none"><code class="language-none">$(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(&#x2F;medias&#x2F;banner&#x2F;&#39; + new Date().getDay() + &#39;.jpg)&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明： banner图即为你博客主页所显示的图片 （默认为 <code>0.jpg</code> ）</p><h4 id="4-3-3-修改网站上的相关信息"><a href="#4-3-3-修改网站上的相关信息" class="headerlink" title="4.3.3 修改网站上的相关信息"></a>4.3.3 修改网站上的相关信息</h4><p>首先看图：</p><p><img src="/images/%E8%AE%B0%E5%BD%95%E4%B8%8B%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/20200115115221.png"></p><p>相关配置信息如下：</p><pre class="line-numbers language-none"><code class="language-none">#这是根目录下的配置文件信息title: 过客~励む   #这是网站标题subtitle: 励む     #这是网站副标题subtitler# 下面两个description,keywords，需要填上，如果想让搜索引擎收录，这个做SEO优化必不可忽视的两个属性description: 专注于Web,分享生活,分享知识  #网站描述keywords: [HTML, CSS, JavaScript, JQuery, React, Vue.js等]   #网站的关键词author: YangAir    #作者，文章版权所显示的language: zh-CN     #网站语言，不填写，默认为英文timezone:      #时区，可以不填写# 这是主题配置文件的相关信息# 配置网站favicon和网站LOGO# 此处我用的CDN，也可以使用本地文件favicon: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;cdn@3.3.4&#x2F;source&#x2F;favicon.pnglogo: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;cdn@3.3.4&#x2F;source&#x2F;logo.png# 网站副标题，打字效果# 如果有符号 ‘ ，请在 ’ 前面加上 \subtitle:   enable: true  loop: true # 是否循环  showCursor: true # 是否显示光标  startDelay: 300 # 开始延迟  typeSpeed: 100 # 打字速度  backSpeed: 50 # 删除速度  sub1: 志之所向，金石为开，谁能御之？  sub2: 花开不是为了花落，而是为了开的更加灿烂。  sub3: 没有伞的孩子必须努力奔跑！  sub4: 欲望以提升热忱，毅力以磨平高山。  sub5: 如果放弃太早，你永远都不知道自己会错过什么。  sub6: 没有礁石，就没有美丽的浪花；没有挫折，就没有壮丽的人生。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><p>网站打字效果副标题默认有两个，即 <code>sub1</code> 和 <code>sub2</code>，如果想写多个，则需要修改两处地方，首先修改配置文件，如上面所示，在 <code>sub1</code> 和 <code>sub2</code> 后面继续添加即可，然后在去主题目录下的 <code>layout</code> 文件夹下的<code>_partial</code> 文件夹，修改 <code>bg-cover-content.ejs</code> 文件，大约在 12 行左右，如下面所示：</p><pre class="line-numbers language-none"><code class="language-none"> &lt;div class&#x3D;&quot;description center-align&quot;&gt;     &lt;% if (theme.subtitle.enable) &#123; %&gt;         &lt;span id&#x3D;&quot;subtitle&quot;&gt;&lt;&#x2F;span&gt;         &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;typed.js@2.0.11&quot;&gt;&lt;&#x2F;script&gt;        &lt;script&gt;            var typed &#x3D; new Typed(&quot;#subtitle&quot;, &#123;                strings: [&#39;&lt;%&#x3D; theme.subtitle.sub1 %&gt;&#39;,                          &#39;&lt;%&#x3D; theme.subtitle.sub2 %&gt;&#39;,                          &#39;&lt;%&#x3D; theme.subtitle.sub3 %&gt;&#39;,                          &#39;&lt;%&#x3D; theme.subtitle.sub4 %&gt;&#39;,                          &#39;&lt;%&#x3D; theme.subtitle.sub5 %&gt;&#39;,                          &#39;&lt;%&#x3D; theme.subtitle.sub6 %&gt;&#39;],                 startDelay: &lt;%&#x3D; theme.subtitle.startDelay %&gt;,                 typeSpeed: &lt;%&#x3D; theme.subtitle.typeSpeed %&gt;,                 loop: &lt;%&#x3D; theme.subtitle.loop %&gt;,                    backSpeed: &lt;%&#x3D; theme.subtitle.backSpeed %&gt;,                 showCursor: &lt;%&#x3D; theme.subtitle.showCursor %&gt;              &#125;);          &lt;&#x2F;script&gt;      &lt;% &#125; else &#123; %&gt;            &lt;%&#x3D; config.description %&gt;      &lt;% &#125; %&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-4-在关于我页面添加个人简历"><a href="#4-3-4-在关于我页面添加个人简历" class="headerlink" title="4.3.4 在关于我页面添加个人简历"></a>4.3.4 在关于我页面添加个人简历</h4><p>打开 <code>theme/matery/layout/about.ejs</code> 文件，大约在 13 行。有一个 `` 标签，找出其对应结尾的标签，大约在 61 行左右，然后在新增如下代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;card&quot;&gt;     &lt;div class&#x3D;&quot;card-content&quot;&gt;         &lt;div class&#x3D;&quot;card-content article-card-content&quot;&gt;             &lt;div class&#x3D;&quot;title center-align&quot; data-aos&#x3D;&quot;zoom-in-up&quot;&gt;                 &lt;i class&#x3D;&quot;fa fa-address-book&quot;&gt;&lt;&#x2F;i&gt;&amp;nbsp;&amp;nbsp;&lt;%- __(&#39;个人简历&#39;) %&gt;              &lt;&#x2F;div&gt;                 &lt;div id&#x3D;&quot;articleContent&quot; data-aos&#x3D;&quot;fade-up&quot;&gt;                     &lt;%- page.content %&gt;                 &lt;&#x2F;div&gt;           &lt;&#x2F;div&gt;      &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意粘贴的位置和空格要正确，这里的位置随你自己设置，你也可以把简历作为第一个 card，然后 <code>/source/about/index.md</code> 下面写上你的简历了（就像写博客一样）。</p><h2 id="5、博客的编写以及推送"><a href="#5、博客的编写以及推送" class="headerlink" title="5、博客的编写以及推送"></a>5、博客的编写以及推送</h2><ul><li>第一步：创建<code>.md</code>文件</li></ul><p>方法1：定位到我们的hexo根目录，Git Bash Here 中执行命令：</p><p><code>hexo new &#39;my-first-blog&#39;</code> 其中引号内为文章名称</p><p>hexo会帮我们在<code>D:\JAVA项目\HexoData\source\_posts</code> 下生成相关.md文件，用这个命令的好处是帮我们自动生成了时间，方法1默认生成如下内容：</p><pre class="line-numbers language-none"><code class="language-none">title: my-first-blotdate: 2021-11-29 18:21:30tags:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>方法2：当然你也可以直接自己打开<code>D:\JAVA项目\HexoData\source\_posts</code> 目录新建<code>.md</code>文件</p><ul><li><p>第二步：编写并保存</p><p>我们只需要用typora打开这个文件就可以开始写博客了，写完后Ctrl+S 保存关闭即可</p></li><li><p>第三步：清理然后再生成一下，生成后推送到远程仓库即可，hexo根目录下右键Git Bash Here 中依次输入如下命令：</p><pre class="line-numbers language-none"><code class="language-none">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>补充：<code>hexo new page &#39;postName&#39;</code>命令和<code>hexo new &#39;postName&#39;</code>的区别？</strong></p></li></ul><p> <code>hexo new page &#39;My-second-blog&#39;</code>最终部署时生成：<code>hexo\public\my-second-blog\index.html</code>，但是它不会作为文章出现在博文目录。</p><p><strong>Matery的文章语法介绍</strong></p><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><h2 id="6、其他注意事项"><a href="#6、其他注意事项" class="headerlink" title="6、其他注意事项"></a>6、其他注意事项</h2><h3 id="6-1-关于使用typora-hexo在博客中插入图片"><a href="#6-1-关于使用typora-hexo在博客中插入图片" class="headerlink" title="6.1 关于使用typora+hexo在博客中插入图片"></a>6.1 关于使用typora+hexo在博客中插入图片</h3><p><font color="red">需要注意的是，每次在插入图片前都需要将图片根目录需要改为hexo/source，打开typora默认的图片根目录为自己打开文件的目录，这是我多次尝试发现的，可能不对</font></p><p>关于图片和图片路径的设置，有以下教程。</p><p>事先声明，所有博客文件均保存在 <code>hexo/_posts/</code>文件夹下</p><p>首先在 <code>hexo &gt; source</code>目录下建一个文件夹叫images，用来保存博客中的图片。</p><p>然后打开Typora的 <code>文件 &gt; 偏好设置</code>，进行如下设置。</p><p><img src="/images/%E8%AE%B0%E5%BD%95%E4%B8%8B%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyNjIzMzYz,size_16,color_FFFFFF,t_70.png"></p><p>这样的话所有的博客中的图片都将会保存到 <code>/source/images/该博客md文件名/图片名称</code></p><p>但是仅仅这样设置还不够，这样设置在typora中倒是能看图片了，但是使用的却是相对于当前md文件的相对路径，可是如果启动hexo，是要用服务器访问的，而服务器显然无法根据这个相对路径正确访问到图片，因此还需要在typora中进行进一步设置。</p><p>在typora菜单栏点击 <code>格式-&gt;图像-&gt;设置图片根目录</code>，将<code>hexo/source</code>作为其根目录即可。</p><p>转自：<a href="https://www.cnblogs.com/yinyoupoet/p/13287385.html">https://www.cnblogs.com/yinyoupoet/p/13287385.html</a></p><h3 id="6-2-关于代码高亮的补充"><a href="#6-2-关于代码高亮的补充" class="headerlink" title="6.2 关于代码高亮的补充"></a>6.2 关于代码高亮的补充</h3><p>如果觉得不够的话，可以自行去官网下载，然后替换主题目录下的prism.css文件即可</p><p>例如我的prism.css在这个文件夹下</p><pre class="line-numbers language-none"><code class="language-none">H:\8yyy&#39;s blog\themes\hexo-theme-matery\source\libs\prism<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://prismjs.com/download.html#themes=prism&amp;languages=markup+css+clike+javascript">https://prismjs.com/download.html#themes=prism&amp;languages=markup+css+clike+javascript</a></p><h4 id="6-2-1-关于C-代码的代码高亮"><a href="#6-2-1-关于C-代码的代码高亮" class="headerlink" title="6.2.1 关于C#代码的代码高亮"></a>6.2.1 关于C#代码的代码高亮</h4><p>经过多次尝试，在该主题下只能使用csharp进行代码高亮，不能选择c#</p><h3 id="6-3-关于hexo的降级操作"><a href="#6-3-关于hexo的降级操作" class="headerlink" title="6.3 关于hexo的降级操作"></a>6.3 关于hexo的降级操作</h3><p>如果有需要的话，首先卸载当前版本的hexo</p><pre class="line-numbers language-none"><code class="language-none">npm uninstall hexo --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载旧版本的hexo，例如hexo4.2.0</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo@4.2.0 --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-4-matery主题似乎不支持-一级标题"><a href="#6-4-matery主题似乎不支持-一级标题" class="headerlink" title="6.4 matery主题似乎不支持# 一级标题"></a>6.4 matery主题似乎不支持# 一级标题</h3><p>我试了很久似乎都不行，左侧的目录不显示，当然目录很可能就是一级标题，可用</p><pre class="line-numbers language-none"><code class="language-none">## 二级标题### 三级标题#### 四级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2022-10-4更新 在主题下根目录_config.yml中的文章toc功能，可修改支持的标题（hoc –&gt; heading），默认就是我试出来的h2,h3,h4</p><h3 id="6-5-代码块不能使用有序-无序列表"><a href="#6-5-代码块不能使用有序-无序列表" class="headerlink" title="6.5 代码块不能使用有序/无序列表"></a>6.5 代码块不能使用有序/无序列表</h3><p>不然格式会变得非常乱</p><h3 id="6-6-关于matery主题的一些优化"><a href="#6-6-关于matery主题的一些优化" class="headerlink" title="6.6 关于matery主题的一些优化"></a>6.6 关于matery主题的一些优化</h3><h4 id="6-6-1-配置网站favicon和网站LOGO"><a href="#6-6-1-配置网站favicon和网站LOGO" class="headerlink" title="6.6.1 配置网站favicon和网站LOGO"></a>6.6.1 配置网站favicon和网站LOGO</h4><p>需要记住一些配置以便以后的修改</p><p><img src="/images/%E8%AE%B0%E5%BD%95%E4%B8%8B%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/image-20221017205152680.png"></p><p>favicon.png和logo.png的图片规格均为200*200像素</p><h4 id="6-6-2-关于tags的多写"><a href="#6-6-2-关于tags的多写" class="headerlink" title="6.6.2 关于tags的多写"></a>6.6.2 关于tags的多写</h4><p>格式如下</p><pre class="line-numbers language-none"><code class="language-none">tags: - test- light<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>参考文献：</strong></p><ol><li><p><a href="https://yafine-blog.cn/posts/4ab2.html#toc-heading-79">https://yafine-blog.cn/posts/4ab2.html#toc-heading-79</a></p></li><li><p>theme-matery 主题官方使用说明 <a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></p></li><li><p><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p></li><li><p><a href="https://yafine-blog.cn/posts/4ab2.html#toc-heading-79">https://yafine-blog.cn/posts/4ab2.html#toc-heading-79</a></p></li><li><p><a href="https://laughingtiger.gitee.io/2021/11/29/ru-he-kuai-su-da-jian-shu-yu-zi-ji-de-bo-ke/">https://laughingtiger.gitee.io/2021/11/29/ru-he-kuai-su-da-jian-shu-yu-zi-ji-de-bo-ke/</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Matery主题下代码高亮的总结</title>
      <link href="/2022/01/19/%E5%85%B3%E4%BA%8EMatery%E4%B8%BB%E9%A2%98%E4%B8%8B%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E7%9A%84%E6%80%BB%E7%BB%93/"/>
      <url>/2022/01/19/%E5%85%B3%E4%BA%8EMatery%E4%B8%BB%E9%A2%98%E4%B8%8B%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="测试一"><a href="#测试一" class="headerlink" title="测试一"></a>测试一</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span> </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>     cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试二"><a href="#测试二" class="headerlink" title="测试二"></a>测试二</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">%</span> codeblock Javascript Array Syntax lang<span class="token operator">:</span>js http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>j<span class="token punctuation">.</span>mp<span class="token operator">/</span>pPUUmW <span class="token constant">MDN</span> Documentation <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>arrayLength<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>element0<span class="token punctuation">,</span> element1<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> elementN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endcodeblock <span class="token operator">%</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试三"><a href="#测试三" class="headerlink" title="测试三"></a>测试三</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">%</span> codeblock <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endcodeblock <span class="token operator">%</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="测试四"><a href="#测试四" class="headerlink" title="测试四"></a>测试四</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#123;% codeblock lang:C++ %&#125;#include &lt;bits&#x2F;stdc++.h&gt; int main()&#123;     int a &#x3D; 10;     cout &lt;&lt; a &lt;&lt; endl;&#125;&#123;% endcodeblock %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试五"><a href="#测试五" class="headerlink" title="测试五"></a>测试五</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#123;% codeblock lang:Cpp %&#125;#include &lt;bits&#x2F;stdc++.h&gt; int main()&#123;     int a &#x3D; 10;     cout &lt;&lt; a &lt;&lt; endl;&#125;&#123;% endcodeblock %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试六"><a href="#测试六" class="headerlink" title="测试六"></a>测试六</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#123;% codeblock lang:CPP %&#125;#include &lt;bits&#x2F;stdc++.h&gt; int main()&#123;     int a &#x3D; 10;     cout &lt;&lt; a &lt;&lt; endl;&#125;&#123;% endcodeblock %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试七"><a href="#测试七" class="headerlink" title="测试七"></a>测试七</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">PreparedStatement</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> demo <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from login"</span><span class="token punctuation">;</span>            conn <span class="token operator">=</span> <span class="token class-name">MyJDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",user:"</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",pwd:"</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">MyJDBCUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span>ps<span class="token punctuation">,</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试八"><a href="#测试八" class="headerlink" title="测试八"></a>测试八</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>我的第一个 HTML 页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>body 元素的内容会显示在浏览器中。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>title 元素的内容会显示在浏览器的标题栏中。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试九"><a href="#测试九" class="headerlink" title="测试九"></a>测试九</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span> </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>     cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试十"><a href="#测试十" class="headerlink" title="测试十"></a>测试十</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span> </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>     cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结-重点"><a href="#总结-重点" class="headerlink" title="总结(重点)"></a>总结(重点)</h2><p>源自官方：<a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></p><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&#123;</code> 和 <code>&#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="line-numbers language-none"><code class="language-none">highlight:  enable: false  line_number: true  auto_detect: false  tab_replace: &#39;&#39;  wrap: true  hljs: falseprismjs:  enable: true  preprocess: true  line_number: true  tab_replace: &#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而我之前就是hexo-prism-plugin没卸载干净 除了html js之外的其他语言没法高亮</p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码高亮 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++ vector整理</title>
      <link href="/2022/01/18/c-vector%E6%95%B4%E7%90%86/"/>
      <url>/2022/01/18/c-vector%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/c-vector%E6%95%B4%E7%90%86/vector.jpeg"></p><h3 id="一、vector初始化"><a href="#一、vector初始化" class="headerlink" title="一、vector初始化"></a>一、vector初始化</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*定义了10个整型元素的向量（尖括号中为元素类型名，它可以是任何合法的数据类型），  但没有给出初值，其值是不确定的。*/</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义了10个整型元素的向量,且给出每个元素的初值为1</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">c</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">////用b向量来创建c向量，整体复制性赋值</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">d</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义了d值为b中第0个到第2个（共3个）元素</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>d<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>d<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">e</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>f<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从数组中获得初值</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>e<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>e<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结果如下"><a href="#结果如下" class="headerlink" title="结果如下"></a>结果如下</h4><p><img src="/images/c-vector%E6%95%B4%E7%90%86/image-20220118195338553.png"></p><h3 id="二、一般的操作"><a href="#二、一般的操作" class="headerlink" title="二、一般的操作"></a>二、一般的操作</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">（<span class="token number">1</span>）a<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//b为向量，将b的0~2个元素构成的向量赋给a</span>   （<span class="token number">2</span>）a<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//是a只含4个元素，且每个元素为2</span>   （<span class="token number">3</span>）a<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回a的最后一个元素</span>   （<span class="token number">4</span>）a<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回a的第一个元素</span>   （<span class="token number">5</span>）a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//返回a的第i个元素，当且仅当a[i]存在2013-12-07</span>   （<span class="token number">6</span>）a<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//清空a中的元素</span>   （<span class="token number">7</span>）a<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//判断a是否为空，空则返回ture,不空则返回false</span>   （<span class="token number">8</span>）a<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//删除a向量的最后一个元素</span>   （<span class="token number">9</span>）a<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*删除a中第1个（从第0个算起）到第2个元素，也就是说删除的元素从a.begin()+1算起（包括它）一   直到a.begin()+3（不包括它）*/</span>   （<span class="token number">10</span>）a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在a的最后一个向量后插入一个元素，其值为5</span>   （<span class="token number">11</span>）a<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在a的第1个元素（从第0个算起）的位置插入数值5，如a为1,2,3,4，插入元素后为1,5,2,3,4</span>   （<span class="token number">12</span>）a<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在a的第1个元素（从第0个算起）的位置插入3个数，其值都为5</span>   （<span class="token number">13</span>）a<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*b为数组，在a的第1个元素（从第0个算起）的位置插入b的第3个元素到第5个元素（不包括b+6），如       b为1,2,3,4,5,9,8，插入元素后为1,4,5,9,2,3,4,5,9,8*/</span>   （<span class="token number">14</span>）a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回a中元素的个数；</span>   （<span class="token number">15</span>）a<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回a在内存中总共可以容纳的元素个数</span>   （<span class="token number">16</span>）a<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将a的现有元素个数调至10个，多则删，少则补，其值随机</span>   （<span class="token number">17</span>）a<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将a的现有元素个数调至10个，多则删，少则补，其值为2</span>   （<span class="token number">18</span>）a<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*将a的容量（capacity）扩充至100，也就是说现在测a.capacity();的时候返回值是100.这种操    作只有在需要给a添加大量数据的时候才显得有意义，因为这将避免内存多次容量扩充操作（当a的容量    不足时电脑会自动扩容，当然这必然降低性能） */</span>   （<span class="token number">19</span>）a<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//b为向量，将a中的元素和b中的元素进行整体性交换</span>   （<span class="token number">20</span>）a<span class="token operator">==</span>b<span class="token punctuation">;</span> <span class="token comment">//b为向量，向量的比较操作还有!=,>=,&lt;=,>,&lt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、赋值操作"><a href="#三、赋值操作" class="headerlink" title="三、赋值操作"></a>三、赋值操作</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//利用迭代器</span><span class="token keyword">void</span> <span class="token function">cz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> b<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">c</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1,2,3,4</span><span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">&lt;</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">/*vector&lt;int> d;for(int i=0;i&lt;c.size();i++)d.push_back(c.)*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结果如下-1"><a href="#结果如下-1" class="headerlink" title="结果如下"></a>结果如下</h4><p><img src="/images/c-vector%E6%95%B4%E7%90%86/image-20220118200843007.png"></p><h3 id="四、几种重要的算法"><a href="#四、几种重要的算法" class="headerlink" title="四、几种重要的算法"></a>四、几种重要的算法</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">几种重要的算法，使用时需要包含头文件：#include<span class="token operator">&lt;</span>algorithm<span class="token operator">></span>（<span class="token number">1</span>）<span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//对a中的从a.begin()（包括它）到a.end()（不包括它）的元素进行从小到大排列</span>（<span class="token number">2</span>）<span class="token function">reverse</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/*对a中的从a.begin()（包括它）到a.end()（不包括它）的元素倒置，但不排列    如a中元素为1,3,2,4,倒置后为4,2,3,1*/</span>（<span class="token number">3</span>）<span class="token function">copy</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/*把a中的从a.begin()（包括它）到a.end()（不包括它）的元素复制到b中，    从b.begin()+1的位置（包括它）开始复制，覆盖掉原有元素*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">cz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//init </span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">b</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"b容器初始内容:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>     <span class="token comment">//排序 </span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"排序后的b容器:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//默认升序，也可以加个cmp函数进行降序 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//逆序 </span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"逆序后的b容器:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token function">reverse</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将b容器的所有值进行倒置 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//初始化c容器 </span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">c</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"c容器初始内容:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//复制</span><span class="token function">copy</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将b容器的前3个值，复制到c容器的第一个数之后</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"复制后的c容器:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//因为c的长度为2，所以结果为1，9 </span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//查找 vector本身是没有find这一方法，其find是依靠algorithm来实现的</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator loc<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>loc<span class="token operator">!=</span>b<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>loc<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"can not find"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结果如下-2"><a href="#结果如下-2" class="headerlink" title="结果如下"></a>结果如下</h4><p><img src="/images/c-vector%E6%95%B4%E7%90%86/image-20220118203107350.png"></p><p>参考内容：</p><p><a href="https://blog.csdn.net/wkq0825/article/details/82255984">https://blog.csdn.net/wkq0825/article/details/82255984</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA乙级1055 毕业照</title>
      <link href="/2022/01/18/PTA%E4%B9%99%E7%BA%A71055-%E6%AF%95%E4%B8%9A%E7%85%A7/"/>
      <url>/2022/01/18/PTA%E4%B9%99%E7%BA%A71055-%E6%AF%95%E4%B8%9A%E7%85%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h2><center>1055 集体照 (25 分)</center><p>拍集体照时队形很重要，这里对给定的 <em>N</em> 个人 <em>K</em> 排的队形设计排队规则如下：</p><ul><li>每排人数为 <em>N</em>/<em>K</em>（向下取整），多出来的人全部站在最后一排；</li><li>后排所有人的个子都不比前排任何人矮；</li><li>每排中最高者站中间（中间位置为 <em>m</em>/2+1，其中 <em>m</em> 为该排人数，除法向下取整）；</li><li>每排其他人以中间人为轴，按身高非增序，先右后左交替入队站在中间人的两侧（例如5人身高为190、188、186、175、170，则队形为175、188、190、186、170。这里假设你面对拍照者，所以你的左边是中间人的右边）；</li><li>若多人身高相同，则按名字的字典序升序排列。这里保证无重名。</li></ul><p>现给定一组拍照人，请编写程序输出他们的队形。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个输入包含 1 个测试用例。每个测试用例第 1 行给出两个正整数 <em>N</em>（≤104，总人数）和 <em>K</em>（≤10，总排数）。随后 <em>N</em> 行，每行给出一个人的名字（不包含空格、长度不超过 8 个英文字母）和身高（[30, 300] 区间内的整数）。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出拍照的队形。即K排人名，其间以空格分隔，行末不得有多余空格。注意：假设你面对拍照者，后排的人输出在上方，前排输出在下方。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre class="line-numbers language-in" data-language="in"><code class="language-in">10 3Tom 188Mike 170Eva 168Tim 160Joe 190Ann 168Bob 175Nick 186Amy 160John 159<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre class="line-numbers language-out" data-language="out"><code class="language-out">Bob Tom Joe NickAnn Mike EvaTim Amy John<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">先把身高利用<span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数进行降序，如果身高相同再利用<span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数进行比较<span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">student</span> s1<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">student</span> s2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>h<span class="token operator">></span>s2<span class="token punctuation">.</span>h<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//如果身高相同，就按名字的字典序升序排列 </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>h<span class="token operator">==</span>s2<span class="token punctuation">.</span>h<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>当然也可以直接精简为：<span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">student</span> s1<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">student</span> s2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> s1<span class="token punctuation">.</span>h<span class="token operator">!=</span>s2<span class="token punctuation">.</span>h<span class="token operator">?</span>s1<span class="token punctuation">.</span>h<span class="token operator">></span>s2<span class="token punctuation">.</span>h<span class="token operator">:</span>s1<span class="token punctuation">.</span>name<span class="token operator">&lt;</span>s2<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>先考虑两种特殊的情况，就是k<span class="token operator">==</span><span class="token number">1</span>或者n<span class="token operator">&lt;</span>k的情况，这时候他们都在一排上然后先输出最后一排，最高那一排的情况再依次向前输出每次都要先确定最高的那个人的位置最后一排的位置是 <span class="token punctuation">(</span>n<span class="token operator">%</span>k<span class="token operator">+</span>n<span class="token operator">/</span>k<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span>前面的位置是：i<span class="token operator">+</span>n<span class="token operator">/</span>k<span class="token operator">/</span><span class="token number">2</span>以下是未通过的代码：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">inf</span> <span class="token expression"><span class="token number">0x3f3f3f3f</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxn</span> <span class="token expression"><span class="token number">10010</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span>string s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">&#123;</span>string name<span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>stu<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">student</span> s1<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">student</span> s2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>h<span class="token operator">></span>s2<span class="token punctuation">.</span>h<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//如果身高相同，就按名字的字典序升序排列 </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>h<span class="token operator">==</span>s2<span class="token punctuation">.</span>h<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//return s1.h!=s2.h?s1.h>s2.h:s1.name&lt;s2.name;可以这么精简 </span><span class="token punctuation">&#125;</span><span class="token comment">//输出最后一排 </span><span class="token keyword">void</span> <span class="token function">printlast</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> la<span class="token operator">=</span>n<span class="token operator">%</span>k<span class="token operator">+</span>n<span class="token operator">/</span>k<span class="token punctuation">;</span>   <span class="token comment">//确定最后一排的人数 </span><span class="token keyword">int</span> t<span class="token operator">=</span>la<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//确定最后一排最大数的位置 </span>s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token keyword">int</span> tail<span class="token operator">=</span>t<span class="token punctuation">,</span>head<span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>la<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>head<span class="token operator">--</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>tail<span class="token operator">++</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>la<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>la<span class="token punctuation">]</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//依次往前输出 </span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">+=</span>n<span class="token operator">/</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> t<span class="token operator">=</span>i<span class="token operator">+</span>n<span class="token operator">/</span>k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//确定一排中最大数的位置 </span>s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token keyword">int</span> tail<span class="token operator">=</span>t<span class="token punctuation">,</span>head<span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//判断i+1的奇偶,用于保证先左后右 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token operator">+</span>n<span class="token operator">/</span>k<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>head<span class="token operator">--</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>tail<span class="token operator">++</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>head<span class="token operator">--</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>tail<span class="token operator">++</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token operator">=</span>i<span class="token punctuation">;</span>d<span class="token operator">&lt;</span>i<span class="token operator">+</span>n<span class="token operator">/</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>d<span class="token operator">++</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token operator">/</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>n<span class="token operator">>></span>k<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token operator">>></span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>h<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token function">sort</span><span class="token punctuation">(</span>stu<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>stu<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据身高降序 </span><span class="token comment">/*cout&lt;&lt;endl;for(int i=1;i&lt;=n;i++) cout&lt;&lt;stu[i].name&lt;&lt;" "&lt;&lt;stu[i].h&lt;&lt;endl;cout&lt;&lt;endl;*/</span><span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>n<span class="token operator">&lt;</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断特殊情况 </span><span class="token keyword">int</span> t<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token keyword">int</span> tail<span class="token operator">=</span>t<span class="token punctuation">,</span>head<span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>head<span class="token operator">--</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>tail<span class="token operator">++</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printlast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">%</span>k<span class="token operator">+</span>n<span class="token operator">/</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、网上搜了下别人的代码，简单易懂"><a href="#三、网上搜了下别人的代码，简单易懂" class="headerlink" title="三、网上搜了下别人的代码，简单易懂"></a>三、网上搜了下别人的代码，简单易懂</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">&#123;</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> height<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">node</span> a<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">node</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>height <span class="token operator">!=</span> b<span class="token punctuation">.</span>height <span class="token operator">?</span> a<span class="token punctuation">.</span>height <span class="token operator">></span> b<span class="token punctuation">.</span>height <span class="token operator">:</span> a<span class="token punctuation">.</span>name <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> k<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>node<span class="token operator">></span> <span class="token function">stu</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">>></span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>height<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stu<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> row <span class="token operator">=</span> k<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>row <span class="token operator">==</span> k<span class="token punctuation">)</span>            m <span class="token operator">=</span> n <span class="token operator">-</span> n <span class="token operator">/</span> k <span class="token operator">*</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            m <span class="token operator">=</span> n <span class="token operator">/</span> k<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">ans</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span>m <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> stu<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token comment">// 左边一列</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> m <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t <span class="token operator">+</span> m<span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>            ans<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token comment">// 右边一列</span>        j <span class="token operator">=</span> m <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t <span class="token operator">+</span> m<span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>            ans<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token comment">// 输出当前排</span>        cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        t <span class="token operator">=</span> t <span class="token operator">+</span> m<span class="token punctuation">;</span>        row<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源：<a href="https://blog.csdn.net/liuchuo/article/details/51994263">https://blog.csdn.net/liuchuo/article/details/51994263</a></p>]]></content>
      
      
      <categories>
          
          <category> PTA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1055集合照 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
