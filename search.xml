<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/2022/10/17/test/"/>
      <url>/2022/10/17/test/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/test/run.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
            <tag> light </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>坦克大战</title>
      <link href="/2022/10/16/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/"/>
      <url>/2022/10/16/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.sikiedu.com/course/935">SIKI</a>学院的一个实战，本游戏开发基于一些基本的WinForm知识，更好的体会面向对象编程。</p><p>虽然WinForm不适合做游戏开发，但可以通过这个实例了解游戏开发的思想。</p><h2 id="1-设置窗体的生成位置"><a href="#1-设置窗体的生成位置" class="headerlink" title="1. 设置窗体的生成位置"></a>1. 设置窗体的生成位置</h2><p>设置窗体居中</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>StartPosition <span class="token operator">=</span> FormStartPosition<span class="token punctuation">.</span>CenterScreen<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>自由设置窗体位置</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>StartPosition <span class="token operator">=</span> FormStartPosition<span class="token punctuation">.</span>Manual<span class="token punctuation">;</span><span class="token comment">//Manual0窗体的位置由 Location 属性确定。</span><span class="token keyword">this</span><span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221016095057993.png"></p><h2 id="2-GDI-Graphics-Device-Interface-图形设备接口"><a href="#2-GDI-Graphics-Device-Interface-图形设备接口" class="headerlink" title="2. GDI Graphics Device Interface 图形设备接口"></a>2. GDI Graphics Device Interface 图形设备接口</h2><h3 id="2-1-绘制一条直线"><a href="#2-1-绘制一条直线" class="headerlink" title="2.1 绘制一条直线"></a>2.1 绘制一条直线</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form1_Paint</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">PaintEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Graphics</span> g <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">CreateGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Pen</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Pen</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Black<span class="token punctuation">)</span><span class="token punctuation">;</span>            g<span class="token punctuation">.</span><span class="token function">DrawLine</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.graphics?view=netframework-4.7.2&f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(System.Drawing.Graphics);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)&rd=true">Graphics</a> </p><p>​    封装一个 GDI+ 绘图图面。 此类不能被继承。</p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.pen?view=netframework-4.7.2&f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(System.Drawing.Pen);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)&rd=true">Pen</a></p><p>​    定义用于绘制直线和曲线的对象。 此类不能被继承。</p><p>​    构造函数</p><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.pen.-ctor?view=netframework-4.7.2#system-drawing-pen-ctor(system-drawing-brush)">Pen(Brush)</a></th><th>使用指定的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.pen?view=netframework-4.7.2">Pen</a> 初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.brush?view=netframework-4.7.2">Brush</a> 类的新实例。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.pen.-ctor?view=netframework-4.7.2#system-drawing-pen-ctor(system-drawing-brush-system-single)">Pen(Brush, Single)</a></td><td>使用指定的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.pen?view=netframework-4.7.2">Pen</a> 和 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.brush?view=netframework-4.7.2">Brush</a> 初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.pen.width?view=netframework-4.7.2#system-drawing-pen-width">Width</a> 类的新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.pen.-ctor?view=netframework-4.7.2#system-drawing-pen-ctor(system-drawing-color)">Pen(Color)</a></td><td>用指定颜色初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.pen?view=netframework-4.7.2">Pen</a> 类的新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.pen.-ctor?view=netframework-4.7.2#system-drawing-pen-ctor(system-drawing-color-system-single)">Pen(Color, Single)</a></td><td>用指定的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.pen?view=netframework-4.7.2">Pen</a> 和 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.color?view=netframework-4.7.2">Color</a> 属性初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.pen.width?view=netframework-4.7.2#system-drawing-pen-width">Width</a> 类的新实例。</td></tr></tbody></table><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.graphics.drawline?view=netframework-4.7.2&f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(System.Drawing.Graphics.DrawLine);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)&rd=true">Graphics.DrawLine 方法</a></p><p>​    <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.graphics.drawline?view=netframework-4.7.2#system-drawing-graphics-drawline(system-drawing-pen-system-drawing-point-system-drawing-point)">DrawLine(Pen, Point, Point)</a> 绘制一条连接两个 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.point?view=netframework-4.7.2">Point</a> 结构的线。</p><p>​     </p><h3 id="2-2-绘制字符串"><a href="#2-2-绘制字符串" class="headerlink" title="2.2 绘制字符串"></a>2.2 绘制字符串</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">g<span class="token punctuation">.</span><span class="token function">DrawString</span><span class="token punctuation">(</span><span class="token string">"8yyy.github.io"</span><span class="token punctuation">,</span>                 <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Font</span><span class="token punctuation">(</span><span class="token string">"微软雅黑"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SolidBrush</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Red<span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221018090227599.png"></p><p>设置窗体的标题和宽高</p><p>可以在Form1.Designer.cs中的InitializeComponent方法修改</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221018091745419.png"></p><h2 id="3-开发游戏框架"><a href="#3-开发游戏框架" class="headerlink" title="3. 开发游戏框架"></a>3. 开发游戏框架</h2><p><code>Form1.cs</code>代码如下，创建一个线程，<code>GameMainThread</code>方法用于控制游戏的逻辑</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Form1</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Thread</span> _gameMainThread<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>StartPosition <span class="token operator">=</span> FormStartPosition<span class="token punctuation">.</span>CenterScreen<span class="token punctuation">;</span>             _gameMainThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>GameMainThread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _gameMainThread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//控制游戏逻辑的子线程</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GameMainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            GameFramework<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> sleepTime <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                GameFramework<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//60fps</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>sleepTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//休息1/60秒</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form1_FormClosed</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">FormClosedEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _gameMainThread<span class="token punctuation">.</span><span class="token function">Abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//终止线程</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建一个<code>GameFramework</code>类，默认代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">GameFramework</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//Update执行的频率就是我们的帧率FPS</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-游戏类的结构分析"><a href="#4-游戏类的结构分析" class="headerlink" title="4. 游戏类的结构分析"></a>4. 游戏类的结构分析</h2><p>大致结构如下</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221018104533524.png"></p><p>根据上图进行类的创建，如下图所示</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221018104623373.png"></p><p>先创建基类<code>GameObject</code>，代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">GameObject</span>    <span class="token punctuation">&#123;</span>    <span class="token comment">//所有内容都需要坐标</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> X <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Y <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token return-type class-name">Image</span> <span class="token function">GetImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DrawSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Graphics</span> g <span class="token operator">=</span> GameFramework<span class="token punctuation">.</span>g<span class="token punctuation">;</span>            g<span class="token punctuation">.</span><span class="token function">DrawImage</span><span class="token punctuation">(</span><span class="token function">GetImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后创建不可移动的类<code>NotMovething</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//不可移动的物体</span>    <span class="token keyword">class</span> <span class="token class-name">NotMovething</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">GameObject</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Image</span> Img <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">Image</span> <span class="token function">GetImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> Img<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建可移动的类<code>Movething</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//朝向</span>    <span class="token keyword">enum</span> <span class="token class-name">Direction</span>    <span class="token punctuation">&#123;</span>        Up<span class="token punctuation">,</span>        Down<span class="token punctuation">,</span>        Left<span class="token punctuation">,</span>        Right    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Movething</span> <span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">GameObject</span></span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//四个方向</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Bitmap</span> BitmapUp <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Bitmap</span> BitmapDown <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Bitmap</span> BitmapLeft <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Bitmap</span> BitmapRight <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token comment">//移动速度</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Speed <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Direction</span> Dir <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">Image</span> <span class="token function">GetImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Bitmap</span> bitmap <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>Dir<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">:</span>                    bitmap <span class="token operator">=</span> BitmapUp<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">:</span>                    bitmap <span class="token operator">=</span> BitmapDown<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">:</span>                    bitmap <span class="token operator">=</span> BitmapLeft<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Right<span class="token punctuation">:</span>                    bitmap <span class="token operator">=</span> BitmapRight<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//设置透明度</span>            bitmap<span class="token punctuation">.</span><span class="token function">MakeTransparent</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Black<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> bitmap<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-图片资源引入"><a href="#5-图片资源引入" class="headerlink" title="5. 图片资源引入"></a>5. 图片资源引入</h2><p>点击项目文件中的<code>Properties</code>，点击<code>Resources.resx</code>添加资源，添加现有文件，添加图片和音乐，效果如下图所示</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221018110344164.png"></p><h2 id="6-编程设计好的类的代码"><a href="#6-编程设计好的类的代码" class="headerlink" title="6. 编程设计好的类的代码"></a>6. 编程设计好的类的代码</h2><p>给<code>NotMovething</code>添加一个构造方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token function">NotMovething</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">,</span><span class="token class-name">Image</span> img<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            X <span class="token operator">=</span> x<span class="token punctuation">;</span>            Y <span class="token operator">=</span> y<span class="token punctuation">;</span>            Img <span class="token operator">=</span> img<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加一个<code>GameObjectManager</code>类用于绘制<code>NotMovething</code>的内容</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">GameObjectManager</span>    <span class="token punctuation">&#123;</span>                <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>NotMovething<span class="token punctuation">></span></span> _wallList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>NotMovething<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DrawMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _wallList<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                item<span class="token punctuation">.</span><span class="token function">DrawSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">//初始化地图</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CreateMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span>_wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//创建红墙</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">,</span><span class="token class-name">List<span class="token punctuation">&lt;</span>NotMovething<span class="token punctuation">></span></span> wallList<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>                         <span class="token class-name"><span class="token keyword">int</span></span> xPosition <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> yPosition <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> yPosition<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> yPosition<span class="token operator">+</span>count<span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">15</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//一堵红墙由两块wall构成 (xPosition,i) (xPosition+15,i)</span>                <span class="token class-name">NotMovething</span> wall1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotMovething</span><span class="token punctuation">(</span>xPosition<span class="token punctuation">,</span> i <span class="token punctuation">,</span>Resources<span class="token punctuation">.</span>wall<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">NotMovething</span> wall2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotMovething</span><span class="token punctuation">(</span>xPosition<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">)</span><span class="token punctuation">;</span>                wallList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>wall1<span class="token punctuation">)</span><span class="token punctuation">;</span>                wallList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>wall2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<code>GameFramework</code>里添加代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//创建地图只需要初始化一次</span>            GameObjectManager<span class="token punctuation">.</span><span class="token function">CreateMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//Update就是我们的帧率FPS</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//每帧都需要绘制地图</span>            GameObjectManager<span class="token punctuation">.</span><span class="token function">DrawMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如图所示，出现一堵闪烁的红墙</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221018134545386.png"></p><h2 id="7-解决游戏画面闪烁的问题"><a href="#7-解决游戏画面闪烁的问题" class="headerlink" title="7. 解决游戏画面闪烁的问题"></a>7. 解决游戏画面闪烁的问题</h2><p>在Form1中，黑色的画布和墙交替粉刷</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221018134833532.png"></p><p>改变策略</p><ul><li>粉刷黑色画布的时候不要直接绘制在窗体上</li><li>创建一个黑色的图片，把要绘制的所有元素绘制到图片上</li><li>这一帧的图片绘制完，再把这整一个图片绘制到窗体上</li></ul><p>在Form定义一个成员</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Bitmap</span> _tempBmp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码修改如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//GameFramework.g = _g;</span><span class="token comment">//绘制一张图片，和窗体一样大</span>_tempBmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Bitmap</span><span class="token punctuation">(</span><span class="token number">450</span><span class="token punctuation">,</span> <span class="token number">450</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Graphics</span> bmpG <span class="token operator">=</span> Graphics<span class="token punctuation">.</span><span class="token function">FromImage</span><span class="token punctuation">(</span>_tempBmp<span class="token punctuation">)</span><span class="token punctuation">;</span>GameFramework<span class="token punctuation">.</span>g <span class="token operator">=</span> bmpG<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时修改<code>_g</code>字段，声明为静态成员 <code>_windowG</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//private Graphics _g;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Graphics</span> _windowG<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>GameMainThread</code>子线程内修改代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//清空画布，涂刷黑色背景</span>                GameFramework<span class="token punctuation">.</span>g<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Black<span class="token punctuation">)</span><span class="token punctuation">;</span>                GameFramework<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//60fps</span>                _windowG<span class="token punctuation">.</span><span class="token function">DrawImage</span><span class="token punctuation">(</span>_tempBmp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>sleepTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//休息1/60秒</span>            <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行之后就不存在闪烁了</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221018141615375.png"></p><h2 id="8-绘制地图"><a href="#8-绘制地图" class="headerlink" title="8. 绘制地图"></a>8. 绘制地图</h2><p>跟着老师一样绘制地图，发现墙体超过了窗体</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221018142136451.png"></p><p>修改Form1的Size属性<code>615, 600</code>，大致差不多</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221018151714187.png"></p><p>主要代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">GameObjectManager</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//装红墙的列表</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>NotMovething<span class="token punctuation">></span></span> _wallList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>NotMovething<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//装白墙的列表</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>NotMovething<span class="token punctuation">></span></span> _steelList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>NotMovething<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Boss</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">NotMovething</span> _boss<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DrawMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _wallList<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                item<span class="token punctuation">.</span><span class="token function">DrawSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _steelList<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                item<span class="token punctuation">.</span><span class="token function">DrawSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            _boss<span class="token punctuation">.</span><span class="token function">DrawSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">//初始化地图</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CreateMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//创建第一二堵墙</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span>_wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建第三四堵墙，矮一点只需要修改count即可</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//在中间创建一堵白墙</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>steel<span class="token punctuation">,</span> _steelList<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>steel<span class="token punctuation">,</span> _steelList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>steel<span class="token punctuation">,</span> _steelList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建中间的红墙</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建下半部分的红墙</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建第三四堵墙，矮一点只需要修改count即可</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建Boss周围的红墙</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>wall<span class="token punctuation">,</span> _wallList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreateBoss</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span>Resources<span class="token punctuation">.</span>Boss<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//创建红墙和白墙</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CreateWall</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">,</span><span class="token class-name">Image</span> img<span class="token punctuation">,</span><span class="token class-name">List<span class="token punctuation">&lt;</span>NotMovething<span class="token punctuation">></span></span> List<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>                         <span class="token class-name"><span class="token keyword">int</span></span> xPosition <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> yPosition <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> yPosition<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> yPosition<span class="token operator">+</span>count<span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">15</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//一堵红墙由两块wall构成 (xPosition,i) (xPosition+15,i)</span>                <span class="token class-name">NotMovething</span> wall1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotMovething</span><span class="token punctuation">(</span>xPosition<span class="token punctuation">,</span> i <span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">NotMovething</span> wall2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotMovething</span><span class="token punctuation">(</span>xPosition<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>                List<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>wall1<span class="token punctuation">)</span><span class="token punctuation">;</span>                List<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>wall2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//创建Boss</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CreateBoss</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">,</span><span class="token class-name">Image</span> img<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> xPosition <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> yPosition <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>            _boss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotMovething</span><span class="token punctuation">(</span>xPosition<span class="token punctuation">,</span> yPosition<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下：</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221018154744615.png"></p><h2 id="9-创建并绘制我的坦克MyTank"><a href="#9-创建并绘制我的坦克MyTank" class="headerlink" title="9. 创建并绘制我的坦克MyTank"></a>9. 创建并绘制我的坦克MyTank</h2><p>先查看以下<code>Movething</code>类里面的代码，因为<code>MyTank</code>类是继承自<code>Movething</code>类的，然后给<code>MyTank</code>类写个构造方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyTank</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Movething</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token function">MyTank</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> speed<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//初始坐标</span>            X <span class="token operator">=</span> x<span class="token punctuation">;</span>            Y <span class="token operator">=</span> y<span class="token punctuation">;</span>            <span class="token comment">//初始速度</span>            Speed <span class="token operator">=</span> speed<span class="token punctuation">;</span>            <span class="token comment">//初始方向</span>            Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">;</span>            <span class="token comment">//存储四个方向的图片</span>            BitmapDown <span class="token operator">=</span> Resources<span class="token punctuation">.</span>MyTankDown<span class="token punctuation">;</span>            BitmapUp <span class="token operator">=</span> Resources<span class="token punctuation">.</span>MyTankUp<span class="token punctuation">;</span>            BitmapRight <span class="token operator">=</span> Resources<span class="token punctuation">.</span>MyTankRight<span class="token punctuation">;</span>            BitmapLeft <span class="token operator">=</span> Resources<span class="token punctuation">.</span>MyTankLeft<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后也是在<code>GameObjectManager</code>类里写一个创建MyTank并印刷到图片上的代码</p><p>CreateMyTank() 和 DrawMyTank()，代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//MyTank</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">MyTank</span> _myTank<span class="token punctuation">;</span><span class="token comment">//创建我的坦克</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CreateMyTank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token number">14</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>    _myTank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyTank</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//印刷</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DrawMyTank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    _myTank<span class="token punctuation">.</span><span class="token function">DrawSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后回到<code>GameFramework</code>类在<code>Star()方法</code>和<code>Update()方法</code>中分别添加上述方法</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221019112714625.png"></p><p>运行效果如下图所示</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221019112753570.png"></p><h3 id="9-1-控制我的坦克的方向"><a href="#9-1-控制我的坦克的方向" class="headerlink" title="9.1 控制我的坦克的方向"></a>9.1 控制我的坦克的方向</h3><p>用WASD移动，按键的监测 KeyDown,KeyUp</p><p>GameFramework承担的是框架的功能</p><p>GameObjectManager承担管理的是游戏的元素</p><p>GameFramework可以当事件的中间站</p><p>在<code>GameFramework</code>中添加如下两个方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">KeyDown</span><span class="token punctuation">(</span><span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">KeyUp</span><span class="token punctuation">(</span><span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Form1.cs代码如下，KeyEventArgs传递给GameFramework</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form1_KeyDown</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     GameFramework<span class="token punctuation">.</span><span class="token function">KeyDown</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form1_KeyUp</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     GameFramework<span class="token punctuation">.</span><span class="token function">KeyUp</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后再把消息由<code>GameFramework</code>转递给<code>GameObjectManager</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">KeyDown</span><span class="token punctuation">(</span><span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     GameObjectManager<span class="token punctuation">.</span><span class="token function">KeyDown</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">KeyUp</span><span class="token punctuation">(</span><span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     GameObjectManager<span class="token punctuation">.</span><span class="token function">KeyUp</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再由<code>GameObjectManager</code>传递给<code>MyTank</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">KeyDown</span><span class="token punctuation">(</span><span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _myTank<span class="token punctuation">.</span><span class="token function">KeyDown</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">KeyUp</span><span class="token punctuation">(</span><span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _myTank<span class="token punctuation">.</span><span class="token function">KeyUp</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MyTank代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">KeyDown</span><span class="token punctuation">(</span><span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>KeyCode<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> Keys<span class="token punctuation">.</span>W<span class="token punctuation">:</span>                    Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">;</span>                    <span class="token comment">//Y -= Speed;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Keys<span class="token punctuation">.</span>S<span class="token punctuation">:</span>                    Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Keys<span class="token punctuation">.</span>A<span class="token punctuation">:</span>                    Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Keys<span class="token punctuation">.</span>D<span class="token punctuation">:</span>                    Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Right<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">KeyUp</span><span class="token punctuation">(</span><span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>                    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就实现了MyTank的方向控制，可以看到上述代码我尝试在这段代码中控制MyTank的移动，实际运行的效果很糟糕，会产生停顿，同时还会穿墙。所以我们不能在<code>KeyDown方法</code>中控制MyTank的移动，需要在<code>Update</code>中控制MyTank的移动。</p><p>在<code>MyTank类</code>定义一个属性</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsMoving <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyTank</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Movething</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsMoving <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token function">MyTank</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> speed<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//初始不可移动</span>            IsMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment">//初始坐标</span>            X <span class="token operator">=</span> x<span class="token punctuation">;</span>            Y <span class="token operator">=</span> y<span class="token punctuation">;</span>            <span class="token comment">//初始速度</span>            Speed <span class="token operator">=</span> speed<span class="token punctuation">;</span>            <span class="token comment">//初始方向</span>            Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">;</span>            <span class="token comment">//四个方向的图片</span>            BitmapDown <span class="token operator">=</span> Resources<span class="token punctuation">.</span>MyTankDown<span class="token punctuation">;</span>            BitmapUp <span class="token operator">=</span> Resources<span class="token punctuation">.</span>MyTankUp<span class="token punctuation">;</span>            BitmapRight <span class="token operator">=</span> Resources<span class="token punctuation">.</span>MyTankRight<span class="token punctuation">;</span>            BitmapLeft <span class="token operator">=</span> Resources<span class="token punctuation">.</span>MyTankLeft<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">KeyDown</span><span class="token punctuation">(</span><span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>KeyCode<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> Keys<span class="token punctuation">.</span>W<span class="token punctuation">:</span>                    Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">;</span>                    IsMoving <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Keys<span class="token punctuation">.</span>S<span class="token punctuation">:</span>                    Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">;</span>                    IsMoving <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Keys<span class="token punctuation">.</span>A<span class="token punctuation">:</span>                    Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">;</span>                    IsMoving <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Keys<span class="token punctuation">.</span>D<span class="token punctuation">:</span>                    Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Right<span class="token punctuation">;</span>                    IsMoving <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">KeyUp</span><span class="token punctuation">(</span><span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>KeyCode<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> Keys<span class="token punctuation">.</span>W<span class="token punctuation">:</span>                    IsMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Keys<span class="token punctuation">.</span>S<span class="token punctuation">:</span>                    IsMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Keys<span class="token punctuation">.</span>A<span class="token punctuation">:</span>                    IsMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Keys<span class="token punctuation">.</span>D<span class="token punctuation">:</span>                    IsMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们就可以在<code>Update()</code>中判断<code>IsMoving</code>是否为True判断是否需要移动了</p><h3 id="9-2-控制我的坦克的移动"><a href="#9-2-控制我的坦克的移动" class="headerlink" title="9.2 控制我的坦克的移动"></a>9.2 控制我的坦克的移动</h3><p>在<code>GameObject类</code>中新增一个<code>Update()方法</code></p><p>我们可以直接把<code>DrawSelf()方法</code>放到<code>Update()方法</code>中，初始代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">DrawSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>之后我们就可以修改<code>GameObjectManager</code>里的代码，Draw的代码均可以注释掉</p><p><code>Ctrl + k + c </code>快速注释选中内容</p><p><code>Ctrl + k + u</code> 快速取消注选中的注释内容</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//添加一个Update方法，里面的内容也由DrawSelf方法直接给位Update方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _wallList<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                item<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _steelList<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                item<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            _boss<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _myTank<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//印刷</span>        <span class="token comment">//public static void DrawMyTank()</span>        <span class="token comment">//&#123;</span>        <span class="token comment">//    _myTank.DrawSelf();</span>        <span class="token comment">//&#125;</span>        <span class="token comment">//public static void DrawMap()</span>        <span class="token comment">//&#123;</span>        <span class="token comment">//    foreach (var item in _wallList)</span>        <span class="token comment">//    &#123;</span>        <span class="token comment">//        item.DrawSelf();</span>        <span class="token comment">//    &#125;</span>        <span class="token comment">//    foreach (var item in _steelList)</span>        <span class="token comment">//    &#123;</span>        <span class="token comment">//        item.DrawSelf();</span>        <span class="token comment">//    &#125;</span>        <span class="token comment">//    _boss.DrawSelf();</span>        <span class="token comment">//&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后再修改<code>GameFramework类</code>里的<code>Update()方法</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//每帧都需要绘制地图</span>            <span class="token comment">//GameObjectManager.DrawMap();</span>            <span class="token comment">//GameObjectManager.DrawMyTank();</span>            GameObjectManager<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>MyTank类</code>里添加方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">_Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>IsMoving <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>Dir<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">:</span>                    Y <span class="token operator">-=</span> Speed<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">:</span>                    Y <span class="token operator">+=</span> Speed<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">:</span>                    X <span class="token operator">-=</span> Speed<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Right<span class="token punctuation">:</span>                    X <span class="token operator">+=</span> Speed<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-3-控制我的坦克不要超出窗体边界"><a href="#9-3-控制我的坦克不要超出窗体边界" class="headerlink" title="9.3 控制我的坦克不要超出窗体边界"></a>9.3 控制我的坦克不要超出窗体边界</h3><p>在<code>MyTank类</code>里添加一个<code>_MoveCheck()</code>方法，然后在移动<code>_Move()</code>之前先判断下，放到<code>Update()方法</code>里</p><p>需要判断两个方面</p><ul><li>检查有没有超出窗体边界，判断四个方向即可</li><li>检查有没有和其他元素发生碰撞            </li></ul><p>这时候我们就需要知道每个元素的宽度和高度，我们在<code>GameObject类</code>里定义2个属性<code>Width</code>和<code>Height</code>，代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Width <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Height <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>NotMovething</code>中是只有一张图片，所以比较好改，添加一个字段<code>_img</code>，将原来最简单的属性<code>Img</code>修改如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token class-name">Image</span> _img<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token return-type class-name">Image</span> Img <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _img<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>     <span class="token keyword">set</span> <span class="token punctuation">&#123;</span>        _img <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        Width <span class="token operator">=</span> _img<span class="token punctuation">.</span>Width<span class="token punctuation">;</span>        Height <span class="token operator">=</span> Img<span class="token punctuation">.</span>Height<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来修改<code>Movething</code>，因为<code>Movething</code>中有四张图，即四个方向，需要根据坦克的方向设置宽高，先将MyTank中初始方向和四个方向的图片的代码进行调换，结果如下：</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221019161344991.png"></p><p>然后修改<code>Movething</code>中的内容如下图所示</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token class-name">Direction</span> _dir<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token return-type class-name">Direction</span> Dir<span class="token punctuation">&#123;</span>    <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _dir<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">set</span> <span class="token punctuation">&#123;</span>        _dir <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token class-name">Bitmap</span> bmp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>Dir<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">:</span>                bmp <span class="token operator">=</span> BitmapUp<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">:</span>                bmp <span class="token operator">=</span> BitmapDown<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">:</span>                bmp <span class="token operator">=</span> BitmapLeft<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Right<span class="token punctuation">:</span>                bmp <span class="token operator">=</span> BitmapRight<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        Width <span class="token operator">=</span> bmp<span class="token punctuation">.</span>Width<span class="token punctuation">;</span>        Height <span class="token operator">=</span> bmp<span class="token punctuation">.</span>Height<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>_MoveChck()主要代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token preprocessor property">#<span class="token directive keyword">region</span> 检查有没有超出窗体边界，判断四个方向即可</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>Dir <span class="token operator">==</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>Y <span class="token operator">-</span> Speed <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>             <span class="token punctuation">&#123;</span>                 IsMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Dir <span class="token operator">==</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>Y <span class="token operator">+</span> Speed <span class="token operator">+</span> Height <span class="token operator">></span> <span class="token number">450</span><span class="token punctuation">)</span>             <span class="token punctuation">&#123;</span>                 IsMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Dir <span class="token operator">==</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>X<span class="token operator">-</span>Speed <span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>             <span class="token punctuation">&#123;</span>                 IsMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">else</span>         <span class="token punctuation">&#123;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>X <span class="token operator">+</span> Speed <span class="token operator">+</span> Height <span class="token operator">></span> <span class="token number">450</span><span class="token punctuation">)</span>             <span class="token punctuation">&#123;</span>                 IsMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>         <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-4-控制我的坦克不要穿墙——碰撞检测"><a href="#9-4-控制我的坦克不要穿墙——碰撞检测" class="headerlink" title="9.4 控制我的坦克不要穿墙——碰撞检测"></a>9.4 控制我的坦克不要穿墙——碰撞检测</h3><p>系统提供的类<code>Rectangle</code></p><ul><li>存储一组整数，共四个，表示一个矩形的位置和大小。</li><li>对于一个矩形，我们只需要知道它左上角的位置，以及它的宽高即可确定</li></ul><p>任意一个游戏物体都存在一个矩形</p><p>在<code>GameObject类</code>中添加一个新的内容<code>GetRectangle()</code>方法，用于返回一个<code>Rectangle</code>对象的引用</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name">Rectangle</span> <span class="token function">GetRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Rectangle</span> rectangle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> Width<span class="token punctuation">,</span> Height<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> rectangle<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>构造函数</strong></p><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.rectangle.-ctor?view=netframework-4.7.2#system-drawing-rectangle-ctor(system-int32-system-int32-system-int32-system-int32)">Rectangle(Int32, Int32, Int32, Int32)</a></th><th>用指定的位置和大小初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.rectangle?view=netframework-4.7.2">Rectangle</a> 类的新实例。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.rectangle.-ctor?view=netframework-4.7.2#system-drawing-rectangle-ctor(system-drawing-point-system-drawing-size)">Rectangle(Point, Size)</a></td><td>用指定的位置和大小初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing.rectangle?view=netframework-4.7.2">Rectangle</a> 类的新实例。</td></tr></tbody></table><p>然后我们可以把碰撞检测的代码放到<code>GameObjectManager</code>中，定义如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">NotMovething</span> <span class="token function">IsCollidedWall</span><span class="token punctuation">(</span><span class="token class-name">Rectangle</span> rt<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于子弹碰到墙我们需要知道是那堵墙，所以我们把返回值定义为<code>NotMovething</code>，如果返回值为<code>null</code>则说明没有发生碰撞</p><p><strong>Rectangle.IntersectsWith(Rectangle) 方法</strong></p><ul><li><p>命名空间:</p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.drawing?view=netframework-4.7.2">System.Drawing</a></p></li><li><p>程序集:</p><p>System.Drawing.dll</p></li></ul><p>确定此矩形是否与 <code>rect</code> 相交。</p><p>先写关于红墙的碰撞检测代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">NotMovething</span> <span class="token function">IsCollidedWall</span><span class="token punctuation">(</span><span class="token class-name">Rectangle</span> rt<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//遍历所有的墙</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _wallList<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//判断是否与传递过来的矩形发生碰撞</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">GetRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IntersectsWith</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> item<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221019164122968.png"></p><p>可以运行调试看看，发生存在一个bug，就是碰到红墙之后，我的坦克就都动不了了，这是因为我们用<strong>当前坦克的位置与红墙进行碰撞判断，而不是用移动过后的坦克的位置与红墙进行比较</strong></p><p>我们需要提前判断红墙与移动后的坦克是否存在碰撞的可能</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">Rectangle</span> rectangle <span class="token operator">=</span> <span class="token function">GetRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">switch</span> <span class="token punctuation">(</span>Dir<span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">:</span>                 rectangle<span class="token punctuation">.</span>Y <span class="token operator">-=</span> Speed<span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>             <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">:</span>                 rectangle<span class="token punctuation">.</span>Y <span class="token operator">+=</span> Speed<span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>             <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">:</span>                 rectangle<span class="token punctuation">.</span>X <span class="token operator">-=</span> Speed<span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>             <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Right<span class="token punctuation">:</span>                 rectangle<span class="token punctuation">.</span>X <span class="token operator">+=</span> Speed<span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>GameObjectManager<span class="token punctuation">.</span><span class="token function">IsCollidedWall</span><span class="token punctuation">(</span><span class="token function">GetRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>             IsMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>             <span class="token keyword">return</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我一开始想把红墙白墙和Boos的碰撞检测写在一个<code>IsCollided方法</code>里，后来想想是不行，因为这三种元素碰撞后的处理方法是不一样的。</p><p>所以我们需要定义三个碰撞检测的方法，代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">NotMovething</span> <span class="token function">IsCollidedWall</span><span class="token punctuation">(</span><span class="token class-name">Rectangle</span> rt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//遍历所有的红墙</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _wallList<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//判断是否与传递过来的矩形发生碰撞</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">GetRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IntersectsWith</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> item<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">NotMovething</span> <span class="token function">IsCollidedSteel</span><span class="token punctuation">(</span><span class="token class-name">Rectangle</span> rt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//遍历所有的红墙</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _steelList<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//判断是否与传递过来的矩形发生碰撞</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">GetRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IntersectsWith</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> item<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsCollidedBoss</span><span class="token punctuation">(</span><span class="token class-name">Rectangle</span> rt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> _boss<span class="token punctuation">.</span><span class="token function">GetRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IntersectsWith</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-开发敌人坦克的生成"><a href="#10-开发敌人坦克的生成" class="headerlink" title="10. 开发敌人坦克的生成"></a>10. 开发敌人坦克的生成</h2><h3 id="10-1-创建并生成敌人坦克"><a href="#10-1-创建并生成敌人坦克" class="headerlink" title="10.1 创建并生成敌人坦克"></a>10.1 创建并生成敌人坦克</h3><p>一共有四种敌人</p><p>敌人是需要持续生成的，需要一个生成敌人的速度</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> _enemyBurnSpeed <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span><span class="token comment">//60s生成一个敌人</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于<code>IsMoving</code>属性敌人坦克也需要有，所以我们可以把<code>MyTank</code>中的<code>IsMoving</code>属性移动到父类<code>Movething</code>中（后面又说不需要，所以这一步可以不做）</p><p><code>EnemyTank</code>类的代码如下，由于存在四种坦克，每个坦克宽高根据方向有所改变，然后敌人坦克的初始方向是向下的，所以我们需要在构造方法中指明是哪个坦克的图，需要添加4个Bitmap的形参</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">EnemyTank</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Movething</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token function">EnemyTank</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> speed<span class="token punctuation">,</span><span class="token class-name">Bitmap</span> bmpDown<span class="token punctuation">,</span> <span class="token class-name">Bitmap</span> bmpUp<span class="token punctuation">,</span> <span class="token class-name">Bitmap</span> bmpRight<span class="token punctuation">,</span> <span class="token class-name">Bitmap</span> bmpLeft<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            IsMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment">//初始坐标</span>            X <span class="token operator">=</span> x<span class="token punctuation">;</span>            Y <span class="token operator">=</span> y<span class="token punctuation">;</span>            <span class="token comment">//初始速度</span>            Speed <span class="token operator">=</span> speed<span class="token punctuation">;</span>            <span class="token comment">//四个方向的图片</span>            BitmapDown <span class="token operator">=</span> bmpDown<span class="token punctuation">;</span>            BitmapUp <span class="token operator">=</span> bmpUp<span class="token punctuation">;</span>            BitmapRight <span class="token operator">=</span> bmpRight<span class="token punctuation">;</span>            BitmapLeft <span class="token operator">=</span> bmpLeft<span class="token punctuation">;</span>            <span class="token comment">//初始方向</span>            Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是在<code>GameObjectManager</code>中关于敌人坦克的主要代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//EnemyTank</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>EnemyTank<span class="token punctuation">></span></span> _tankList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>EnemyTank<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> _enemyBurnSpeed <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span><span class="token comment">//60s生成一个敌人</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> _enemyBurnCount <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span><span class="token comment">//敌人的计数器</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token range operator">..</span><span class="token range operator">..</span><span class="token range operator">..</span>        <span class="token range operator">..</span><span class="token range operator">..</span><span class="token range operator">..</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _tankList<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        item<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token range operator">..</span><span class="token range operator">..</span><span class="token range operator">..</span>        <span class="token range operator">..</span><span class="token range operator">..</span><span class="token range operator">..</span>            <span class="token function">_EnemyBurn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Point<span class="token punctuation">[</span><span class="token punctuation">]</span></span> _points <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    _points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> _points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//一号敌人左上角</span>    _points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">7</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">;</span> _points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//二号敌人在中间</span>    _points<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">14</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span> _points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//三号敌人在右上角</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_EnemyBurn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    _enemyBurnCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_enemyBurnCount <span class="token operator">&lt;</span> _enemyBurnSpeed<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">//0-2，敌人坦克的初始位置有3个</span>    <span class="token class-name">Random</span> rd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">int</span></span> index <span class="token operator">=</span> rd<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//生成0-2之间的随机值，不包括最大数3</span>    <span class="token class-name">Point</span> position <span class="token operator">=</span> _points<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">int</span></span> enemyType <span class="token operator">=</span> rd<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//四个敌人坦克，所以生成1-4的随机数</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>enemyType<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token function">_CreanteEnemyTank1</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span>X<span class="token punctuation">,</span> position<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token function">_CreanteEnemyTank2</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span>X<span class="token punctuation">,</span> position<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token function">_CreanteEnemyTank3</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span>X<span class="token punctuation">,</span> position<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>            <span class="token function">_CreanteEnemyTank4</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span>X<span class="token punctuation">,</span> position<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    _enemyBurnCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建敌人坦克</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_CreanteEnemyTank1</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">EnemyTank</span> tank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EnemyTank</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>Resources<span class="token punctuation">.</span>GrayDown<span class="token punctuation">,</span>Resources<span class="token punctuation">.</span>GrayUp<span class="token punctuation">,</span>Resources<span class="token punctuation">.</span>GrayRight<span class="token punctuation">,</span>Resources<span class="token punctuation">.</span>GrayLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>    _tankList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>tank<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_CreanteEnemyTank2</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">EnemyTank</span> tank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EnemyTank</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>GreenDown<span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>GreenUp<span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>GreenRight<span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>GreenLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>    _tankList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>tank<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_CreanteEnemyTank3</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">EnemyTank</span> tank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EnemyTank</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>QuickDown<span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>QuickUp<span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>QuickRight<span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>QuickLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>    _tankList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>tank<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_CreanteEnemyTank4</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">EnemyTank</span> tank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EnemyTank</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>SlowDown<span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>SlowUp<span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>SlowRight<span class="token punctuation">,</span> Resources<span class="token punctuation">.</span>SlowLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>    _tankList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>tank<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后把<code>Start()方法</code>添加到<code>GameFramework</code>中的<code>Start()方法</code>里</p><p>运行效果如下图所示</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221019204526933.png"></p><h3 id="10-2-控制敌人坦克的移动AI"><a href="#10-2-控制敌人坦克的移动AI" class="headerlink" title="10.2 控制敌人坦克的移动AI"></a>10.2 控制敌人坦克的移动AI</h3><p>思路是让敌人坦克一直朝某个方向移动，直到撞到障碍物之后往其他方向移动</p><p>我的坦克默认是不移动的，但敌人坦克默认是移动的，即<code>IsMoving = true;</code></p><p><strong>由于敌人坦克是要一直移动的，所以<code>IsMoving </code>其实没有用</strong></p><p>为了严谨我们可以重新把<code>IsMoving</code>剪切回<code>MyTank</code>类中，因为<code>IsMoving</code>实际上还是<code>MyTank</code>类独自拥有的属性，然后在删除<code>EnemyTank</code>类构造方法里的<code>IsMoving</code>属性</p><p>由于移动的代码是差不多的，所以我们可以把MyTank中的<code>_Move</code>，<code>_MoveCheck</code>和<code>Update()</code>复制到EnemyTank中修改</p><p>随机数<code>Random</code>最好设置成成员变量，因为同一个种子可以保证数字的随机</p><p>我们需要创建一个<code>_ChangeDirection</code>方法，让敌人撞到障碍物之前改变方向</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_ChangeDirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">Direction</span> dir <span class="token operator">=</span> <span class="token punctuation">(</span>Direction<span class="token punctuation">)</span>_r<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Direction为0-3</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dir <span class="token operator">==</span> Dir<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            Dir <span class="token operator">=</span> dir<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//更改方向后仍然可能存在障碍物,所以我们需要再执行一次_MoveCheck</span>    <span class="token function">_MoveCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>EnemyTank类完整代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">EnemyTank</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Movething</span></span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">Random</span> _r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">EnemyTank</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> speed<span class="token punctuation">,</span><span class="token class-name">Bitmap</span> bmpDown<span class="token punctuation">,</span> <span class="token class-name">Bitmap</span> bmpUp<span class="token punctuation">,</span> <span class="token class-name">Bitmap</span> bmpRight<span class="token punctuation">,</span> <span class="token class-name">Bitmap</span> bmpLeft<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//初始坐标</span>            X <span class="token operator">=</span> x<span class="token punctuation">;</span>            Y <span class="token operator">=</span> y<span class="token punctuation">;</span>            <span class="token comment">//初始速度</span>            Speed <span class="token operator">=</span> speed<span class="token punctuation">;</span>            <span class="token comment">//四个方向的图片</span>            BitmapDown <span class="token operator">=</span> bmpDown<span class="token punctuation">;</span>            BitmapUp <span class="token operator">=</span> bmpUp<span class="token punctuation">;</span>            BitmapRight <span class="token operator">=</span> bmpRight<span class="token punctuation">;</span>            BitmapLeft <span class="token operator">=</span> bmpLeft<span class="token punctuation">;</span>            <span class="token comment">//初始方向</span>            Dir <span class="token operator">=</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_ChangeDirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">Direction</span> dir <span class="token operator">=</span> <span class="token punctuation">(</span>Direction<span class="token punctuation">)</span>_r<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Direction为0-3</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dir <span class="token operator">==</span> Dir<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    Dir <span class="token operator">=</span> dir<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//更改方向后仍然可能存在障碍物,所以我们需要再执行一次_MoveCheck</span>            <span class="token function">_MoveCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">_MoveCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//移动检查</span>            <span class="token function">_Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_MoveCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token preprocessor property">#<span class="token directive keyword">region</span> 检查有没有超出窗体边界，判断四个方向即可</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Dir <span class="token operator">==</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Y <span class="token operator">-</span> Speed <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token function">_ChangeDirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Dir <span class="token operator">==</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Y <span class="token operator">+</span> Speed <span class="token operator">+</span> Height <span class="token operator">></span> <span class="token number">450</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token function">_ChangeDirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Dir <span class="token operator">==</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>X <span class="token operator">-</span> Speed <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token function">_ChangeDirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>X <span class="token operator">+</span> Speed <span class="token operator">+</span> Height <span class="token operator">></span> <span class="token number">450</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token function">_ChangeDirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>            <span class="token comment">//检查有没有和其他元素发生碰撞</span>            <span class="token class-name">Rectangle</span> rectangle <span class="token operator">=</span> <span class="token function">GetRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>Dir<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">:</span>                    rectangle<span class="token punctuation">.</span>Y <span class="token operator">-=</span> Speed<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">:</span>                    rectangle<span class="token punctuation">.</span>Y <span class="token operator">+=</span> Speed<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">:</span>                    rectangle<span class="token punctuation">.</span>X <span class="token operator">-=</span> Speed<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Right<span class="token punctuation">:</span>                    rectangle<span class="token punctuation">.</span>X <span class="token operator">+=</span> Speed<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>GameObjectManager<span class="token punctuation">.</span><span class="token function">IsCollidedWall</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">_ChangeDirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>GameObjectManager<span class="token punctuation">.</span><span class="token function">IsCollidedSteel</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">_ChangeDirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>GameObjectManager<span class="token punctuation">.</span><span class="token function">IsCollidedBoss</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">_ChangeDirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>Dir<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">:</span>                    Y <span class="token operator">-=</span> Speed<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">:</span>                    Y <span class="token operator">+=</span> Speed<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">:</span>                    X <span class="token operator">-=</span> Speed<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> Direction<span class="token punctuation">.</span>Right<span class="token punctuation">:</span>                    X <span class="token operator">+=</span> Speed<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221019212214616.png"></p><p>由于敌人坦克之间没有进行同类的碰撞检测，所以你可以看到有部分的敌人坦克存在重叠的情况，这是没什么问题的</p><h3 id="10-3-解决资源冲突问题"><a href="#10-3-解决资源冲突问题" class="headerlink" title="10.3 解决资源冲突问题"></a>10.3 解决资源冲突问题</h3><p>当你运行一段事件后会报错，如下图所示</p><p><img src="/images/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221019213134135.png"></p>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WinForm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合类列表List</title>
      <link href="/2022/10/13/%E9%9B%86%E5%90%88%E7%B1%BB%E5%88%97%E8%A1%A8List/"/>
      <url>/2022/10/13/%E9%9B%86%E5%90%88%E7%B1%BB%E5%88%97%E8%A1%A8List/</url>
      
        <content type="html"><![CDATA[<h2 id="List-类"><a href="#List-类" class="headerlink" title="List 类"></a>List<T> 类</T></h2><p>表示可通过索引访问的对象的强类型列表。 提供用于对列表进行搜索、排序和操作的方法。</p><p>列表的简单示例</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ListExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//遍历myList列表</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ShowList</span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> myList<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> myList<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>item <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//定义一个列表myList</span>            <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> myList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">,</span> <span class="token number">789</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"初始列表："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ShowList</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//添加数据</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"向末尾添加666："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            myList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ShowList</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//插入数据</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"向索引为3的位置添加888："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            myList<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ShowList</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//移除特定对象的第一个匹配项</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"移除第一个456："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            myList<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ShowList</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//输出myList列表的长度</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"myList列表的长度为"</span> <span class="token operator">+</span> myList<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//返回第一个匹配项的从零开始的索引</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"myList列表中第一个789的索引为"</span><span class="token operator">+</span>myList<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token number">789</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><p><img src="/images/%E9%9B%86%E5%90%88%E7%B1%BB%E5%88%97%E8%A1%A8List/image-20221013150053327.png"></p><p>该 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic.list-1?view=net-6.0">List</a> 类是类 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.arraylist?view=net-6.0">ArrayList</a> 的泛型等效项。 它通过使用一个数组实现 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic.ilist-1?view=net-6.0">IList</a> 泛型接口，该数组的大小根据需要<strong>动态增加</strong>。</p><ul><li><p>列表内部数据是使用数组进行从存储，一个空的列表内部会有一个长度为0的数组</p><ul><li>当给列表中添加元素的时候，列表的容量会扩大为4</li><li>如果添加第5个的时候列表的大小会重新设置为8</li><li>如果添加第9个元素，列表容量会扩大为16，依次2倍扩容</li></ul></li><li><p>当列表中的容量发生改变的时候，它会创建一个新的数组，使用Array.Copy()方法将旧数组中的元素复制到新数组中。</p></li><li><p>Capacity是容量，Count是元素个数</p><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic.list-1.capacity?view=net-6.0#system-collections-generic-list-1-capacity">Capacity</a></th><th>获取或设置该内部数据结构在不调整大小的情况下能够容纳的元素总数。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic.list-1.count?view=net-6.0#system-collections-generic-list-1-count">Count</a></td><td>获取 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic.list-1?view=net-6.0">List</a> 中包含的元素数。</td></tr><tr><td>[Item<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.collections.generic.list-1.item?view=net-6.0#system-collections-generic-list-1-item(system-int32)">Int32]</a></td><td>获取或设置指定索引处的元素。</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>               <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> myListOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> myListTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token number">123</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> myListThree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">,</span> <span class="token number">789</span><span class="token punctuation">,</span><span class="token number">1434</span><span class="token punctuation">,</span><span class="token number">2323</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"myListOne:  </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">myListOne<span class="token punctuation">.</span>Capacity</span><span class="token punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">myListOne<span class="token punctuation">.</span>Count</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"myListTwo:  </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">myListTwo<span class="token punctuation">.</span>Capacity</span><span class="token punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">myListTwo<span class="token punctuation">.</span>Count</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"myListThree:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">myListThree<span class="token punctuation">.</span>Capacity</span><span class="token punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">myListThree<span class="token punctuation">.</span>Count</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">myListOne:  0:0myListTwo:  4:1myListThree:8:5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharpIO详解</title>
      <link href="/2022/10/11/CSharpIO%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/10/11/CSharpIO%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是I-O"><a href="#1-什么是I-O" class="headerlink" title="1. 什么是I/O"></a>1. 什么是I/O</h2><p>I/O 的全称是input/output，翻译过来就是输入/输出。对于一个系统或者计算机来说，键盘、U盘、网络接口、显示器、音响、摄像头等都是IO设备。那么，对于一个程序I/O又是什么呢？</p><p>对于程序而言，I/O就是与外界进行数据交换的方式。借用一句广告词，程序不生产数据，只是数据的搬用工。当然，正如XX还需要对水进行过滤、消毒等工序一样，程序也要对数据进行运算，所以也不完全算是搬用工，严格来讲是加工厂。那么，I/O就是工厂的原料提供商和成品销售商。</p><p><strong>在C# 中，I/O体系整体分为三个部分，后台存储流、装饰器流、流适配器，具体划分如下图所示：</strong></p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/v2-f747eb53b7b2e143ae8836cd49692f62_720w.webp"></p><p>在流与流之间，都是采用字节数据进行交换，所以可以得到一个简单的结论，I/O在程序中表现为字节流，换句话说I/O就是将各种数据转成字节的工具。</p><h3 id="1-1-System-IO-命名空间"><a href="#1-1-System-IO-命名空间" class="headerlink" title="1.1 System.IO 命名空间"></a>1.1 System.IO 命名空间</h3><p>包含允许读写文件和数据流的类型以及提供基本文件和目录支持的类型。</p><h4 id="1-1-1-文件系统类-System-IO-的介绍"><a href="#1-1-1-文件系统类-System-IO-的介绍" class="headerlink" title="1.1.1 文件系统类(System.IO)的介绍"></a>1.1.1 文件系统类(System.IO)的介绍</h4><p>​    文件操作类大都在<code>System.IO</code>命名空间里。<code>FileSystemInfo</code>类是任何文件系统类的基类；<code>FileInfo</code>与<code>File</code>表示文件系统中的文件；<code>DirectoryInfo</code>与<code>Directory</code>表示文件系统中的文件夹；<code>Path</code>表示文件系统中的路径；<code>DriveInfo</code>提供对有关驱动器的信息的访问。<strong>注意，XXXInfo与XXX类的区别是：XXX是静态类，XXXInfo类可以实例化。</strong><br>​    还有个较为特殊的类System.MarshalByRefObject允许在支持远程处理的应用程序中跨应用程序域边界访问对象。 </p><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.binaryreader?view=net-6.0">BinaryReader</a></th><th>用特定的编码将基元数据类型读作二进制值。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.binarywriter?view=net-6.0">BinaryWriter</a></td><td>将二进制中的基元类型写入流并支持用特定的编码写入字符串。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.bufferedstream?view=net-6.0">BufferedStream</a></td><td>将缓冲层添加到另一个流上的读取和写入操作。 此类不能被继承。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.directory?view=net-6.0">Directory</a></td><td>公开用于通过目录和子目录进行创建、移动和枚举的静态方法。 此类不能被继承。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.directoryinfo?view=net-6.0">DirectoryInfo</a></td><td>公开用于创建、移动和枚举目录和子目录的实例方法。 此类不能被继承。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.directorynotfoundexception?view=net-6.0">DirectoryNotFoundException</a></td><td>找不到文件或目录的部件时引发的异常。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.driveinfo?view=net-6.0">DriveInfo</a></td><td>提供对有关驱动器的信息的访问。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.drivenotfoundexception?view=net-6.0">DriveNotFoundException</a></td><td>当尝试访问的驱动器或共享不可用时引发的异常。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.endofstreamexception?view=net-6.0">EndOfStreamException</a></td><td>尝试在流末尾之后读取时引发的异常。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.enumerationoptions?view=net-6.0">EnumerationOptions</a></td><td>提供文件和目录枚举选项。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.erroreventargs?view=net-6.0">ErrorEventArgs</a></td><td>为 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filesystemwatcher.error?view=net-6.0">Error</a> 事件提供数据。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file?view=net-6.0">File</a></td><td>提供用于创建、复制、删除、移动和打开单一文件的静态方法，并协助创建 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 对象。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.fileinfo?view=net-6.0">FileInfo</a></td><td>提供用于创建、复制、删除、移动和打开文件的属性和实例方法，并且帮助创建 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 对象。 此类不能被继承。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.fileloadexception?view=net-6.0">FileLoadException</a></td><td>找到托管程序集但不能加载时引发的异常。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filenotfoundexception?view=net-6.0">FileNotFoundException</a></td><td>尝试访问磁盘上不存在的文件失败时引发的异常。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a></td><td>为文件提供 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.stream?view=net-6.0">Stream</a>，既支持同步读写操作，也支持异步读写操作。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestreamoptions?view=net-6.0">FileStreamOptions</a></td><td>定义各种配置 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a>选项。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filesystemaclextensions?view=net-6.0">FileSystemAclExtensions</a></td><td>提供特定于 Windows 的静态扩展方法用来操作文件和目录的访问控制列表 (ACL) 安全属性。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filesystemeventargs?view=net-6.0">FileSystemEventArgs</a></td><td>为目录事件提供数据：<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filesystemwatcher.changed?view=net-6.0">Changed</a>、<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filesystemwatcher.created?view=net-6.0">Created</a>、<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filesystemwatcher.deleted?view=net-6.0">Deleted</a>。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filesysteminfo?view=net-6.0">FileSystemInfo</a></td><td>为 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.fileinfo?view=net-6.0">FileInfo</a> 和 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.directoryinfo?view=net-6.0">DirectoryInfo</a> 对象提供基类。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filesystemwatcher?view=net-6.0">FileSystemWatcher</a></td><td>侦听文件系统更改通知，并在目录或目录中的文件发生更改时引发事件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.internalbufferoverflowexception?view=net-6.0">InternalBufferOverflowException</a></td><td>内部缓冲区溢出时引发的异常。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.invaliddataexception?view=net-6.0">InvalidDataException</a></td><td>数据流格式无效时引发的异常。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.ioexception?view=net-6.0">IOException</a></td><td>发生 I/O 错误时引发的异常。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.memorystream?view=net-6.0">MemoryStream</a></td><td>创建一个流，其后备存储为内存。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.path?view=net-6.0">Path</a></td><td>对包含文件或目录路径信息的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.string?view=net-6.0">String</a> 实例执行操作。 这些操作是以跨平台的方式执行的。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.pathtoolongexception?view=net-6.0">PathTooLongException</a></td><td>当路径名或完全限定的文件名长度超过系统定义的最大长度时引发的异常。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.randomaccess?view=net-6.0">RandomAccess</a></td><td>提供基于偏移的 API，用于以线程安全的方式读取和写入文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.renamedeventargs?view=net-6.0">RenamedEventArgs</a></td><td>为 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filesystemwatcher.renamed?view=net-6.0">Renamed</a> 事件提供数据。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.stream?view=net-6.0">Stream</a></td><td>提供字节序列的一般视图。 这是一个抽象类。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.streamreader?view=net-6.0">StreamReader</a></td><td>实现一个 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.textreader?view=net-6.0">TextReader</a>，使其以一种特定的编码从字节流中读取字符。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.streamwriter?view=net-6.0">StreamWriter</a></td><td>实现一个 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.textwriter?view=net-6.0">TextWriter</a>，使其以一种特定的编码向流中写入字符。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.stringreader?view=net-6.0">StringReader</a></td><td>实现从字符串进行读取的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.textreader?view=net-6.0">TextReader</a>。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.stringwriter?view=net-6.0">StringWriter</a></td><td>实现用于将信息写入字符串的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.textwriter?view=net-6.0">TextWriter</a>。 信息存储在基础 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.text.stringbuilder?view=net-6.0">StringBuilder</a> 中。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.textreader?view=net-6.0">TextReader</a></td><td>表示可读取有序字符系列的读取器。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.textwriter?view=net-6.0">TextWriter</a></td><td>表示可以编写一个有序字符系列的编写器。 此类为抽象类。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.unmanagedmemoryaccessor?view=net-6.0">UnmanagedMemoryAccessor</a></td><td>提供从托管代码随机访问非托管内存块的能力。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.unmanagedmemorystream?view=net-6.0">UnmanagedMemoryStream</a></td><td>提供从托管代码访问非托管内存块的能力。</td></tr></tbody></table><h4 id="1-1-2-FileInfo与File类"><a href="#1-1-2-FileInfo与File类" class="headerlink" title="1.1.2 FileInfo与File类"></a>1.1.2 FileInfo与File类</h4><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file?view=net-6.0">File</a></th><th>提供用于创建、复制、删除、移动和打开单一文件的静态方法，并协助创建 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 对象。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.fileinfo?view=net-6.0">FileInfo</a></td><td>提供用于创建、复制、删除、移动和打开文件的属性和实例方法，并且帮助创建 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 对象。 此类不能被继承。</td></tr></tbody></table><p>示例如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">FileInfo</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"G:/blog/local/1.txt"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//读取一个文件</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"创建时间:"</span><span class="token operator">+</span>file<span class="token punctuation">.</span>CreationTime<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//输出文件从创建时间</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"路径:"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span>DirectoryName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//输出文件创建的路径</span>            <span class="token class-name">StreamWriter</span> sw <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//打开追加流</span>            sw<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//追加数据</span>            sw<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放资源，关闭文件</span>            <span class="token class-name"><span class="token keyword">string</span></span> path <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"G:/blog/local/2.txt"</span></span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//创建一个文件并写入内容</span>            <span class="token keyword">using</span><span class="token punctuation">(</span><span class="token class-name">StreamWriter</span> sw2 <span class="token operator">=</span> file2<span class="token punctuation">.</span><span class="token function">CreateText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                sw2<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sw2<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//OpenText方法创建使用从现有文本文件中读取的 UTF8 编码的 StreamReader。</span>            <span class="token comment">//打开文件并读入内容</span>            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">StreamReader</span> sr2 <span class="token operator">=</span> file2<span class="token punctuation">.</span><span class="token function">OpenText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name"><span class="token keyword">var</span></span> s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">=</span>sr2<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"2.txt文本的内容为："</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">try</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//GetTempFileName方法在磁盘上创建一个唯一命名的零字节临时文件，并返回该文件的完整路径。</span>                <span class="token class-name"><span class="token keyword">string</span></span> path2 <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">GetTempFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">var</span></span> file3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span>path2<span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"file3文件的路径为："</span><span class="token operator">+</span>file3<span class="token punctuation">.</span>DirectoryName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//永久删除文件file3文件</span>                file3<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//CopyTo方法将现有文件复制到新文件，不允许覆盖现有文件。</span>                file2<span class="token punctuation">.</span><span class="token function">CopyTo</span><span class="token punctuation">(</span>path2<span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"file2文件的路径为："</span><span class="token operator">+</span>file2<span class="token punctuation">.</span>DirectoryName<span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">path</span><span class="token punctuation">&#125;</span></span><span class="token string"> was copied to </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">path2</span><span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//删除新创建的文件</span>                file2<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">path2</span><span class="token punctuation">&#125;</span></span><span class="token string"> was successfully deleted."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"The process failed: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">e<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">创建时间:2022&#x2F;9&#x2F;30 14:14:14路径:G:\blog\local2.txt文本的内容为：Hello2.txt文本的内容为：Worldfile3文件的路径为：C:\Users\8y\AppData\Local\Tempfile2文件的路径为：G:\blog\localG:&#x2F;blog&#x2F;local&#x2F;2.txt was copied to C:\Users\8y\AppData\Local\Temp\tmpE3E7.tmp.C:\Users\8y\AppData\Local\Temp\tmpE3E7.tmp was successfully deleted.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>File</code>类是一个静态类，不允许创建实例，示例如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">string</span></span> path <span class="token operator">=</span> <span class="token string">@"G:/blog/local/1.txt"</span><span class="token punctuation">;</span>        <span class="token comment">//判断文件是否存在</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">// Create a file to write to.</span>            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">StreamWriter</span> sw <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">CreateText</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                sw<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sw<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"And"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sw<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Welcome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">StreamWriter</span> sw <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">AppendText</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            sw<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sw<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sw<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Open the file to read from.</span>        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">StreamReader</span> sr <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">OpenText</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">string</span></span> s<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> sr<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">HelloAndWelcome666666666<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-1-3-DirectoryInfo与Directory类"><a href="#1-1-3-DirectoryInfo与Directory类" class="headerlink" title="1.1.3 DirectoryInfo与Directory类"></a>1.1.3 DirectoryInfo与Directory类</h4><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.directory?view=net-6.0">Directory</a></th><th>公开用于通过目录和子目录进行创建、移动和枚举的静态方法。 此类不能被继承。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.directoryinfo?view=net-6.0">DirectoryInfo</a></td><td>公开用于创建、移动和枚举目录和子目录的实例方法。 此类不能被继承。</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// Specify the directories you want to manipulate.</span>        <span class="token class-name">DirectoryInfo</span> di <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DirectoryInfo</span><span class="token punctuation">(</span><span class="token string">@"G:\blog\local\MyDir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">// Determine whether the directory exists.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>di<span class="token punctuation">.</span>Exists<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">// Indicate that the directory already exists.</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"That path exists already."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// Try to create the directory.</span>            di<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The directory was created successfully."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Delete the directory.</span>            di<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The directory was deleted successfully."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The process failed: &#123;0&#125;"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">The directory was created successfully.The directory was deleted successfully.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下面的示例演示如何复制目录及其内容。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CopyAll</span><span class="token punctuation">(</span><span class="token class-name">DirectoryInfo</span> source<span class="token punctuation">,</span><span class="token class-name">DirectoryInfo</span> target<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//FullName获取目录或文件的完整目录。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span>FullName<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> target<span class="token punctuation">.</span>FullName<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//判断目标目录是否存在，不存在则创建</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//复制文件</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> source<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//由于存在转义字符所以用@，不用$</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">@"Copying &#123;0&#125;\&#123;1&#125;"</span><span class="token punctuation">,</span>target<span class="token punctuation">.</span>FullName<span class="token punctuation">,</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            item<span class="token punctuation">.</span><span class="token function">CopyTo</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//Path.Combine将多个字符串组合成一个路径。</span>            <span class="token comment">//Path.Combine(target.ToString(),item.Name)为目标目录/文件</span>            <span class="token comment">//true表示允许覆盖现有文件。</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//复制目录</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> source<span class="token punctuation">.</span><span class="token function">GetDirectories</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">DirectoryInfo</span> nextTargetSubDir <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">CreateSubdirectory</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//CreateSubdirectory在指定路径上创建一个或多个子目录。 指定路径可以是相对于 DirectoryInfo 类的此实例的路径。</span>            <span class="token function">CopyAll</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>nextTargetSubDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">string</span></span> sourceDirectory <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"G:/blog/local/test"</span></span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">string</span></span> targetDirectory <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"G:/blog/local/MyDir"</span></span><span class="token punctuation">;</span>        <span class="token class-name">DirectoryInfo</span> disSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DirectoryInfo</span><span class="token punctuation">(</span>sourceDirectory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DirectoryInfo</span> disTarget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DirectoryInfo</span><span class="token punctuation">(</span>targetDirectory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">CopyAll</span><span class="token punctuation">(</span>disSource<span class="token punctuation">,</span> disTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-1-4-Path类"><a href="#1-1-4-Path类" class="headerlink" title="1.1.4 Path类"></a>1.1.4 Path类</h4><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.path?view=net-6.0">Path</a></th><th>对包含文件或目录路径信息的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.string?view=net-6.0">String</a> 实例执行操作。 这些操作是以跨平台的方式执行的。</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">string</span></span> path1 <span class="token operator">=</span> <span class="token string">@"G:/blog/local/1.txt"</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">string</span></span> path2 <span class="token operator">=</span> <span class="token string">@"G:/blog/local/1"</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">string</span></span> path3 <span class="token operator">=</span> <span class="token string">@"temp"</span><span class="token punctuation">;</span>        <span class="token comment">//Path.HasExtension(string)方法确定路径是否包括文件扩展名。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">HasExtension</span><span class="token punctuation">(</span>path1<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125; has an extension."</span><span class="token punctuation">,</span> path1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Path<span class="token punctuation">.</span><span class="token function">HasExtension</span><span class="token punctuation">(</span>path2<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125; has no extension."</span><span class="token punctuation">,</span> path2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//Path.IsPathRooted()返回一个值，指示文件路径是否包含根。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Path<span class="token punctuation">.</span><span class="token function">IsPathRooted</span><span class="token punctuation">(</span>path3<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The string &#123;0&#125; contains no root information."</span><span class="token punctuation">,</span> path3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//Path.GetFullPath返回指定路径字符串的绝对路径。</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The full path of &#123;0&#125; is &#123;1&#125;."</span><span class="token punctuation">,</span> path3<span class="token punctuation">,</span> Path<span class="token punctuation">.</span><span class="token function">GetFullPath</span><span class="token punctuation">(</span>path3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回当前用户的临时文件夹的路径。</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125; is the location for temporary files."</span><span class="token punctuation">,</span> Path<span class="token punctuation">.</span><span class="token function">GetTempPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在磁盘上创建一个唯一命名的零字节临时文件，并返回该文件的完整路径。</span>        <span class="token comment">//Console.WriteLine("&#123;0&#125; is a file available for use.", Path.GetTempFileName());</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//Path.Combine将多个字符串组合成一个路径。</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span><span class="token string">@"G:\blog\local"</span><span class="token punctuation">,</span> <span class="token string">@"1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Path.DirectorySeparatorChar提供平台特定的字符，该字符用于在反映分层文件系统组织的路径字符串中分隔目录级别。</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"平台特定的字符："</span><span class="token operator">+</span>Path<span class="token punctuation">.</span>DirectorySeparatorChar<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Path.AltDirectorySeparatorChar提供平台特定的替换字符，该替换字符用于在反映分层文件系统组织的路径字符串中分隔目录级别。</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"平台特定的替换字符："</span><span class="token operator">+</span>Path<span class="token punctuation">.</span>AltDirectorySeparatorChar<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">G:\blog\local\1.txt平台特定的字符：\平台特定的替换字符：&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-2-文件的操作"><a href="#1-2-文件的操作" class="headerlink" title="1.2 文件的操作"></a>1.2 文件的操作</h3><h4 id="1-2-1-移动、复制、删除文件"><a href="#1-2-1-移动、复制、删除文件" class="headerlink" title="1.2.1 移动、复制、删除文件"></a>1.2.1 移动、复制、删除文件</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">string</span></span> path <span class="token operator">=</span> <span class="token string">@"G:/blog/local/3.txt"</span><span class="token punctuation">;</span>        File<span class="token punctuation">.</span><span class="token function">WriteAllText</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"2333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//WriteAllText:创建一个新文件，向其中写入指定的字符串，然后关闭文件。 如果目标文件已存在，则覆盖该文件。</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"文件创建成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File<span class="token punctuation">.</span><span class="token function">Move</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">@"G:/blog/local/MyDir/3.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Move:将指定文件移到新位置，提供要指定新文件名的选项。</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"文件移动成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span><span class="token string">@"G:/blog/local/MyDir/3.txt"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Copy(String, String)将现有文件复制到新文件。 不允许覆盖同名的文件。</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"文件复制成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token string">@"G:/blog/local/MyDir/3.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"文件已删除！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221011205015345.png" alt="image-20221011205015345"></p><p algin="center">1.2.1-图1 初始情况</p><p>第一次执行代码后</p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221011205219370.png"></p><p algin="center">1.2.1-图2 创建文件</p><p>按回车继续执行程序</p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221011205304048.png"></p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221011205346231.png"></p><p algin="center">1.2.1-图2 移动文件</p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221011205421575.png"></p><p algin="center">1.2.1-图2 复制文件</p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221011205450759.png"></p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221011205500945.png"></p><p algin="center">1.2.1-图2 删除文件</p><h4 id="1-2-2-判断是文件还是文件夹"><a href="#1-2-2-判断是文件还是文件夹" class="headerlink" title="1.2.2 判断是文件还是文件夹"></a>1.2.2 判断是文件还是文件夹</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">IsFile</span><span class="token punctuation">(</span><span class="token string">@"G:/blog/local"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">IsFile</span><span class="token punctuation">(</span><span class="token string">@"G:/blog/local/1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">IsFile</span><span class="token punctuation">(</span><span class="token string">@"G:/blog/local/xxxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">IsFile</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> path<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"是文件夹！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"是文件！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"路径不存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><pre class="line-numbers language-none"><code class="language-none">是文件夹！是文件！路径不存在！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-3-读写文件与数据流"><a href="#1-3-读写文件与数据流" class="headerlink" title="1.3 读写文件与数据流"></a>1.3 读写文件与数据流</h3><h4 id="1-3-1-读文件"><a href="#1-3-1-读文件" class="headerlink" title="1.3.1 读文件"></a>1.3.1 读文件</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">string</span></span> path <span class="token operator">=</span> <span class="token string">@"G:/blog/local/1.txt"</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> b <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllBytes</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//byte无符号的 8 位整数，字节数组存储的是ASCII码</span>        <span class="token comment">//File.ReadAllBytes打开一个二进制文件，将文件的内容读入一个字节数组，然后关闭该文件。</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ReadAllBytes读二进制:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> s <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllLines</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ReadAllLines读所有行:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> s<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">string</span></span> str <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllText</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ReadAllText读所有文本:\n"</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">ReadAllBytes读二进制:HelloAndWelcome666666666ReadAllLines读所有行:HelloAndWelcome666666666ReadAllText读所有行:HelloAndWelcome666666666<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.readallbytes?view=net-6.0#system-io-file-readallbytes(system-string)">ReadAllBytes(String)</a></th><th>打开一个二进制文件，将文件的内容读入一个字节数组，然后关闭该文件。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.readallbytesasync?view=net-6.0#system-io-file-readallbytesasync(system-string-system-threading-cancellationtoken)">ReadAllBytesAsync(String, CancellationToken)</a></td><td>以异步形式打开一个二进制文件，将文件的内容读入一个字节数组，然后关闭该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.readalllines?view=net-6.0#system-io-file-readalllines(system-string)">ReadAllLines(String)</a></td><td>打开一个文本文件，读取文件的所有行，然后关闭该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.readalllines?view=net-6.0#system-io-file-readalllines(system-string-system-text-encoding)">ReadAllLines(String, Encoding)</a></td><td>打开一个文件，使用指定的编码读取文件的所有行，然后关闭该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.readalllinesasync?view=net-6.0#system-io-file-readalllinesasync(system-string-system-threading-cancellationtoken)">ReadAllLinesAsync(String, CancellationToken)</a></td><td>以异步形式打开一个文本文件，读取文件的所有行，然后关闭该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.readalllinesasync?view=net-6.0#system-io-file-readalllinesasync(system-string-system-text-encoding-system-threading-cancellationtoken)">ReadAllLinesAsync(String, Encoding, CancellationToken)</a></td><td>以异步形式打开一个文本文件，使用指定的编码读取文件的所有行，然后关闭该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.readalltext?view=net-6.0#system-io-file-readalltext(system-string)">ReadAllText(String)</a></td><td>打开一个文本文件，读取文件中的所有文本，然后关闭此文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.readalltext?view=net-6.0#system-io-file-readalltext(system-string-system-text-encoding)">ReadAllText(String, Encoding)</a></td><td>打开一个文件，使用指定的编码读取文件中的所有文本，然后关闭此文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.readalltextasync?view=net-6.0#system-io-file-readalltextasync(system-string-system-threading-cancellationtoken)">ReadAllTextAsync(String, CancellationToken)</a></td><td>以异步形式打开一个文本文件，读取文件中的所有文本，然后关闭此文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.readalltextasync?view=net-6.0#system-io-file-readalltextasync(system-string-system-text-encoding-system-threading-cancellationtoken)">ReadAllTextAsync(String, Encoding, CancellationToken)</a></td><td>以异步形式打开一个文本文件，使用指定的编码读取文件的所有文本，然后关闭该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.readlines?view=net-6.0#system-io-file-readlines(system-string)">ReadLines(String)</a></td><td>读取文件的行。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.readlines?view=net-6.0#system-io-file-readlines(system-string-system-text-encoding)">ReadLines(String, Encoding)</a></td><td>读取具有指定编码的文件的行。</td></tr></tbody></table><h4 id="1-3-2-写文件"><a href="#1-3-2-写文件" class="headerlink" title="1.3.2 写文件"></a>1.3.2 写文件</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">string</span></span> path <span class="token operator">=</span> <span class="token string">@"G:/blog/local/1.txt"</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        File<span class="token punctuation">.</span><span class="token function">WriteAllBytes</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"WriteAllBytes写入字节数组成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> str <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"2333"</span><span class="token punctuation">,</span><span class="token string">"666"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        File<span class="token punctuation">.</span><span class="token function">WriteAllLines</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> str<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"WriteAllLines写入字符串集合成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">string</span></span> s <span class="token operator">=</span> <span class="token string">"666666666666"</span><span class="token punctuation">;</span>        File<span class="token punctuation">.</span><span class="token function">WriteAllText</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> s<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入字符串</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"WriteAllText写入指定的字符串成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><p>第一步，写入字节数组</p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221012163308250.png"></p><p>第二步，写入字符串集合</p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221012163331407.png"></p><p>第三步，写入指定的字符串</p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221012163422303.png"></p><table><thead><tr><th>[WriteAllBytes(String, Byte<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.writeallbytes?view=net-6.0#system-io-file-writeallbytes(system-string-system-byte())">])</a></th><th>创建一个新文件，在其中写入指定的字节数组，然后关闭该文件。 如果目标文件已存在，则覆盖该文件。</th></tr></thead><tbody><tr><td>[WriteAllBytesAsync(String, Byte<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.writeallbytesasync?view=net-6.0#system-io-file-writeallbytesasync(system-string-system-byte()-system-threading-cancellationtoken)">], CancellationToken)</a></td><td>以异步形式创建一个新文件，在其中写入指定的字节数组，然后关闭该文件。 如果目标文件已存在，则覆盖该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.writealllines?view=net-6.0#system-io-file-writealllines(system-string-system-collections-generic-ienumerable((system-string)))">WriteAllLines(String, IEnumerable)</a></td><td>创建一个新文件，向其中写入一个字符串集合，然后关闭该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.writealllines?view=net-6.0#system-io-file-writealllines(system-string-system-collections-generic-ienumerable((system-string))-system-text-encoding)">WriteAllLines(String, IEnumerable, Encoding)</a></td><td>使用指定的编码创建一个新文件，向其中写入一个字符串集合，然后关闭该文件。</td></tr><tr><td>[WriteAllLines(String, String<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.writealllines?view=net-6.0#system-io-file-writealllines(system-string-system-string())">])</a></td><td>创建一个新文件，在其中写入指定的字节数组，然后关闭该文件。</td></tr><tr><td>[WriteAllLines(String, String<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.writealllines?view=net-6.0#system-io-file-writealllines(system-string-system-string()-system-text-encoding)">], Encoding)</a></td><td>创建一个新文件，使用指定编码在其中写入指定的字符串数组，然后关闭该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.writealllinesasync?view=net-6.0#system-io-file-writealllinesasync(system-string-system-collections-generic-ienumerable((system-string))-system-threading-cancellationtoken)">WriteAllLinesAsync(String, IEnumerable, CancellationToken)</a></td><td>以异步形式创建一个新文件，在其中写入指定的行，然后关闭该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.writealllinesasync?view=net-6.0#system-io-file-writealllinesasync(system-string-system-collections-generic-ienumerable((system-string))-system-text-encoding-system-threading-cancellationtoken)">WriteAllLinesAsync(String, IEnumerable, Encoding, CancellationToken)</a></td><td>以异步形式创建一个新文件，使用指定编码在其中写入指定的行，然后关闭该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.writealltext?view=net-6.0#system-io-file-writealltext(system-string-system-string)">WriteAllText(String, String)</a></td><td>创建一个新文件，向其中写入指定的字符串，然后关闭文件。 如果目标文件已存在，则覆盖该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.writealltext?view=net-6.0#system-io-file-writealltext(system-string-system-string-system-text-encoding)">WriteAllText(String, String, Encoding)</a></td><td>创建一个新文件，使用指定编码向其中写入指定的字符串，然后关闭文件。 如果目标文件已存在，则覆盖该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.writealltextasync?view=net-6.0#system-io-file-writealltextasync(system-string-system-string-system-threading-cancellationtoken)">WriteAllTextAsync(String, String, CancellationToken)</a></td><td>以异步形式创建一个新文件，在其中写入指定的字符串，然后关闭该文件。 如果目标文件已存在，则覆盖该文件。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.writealltextasync?view=net-6.0#system-io-file-writealltextasync(system-string-system-string-system-text-encoding-system-threading-cancellationtoken)">WriteAllTextAsync(String, String, Encoding, CancellationToken)</a></td><td>以异步形式创建一个新文件，使用指定编码在其中写入指定的字符串，然后关闭该文件。 如果目标文件已存在，则覆盖该文件。</td></tr></tbody></table><h4 id="1-3-3-数据流"><a href="#1-3-3-数据流" class="headerlink" title="1.3.3 数据流"></a>1.3.3 数据流</h4><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.stream?view=net-6.0">Stream</a> 所有流的<strong>抽象基类</strong>。 流是字节序列的抽象，例如文件、输入/输出设备、进程中通信管道或 TCP/IP 套接字。 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.stream?view=net-6.0">Stream</a>类及其派生类提供这些不同类型的输入和输出的一般视图，并将程序员与操作系统和基础设备的具体详细信息隔离开来。</p><p>流涉及三个基本操作：</p><ul><li>可以从流中读取。 读取是将数据从流传输到数据结构（如字节数组）中。</li><li>可以写入流。 写入是指将数据从数据结构传输到流中。</li><li>流可以支持查找。 查找是指查询和修改流中的当前位置。 查找功能取决于流具有的后备存储的类型。 例如，网络流没有当前位置的统一概念，因此通常不支持查找。</li></ul><p>因为流的特性，可能并不是所有的流都支持这三种操作，所以Stream提供了三个属性，以方便确认流是否支持这三种操作：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">public abstract bool CanRead &#123; get; &#125; // 获取指示当前流是否支持读取的值public abstract bool CanWrite &#123; get; &#125; // 获取指示当前流是否支持写入功能的值public abstract bool CanSeek &#123; get; &#125; // 获取指示当前流是否支持查找功能的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上这三个属性均由子类根据自身特性确认是否支持读取、写入、查找，可能三个属性不会都为true，但绝对不会都为false。</p><p><strong>下面是一些常见的流：</strong></p><ul><li><strong>FileStream 用来操作文件的流</strong><ul><li>为文件提供 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.stream?view=net-6.0">Stream</a>，既支持同步读写操作，也支持异步读写操作。</li><li><code>public class FileStream : System.IO.Stream</code></li></ul></li><li><strong>MemoryStream 操作内存的流</strong></li><li><strong>BufferedStream 缓存流，用来增强其他流的操作性能</strong></li><li>NetworkStream 使用网络套接字进行操作的流</li><li>PipeStream 通过匿名和命名管道进行读取和写入</li><li>CryptoStream 用于将数据流链接到加密转换</li></ul><p><strong>数据流类的层次结构：</strong></p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/051413373995825.png"></p><h4 id="1-3-4-使用FileStream读写二进制文件"><a href="#1-3-4-使用FileStream读写二进制文件" class="headerlink" title="1.3.4 使用FileStream读写二进制文件"></a>1.3.4 使用FileStream读写二进制文件</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">string</span></span> path <span class="token operator">=</span> <span class="token string">@"G:/blog/local/3.txt"</span><span class="token punctuation">;</span>        <span class="token comment">////以写文件的方式创建文件</span>        <span class="token class-name">FileStream</span> fileStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>CreateNew<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Write<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用指定的路径、创建模式和读/写权限初始化 FileStream 类的新实例。</span>        <span class="token class-name"><span class="token keyword">string</span></span> str <span class="token operator">=</span> <span class="token string">"8yyy"</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>Unicode<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在派生类中重写时，将一组字符编码为一个字节序列。</span>        fileStream<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>        fileStream<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//释放由 Stream 对象使用的所有资源。</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"写入数据成功！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//以读文件的方式打开文件</span>        fileStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Read<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>bytes<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>        fileStream<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> temp<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"读取数据："</span> <span class="token operator">+</span> Encoding<span class="token punctuation">.</span>Unicode<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileStream<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><p>第一步写入文件</p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221012170028003.png"></p><p>第二步读取文件里的内容</p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221012170049344.png"></p><p><strong>FileStream</strong> 类 构造函数</p><table><thead><tr><th><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.-ctor?view=net-6.0#system-io-filestream-ctor(microsoft-win32-safehandles-safefilehandle-system-io-fileaccess)">FileStream(SafeFileHandle, FileAccess)</a></th><th>使用指定的读/写权限为指定的文件句柄初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 类的新实例。</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.-ctor?view=net-6.0#system-io-filestream-ctor(microsoft-win32-safehandles-safefilehandle-system-io-fileaccess-system-int32)">FileStream(SafeFileHandle, FileAccess, Int32)</a></td><td>使用指定的读/写权限和缓冲区大小为指定的文件句柄初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 类的新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.-ctor?view=net-6.0#system-io-filestream-ctor(microsoft-win32-safehandles-safefilehandle-system-io-fileaccess-system-int32-system-boolean)">FileStream(SafeFileHandle, FileAccess, Int32, Boolean)</a></td><td>使用指定的读/写权限、缓冲区大小和同步或异步状态为指定的文件句柄初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 类的新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.-ctor?view=net-6.0#system-io-filestream-ctor(system-string-system-io-filemode)">FileStream(String, FileMode)</a></td><td>使用指定的路径和创建模式初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 类的新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.-ctor?view=net-6.0#system-io-filestream-ctor(system-string-system-io-filemode-system-io-fileaccess)">FileStream(String, FileMode, FileAccess)</a></td><td>使用指定的路径、创建模式和读/写权限初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 类的新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.-ctor?view=net-6.0#system-io-filestream-ctor(system-string-system-io-filemode-system-io-fileaccess-system-io-fileshare)">FileStream(String, FileMode, FileAccess, FileShare)</a></td><td>使用指定的路径、创建模式、读/写权限和共享权限创建 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 类的新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.-ctor?view=net-6.0#system-io-filestream-ctor(system-string-system-io-filemode-system-io-fileaccess-system-io-fileshare-system-int32)">FileStream(String, FileMode, FileAccess, FileShare, Int32)</a></td><td>用指定的路径、创建模式、读/写及共享权限和缓冲区大小初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 类的新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.-ctor?view=net-6.0#system-io-filestream-ctor(system-string-system-io-filemode-system-io-fileaccess-system-io-fileshare-system-int32-system-boolean)">FileStream(String, FileMode, FileAccess, FileShare, Int32, Boolean)</a></td><td>使用指定的路径、创建模式、读/写和共享权限、缓冲区大小和同步或异步状态初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 类的新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.-ctor?view=net-6.0#system-io-filestream-ctor(system-string-system-io-filemode-system-io-fileaccess-system-io-fileshare-system-int32-system-io-fileoptions)">FileStream(String, FileMode, FileAccess, FileShare, Int32, FileOptions)</a></td><td>使用指定的路径、创建模式、读/写和共享权限、其他 FileStreams 可以具有的对此文件的访问权限、缓冲区大小和附加文件选项初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 类的新实例。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.-ctor?view=net-6.0#system-io-filestream-ctor(system-string-system-io-filestreamoptions)">FileStream(String, FileStreamOptions)</a></td><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a>使用指定的路径、创建模式、读/写和共享权限、缓冲区大小、附加文件选项、预先分配大小以及其他 FileStreams 对同一文件的访问权限来初始化类的新实例。</td></tr></tbody></table><p>  <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.-ctor?view=net-6.0#system-io-filestream-ctor(system-string-system-io-filemode-system-io-fileaccess)">FileStream(String, FileMode, FileAccess)</a></p><p>使用指定的路径、创建模式和读/写权限初始化 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 类的新实例。</p><ul><li>path <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.string?view=net-6.0">String</a></li></ul><p>当前 <code>FileStream</code> 对象将封装的文件的相对路径或绝对路径。</p><ul><li>mode <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filemode?view=net-6.0">FileMode</a></li></ul><p>用于确定文件的打开或创建方式的枚举值之一。</p><ul><li>access <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.fileaccess?view=net-6.0">FileAccess</a></li></ul><p>枚举值的按位组合，这些枚举值确定 <code>FileStream</code> 对象访问文件的方式。 该常数还可以确定由 <code>FileStream</code> 对象的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.canread?view=net-6.0#system-io-filestream-canread">CanRead</a> 和 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.canwrite?view=net-6.0#system-io-filestream-canwrite">CanWrite</a> 属性返回的值。 如果 <code>path</code> 指定磁盘文件，则 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream.canseek?view=net-6.0#system-io-filestream-canseek">CanSeek</a> 为 <code>true</code>。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">fileStream<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>public override void Write (byte[] buffer, int offset, int count);</code></p><ul><li>buffer <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.byte?view=net-6.0">Byte</a>[]</li></ul><p>包含要写入该流的数据的缓冲区。</p><ul><li>offset <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.int32?view=net-6.0">Int32</a></li></ul><p><code>array</code> 中的从零开始的字节偏移量，从此处开始将字节复制到该流。</p><ul><li>count <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.int32?view=net-6.0">Int32</a></li></ul><p>最多写入的字节数。</p><h4 id="1-3-5-StreamWriter与StreamReader"><a href="#1-3-5-StreamWriter与StreamReader" class="headerlink" title="1.3.5 StreamWriter与StreamReader"></a>1.3.5 StreamWriter与StreamReader</h4><p>使用StreamWriter/StreamReader就不用担心文本文件的编码方式，所以它们很适合读写文本文件。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">string</span></span> path <span class="token operator">=</span> <span class="token string">@"G:/blog/local/4.txt"</span><span class="token punctuation">;</span>        <span class="token class-name">FileStream</span> fileStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>CreateNew<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Write<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StreamWriter</span> sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamWriter</span><span class="token punctuation">(</span>fileStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//StreamWriter 除非另外指定，否则默认为使用实例 UTF8Encoding 。</span>        sw<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"8yyy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sw<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"StreamWriter写入数据成功！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Read<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StreamReader</span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>fileStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"读取数据:"</span> <span class="token operator">+</span> sr<span class="token punctuation">.</span><span class="token function">ReadToEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sr<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221012190711396.png"></p><p><img src="/images/CSharpIO%E8%AF%A6%E8%A7%A3/image-20221012190728353.png"></p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.streamwriter?view=net-6.0">StreamWriter</a> 专用于特定编码的字符输出，而从派生的类 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.stream?view=net-6.0">Stream</a> 则设计用于字节输入和输出。</p><p>  <font size="6"> <b>重要</b></font></p><p><strong>此类型实现 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.idisposable?view=net-6.0">IDisposable</a> 接口。 在使用完类型后，您应直接或间接释放类型。 若要直接释放类型，请在 <code>try</code>/<code>catch</code> 块中调用其 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.idisposable.dispose?view=net-6.0">Dispose</a> 方法。 若要间接释放类型，请使用 <code>using</code>（在 C# 中）或 <code>Using</code>（在 Visual Basic 中）等语言构造。 有关详细信息，请参阅 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.idisposable?view=net-6.0">IDisposable</a> 接口主题中的“使用实现 IDisposable 的对象”一节。</strong></p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.streamwriter?view=net-6.0">StreamWriter</a> 除非另外指定，否则<strong>默认为使用实例 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.text.utf8encoding?view=net-6.0">UTF8Encoding</a></strong>  的此实例 <code>UTF8Encoding</code> 在构造时没有字节顺序标记 (BOM) ，因此其 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.text.encoding.getpreamble?view=net-6.0">GetPreamble</a> 方法返回一个空字节数组。 此构造函数的默认 UTF-8 编码对无效字节引发异常。 此行为不同于属性中的编码对象提供的行为 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.text.encoding.utf8?view=net-6.0">Encoding.UTF8</a> 。 若要指定一个 BOM 并确定无效字节是否引发了异常，请使用接受编码对象作为参数的构造函数，例如 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.streamwriter.-ctor?view=net-6.0#system-io-streamwriter-ctor(system-string-system-boolean-system-text-encoding)">StreamWriter(String, Boolean, Encoding)</a> 或 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.streamwriter.-ctor?view=net-6.0">StreamWriter</a> 。</p><p><strong>默认情况下， <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.streamwriter?view=net-6.0">StreamWriter</a> 不是线程安全的。</strong> <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.textwriter.synchronized?view=net-6.0">TextWriter.Synchronized</a>有关线程安全包装，请参阅。</p><p>有关常见 i/o 任务的列表，请参阅 <a href="https://learn.microsoft.com/zh-cn/dotnet/standard/io/common-i-o-tasks">常见 I/o 任务</a>。</p><h4 id="1-4-映射内存的文件"><a href="#1-4-映射内存的文件" class="headerlink" title="1.4.映射内存的文件"></a>1.4.映射内存的文件</h4><h4 id="1-4-1-MemoryMappedFile类-NET4新增"><a href="#1-4-1-MemoryMappedFile类-NET4新增" class="headerlink" title="1.4.1 MemoryMappedFile类(.NET4新增)"></a>1.4.1 MemoryMappedFile类(.NET4新增)</h4><p>表示内存映射文件。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemoryMappedFile</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDisposable</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    应用程序需要频繁地或随机地访问文件时，最好使用MemoryMappedFile类(映射内存的文件)。使用这种方式允许把文件的一部分或者全部加载到一段虚拟内存上，这些文件内容会显示给应用程序，就好像这个文件包含在应用程序的主内存中一样。</p><p><font size="6"> <b>注解</b></font></p><p>内存映射文件将文件的内容映射到应用程序的逻辑地址空间。 内存映射文件使程序员能够处理非常大的文件，因为内存可以同时管理，并且它们允许完全随机访问文件，而无需进行查找。 还可以跨多个进程共享内存映射文件。</p><p>这些 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.memorymappedfiles.memorymappedfile.createfromfile?view=net-6.0">CreateFromFile</a> 方法从指定的路径或 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-6.0">FileStream</a> 磁盘上的现有文件创建内存映射文件。 取消映射文件时，更改会自动传播到磁盘。</p><p>这些 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.memorymappedfiles.memorymappedfile.createnew?view=net-6.0">CreateNew</a> 方法创建未映射到磁盘上现有文件的内存映射文件;并且适用于创建共享内存以用于进程间通信 (IPC) 。</p><p>内存映射文件可以与可选名称相关联，该名称允许与其他进程共享内存映射文件。</p><p>可以创建内存映射文件的多个视图，包括文件部分的视图。 可以将文件的同一部分映射到多个地址以创建并发内存。 若要让两个视图一直处于并发状态，必须通过同一个内存映射文件创建它们。 使用两个视图创建同一文件的两个文件映射不提供并发。</p><p>参考：</p><p>1.<a href="https://zhuanlan.zhihu.com/p/144216991#:~:text=%E5%9C%A8C%23,%E4%B8%AD%EF%BC%8CI%2FO%E4%BD%93%E7%B3%BB%E6%95%B4%E4%BD%93%E5%88%86%E4%B8%BA%E4%B8%89%E4%B8%AA%E9%83%A8%E5%88%86%EF%BC%8C%E5%90%8E%E5%8F%B0%E5%AD%98%E5%82%A8%E6%B5%81%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E6%B5%81%E3%80%81%E6%B5%81%E9%80%82%E9%85%8D%E5%99%A8%EF%BC%8C%E5%85%B7%E4%BD%93%E5%88%92%E5%88%86%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%EF%BC%9A">C# 基础知识系列- 14 IO篇之入门IO</a></p><p>2.<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io?f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(System.IO);k(DevLang-csharp)&rd=true&view=net-6.0">MSDN文档</a></p><p>3.<a href="https://blog.csdn.net/q247538614/article/details/70765973">C#文件IO流详解</a></p>]]></content>
      
      
      <categories>
          
          <category> CSharp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp In Depth 笔记</title>
      <link href="/2022/10/04/CSharp-In-Depth-%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/04/CSharp-In-Depth-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp中常见的数据结构</title>
      <link href="/2022/10/03/CSharp%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2022/10/03/CSharp%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>数据结构：<br>                1.Set集合，纯粹的容器，无需存储，就是一个容器<br>                2.线型结构：在存储的时候，一对一存储<br>                3.树形结构：表达式目录树（二叉树）、菜单结构：一对多<br>                4.图形结构：扩扑图、网状结构（地图开发，用的上）</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token number">1</span><span class="token punctuation">.</span>线程结构    <span class="token number">1</span><span class="token punctuation">.</span>线程结构：Array<span class="token operator">/</span>ArrayList<span class="token operator">/</span>List<span class="token operator">/</span>LinkedList<span class="token operator">/</span>Queue<span class="token operator">/</span>Stack<span class="token operator">/</span>HastSet<span class="token operator">/</span>SortedSer<span class="token operator">/</span>Hashtable<span class="token operator">/</span>SortedList                Dictionaty<span class="token operator">/</span>SortedDictionary    <span class="token number">2</span><span class="token punctuation">.</span>数组：内存连续储存，节约空间，可以索引访问，读取快，增删慢        Array<span class="token punctuation">:</span>在内存上连续分配的，而且元素类型是一样的          可以坐标访问，读取快<span class="token operator">--</span><span class="token operator">-</span>增减慢，长度不变     ArrayList<span class="token punctuation">:</span>在以前的开发中使用不较多，不定长度，连续分配的              元素没有限制，任何元素都是当成Object处理，如果是值类型，会有装箱操作              读取快，增删慢     List：是Array，内存上都是连续摆放，不定长度，泛型，保证类型安全，避免装箱拆箱 性能也比ArrayList高          读取快，增删慢   以上特点：读取快，增删相对慢     <span class="token number">3</span><span class="token punctuation">.</span>非连续摆放，存储数据<span class="token operator">+</span>地址，找数据的话就只能顺序查找，读取慢，增删快        <span class="token number">1</span><span class="token punctuation">.</span>LinkedList<span class="token punctuation">:</span>泛型的特点：链表，元素不连续分配，每个元素都有记录前后节点，节点值可以重复                     能不能以下标访问：不能没找元素只能遍历，查找不方便                     增删 就比较方便            <span class="token class-name">LinkedList<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> node123 <span class="token operator">=</span> linkedList<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>得到节点                <span class="token number">2</span><span class="token punctuation">.</span>Queue 就是链表  先进先出 放任务延迟执行，A不断写入日志任务   B不断获取任务去执行            <span class="token class-name">Queue</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            queue<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加数据</span>            queue<span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取并移除数据</span>         <span class="token number">3</span><span class="token punctuation">.</span>Stack 就是链表  先进先出  解析表达式目录树，先产出的数据后使用，                操作记录为命令，撤销的时候是倒序                 <span class="token class-name">Stack</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加数据</span>                stack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取并移除数据</span>   <span class="token number">2</span><span class="token punctuation">.</span>Set纯粹的集合，容器，东西丢进去，唯一性，无序的        <span class="token number">1</span><span class="token punctuation">.</span>集合：hash分布，元素间没有关系，动态增加容量，去重                统计用户IP：IP投票  交叉并补<span class="token operator">--</span><span class="token operator">-</span>二次好友<span class="token operator">/</span>间接关注<span class="token operator">/</span>粉丝合集        <span class="token number">2</span><span class="token punctuation">.</span> 排序的集合：去重 而且排序                统计排名 <span class="token operator">--</span> 没统计一个就丢进集合里                IComparer<span class="token operator">&lt;</span>T<span class="token operator">></span> comparer 自定义对象的排序，就用这个指定  <span class="token number">3</span><span class="token punctuation">.</span>Hashtable  Key<span class="token operator">-</span><span class="token keyword">value</span>  体积可以动态增加  拿着Key计算一个地址，然后放入Key<span class="token operator">-</span><span class="token keyword">value</span>                <span class="token keyword">object</span> <span class="token operator">-</span> 装箱拆箱   如果不同的key得到相同的地址，第二个在前面地址上<span class="token operator">+</span><span class="token number">1</span> 浪费了空间，Hashtable是基于数组实现                  <span class="token number">4</span><span class="token punctuation">.</span>线程安全        ConcurrentQueue  线程安全版本的Queue        ConcurrentStack 线程安全版本的Stack        ConcurrentBag   线程安全的对象集合        ConcurrentDictionary    线程安全的Dictionary        BlockingCollection<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSharp DataStructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOTNETCORE</title>
      <link href="/2022/09/19/DOTNETCore/"/>
      <url>/2022/09/19/DOTNETCore/</url>
      
        <content type="html"><![CDATA[<h2 id="Part1-3-NET-Standard"><a href="#Part1-3-NET-Standard" class="headerlink" title="Part1-3 .NET Standard"></a>Part1-3 .NET Standard</h2><p>Net Standard只是一个标准，不是实现</p><p><img src="/images/DOTNETCore/image-20220929181328537.png"></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">FileStream</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">.</span>Location<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>FileStream(文件流) 这个类主要用于<a href="https://so.csdn.net/so/search?q=%E4%BA%8C%E8%BF%9B%E5%88%B6&spm=1001.2101.3001.7020">二进制</a>文件中读写，也可以使用它读写任何文件。</p></li><li><p>Assembly是Type的一个属性</p><ul><li>表示一个程序集，它是一个可重用、无版本冲突并且可自我描述的公共语言运行时应用程序构建基块。</li></ul></li><li><p>同样打印FileStream的位置，在.NET Framework和.Net Core里的结果不同</p></li><li><p>ILSpy 反编译器</p><ul><li>可以使用ILSpy反编译器验证.NET Standard只是标准，不是实现</li><li><img src="/images/DOTNETCore/image-20220930095806352.png"></li></ul></li><li><p>.NET Standard只是规范，一个.NET Standard类库可以被支持其版本的 .NET Framework、.NET Core、XAMARIN等引用。而.NET Core类库、.NET Framework类库则不可以。如果编写一个公用的类库，尽量选择.NET Standard，并且尽量用低版本</p><ul><li>.NET Standard也存在版本，与.NET Framework、.NET Core版本存在对应图</li><li><img src="/images/DOTNETCore/image-20220930100710855.png"></li></ul></li></ul><h2 id="Part1-6-NET项目结构及程序发布"><a href="#Part1-6-NET项目结构及程序发布" class="headerlink" title="Part1-6 .NET项目结构及程序发布"></a>Part1-6 .NET项目结构及程序发布</h2><p>WSL:Windows subsystem for linux</p><p>Sandbox</p><p>发布配置文件设置建议独立部署</p><h2 id="Part2-1-NuGet"><a href="#Part2-1-NuGet" class="headerlink" title="Part2-1 NuGet"></a>Part2-1 NuGet</h2><p>趋势</p><p>Linux：apt 、 yum</p><p>Javascript：npm</p><p>Java：Maven、Gradle</p><p>Python：pip</p><p>.NET ：<a href="https://www.nuget.org/">NuGet</a>（niuget） <a href="https://www.nuget.org/">https://www.nuget.org</a></p><ul><li>查看一个包先看<code>Dependencies</code>支持的版本</li><li>不全是开源的，有一部分是商用的<ul><li>看官网是否收费，比如说Purchase，word file</li><li>一般github的就是开源的</li></ul></li><li><code>This package has no dependencies</code>一般是属于比较老的包，只支持.NET Framework</li></ul><p>使用程序包管理控制台下载包</p><ul><li><p>工具 –&gt; NuGet 包管理器 –&gt; 程序包管理器控制台</p></li><li><p><img src="/images/DOTNETCore/image-20220930112223131.png"></p></li><li><p>在NuGet官网随便找一个包下载，如<code>MySql.Data</code></p></li><li><p><img src="/images/DOTNETCore/image-20220930112434163.png"></p></li><li><p>将<code>Package Manager</code>下面的代码复制到VS的<code>程序包管理控制台</code>下</p></li><li><p><code>NuGet\Install-Package MySql.Data -Version 8.0.30</code></p><ul><li>不带<code>-Version</code>下载最新稳定版</li></ul></li><li><p><img src="/images/DOTNETCore/image-20220930112605725.png"></p></li><li><p>你还可以选择<code>默认项目</code>选择下载到哪个项目里</p></li><li><p>安装完之后你就可以到<code>public</code>解决方案下的<code>依赖项</code>的<code>包</code>里看到<code>MySql.Data</code></p></li><li><p><img src="/images/DOTNETCore/image-20220930112926826.png"></p></li><li><p>之后是卸载操作，可以在<code>程序包管理控制台</code>直接输入如下语句卸载</p><pre class="line-numbers language-none"><code class="language-none">UnInstall-Package MySql.Data(这里的名字就是下图中&lt;ItemGroup&gt;里PackageReference中的Include)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><img src="/images/DOTNETCore/image-20220930113055901.png"></p></li><li><p>或者在项目文件里直接移除如下代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;ItemGroup&gt;  &lt;PackageReference Include&#x3D;&quot;MySql.Data&quot; Version&#x3D;&quot;8.0.30&quot; &#x2F;&gt;&lt;&#x2F;ItemGroup&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Part2-4-异步编程"><a href="#Part2-4-异步编程" class="headerlink" title="Part2-4 异步编程"></a>Part2-4 异步编程</h2><h3 id="Part2-4-3-异步编程"><a href="#Part2-4-3-异步编程" class="headerlink" title="Part2-4-3 异步编程"></a>Part2-4-3 异步编程</h3><ul><li><p>小例子：点餐</p><ul><li>同步点餐：服务员记录点菜</li><li>异步点餐：菜单</li><li>异步点餐不一定能提升单个客户点餐速度</li></ul></li><li><p>传统多线程开发太麻烦。</p><p>C#关键字：async（esinke）、await。</p><p>async、await不等于“多线程”</p></li></ul><h3 id="Part2-4-4-async、await基本使用"><a href="#Part2-4-4-async、await基本使用" class="headerlink" title="Part2-4-4 async、await基本使用"></a>Part2-4-4 async、await基本使用</h3><ul><li><p>“异步方法”：用async关键字修饰的方法</p><ul><li><ol><li>异步方法的返回值一般是Task<T>，T是真正的返回值类型，Task<int>。惯例：异步方法名字以Async结尾。</int></T></li></ol></li><li><ol start="2"><li>即使方法没有返回值，也最好把返回值声明为非泛型的Task。</li></ol></li><li><p>3)调用异步方法时，一般在方法前加上await，这样拿到的返回值就是泛型指定的T类型；</p></li><li><p>4)异步方法的“传染性”：一个方法中如果有await调用，则这个方法也必须修饰为async</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//没有返回值的方法</span><span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token class-name"><span class="token keyword">string</span></span> fileName <span class="token operator">=</span> <span class="token string">"d:/1.txt"</span><span class="token punctuation">;</span>   File<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>   File<span class="token punctuation">.</span><span class="token function">WriteAllTextAsync</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"hello async"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name"><span class="token keyword">string</span></span> s <span class="token operator">=</span> <span class="token keyword">await</span> File<span class="token punctuation">.</span><span class="token function">ReadAllTextAsync</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>   Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>举例同步方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">string</span></span> fileName <span class="token operator">=</span> <span class="token string">@"G:\8yyy's blog\local\1.txt"</span><span class="token punctuation">;</span>            File<span class="token punctuation">.</span><span class="token function">WriteAllText</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"hello,world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> s <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllText</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>File.WriteAllText 方法</strong><ul><li>创建一个新文件，向其中写入指定的字符串，然后关闭文件。 如果目标文件已存在，则覆盖该文件。</li><li><code>public static void WriteAllText (string path, string? contents);</code><ul><li><code>path</code> 要写入的文件</li><li><code>contents</code> 要写入的字符串</li></ul></li></ul></li><li><strong>File.ReadAllText 方法</strong><ul><li>打开一个文本文件，读取文件中的所有文本，然后关闭此文件。</li><li><code>public static string ReadAllText(string path)</code><ul><li><code>path</code> 要写入的文件</li></ul></li></ul></li></ul></li><li><p>使用异步方法</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">string</span></span> fileName <span class="token operator">=</span> <span class="token string">@"G:\8yyy's blog\local\1.txt"</span><span class="token punctuation">;</span>            <span class="token keyword">await</span> File<span class="token punctuation">.</span><span class="token function">WriteAllTextAsync</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"hello,aysnc!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> s <span class="token operator">=</span> <span class="token keyword">await</span> File<span class="token punctuation">.</span><span class="token function">ReadAllTextAsync</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>File.WriteAllTextAsync 方法</strong></p><ul><li>以异步形式创建一个新文件，在其中写入指定的字符串，然后关闭该文件。 如果目标文件已存在，则覆盖该文件。</li><li>本质是独占式写入</li><li><code>public static Task WriteAllTextAsync(string path, string contents, CancellationToken cancellationToken = default);</code></li><li>调用异步方法时，一般在方法前加上await</li><li>这里即使不加上await也不会报错，原因是加入的字符产太短了，如果加上很长的字符串，就会产生异常<code>System.IO.IOException</code></li></ul></li><li><p><strong>File.ReadAllTextAsync 方法</strong></p><ul><li>以异步形式打开一个文本文件，读取文件中的所有文本，然后关闭此文件。</li></ul></li></ul></li></ul></li></ul><h3 id="Part2-4-5-编写异步方法"><a href="#Part2-4-5-编写异步方法" class="headerlink" title="Part2-4-5 编写异步方法"></a>Part2-4-5 编写异步方法</h3><ul><li><p>示例1，不带返回值的异步方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Http</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">AwaitAsync</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">await</span> <span class="token function">DownloadHtmlAsync</span><span class="token punctuation">(</span><span class="token string">"https://www.youzack.com"</span><span class="token punctuation">,</span> <span class="token string">@"G:\8yyy's blog\local\1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">DownloadHtmlAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> fileName<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//这是一种比较粗鲁的写法</span>            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">HttpClient</span> httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name"><span class="token keyword">string</span></span> html <span class="token operator">=</span> <span class="token keyword">await</span> httpClient<span class="token punctuation">.</span><span class="token function">GetStringAsync</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">await</span> File<span class="token punctuation">.</span><span class="token function">WriteAllTextAsync</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行完using里面的代码后，将new的对象释放</li><li><strong>HttpClient 类</strong><ul><li>提供一个类，用于发送 HTTP 请求并从 URI 标识的资源接收 HTTP 响应。</li></ul></li><li><strong>HttpClient.GetStringAsync 方法</strong><ul><li>将 GET 请求发送到指定 URI 并在异步操作中以字符串的形式返回响应正文。</li></ul></li></ul></li><li><p>改为带返回值的异步方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> length <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">DownloadHtmlAsync</span><span class="token punctuation">(</span><span class="token string">"https://www.youzack.com"</span><span class="token punctuation">,</span> <span class="token string">@"G:\8yyy's blog\local\1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token function">DownloadHtmlAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> fileName<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//这是一种比较粗鲁的写法</span>            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">HttpClient</span> httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name"><span class="token keyword">string</span></span> html <span class="token operator">=</span> <span class="token keyword">await</span> httpClient<span class="token punctuation">.</span><span class="token function">GetStringAsync</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">await</span> File<span class="token punctuation">.</span><span class="token function">WriteAllTextAsync</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> html<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果同样的功能，既有同步方法，又有异步方法，那么首先使用异步方法。.NET5中，很多框架中的方法也都支持异步：Main、WinForm事件处理函数。</p><ul><li>WinForm中不能使用Task，只能使用void处理事件</li></ul></li><li><p>对于不支持的异步方法怎么办？Wait()（无返回值）；Result（有返回值）。风险：死锁。尽量不用。</p></li></ul><h2 id="Part2-4-6-async、await原理揭秘"><a href="#Part2-4-6-async、await原理揭秘" class="headerlink" title="Part2-4-6 async、await原理揭秘"></a>Part2-4-6 async、await原理揭秘</h2><ul><li><p>反编译使用dll，跨平台</p></li><li><p>用<code>ILSpy</code>反编译<code>dll</code>(.exe只是windows下的启动器)成C# 4.0版本，就能看到容易理解的底层IL代码。</p><ul><li>什么是IL代码？ <ul><li>IL,也称为CIL,MSI,是.NET框架中中间语言(Intermediate Language)的缩写。</li></ul></li></ul></li><li><p><code>await</code>、<code>async</code>是“语法糖”，最终编译成“状态机调用”。</p></li><li><p>总结：<code>async</code>的方法会被C#编译器编译成一个类，会主要根据<code>await</code>调用进行切分为多个状态，对<code>async</code>方法的调用会被拆分为对<code>MoveNext</code>的调用。</p></li><li><p>用<code>await</code>看似是“等待”，经过编译后，其实没有“wait”。</p></li><li><p>为什么要把一个<code>async</code>方法拆分为多个状态然后分为多次调用？</p><p>“异步的可以避免线程等待耗时操作” 但是<code>await</code>还是等待呀？</p><ul><li><p><code>await</code>调用的等待期间，<code>.NET</code>会把当前的线程返回给线程池，等异步方法调用执行完毕后，框架会从线程池再取出来一个线程执行后续的代码。</p></li><li><p><code>Thread.CurrentThread.ManagedThreadId</code>获得当前线程Id。</p><p><strong>验证：在耗时异步(写入大字符串)操作前后分别打印线程Id</strong></p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"xxxxxxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">await</span> File<span class="token punctuation">.</span><span class="token function">WriteAllTextAsync</span><span class="token punctuation">(</span><span class="token string">@"G:\8yyy's blog\local\1.txt"</span><span class="token punctuation">,</span> stringBuilder<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>线程的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.thread.managedthreadid?view=net-6.0">ManagedThreadId</a> 属性值用于唯一标识其进程中的线程。</p></li><li><p><strong>StringBuilder 类</strong></p><ul><li>表示可变字符字符串。 此类不能被继承。</li><li>尽管 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.text.stringbuilder?view=net-6.0">StringBuilder</a> <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.string?view=net-6.0">String</a> 和 都表示字符序列，但实现方式不同。 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.string?view=net-6.0">String</a> 是一种不可变类型。 也就是说，似乎要修改 对象的每个 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.string?view=net-6.0">String</a> 操作实际上都创建了一个新字符串。</li><li><strong>StringBuilder.Append 方法</strong><ul><li>向此实例追加指定对象的字符串表示形式。</li></ul></li></ul></li><li><p>输出结果不同，当然也有概率还是相同的。所以异步调用时分配给你的<strong>线程可能是不同的</strong></p><ul><li><strong>细节：如果写入内容少，会发现线程Id不变。</strong><ul><li><strong>优化：到要等待的时候，如果发现已经执行结束了，那就没必要再切换线程了，剩下的代码就继续在之前的线程上继续执行了。</strong></li></ul></li><li>取决于你电脑的性能</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOTNETCORE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刘铁猛《C#语言入门详解》笔记</title>
      <link href="/2022/09/02/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/09/02/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="0-导读"><a href="#0-导读" class="headerlink" title="0. 导读"></a>0. 导读</h2><p>根据<a href="https://www.bilibili.com/video/BV13b411b7Ht?spm_id_from=333.788.top_right_bar_window_custom_collection.content.click&vd_source=794a7fc718885ad84490c05351dcf216">B站视频</a>刘铁猛《C#语言入门详解》做的笔记。</p><h3 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h3><ul><li>完整讲述C#语言在实际软件开发中的应用</li><li>采用知识讲述加实际程序的形式</li></ul><h3 id="C-语言简介"><a href="#C-语言简介" class="headerlink" title="C#语言简介"></a>C#语言简介</h3><p><strong>怎样编写程序和程序语言的选择</strong></p><p>​    编辑 -&gt; 编译 -&gt; 调试 -&gt; 发布</p><p><strong>编程的学习路径</strong></p><ul><li>纵向  ：语言 -&gt; 类库 -&gt; 框架</li><li>横向  ：命令行程序，桌面程序，设备（平板/手机）程序，Web（网站/服务）程序，游戏…</li></ul><p><strong>学习资料</strong></p><ul><li><a href="https://docs.microsoft.com/zh-cn/visualstudio/get-started/csharp/?view=vs-2022">Visual Studio 教程 | C#</a></li><li><a href="https://pan.baidu.com/s/1H4MFrhR3LOu2a3HaAq2qag">C# Language Specification</a></li><li>离线MSDN文档</li></ul><hr><h2 id="1-第一个程序：Hello-World"><a href="#1-第一个程序：Hello-World" class="headerlink" title="1. 第一个程序：Hello,World!"></a>1. 第一个程序：Hello,World!</h2><h3 id="1-1-Solutoin与Project"><a href="#1-1-Solutoin与Project" class="headerlink" title="1.1 Solutoin与Project"></a>1.1 Solutoin与Project</h3><ul><li>Solution是针对客户需求的总的<strong>解决方案</strong>。举例：汽车经销商需要一套销售软件</li><li>Project(<strong>项目</strong>)解决具体的某个问题</li></ul><h3 id="1-2-在Console输出Hello-World"><a href="#1-2-在Console输出Hello-World" class="headerlink" title="1.2 在Console输出Hello,World!"></a>1.2 在Console输出Hello,World!</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello,World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-在Windows-Forms输出Hello-World"><a href="#1-3-在Windows-Forms输出Hello-World" class="headerlink" title="1.3 在Windows Forms输出Hello,World!"></a>1.3 在Windows Forms输出Hello,World!</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>ComponentModel</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Data</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Form1</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token function">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">buttonShowHello_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            textBoxShowHello<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"Hello,World!"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-在WPF输出Hello-World"><a href="#1-4-在WPF输出Hello-World" class="headerlink" title="1.4 在WPF输出Hello,World!"></a>1.4 在WPF输出Hello,World!</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Controls</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Data</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Documents</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Input</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Media</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Media<span class="token punctuation">.</span>Imaging</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Navigation</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Shapes</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">test</span><span class="token punctuation">&#123;</span>    <span class="token comment">/// &lt;summary></span>    <span class="token comment">/// Interaction logic for MainWindow.xaml</span>    <span class="token comment">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">MainWindow</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Window</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>               <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ButtonShowHello_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            textBoxShowHello<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"Hello,World!"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-在ASP-NET-Web-Forms输出Hello-World"><a href="#1-5-在ASP-NET-Web-Forms输出Hello-World" class="headerlink" title="1.5 在ASP.NET Web Forms输出Hello,World!"></a>1.5 在ASP.NET Web Forms输出Hello,World!</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token operator">&lt;</span><span class="token operator">%</span>@ <span class="token class-name">Page</span> Language<span class="token operator">=</span><span class="token string">"C#"</span> AutoEventWireup<span class="token operator">=</span><span class="token string">"true"</span> CodeBehind<span class="token operator">=</span><span class="token string">"Default.aspx.cs"</span> Inherits<span class="token operator">=</span><span class="token string">"WebApplication1.Default"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span><span class="token class-name">html</span> xmlns<span class="token operator">=</span><span class="token string">"http://www.w3.org/1999/xhtml"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token class-name">head</span> runat<span class="token operator">=</span><span class="token string">"server"</span><span class="token operator">></span><span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"Content-Type"</span> content<span class="token operator">=</span><span class="token string">"text/html; charset=utf-8"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>   <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span>World<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-6-在ASP-NET-MVC输出Hello-World"><a href="#1-6-在ASP-NET-MVC输出Hello-World" class="headerlink" title="1.6 在ASP.NET MVC输出Hello,World!"></a>1.6 在ASP.NET MVC输出Hello,World!</h3><p>一种架构，取代了Web Forms.</p><p>将.NET Framework框加版本,设置为4.5或者4.5以上版本</p><p>views -&gt; Home -&gt; Index.cshtml  <code>&lt;h2&gt;Hello,World!&lt;/h2&gt;</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">@<span class="token punctuation">&#123;</span>    ViewBag<span class="token punctuation">.</span>Title <span class="token operator">=</span> <span class="token string">"Home Page"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>h2<span class="token operator">></span>Hello<span class="token punctuation">,</span>World<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"jumbotron"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>ASP<span class="token punctuation">.</span>NET<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"lead"</span><span class="token operator">></span>ASP<span class="token punctuation">.</span>NET <span class="token keyword">is</span> <span class="token class-name">a</span> free web framework <span class="token keyword">for</span> building great Web sites <span class="token keyword">and</span> Web applications <span class="token keyword">using</span> HTML<span class="token punctuation">,</span> CSS <span class="token keyword">and</span> JavaScript<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token class-name">a</span> href<span class="token operator">=</span><span class="token string">"https://asp.net"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-primary btn-lg"</span><span class="token operator">></span>Learn more <span class="token operator">&amp;</span>raquo<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"row"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"col-md-4"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span>Getting started<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>            ASP<span class="token punctuation">.</span>NET MVC gives you <span class="token class-name">a</span> powerful<span class="token punctuation">,</span> patterns<span class="token operator">-</span>based way to build <span class="token keyword">dynamic</span> websites that            enables a clean separation of concerns <span class="token keyword">and</span> gives you full control over markup            <span class="token keyword">for</span> enjoyable<span class="token punctuation">,</span> agile development<span class="token punctuation">.</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-default"</span> href<span class="token operator">=</span><span class="token string">"https://go.microsoft.com/fwlink/?LinkId=301865"</span><span class="token operator">></span>Learn more <span class="token operator">&amp;</span>raquo<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"col-md-4"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span>Get more libraries<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>NuGet <span class="token keyword">is</span> <span class="token class-name">a</span> free Visual Studio extension that makes it easy <span class="token class-name">to</span> <span class="token keyword">add</span><span class="token punctuation">,</span> <span class="token keyword">remove</span><span class="token punctuation">,</span> <span class="token keyword">and</span> update libraries <span class="token keyword">and</span> tools <span class="token keyword">in</span> Visual Studio projects<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-default"</span> href<span class="token operator">=</span><span class="token string">"https://go.microsoft.com/fwlink/?LinkId=301866"</span><span class="token operator">></span>Learn more <span class="token operator">&amp;</span>raquo<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"col-md-4"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span>Web Hosting<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>You can easily find a web hosting company that offers the right mix of features <span class="token keyword">and</span> price <span class="token keyword">for</span> your applications<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-default"</span> href<span class="token operator">=</span><span class="token string">"https://go.microsoft.com/fwlink/?LinkId=301867"</span><span class="token operator">></span>Learn more <span class="token operator">&amp;</span>raquo<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-7-在Azure-Cloud-Service输出Hello-World"><a href="#1-7-在Azure-Cloud-Service输出Hello-World" class="headerlink" title="1.7 在Azure Cloud Service输出Hello,World!"></a>1.7 在Azure Cloud Service输出Hello,World!</h3><ul><li>将ASP.NET Web角色添加到云服务器解决方案</li><li>MVC</li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906103230967.png"></li></ul><p>和6）一样views -&gt; Home -&gt; Index.cshtml  <code>&lt;h2&gt;Hello,World!&lt;/h2&gt;</code></p><p>老版本的VS需要启动云平台模拟器运行程序</p><h3 id="1-8-在Workflow输出Hello-World"><a href="#1-8-在Workflow输出Hello-World" class="headerlink" title="1.8 在Workflow输出Hello,World!"></a>1.8 在Workflow输出Hello,World!</h3><p>搜索工作流</p><p>在工具箱搜索Writeline，然后在Writeline里输入<code>“Hello,World!”</code></p><h3 id="1-9-在WCF输出Hello-World"><a href="#1-9-在WCF输出Hello-World" class="headerlink" title="1.9 在WCF输出Hello,World!"></a>1.9 在WCF输出Hello,World!</h3><p>第一步，在App_Code -&gt; Iservice.cs里，</p><p>大概在20行左右，添加如下代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">OperationContract</span></span><span class="token punctuation">]</span><span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">sayhello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// TODO: 在此添加您的服务操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二步，在App_Code -&gt; Service.cs里，</p><p>在public class Service : IService中的IService，Ctrl+.，添加接口</p><p>然后在底部会自动添加如下代码</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">sayhello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将该代码改为如下代码即可</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">sayhello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"Hello,World!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2-初识类与空间名称"><a href="#2-初识类与空间名称" class="headerlink" title="2. 初识类与空间名称"></a>2. 初识类与空间名称</h2><h3 id="2-1-剖析Hello，World程序"><a href="#2-1-剖析Hello，World程序" class="headerlink" title="2.1 剖析Hello，World程序"></a>2.1 剖析Hello，World程序</h3><ul><li><p>初识类（class）与空间名称（namespace）</p><ul><li>类为<img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906202819812.png">的样子，空间名称为{ }</li></ul></li><li><p>类是构成程序的主体</p></li><li><p>名称空间以树型结构组织类（和其他类型）</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello,World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>程序中有2个类，一个是Program(自己写的)，一个是Console(引用的类)</p></li></ul><h3 id="2-2-类库的引用"><a href="#2-2-类库的引用" class="headerlink" title="2.2 类库的引用"></a>2.2 类库的引用</h3><p>Ctrl+Alt+J 对象浏览器，VS会自动根据加载的不同的模板，引用不同的类库</p><h4 id="2-2-1-类库引用是使用名称空间的物理基础"><a href="#2-2-1-类库引用是使用名称空间的物理基础" class="headerlink" title="2.2.1 类库引用是使用名称空间的物理基础"></a>2.2.1 类库引用是使用名称空间的物理基础</h4><ul><li>不同技术类型的项目会默认引用不同的类库</li></ul><h4 id="2-2-2-DLL应用（黑盒引用，无源代码）"><a href="#2-2-2-DLL应用（黑盒引用，无源代码）" class="headerlink" title="2.2.2 DLL应用（黑盒引用，无源代码）"></a>2.2.2 DLL应用（黑盒引用，无源代码）</h4><p>右键依赖项 -&gt; 添加项目引用 -&gt;浏览</p><ul><li>黑盒引用的缺点是如果代码有错，你就只能把错误告诉编写类库的人，让他改之后编译再重新把DLL发给你</li><li>意味存在着很强的依赖关系</li><li>NuGet简介<ul><li>Nuget是一个VS的扩展插件。我们在使用VS开发时，Nuget能把在项目中添加、移除和更新引用的工作变得更加快捷方便。</li><li>右键引用 -&gt; 管理NuGet程序包</li></ul></li></ul><h4 id="2-2-3项目引用（白盒引用，有源代码）"><a href="#2-2-3项目引用（白盒引用，有源代码）" class="headerlink" title="2.2.3项目引用（白盒引用，有源代码）"></a>2.2.3项目引用（白盒引用，有源代码）</h4><ul><li><p>一个项目(Project)可以隶属于不同的解决方案(Solution)</p></li><li><p>现在解决方案test下有一个项目test，里面有一个类Calculator，类里的主要代码如下：</p></li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Tools</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a <span class="token operator">-</span> b <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>然后打开解决方案Sample，里面有个项目sample，右键解决方案sample -&gt; 添加 -&gt; 添加先有项，找到上面的test.csproj</p><p>之后如下图所示</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906202018586.png"></p></li><li><p>这样一个解决方案就有2个项目了，一个叫sample，一个叫test，之后右键在项目sample右键引用，发现test已经在那了</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906202251533.png"></p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906202330829.png"></p></li></ul><ul><li><p>可以看到test在引用里了(底部)</p></li><li><p><code>我这里因为一个项目指向“netcoreapp3.1”，一个项目指向“.NETFramework,Version=v4.7.2”，所以不能引用            </code></p></li><li><p>我这里重新创建了一个项目，名为sample2</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906203222664.png"></p></li><li><p>将sample2的Program.cs的代码改为上述test代码，然后重新打开sample1</p></li><li><p>我发现这样虽然能正常引用类库了，但是因为是.net framework框架，导致不能正常显示console的结果</p></li><li><p>使用.net core console</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906204737434.png"></p></li><li><p>后来我发现都不行，因为我做了一个很大的错误，我都是新建了两个.net framework或者是两个.net core console，其中一个得是类库(classlibrary),如下</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906210110681.png"></p></li><li><p>正常运行了</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906210510077.png"></p></li><li><p>发现结果是错的，这时我们需要在如下代码进行断点调试</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906210557240.png"></p></li><li><p>按<code>F5</code>开始调试</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906210733333.png"></p></li><li><p>result结果为0</p></li><li><p>之后按<code>F11</code>逐语句调试</p></li><li><p>然后执行指针就进入到了类库里的Sub函数，然后就可以发现这个简单的错误了</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906210838383.png"></p></li></ul><p><strong>尝试直接在解决方案里写一个类库，然后引用</strong></p><ul><li><p>右键解决方案，添加一个新项目</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906211748154.png"></p></li><li><p>类库(classlibrary)编译出来的结果就是一个DLL文件</p></li><li><p>修改如下，你会发现类库默认的类就是public类型的</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906212122712.png"></p></li><li><p>编写代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Tools</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a <span class="token operator">-</span> b <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Mul</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Div</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">double</span><span class="token punctuation">.</span>PositiveInfinity<span class="token punctuation">;</span> <span class="token comment">//无穷大</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>之后在项目sample添加项目引用，然后在Program.cs写点代码调试，如下所示：</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906212511088.png"></p></li></ul><h4 id="2-2-4依赖关系"><a href="#2-2-4依赖关系" class="headerlink" title="2.2.4依赖关系"></a>2.2.4依赖关系</h4><ul><li><p>类（或对象）之间的耦合关系</p></li><li><p>优秀的程序追求<code>高内聚，低耦合</code></p><ul><li>高内聚：一些数据、功能，该属于哪个类就该放到哪个类里面</li><li>低耦合：类和类之间的依赖关系尽可能低</li><li>教学程序往往会违反这个原则</li></ul></li><li><p>UML（通用建模语言）类图</p><ul><li>用来展示类和类之间的关系</li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220906213301526.png"></li><li>就比如<code>hello,world</code>这个来说，我们自己写的类叫<code>Program类</code>，里面有一个方法叫<code>Main()方法</code>，然后我们在<code>Main()方法</code>里调用了<code>Console类</code>里面的<code>WriteLine()方法</code></li></ul></li></ul><hr><h2 id="3-类、对象、类成员简介"><a href="#3-类、对象、类成员简介" class="headerlink" title="3. 类、对象、类成员简介"></a>3. 类、对象、类成员简介</h2><p><font size="5">类（class）是现实世界事物的模型</font></p><ul><li>类是对现实世界事物进行抽象所得到的结果<ul><li>事物包括”物质”(实体)与”运动”(逻辑)</li><li>建模是一个去伪存真，由表及里的过程</li></ul></li></ul><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220907093936767.png"></p><ul><li>飞行员依赖战斗机</li></ul><h3 id="3-1-类与对象的关系"><a href="#3-1-类与对象的关系" class="headerlink" title="3.1 类与对象的关系"></a>3.1 类与对象的关系</h3><ul><li><p>对象也叫实例，是类经过”实例化”后得到的内存中的实体</p><ul><li>对象和实例是一回事</li><li>“飞机”与”一架飞机”有何区别？天上有(一架)飞机——必须是实例飞，概念是不能飞的</li><li>有些类是不能实例化的，比如”数学”(Math class)，我们不能说”一个数字”</li><li>“可数名词与不可数名词”</li></ul></li><li><p>依照类，我们可以创建对象，这就是<code>实例化</code></p><ul><li>现实世界中常称<code>对象</code>，程序世界中常称<code>实例</code></li><li>两者并无太大区别，常常混用，初学者不必迷惑</li></ul></li><li><p>使用<code>new</code>操作符创建类的实例</p></li><li><p>引用变量与实例的关系</p><ul><li>孩子(引用变量)与气球(实例)</li><li>气球不一定有孩子<code>牵着</code>(相当于赋值符号=)</li><li>多个孩子可以使用各自的绳子牵着同一个气球，也可以都通过一根绳子牵着气球(引用变量指向同一个地址)</li></ul></li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ClassAndInstance</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//new Form();</span>            <span class="token comment">//创建了一个气球，但是没有孩子牵着，就飞走了，内存垃圾收集器很快收回去了，释放掉了</span>            <span class="token class-name">Form</span> myForm1<span class="token punctuation">;</span><span class="token comment">//第一个引用变量，相当于第一个孩子</span>            <span class="token class-name">Form</span> myForm2<span class="token punctuation">;</span><span class="token comment">//第二个引用变量，相当于第一个孩子</span>            myForm1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Form</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            myForm2 <span class="token operator">=</span> myForm1<span class="token punctuation">;</span>    <span class="token comment">//两个引用变量指向同一个对象</span>            myForm1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"My Form"</span><span class="token punctuation">;</span>            myForm2<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"I changed it!"</span><span class="token punctuation">;</span>            myForm1<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220907101852929.png"></p><h3 id="3-2-类的三大成员"><a href="#3-2-类的三大成员" class="headerlink" title="3.2 类的三大成员"></a>3.2 类的三大成员</h3><ul><li><p>属性（Property）</p><ul><li>存储数据，组合起来表示类或对象当前的状态</li></ul></li><li><p>方法（Method）</p><ul><li>由C语言中的函数（Function）进化而来，表示类或对象”能做什么”</li><li>工作中90%的时间是在与方法打交道，因为它是”真正做事”、”构成逻辑”的成员</li></ul></li><li><p>事件（Event）</p><ul><li>类或对象通知其它类或对象的机制，为C#所特有（Java通过其它办法实现这个机制）</li><li>善用事件机制非常重要</li></ul></li><li><p>使用MSDN文档。在VS中，你把光标定位到某个类上，按<code>F1</code>，会自动在浏览器上打开MSDN文档，显示这个类的详细信息</p></li><li><p>某些特殊类或对象在成员方面侧重点不同</p><ul><li>模型类或对象重在<strong>属性</strong>，如EF（Entity Framework）</li><li>工具类或对象重在<strong>方法</strong>，如Math，Console</li><li>通知类或对象重在<strong>事件</strong>，如各种Timer</li></ul></li><li><p>接下来开始写一个实例程序，使用EF数据模型</p></li><li><p>使用.net framework框架，我这里用的4.72的</p></li><li><p>需要用到SQL Server，我这里用的是SSMS 18</p></li><li><p>回到VS，右击项目，添加新建项，如下图所示</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220907105639515.png"></p></li><li><p>添加，选择来自数据库的EF设计器</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220907105723149.png"></p></li><li><p>之后一步一步，跟着视频差不多，最后我选了两张表，结果如下</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220907105846979.png"></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ClassAndInstance</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">ScEntities</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ScEntities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//Sc为数据库名，这里数据库名+Entities</span>                        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">Sc_Student</span> p <span class="token keyword">in</span> proxy<span class="token punctuation">.</span>Sc_Student<span class="token punctuation">)</span>            <span class="token comment">//Sc_Student为Sc数据库里的一张表</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>Sname<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//Sname为Sc_Student里的一个字段名</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//这里的foreach用于显示Sname字段的记录</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>Sc_Student<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//显示记录数</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">cw+tab+tab，可以直接打出Console.WriteLine<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>运行结果如下：</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220907110953735.png"></p></li><li><p>下面举例以方法为侧重的类Math</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ClassAndInstance</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> y <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"x = "</span><span class="token operator">+</span>x<span class="token operator">+</span><span class="token string">"\ny = "</span><span class="token operator">+</span>y <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 运行结果如下：</p> <pre class="line-numbers language-none"><code class="language-none">x &#x3D; 2y &#x3D; 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>下面举例以事件为侧重的类Timer</p></li><li><p>使用WPF应用，为了跟着视频，选择.net framework框架的</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220907112003427.png"></p></li><li><p>新建后之后，拖入一个textbox，命名为timeTextBox</p></li><li><p>之后进入MainWindow.xaml.cs，编写代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Controls</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Data</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Documents</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Input</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Media</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Media<span class="token punctuation">.</span>Imaging</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Navigation</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Shapes</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span> <span class="token comment">//多线程</span><span class="token keyword">namespace</span> <span class="token namespace">EventSample</span><span class="token punctuation">&#123;</span>    <span class="token comment">/// &lt;summary></span>    <span class="token comment">/// MainWindow.xaml 的交互逻辑</span>    <span class="token comment">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">MainWindow</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Window</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">DispatcherTimer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DispatcherTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//设置计时器刻度之间的间隔为1s</span>            timer<span class="token punctuation">.</span>Interval <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//事件处理器</span>            timer<span class="token punctuation">.</span>Tick <span class="token operator">+=</span> Timer_Tick<span class="token punctuation">;</span>            timer<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Timer_Tick</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>timeTextBox<span class="token punctuation">.</span>Text <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行结果如下：</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220907113603979.png"></p></li></ul><h3 id="3-3-静态成员与实例成员"><a href="#3-3-静态成员与实例成员" class="headerlink" title="3.3 静态成员与实例成员"></a>3.3 静态成员与实例成员</h3><ul><li>静态（Static）成员在语义上表示它是”类的成员”<ul><li>例如<code>人类</code>可以看作一个<code>类</code>，<code>人类的数量</code>可以看作这个类的<code>静态成员</code></li><li><code>WriteLine</code>是属于<code>Console</code>这个类的静态方法</li></ul></li><li>实例（非静态）成员在语义上表示它是”对象的成员”<ul><li>例如<code>某个人</code>有<code>身高，体重</code>，某个人是对象，它有实例成员身高和体重</li></ul></li><li>绑定（Binding）指的是编译器如何把成员与类或对象关联起来<ul><li>不可小觑的<code>.</code>操作符——成员访问</li></ul></li></ul><hr><h2 id="4-C-语言基本元素概览，初识类型、变量与方法，算法简介"><a href="#4-C-语言基本元素概览，初识类型、变量与方法，算法简介" class="headerlink" title="4. C#语言基本元素概览，初识类型、变量与方法，算法简介"></a>4. C#语言基本元素概览，初识类型、变量与方法，算法简介</h2><h3 id="4-1-构成C-语言的基本元素"><a href="#4-1-构成C-语言的基本元素" class="headerlink" title="4.1 构成C#语言的基本元素"></a>4.1 构成C#语言的基本元素</h3><ol><li><p>关键字（Keyword）</p></li><li><p>操作符（Operator）</p></li><li><p>标识符（Identifier）</p><ul><li>中文也可以用做标识符（只不过不建议这么使用）</li><li>驼峰命名法：变量名等</li><li>帕斯卡命名卡：类名，名称空间等</li></ul></li><li><p>标点符号</p></li><li><p>文本</p><ul><li>char 卡尔</li><li>只有引用类型才能null（空）</li></ul><p><font size="5"><code>以上五种统称为标记（Token）</code></font></p></li><li><p>注释与空白</p><ul><li>ctrl+k+d，代码格式化</li></ul></li></ol><h3 id="4-2-初识类型、变量与方法"><a href="#4-2-初识类型、变量与方法" class="headerlink" title="4.2 初识类型、变量与方法"></a>4.2 初识类型、变量与方法</h3><ol><li><p>初识类型（Type）</p><ul><li>亦称数据类型（Data Type）<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">var x &#x3D; 3;         Console.WriteLine(x.GetType().Name);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ol><ul><li> var 赋值的变量C#会自动推算出数据类型</li></ul><ol start="2"><li><p>变量是存放数据的地方，简称”数据“</p><ul><li>变量的声明</li><li>变量的使用</li></ul></li><li><p>方法（旧城函数）是处理数据的逻辑，又称”算法“</p><ul><li>方法的声明</li><li>方法的调用</li></ul></li><li><p>程序=数据+算法</p><ul><li>有了变量和方法就可以写有意义的程序了</li><li>ctrl+k+c 快速注释</li><li>ctrl+k+u 快速解注释</li></ul></li><li><p>简单算法，计算1到100的和</p><ul><li><p>第一种使用循环，代码如下</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">sample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">SumFrom1ToX</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">SumFrom1ToX</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                res <span class="token operator">+=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第二种使用递归</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">sample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">SumFrom1ToX</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">SumFrom1ToX</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token function">SumFrom1ToX</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>汉诺塔问题</p><p>主要分为A,B,C杆，将A杆中的盘子全部移至C杆，分为三部：</p><p>(1)以C杆为中介，从A杆将1至n-1号盘移至B杆；</p><p>(2)将A杆中剩下的第n号盘移至C杆；</p><p>(3)以A杆为中介；从B杆将1至n-1号盘移至C杆。</p></li></ol><p>代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">sample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">Hanoi</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> <span class="token char">'B'</span><span class="token punctuation">,</span> <span class="token char">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Hanoi</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">char</span></span> a<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">char</span></span> b<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">char</span></span> c<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Move disk </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">n</span><span class="token punctuation">&#125;</span></span><span class="token string"> from </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">a</span><span class="token punctuation">&#125;</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">c</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//第一步，以C杆为中介，从A杆将1至n-1号盘移至B杆</span>                <span class="token function">Hanoi</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> c<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//第二步，将A杆中剩下的第n号盘移至C杆</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Move disk </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">n</span><span class="token punctuation">&#125;</span></span><span class="token string"> from </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">a</span><span class="token punctuation">&#125;</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">c</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//第三步，以A杆为中介；从B杆将1至n-1号盘移至C杆</span>                <span class="token function">Hanoi</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="5-详解类型、变量和对象"><a href="#5-详解类型、变量和对象" class="headerlink" title="5. 详解类型、变量和对象"></a>5. 详解类型、变量和对象</h2><h3 id="5-1-什么是类型（Type）"><a href="#5-1-什么是类型（Type）" class="headerlink" title="5.1 什么是类型（Type）"></a>5.1 什么是类型（Type）</h3><ul><li>数据结构是类型的延申</li><li>又名数据类型（Data Type）<ul><li>性质相同的值的集合，配备了一系列专门针对这些值的操作</li><li>是数据在内存中存储时的“符号”</li><li>小内存容纳大尺寸数据会发生丢失精准度、发生错误</li><li>大内存容纳小尺寸数据会导致浪费</li><li>编程语言的数据类型与数据的数据类型不完全相同<ul><li>例如3/4在编程语言中结果为0，在数学中为0.75</li></ul></li></ul></li><li>强类型编程语言与弱类型编程语言<ul><li>数据受到数据类型的约束，这门编程语言就是强类型编程语言</li><li>C#是一种强类型编程语言</li><li><code>dynamic</code>，C#对弱类型/动态类型的模仿</li></ul></li></ul><h3 id="5-2-类型在C-语言中的作用"><a href="#5-2-类型在C-语言中的作用" class="headerlink" title="5.2 类型在C#语言中的作用"></a>5.2 类型在C#语言中的作用</h3><ul><li><p>一个C#类型中所包含的信息有：</p><ul><li><p>存储此类型变量所需的内存空间大小</p><ul><li>int占4个字节，long占8个字节</li></ul></li><li><p>此类型的值可表示的最大、最小值范围</p><ul><li>例如sbyte 为-128 to 127，占8-bit，最高位为符号位</li><li>byte为 0 to 255，占8-bit</li></ul></li><li><p>此类型所包含的成员（如方法、属性、事件等）</p></li><li><p>此类型由何基类派生而来</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">sample</span><span class="token punctuation">&#123;</span>     <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Type</span> myType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Form</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>myType<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//查看类型的名字</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>myType<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//查看类型的全名</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>myType<span class="token punctuation">.</span>BaseType<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//查看类型的基类</span>            <span class="token class-name">PropertyInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> pInfos <span class="token operator">=</span> myType<span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//能够动态的探知程序运行过程中有那些属性</span>            <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> p <span class="token keyword">in</span> pInfos<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">MethodInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> mInfos <span class="token operator">=</span> myType<span class="token punctuation">.</span><span class="token function">GetMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//能够动态的探知程序运行过程中有那些方法</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> m <span class="token keyword">in</span> mInfos<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>程序运行的时候，此类型的变量分配在内存的什么位置</p><ul><li><p>Stack简介</p><ul><li>给方法调用</li><li>Stack比较小，比较快</li></ul></li><li><p>Stack overflow</p><ul><li><p>算法没写好</p></li><li><p>分配了过多的内存</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StackOverflow</span><span class="token punctuation">&#123;</span>     <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">BadGur</span> bg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BadGur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bg<span class="token punctuation">.</span><span class="token function">BadMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">BadGur</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">BadMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">BadMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//死循环递归</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StackOverflow</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//用到指针需要加上unsafe，同时需要在项目 -> 最底部的项目名属性(P) ->生成 -> 允许不安全代码</span>        <span class="token keyword">static</span> <span class="token keyword">unsafe</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token keyword">stackalloc</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">9999999</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//.NET应用程序的默认堆栈大小为1 MB ,为1024*1024，而9999999显然大于这个数字，造成栈溢出</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Heap简介</p><ul><li>存储对象，实例放在堆里</li><li>Heap比Stack大</li></ul></li><li><p>使用Performance Monitor查看进程的堆内存使用量</p><ul><li><p>Process（进程），一个程序由硬盘加载到内存之后就形成一个进程</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Controls</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Data</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Documents</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Input</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Media</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Media<span class="token punctuation">.</span>Imaging</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Navigation</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Shapes</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HeapSample</span><span class="token punctuation">&#123;</span>    <span class="token comment">/// &lt;summary></span>    <span class="token comment">/// MainWindow.xaml 的交互逻辑</span>    <span class="token comment">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">MainWindow</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Window</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">List<span class="token punctuation">&lt;</span>Window<span class="token punctuation">></span></span> winList<span class="token punctuation">;</span>        <span class="token comment">//window占用的内存多</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Button1_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            winList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Window<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//生成有15000个Window实例的列表</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">15000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">Window</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                winList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Button2_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            winList<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>生成解决方案，ctrl+shift+b</p></li><li><p>ctrl+r运行，输入perfmon打开性能监视器</p></li><li><p>点击<code>红色的X号</code>，再点击<code>绿色的+号</code></p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220908155807969.png"></p></li><li><p>选择process -&gt; private bytes</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220908160109789.png"></p></li><li><p>独享的已分配的当前字节数就是堆内存</p></li><li><p>点击<code>添加</code>，然后<code>确定</code></p></li><li><p>然后回到性能监视器，如下图所示</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220908160238140.png"></p></li><li><p>发现一直在100，原理是已经超过了能表示的最大范围</p></li><li><p>双击底部的<img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220908160328957.png"></p></li><li><p>将图标下垂直比例最大值改为1024</p></li><li><p>然后回到性能监视器，如下图所示</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220908160447751.png"></p></li><li><p>点击<code>Consume Heap Memory</code>按钮，你会发现性能监视器的图示会立刻往上升</p></li><li><p>然后点击<code>Release Heap Memory</code>按钮，你会发现性能监视器的图示并不会马上降下来，因为我们的<code>垃圾收集器</code>认为我们现在的内存还很大，不用马上来收集，会找一个时间来收集，如果你等的事件够久，你会发现它还是会降下来</p></li><li><p>但是在内存收集之前，你连续的点击<code>Consume Heap Memory</code>按钮，内存用量还是会一直上升</p></li></ul></li><li><p>关于内存泄露</p><ul><li>在堆中分配了过多的对象，没有释放</li><li>在C#中没有手动释放内存，都是自动释放内存，所以比较安全，不容易造成内存泄漏</li></ul></li></ul></li><li><p>此类型所允许的操作（运算）</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">double</span></span> res1 <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">//0</span><span class="token class-name"><span class="token keyword">double</span></span> res2 <span class="token operator">=</span> <span class="token number">3.0</span> <span class="token operator">/</span> <span class="token number">4.0</span><span class="token punctuation">;</span><span class="token comment">//0.75</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="5-3-C-语言的数据类型"><a href="#5-3-C-语言的数据类型" class="headerlink" title="5.3 C#语言的数据类型"></a>5.3 C#语言的数据类型</h3><h4 id="5-3-1-C-的五大数据类型"><a href="#5-3-1-C-的五大数据类型" class="headerlink" title="5.3.1 C#的五大数据类型"></a>5.3.1 C#的五大数据类型</h4><ul><li><p>类（Classes）：如Windows,Form,Console,String</p><ul><li>按<code>F12</code>可以转到定义的地方</li></ul></li><li><p>结构体（Structures）:如Int32，Int64，Single，Double</p><ul><li>int就是一个结构体类型</li></ul></li><li><p>枚举（Enumerations）：如HorizontalAlignment，Visibility</p><ul><li><p>枚举类型，里面的数据都是预定义好的</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ConsoleApp1</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Form</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Form</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span>WindowState <span class="token operator">=</span> FormWindowState<span class="token punctuation">.</span>Maximized<span class="token punctuation">;</span>            <span class="token comment">//FormWindowState就是一个枚举类型</span>            f<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>F12转到定义</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">&#123;</span>    <span class="token comment">//</span>    <span class="token comment">// 摘要:</span>    <span class="token comment">//     指定窗体窗口的显示方式。</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ComVisible</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">FormWindowState</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//</span>        <span class="token comment">// 摘要:</span>        <span class="token comment">//     默认大小的窗口。</span>        Normal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token comment">//</span>        <span class="token comment">// 摘要:</span>        <span class="token comment">//     最小化的窗口中。</span>        Minimized <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token comment">//</span>        <span class="token comment">// 摘要:</span>        <span class="token comment">//     最大化的窗口。</span>        Maximized <span class="token operator">=</span> <span class="token number">2</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>接口（Interfaces）</p></li><li><p>委托（Delegates）</p></li></ul><h4 id="5-3-2-C-类型的派生谱系"><a href="#5-3-2-C-类型的派生谱系" class="headerlink" title="5.3.2 C#类型的派生谱系"></a>5.3.2 C#类型的派生谱系</h4><ul><li><p>C#类型的派生谱系是一个树状的系统</p></li><li><p><code>Object</code> （根部，基类型）分为<code>引用类型(Reference Type)</code> 和 <code>值类型(Value Type)</code>，两大数据类型分组</p></li><li><p><code>引用类型(Reference Type)</code>分为三大分支</p><ul><li>类</li><li>接口</li><li>委托</li></ul></li><li><p><code>值类型(Value Type)</code>分为两大分支</p><ul><li>结构体</li><li>枚举</li></ul></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220908163836346.png"></p></li></ul><h3 id="5-4-变量、对象与内存"><a href="#5-4-变量、对象与内存" class="headerlink" title="5.4 变量、对象与内存"></a>5.4 变量、对象与内存</h3><h4 id="5-4-1-什么是变量"><a href="#5-4-1-什么是变量" class="headerlink" title="5.4.1 什么是变量"></a>5.4.1 什么是变量</h4><ul><li><p>表面上来看，变量的用途是存储数据</p></li><li><p>实际上，<font color="blue">变量表示了存储位置，并且每个变量都有一个类型，以决定什么样的值能够存入变量</font></p><ul><li>变量名表示（对应着）变量的值内存中的存储位置</li><li>变量类型就是告诉系统从这个存储位置开始数多少个字节，这段字节来保存这个变量的值</li></ul></li><li><p>变量一共有7种</p><ul><li><p>静态变量</p></li><li><p>实例变量(成员变量，字段)</p></li><li><p>数组元素</p></li><li><p>值参数</p></li><li><p>引用参数</p></li><li><p>输出形参</p></li><li><p>局部变量</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ConsoleApp1</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//数组元素</span>            <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">;</span>                      <span class="token comment">//局部变量</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">student</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> amount<span class="token punctuation">;</span>   <span class="token comment">//静态变量</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> age<span class="token punctuation">;</span>             <span class="token comment">//实例变量</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span><span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">double</span></span> c<span class="token punctuation">)</span>        <span class="token comment">//a为引用参数，b为输出形参，c为值参数</span>        <span class="token punctuation">&#123;</span>            b <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>侠义的变量指局部变量，因为其它种类的变量都有自己的约定名称</p><ul><li>简单地讲，局部变量就是方法体（函数体）里声明的变量</li></ul></li><li><p>变量的声明</p><ul><li><p><font color="blue"> 有效的修饰符组合<del>opt</del> 类型 变量名 初始化器<del>opt</del> </font></p><pre class="line-numbers language-none"><code class="language-none">public int a &#x3D; 100;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>opt表示可有可无的，有效的修饰符组合和初始化器是可选的，类型和变量名是必须的</p></li><li><p>尽量不要写 <code>int a=100,b=200;</code>这种形式，让代码的可读性变差了</p></li></ul></li><li><p><font color="red">变量是以变量名所对应的内存地址为起点，以其数据类型所要求的存储空间为长度的一块内存区域</font></p></li></ul><h4 id="5-4-2-值类型的变量"><a href="#5-4-2-值类型的变量" class="headerlink" title="5.4.2 值类型的变量"></a>5.4.2 值类型的变量</h4><ul><li>值类型没有实例，所谓的“实例”与变量合而为一</li><li>值类型的变量在内存的存储</li><li>小端模式，是指数据的高字节保存在内存的高地址中，而数据的低字节保存在内存的低地址中</li><li><code>ushort us = 1000</code>,占16-bit，换算成二进制是</li><li><code>00000011 11101000</code></li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220908193144801.png"></li><li><font color="8899##">黄色区域为已经被占用的内存</font></li><li><code>short s= -1000</code>,按位取反+1<ul><li>00000011 11101000</li><li>11111100 00010111 按位取反</li><li><code>11111100 00011000</code> +1后的结果</li></ul></li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220908193716094.png"></li></ul><h4 id="5-4-3-引用类型的变量与实例"><a href="#5-4-3-引用类型的变量与实例" class="headerlink" title="5.4.3 引用类型的变量与实例"></a>5.4.3 引用类型的变量与实例</h4><ul><li>引用类型的变量与实例的关系：引用类型变量里存储的数据是对象的地址</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">student</span> stu<span class="token punctuation">;</span>            <span class="token comment">//引用类型，直接分配32bit，用于存放实例的地址，局部变量在栈上分配内存</span>            stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//stu实例化后,在堆上分配32bit+16bit的内存</span>            <span class="token class-name">student</span> stu1 <span class="token operator">=</span> stu<span class="token punctuation">;</span>     <span class="token comment">//引用类型，直接分配32bit，存放stu实例化之后的地址，局部变量在栈上分配内存</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">student</span>     <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">uint</span></span> ID<span class="token punctuation">;</span>        <span class="token comment">//32bit</span>        <span class="token class-name"><span class="token keyword">ushort</span></span> Score<span class="token punctuation">;</span>   <span class="token comment">//16bit</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220908195733520.png"></p></li><li><p>十进制 30000001  -&gt; 二进制 高位 0000 0001 1100 1001 1100 0011 1000 0001 低位</p></li></ul><h4 id="5-4-4局部变量是在stack上分配内存"><a href="#5-4-4局部变量是在stack上分配内存" class="headerlink" title="5.4.4局部变量是在stack上分配内存"></a>5.4.4局部变量是在stack上分配内存</h4><h4 id="5-4-5-变量的默认值"><a href="#5-4-5-变量的默认值" class="headerlink" title="5.4.5 变量的默认值"></a>5.4.5 变量的默认值</h4><ul><li>成员变量在声明后没有赋值，存在默认值0</li><li>本地(局部)变量在声明后没有赋值，不能编译，本地变量一定要有显式赋值</li></ul><h4 id="5-4-6常量"><a href="#5-4-6常量" class="headerlink" title="5.4.6常量"></a>5.4.6常量</h4><ul><li><code>const  int x = 100;</code>,无法二次赋值，必须带初始化器</li></ul><h4 id="5-4-7装箱与拆箱（Boxing-amp-Unboxing）"><a href="#5-4-7装箱与拆箱（Boxing-amp-Unboxing）" class="headerlink" title="5.4.7装箱与拆箱（Boxing &amp; Unboxing）"></a>5.4.7装箱与拆箱（Boxing &amp; Unboxing）</h4><ul><li><p>目前采用较少，有损耗</p></li><li><p>本质上是值类型与引用类型的转换</p></li><li><p>装箱就是从栈上往堆上搬东西，然后栈上再分配4个字节的地址，指向堆的地址</p></li><li><p>例如</p><pre class="line-numbers language-none"><code class="language-none">int x &#x3D; 100;&#x2F;&#x2F;int即int32，占4个字节object obj &#x3D;x;&#x2F;&#x2F;object是所有类型的基类，是引用类型，占4个字节<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220908202330792.png"></p></li><li><p>拆箱就是从堆上往栈搬东西，从堆上oject实例的值，按照我们的要求拆成目标类型的值，存储在栈上</p><pre class="line-numbers language-none"><code class="language-none">int x &#x3D; 100;&#x2F;&#x2F;int即int32，占4个字节object obj &#x3D;x;&#x2F;&#x2F;object是所有类型的基类，是引用类型，占4个字节int y &#x3D; (int)obj;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr></li></ul><h2 id="6-方法的定义、调用与调试"><a href="#6-方法的定义、调用与调试" class="headerlink" title="6. 方法的定义、调用与调试"></a>6. 方法的定义、调用与调试</h2><p>两本书：《CLR via C#》、《C# IN DEPTH》</p><h3 id="6-1-方法的由来"><a href="#6-1-方法的由来" class="headerlink" title="6.1 方法的由来"></a>6.1 方法的由来</h3><h4 id="6-1-1-方法（method）的前身是C-C-语言的函数（function）"><a href="#6-1-1-方法（method）的前身是C-C-语言的函数（function）" class="headerlink" title="6.1.1 方法（method）的前身是C/C++语言的函数（function）"></a>6.1.1 方法（method）的前身是C/C++语言的函数（function）</h4><ul><li>方法是面向对象语言范畴的概念，在非面向对象语言种仍然称为函数</li><li>使用C/C++语言做对比<ul><li>在C语言中printf()，print打印，f是format的意思，就是根据所要的格式进行打印</li><li>C++中<code>std::cout</code>就类似于C#中<code>system.Console</code></li></ul></li></ul><h4 id="6-1-2-永远都是类（或结构体）的成员"><a href="#6-1-2-永远都是类（或结构体）的成员" class="headerlink" title="6.1.2 永远都是类（或结构体）的成员"></a>6.1.2 永远都是类（或结构体）的成员</h4><ul><li><p>C#语言种函数不可能独立于类（或结构体）之外</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ConsoleApp1</span><span class="token punctuation">&#123;</span>    <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><font color="red">严重错误：命名空间不能直接包含字段或方法之类的成员</font></li></ul></li><li><p>只有作为类（或结构体）的成员时才被称为方法</p></li><li><p>C++种是可以的，称为”全局函数”</p></li></ul><h4 id="6-1-3-是类（或结构体）最基本的成员之一"><a href="#6-1-3-是类（或结构体）最基本的成员之一" class="headerlink" title="6.1.3 是类（或结构体）最基本的成员之一"></a>6.1.3 是类（或结构体）最基本的成员之一</h4><ul><li>最基本的成员只有两个——字段与方法（成员变量与成员方法），本质还是数据+算法</li><li>方法表示类（或结构体）“能做什么事情”</li></ul><h4 id="6-1-4-为什么需要方法和函数"><a href="#6-1-4-为什么需要方法和函数" class="headerlink" title="6.1.4 为什么需要方法和函数"></a>6.1.4 为什么需要方法和函数</h4><ul><li><p>目的1：隐藏复杂的逻辑</p></li><li><p>目的2：把大算法分解为小算法</p></li><li><p>目的3：复用（reuse，重用）</p><ul><li>例如把计算圆面积的算法提出来，重复利用计算圆柱和圆锥的体积</li><li>没有复用容易造成程序的隐患，产生bug</li></ul></li><li><p>示例：计算圆面积、圆柱体积、圆锥体积</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">CSharpMethodExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetCircleArea</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> r<span class="token punctuation">)</span>   <span class="token comment">//计算圆的面积</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetCylinderVolume</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> h<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">double</span></span> r<span class="token punctuation">)</span> <span class="token comment">//计算圆柱的体积</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">GetCircleArea</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">*</span> h<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetConeVolume</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> h<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">double</span></span> r<span class="token punctuation">)</span>  <span class="token comment">//计算圆锥的体积</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">GetCylinderVolume</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">GetCylinderVolume</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="6-2-方法的定义与调用"><a href="#6-2-方法的定义与调用" class="headerlink" title="6.2 方法的定义与调用"></a>6.2 方法的定义与调用</h3><h4 id="6-2-1-声明方法的语法详细"><a href="#6-2-1-声明方法的语法详细" class="headerlink" title="6.2.1 声明方法的语法详细"></a>6.2.1 声明方法的语法详细</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetCircleArea</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> r<span class="token punctuation">)</span> <span class="token comment">//函数头  </span><span class="token punctuation">&#123;</span>  <span class="token comment">//函数体</span>     <span class="token keyword">return</span> Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>参见C#语言文档（声明、定义不分家）</li><li>Parameter全程为“formal parameter”形式上的参数，简称“形参”</li><li>形参参与构成算法逻辑</li><li>Parameter是一种变量</li></ul><h4 id="6-2-2-方法的命名规范"><a href="#6-2-2-方法的命名规范" class="headerlink" title="6.2.2 方法的命名规范"></a>6.2.2 方法的命名规范</h4><ul><li>大小写规范</li><li>需要以动词或者动词短语作为名字</li><li>采用帕斯卡命名法，所有单词的首字母都大写，例如<code>GetCircleArea</code>，与JAVA存在区别</li></ul><h4 id="6-2-3-重温静态（static）方法和实例方法"><a href="#6-2-3-重温静态（static）方法和实例方法" class="headerlink" title="6.2.3 重温静态（static）方法和实例方法"></a>6.2.3 重温静态（static）方法和实例方法</h4><ul><li>静态（static）方法，<code>public static double Add()</code></li><li>实例方法就是不加static的方法</li><li>重温静态（static）方法和实例方法，静态方法是和类绑定的，在类第一次加载时就被加载到内存里，直到程序结束才释放，静态类是工具类，不需要创建实例就能用到里面的方法；实例方法是和实例绑定的，在new实例的时候才创建，并且使用完就释放了。所以，为了方便，常用的方法写成静态方法，为了节省内存，大部分方法写成非静态的</li></ul><h4 id="6-2-4-调用方法"><a href="#6-2-4-调用方法" class="headerlink" title="6.2.4 调用方法"></a>6.2.4 调用方法</h4><ul><li>Argument中文C#文档的官方译法为“实际参数”，简称“实参”，可理解为调用方法时的真实条件</li><li>调用方法时的实参的列表与定义方法时的形参的列表一定要匹配</li></ul><h3 id="6-3-构造器（一种特殊的方法）"><a href="#6-3-构造器（一种特殊的方法）" class="headerlink" title="6.3 构造器（一种特殊的方法）"></a>6.3 构造器（一种特殊的方法）</h3><h4 id="6-3-1-构造器（constructor）是类型的成员之一"><a href="#6-3-1-构造器（constructor）是类型的成员之一" class="headerlink" title="6.3.1 构造器（constructor）是类型的成员之一"></a>6.3.1 构造器（constructor）是类型的成员之一</h4><h4 id="6-3-2-侠义的构造器指的是“实例构造器”-instance-constructor"><a href="#6-3-2-侠义的构造器指的是“实例构造器”-instance-constructor" class="headerlink" title="6.3.2 侠义的构造器指的是“实例构造器”(instance constructor)"></a>6.3.2 侠义的构造器指的是“实例构造器”(instance constructor)</h4><h4 id="6-3-3-如何调用构造器"><a href="#6-3-3-如何调用构造器" class="headerlink" title="6.3.3 如何调用构造器"></a>6.3.3 如何调用构造器</h4><ul><li>例如<code>student stu = new student();</code>,()就是构造器</li><li>当你没有给类写构造器时，存在一个默认的无参数的构造器</li><li>只存在一个带参数的构造器，就不能使用无参的构造器</li><li>如果你还想使用无参的构造器，你需要再写一个无参的构造器</li></ul><h4 id="6-3-4-声明构造器"><a href="#6-3-4-声明构造器" class="headerlink" title="6.3.4 声明构造器"></a>6.3.4 声明构造器</h4><ul><li>ctor+tab+tab，自动准备好一个构造器</li></ul><h4 id="6-3-5-构造器的内存原理"><a href="#6-3-5-构造器的内存原理" class="headerlink" title="6.3.5 构造器的内存原理"></a>6.3.5 构造器的内存原理</h4><ul><li><p>栈内存由高地址向低地址进行分配</p></li><li><p>接下来是调用默认的构造器的内存原理</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">CSharpMethodExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> ID<span class="token punctuation">;</span>         <span class="token comment">//占4个字节</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>    <span class="token comment">//string是引用类型，直接占4个字节</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909114008993.png"></p></li><li><p>接下来是调用带参数的构造器的内存原理</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">CSharpMethodExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> ID<span class="token punctuation">;</span>         <span class="token comment">//占4个字节</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>    <span class="token comment">//string是引用类型，直接占4个字节</span>        <span class="token keyword">public</span> <span class="token function">student</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> initID<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> initName<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ID <span class="token operator">=</span> initID<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> initName<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Mr.Okay"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909120619585.png"></li></ul><h3 id="6-4-方法的重载（Overload）"><a href="#6-4-方法的重载（Overload）" class="headerlink" title="6.4 方法的重载（Overload）"></a>6.4 方法的重载（Overload）</h3><h4 id="6-4-1-调用重载方法的实例"><a href="#6-4-1-调用重载方法的实例" class="headerlink" title="6.4.1 调用重载方法的实例"></a>6.4.1 调用重载方法的实例</h4><ul><li>例如cw有17个重载</li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909165403871.png"></li></ul><h4 id="6-4-2-声明带有重载的方法"><a href="#6-4-2-声明带有重载的方法" class="headerlink" title="6.4.2 声明带有重载的方法"></a>6.4.2 声明带有重载的方法</h4><ul><li><p>方法签名（method signature）由方法的名称、类型形参的个数和它的每一个形参（按从左到右的顺序）的类型和种类（值、引用或输出）组成。<font color="red">方法签名不包含返回类型。</font></p><ul><li>签名在现实中表示唯一性</li></ul> <pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F;方法签名不包含返回类型,这样写就无法编译通过class Calculator    &#123;        public int Add(int a,int b)        &#123;            return a + b;        &#125;        public double Add(int a, int b)        &#123;            return a + b;        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F;类型形参class Calculator    &#123;        public int Add(int a,int b)        &#123;            return a + b;        &#125;        public int Add&lt;T&gt;(int a, int b)        &#123;            T t;            return a + b;        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实例构造函数签名由它的每一个形参（按从左到右的顺序）的类型和种类（值、引用或输出）组成</p></li><li><p>重载决策（到底调用哪一个来重载）：用于在给定了参数列表和一组候选函数成员的情况下，选择哪一个最佳函数成员来实施调用</p></li></ul><h3 id="6-5-如何对方法进行debug"><a href="#6-5-如何对方法进行debug" class="headerlink" title="6.5 如何对方法进行debug"></a>6.5 如何对方法进行debug</h3><ul><li>设置断点（breakpoint）<ul><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909171226298.png"></li></ul></li><li>观察方法调用时的call stack<ul><li>先按F5调试，然后再按CTRL+ALT+C 调用堆栈，其实和堆栈帧是一样的 </li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909172252145.png"></li><li>可以看出函数调用的方式</li></ul></li><li>Step-in，Step-over，Step-out<ul><li>Step-in F11 逐语句，每次进一步,最仔细的debug方法</li><li>Step-over F10 逐过程</li><li>Step-out Shift + F11 跳出</li></ul></li><li>观察局部变量的值与变化<ul><li>Locals 局部变量 ctrl+alt+v</li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909173403090.png"></li></ul></li></ul><h3 id="6-6-方法的调用与栈"><a href="#6-6-方法的调用与栈" class="headerlink" title="6.6 方法的调用与栈*"></a>6.6 方法的调用与栈*</h3><ul><li><p>方法调用时栈内存的分配</p><ul><li>对stack frame的分析</li><li>stack frame 指的是一个方法在被调用的时候在栈内存的布局</li><li>栈内存由高字节向低字节发展</li></ul></li><li><p>对以下代码进行分析</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">CSharpMethodExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetCircleArea</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> r<span class="token punctuation">)</span>   <span class="token comment">//计算圆的面积</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetCylinderVolume</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> r<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> h<span class="token punctuation">)</span> <span class="token comment">//计算圆柱的体积</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> a <span class="token operator">=</span> <span class="token function">GetCircleArea</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> a <span class="token operator">*</span> h<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetConeVolume</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> r<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> h<span class="token punctuation">)</span>  <span class="token comment">//计算圆锥的体积</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> cv <span class="token operator">=</span> <span class="token function">GetCylinderVolume</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> cv <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> result <span class="token operator">=</span> Calculator<span class="token punctuation">.</span><span class="token function">GetConeVolume</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//断点</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>这是内存默认的情况</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909195448466.png"></p></li><li><p>我们对<code> double result = Calculator.GetConeVolume(100, 100);</code>进行断点</p></li><li><p>使用F5进行调试，进入如下界面</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909202244944.png"></p></li><li><p>Main方法在栈中占用的stack frame的大小暂时不用管，以下是分配给Main方法之后栈内存的分配情况</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909200306630.png"></p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> result <span class="token operator">=</span> Calculator<span class="token punctuation">.</span><span class="token function">GetConeVolume</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>Main</code>方法是<code>主调者</code>caller，<code>GetConeVolume</code>方法是<code>被调者</code> callee</p></li><li><p>Main方法在调用<code>GetConeVolume</code>方法的时候，需要传两个参数变量，在C#中这两个参数变量归Main方法管</p></li><li><p>100虽然是整型，但是<code>GetConeVolume</code>方法里的两个参数是<code>double</code>型，所以占<code>8个字节</code>的内存</p></li><li><p>在压栈的时候，C#是从左往右进行参数的压栈</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909202317905.png"></p></li><li><p>之后按下F11，我们就进入到了<code>GetConeVolume</code>方法里了</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909202343831.png"></p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetConeVolume</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> r<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> h<span class="token punctuation">)</span>  <span class="token comment">//计算圆锥的体积</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> cv <span class="token operator">=</span> <span class="token function">GetCylinderVolume</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> cv <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>进入<code>GetConeVolume</code>方法里后，我们知道局部变量是需要分配栈内存的，在这里r,h已经<code>Main</code>方法压到了栈里，所以我们只需要给cv分配栈内存，也是double类型的8个字节</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909202644466.png"></p></li><li><p>给cv分配好之后，<code>GetConeVolume</code>方法需要调用<code>GetCylinderVolume</code>方法，而<code>GetCylinderVolume</code>也需要2个double型的参数，还是和之前一样，谁调用谁负责压栈</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909203554249.png"></p></li><li><p>之后按下F11，我们就进入到了<code>GetCylinderVolume</code>方法里了</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909203826886.png"></p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetCylinderVolume</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> r<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> h<span class="token punctuation">)</span> <span class="token comment">//计算圆柱的体积</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> a <span class="token operator">=</span> <span class="token function">GetCircleArea</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> a <span class="token operator">*</span> h<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>进入<code>GetCylinderVolume</code>方法里后，在这里r,h已经被<code>GetConeVolume</code>方法压到了栈里，所以我们只需要给参数变量a进行压栈，也是double类型的8个字节</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909204122550.png"></p></li><li><p>给a参数分配好之后，<code>GetCylinderVolume</code>方法需要调用<code>GetCircleArea</code>方法，而<code>GetCircleArea</code>需要1个double型的参数变量r，还是和之前一样，谁调用谁负责压栈</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909204613369.png"></p></li><li><p>按F11后，我们进入到最后一层调用</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909204719178.png"></p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetCircleArea</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> r<span class="token punctuation">)</span>   <span class="token comment">//计算圆的面积</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>我们发现只有一个局部变量r，而r已经被<code>GetCylinderVolume</code>方法压栈了</p></li><li><p><font color="red">如果一个方法没有局部变量，它仍然占内存，我们上面的内存图只是以局部变量为重点制作的内存图，实际上还有其它地方占内存，比如说我们用完这个方法后，回到之前那个方法，我们需要在栈上保存之前方法的内存地址</font></p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909205257393.png"></p></li><li><p>执行完之后，这个方法会产生一个返回值，返回值一般情况下是存放在CPU的寄存器里面，也有特殊的情况，寄存器存不下然后在栈上开辟内存空间，而这里的double型是肯定可以存下的。</p></li><li><p>之后按几下F11键，调试指针就回到了<code>GetCylinderVolume</code>方法里</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909205837338.png"></p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909210038402.png"></p></li><li><p>而在栈中，框起来的一块进行了出栈操作，对<code>GetCircleArea</code>方法所占内存和它主调函数负责压栈的参数进行清空</p></li><li><p>你会发现调用堆栈里少了最上面的一层，这时候a的值为0是因为返回值还存放在CPU的寄存器里面，你再一下F11就会得到a的值</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909210452029.png"></p></li><li><p>之后继续按F11，调试指针就回到了<code>GetConeVolume</code>方法里</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909210622628.png"></p></li><li><p>你会发现调用堆栈里又少了上面的一层，这时候cv的值为0是因为返回值还存放在CPU的寄存器里面，你再一下F11就会得到cv的值</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909210738227.png"></p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909210829883.png"></p></li><li><p>而在栈中，框起来的一块进行了出栈操作，对<code>GetCylinderVolume</code>方法所占内存和它主调函数负责压栈的参数进行清空</p></li><li><p>这时候继续按几次F11，调试指针就回到了<code>Main</code>方法</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909211551716.png"></p></li><li><p>同样的对框里的内容进行出栈操作</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909211647067.png"></p></li><li><p>之后在按几次F11，随着<code>Main</code>函数执行完，它在内存中所占的内存也被清空</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220909211900564.png"></p></li><li><p>这时程序就彻底结束了</p></li><li><p>理解并熟记这块内容，你就已经是很专业的开发人员了</p></li></ul><hr><h2 id="7-操作符详解"><a href="#7-操作符详解" class="headerlink" title="7. 操作符详解"></a>7. 操作符详解</h2><h3 id="7-1-操作符概览"><a href="#7-1-操作符概览" class="headerlink" title="7.1 操作符概览"></a>7.1 操作符概览</h3><ul><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220910092648080.png"></li><li>操作符（operator）也译为运算符</li><li>操作符是用来操作数据的，被操作符操作的数据称为操作数（Operand）</li></ul><h3 id="7-2-操作符的本质"><a href="#7-2-操作符的本质" class="headerlink" title="7.2 操作符的本质"></a>7.2 操作符的本质</h3><ul><li><p>操作符的本质是函数（算法）的简记法</p></li><li><p>操作符不能脱离与它相关联的数据类型</p><ul><li>例如 3/4=0，3.0/4.0=0.75</li></ul></li><li><p>举例</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Operator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Deer"</span><span class="token punctuation">;</span>            p2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Deer's wife"</span><span class="token punctuation">;</span>            <span class="token class-name">List<span class="token punctuation">&lt;</span>Person<span class="token punctuation">></span></span> nation <span class="token operator">=</span> p1 <span class="token operator">+</span> p2<span class="token punctuation">;</span>            <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> p <span class="token keyword">in</span> nation<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Person</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Person<span class="token operator">></span> <span class="token keyword">operator</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p1<span class="token punctuation">,</span><span class="token class-name">Person</span> p2<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">List<span class="token punctuation">&lt;</span>Person<span class="token punctuation">></span></span> people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Person<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            people<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>            people<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">Person</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                child<span class="token punctuation">.</span>name <span class="token operator">=</span> p1<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" &amp; "</span> <span class="token operator">+</span> p2<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"'s child"</span><span class="token punctuation">;</span>                people<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> people<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>运行结果如下：</p></li><li><p>```<br>Deer<br>Deer’s wife<br>Deer &amp; Deer’s wife’s child<br>Deer &amp; Deer’s wife’s child<br>Deer &amp; Deer’s wife’s child<br>Deer &amp; Deer’s wife’s child<br>Deer &amp; Deer’s wife’s child<br>Deer &amp; Deer’s wife’s child<br>Deer &amp; Deer’s wife’s child<br>Deer &amp; Deer’s wife’s child<br>Deer &amp; Deer’s wife’s child<br>Deer &amp; Deer’s wife’s child<br>Deer &amp; Deer’s wife’s child</p><pre class="line-numbers language-none"><code class="language-none">### 7.3 操作符的优先级- 可以使用圆括号提高被括起来表达式的优先级- 圆括号可以嵌套- 不像数学里有方括号和花括号，在C#语言里&#96;[]&#96;与&#96;&#123;&#125;&#96;有专门的用途### 7.4 同级操作符的运算顺序- 除了带有赋值功能的操作符，同优先级操作符都是由左向右进行运算- 带有赋值功能的操作符的运算顺序都是由右向左  - ![](&#x2F;images&#x2F;%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0&#x2F;image-20220910095610510.png)  - 例如 x &#x3D; 3 + 4 + 5  - 顺序1： 3+4  - 顺序2： 7+5  - 顺序3： x&#x3D;12   &#96;&#96;&#96;csharp    int x &#x3D; 100;    int y &#x3D; 200;    int z &#x3D; 300;    x +&#x3D; y +&#x3D; z;    Console.WriteLine(x); &#x2F;&#x2F;600    Console.WriteLine(y); &#x2F;&#x2F;500    Console.WriteLine(z); &#x2F;&#x2F;300<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>与数学运算不同，计算机语言的同优先级运算没有”结合律”</p><ul><li>3+4+5只能理解为Add(Add(3+4),5)不能理解为Add(3,Add(4,5))</li></ul></li></ul><h3 id="7-5-各种操作符的示例"><a href="#7-5-各种操作符的示例" class="headerlink" title="7.5 各种操作符的示例"></a>7.5 各种操作符的示例</h3><ul><li>委托可以把方法当作参数在其他类中使用</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Operator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> myAction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>PrintHello<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//委托</span>            <span class="token function">myAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PrintHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>元素访问操作符，<code>方括号[]</code>里不一定是整数</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Operator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> Student<span class="token punctuation">></span></span> stuDic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> Student<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//字典</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">101</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stu<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"s_"</span> <span class="token operator">+</span> i<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stu<span class="token punctuation">.</span>score <span class="token operator">=</span> i<span class="token punctuation">;</span>                stuDic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">,</span> stu<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Student</span> stu6 <span class="token operator">=</span> stuDic<span class="token punctuation">[</span><span class="token string">"s_6"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>stu6<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果为6</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> score<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-5-1-基本操作符"><a href="#7-5-1-基本操作符" class="headerlink" title="7.5.1 基本操作符"></a>7.5.1 基本操作符</h4><ul><li><p><code>typeof</code>操作符</p></li><li><p><code>typeof</code> 运算符用于获取某个类型的 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.type">System.Type</a> 实例</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Operator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Type</span> t <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>Namespace<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出类型int的名称空间</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出类型int的全名</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//输出类型int的名称</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> mi <span class="token keyword">in</span> t<span class="token punctuation">.</span><span class="token function">GetMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//查看int的方法</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>mi<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">GetMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输出int的方法的个数</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>运行结果如下：</p></li><li><p>```<br>System<br>System.Int32<br>Int32</p><p>CompareTo<br>CompareTo<br>Equals<br>Equals<br>GetHashCode<br>ToString<br>ToString<br>ToString<br>ToString<br>TryFormat<br>Parse<br>Parse<br>Parse<br>Parse<br>Parse<br>TryParse<br>TryParse<br>TryParse<br>TryParse<br>GetTypeCode<br>GetType<br>21</p><pre class="line-numbers language-none"><code class="language-none">- &#96;default&#96;操作符- 从 C# 7.1 开始，当编译器可以推断表达式类型时，可以使用 &#96;default&#96; 文本生成类型的默认值。  &#96;&#96;&#96;csharp  using System;  using System.Collections.Generic;    namespace Operator  &#123;      class Program      &#123;          static void Main(string[] args)          &#123;              &#x2F;&#x2F;结构体类型              int x &#x3D; default(int);              Console.WriteLine(x);                &#x2F;&#x2F;引用类型              Student stu &#x3D; default(Student);              Console.WriteLine(stu&#x3D;&#x3D;null);                &#x2F;&#x2F;枚举类型              Level level &#x3D; default(Level);              Console.WriteLine(level);              Level2 level2 &#x3D; default(Level2);              Console.WriteLine(level2);          &#125;      &#125;             enum Level      &#123;          Low,        &#x2F;&#x2F;0          Mid,        &#x2F;&#x2F;1          High        &#x2F;&#x2F;2      &#125;        &#x2F;&#x2F;设计枚举类型，最好要给一个0，否则容易出错      enum Level2      &#123;          Low&#x3D;1,                  Mid&#x3D;0,                  High&#x3D;2              &#125;            class Student      &#123;                &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行结果如下：</p></li><li><p>```<br>0<br>True<br>Low<br>Mid</p><pre class="line-numbers language-none"><code class="language-none">- &#96;var&#96;关键字用于声明隐式的变量，编译器可以推断出隐式变量类型- &#96;&#96;&#96;  var x &#x3D; 10;  &#x2F;&#x2F;x &#x3D; &quot;s&quot;;这一段在C#是不被允许的,在上一条语句中C#已经知道x是int32类型的  Console.WriteLine(x.GetType().Name);&#x2F;&#x2F;结果为int32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>new</code>操作符</p><ul><li><p>在内存中创建类型的实例，并调用它的实例构造器 <code>new Form();</code></p></li><li><p>得到实例的内存地址，把内存地址通过赋值操作符<code>=</code>交给负责实例的引用变量 <code>Form myForm = new Form();</code></p></li><li><p>调用实例的初始化器<code>Form myForm = new Form()&#123;Text = &quot;Hello&quot;&#125;;</code></p></li><li><p><code>new Form().ShowDialog();</code>可以正常执行，只不过运行完就会被垃圾收集器给收回</p></li><li><p><em>语法糖</em>（Syntactic sugar），也译为<em>语法糖衣</em></p><ul><li>指计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。</li></ul></li><li><p>string是<code>类</code>类型的，但是可以不用<code>new</code>操作符</p></li><li><p>可以使用<code>var</code>创建匿名类型</p></li><li><p>用匿名类型来创建对象，然后用隐式类型变量来引用实例</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">&#123;</span> name <span class="token operator">=</span> <span class="token string">"Mr.Okay"</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>           Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>           Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>           Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行结果如下：</p><ul><li><p>```<br>Mr.Okay<br>10<br>&lt;&gt;f__AnonymousType0`2</p><pre class="line-numbers language-none"><code class="language-none">- &lt;&gt;f__AnonymousType0&#96;2  - &lt;&gt;f__AnonymousType 这是一个约定的前缀  - 0 指的是我在程序创建的第一个匿名类  - &#96;2 指的是这个类型是个**泛型类**，需要2个参数来构成它- &#96;new&#96;操作符在使用的时候一定要小心  - 一但你在一个类调用了&#96;new&#96;操作符，你在编写的类型与调用的类型，就形成了&#96;紧耦合&#96;  - 例如    &#96;&#96;&#96;csharp    class Program        &#123;            static void Main(string[] args)            &#123;                Form myForm &#x3D; new Form();            &#125;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Program类就依赖在了Form类上，一但Form类出现问题，Program类也会出现问题</p></li><li><p>依赖注入模式</p></li></ul></li><li><p><code>new</code>还可以作为修饰符</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">OperatorsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu<span class="token punctuation">.</span><span class="token function">Report</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">CsStudent</span> cstu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CsStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cstu<span class="token punctuation">.</span><span class="token function">Report</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Report</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I'm a student."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">CsStudent</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Student</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Report</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//这里的new是修饰符，表示对父类方法的隐藏（hide）</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I'm a CSstudent."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>运行结果如下：</p></li><li><p>```<br>I’m a student.<br>I’m a CSstudent.</p><pre class="line-numbers language-none"><code class="language-none">- &#96;checked&#96;操作符与&#96;unchecked&#96;操作符  - C#默认是&#96;unchecked&#96;操作符   &#96;&#96;&#96;csharp    using System;    using System.Collections.Generic;    using System.Linq;    using System.Text;    using System.Threading.Tasks;    using System.Windows.Forms;        namespace OperatorsExample    &#123;        class Program        &#123;            static void Main(string[] args)            &#123;                uint x &#x3D; uint.MaxValue; &#x2F;&#x2F;无符号整形的最大值                Console.WriteLine(x);                string binStr &#x3D; Convert.ToString(x, 2); &#x2F;&#x2F;以二进制的形式表示                Console.WriteLine(binStr);                try                &#123;                    uint y &#x3D; checked(x + 1);  &#x2F;&#x2F;超过了最大值                    Console.WriteLine(y);                &#125;                catch(OverflowException ex)                &#123;                    Console.WriteLine(&quot;There&#39;s overflow!&quot;);                &#125;            &#125;        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行结果如下：</p></li><li><p>```<br>4294967295<br>11111111111111111111111111111111<br>There’s overflow!</p><pre class="line-numbers language-none"><code class="language-none">- 与&#96;new&#96;类似，&#96;checked&#96;与&#96;unchecked&#96;还有上下文用法   &#96;&#96;&#96;csharp    using System;    using System.Collections.Generic;    using System.Linq;    using System.Text;    using System.Threading.Tasks;    using System.Windows.Forms;        namespace OperatorsExample    &#123;        class Program        &#123;            static void Main(string[] args)            &#123;                uint x &#x3D; uint.MaxValue; &#x2F;&#x2F;无符号整形的最大值                Console.WriteLine(x);                string binStr &#x3D; Convert.ToString(x, 2); &#x2F;&#x2F;以二进制的形式表示                Console.WriteLine(binStr);                checked                &#123;                    try                    &#123;                        uint y &#x3D; x + 1;  &#x2F;&#x2F;超过了最大值                        Console.WriteLine(y);                    &#125;                    catch (OverflowException ex)                    &#123;                        Console.WriteLine(&quot;There&#39;s overflow!&quot;);                    &#125;                &#125;            &#125;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>delegate</code>操作符</p><ul><li><code>delegate</code>有一种更重要的用法，就是委托</li><li>操作符已经是种过时的用法</li></ul></li><li><p><code>sizeof</code>操作符</p><ul><li><p>只能获取C#<code>基本数据类型</code>的实例在内存种所占的字节数</p></li><li><p>只能获取<code>结构体</code>数据类型的实例在内存种所占的字节数</p><ul><li>所以不能获取string这种虽然也是基本数据类型，但不是结构体数据类型</li></ul></li><li><p>可以获取自定义结构体实例在内存种所占的字节数，但是需要定义在unsafe的上下文中</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">OperatorsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">unsafe</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//16</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">struct</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">int</span></span> ID<span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">long</span></span> Score<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>-&gt;</code>操作符</p><ul><li><p>需要定义在unsafe的上下文中</p></li><li><p>用于指针，只能操作结构体类型</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">OperatorsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">unsafe</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">Student</span> stu<span class="token punctuation">;</span>                stu<span class="token punctuation">.</span>ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                stu<span class="token punctuation">.</span>Score <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>                Student<span class="token operator">*</span> pstu<span class="token operator">=</span><span class="token operator">&amp;</span>stu<span class="token punctuation">;</span>                pstu<span class="token operator">-></span>Score <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>Score<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//100</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">struct</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> ID<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">long</span></span> Score<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="7-5-2-一元操作符"><a href="#7-5-2-一元操作符" class="headerlink" title="7.5.2 一元操作符"></a>7.5.2 一元操作符</h4><ul><li><p>优先级比基本操作符低，例如<code>(*pStu).Score=1000</code>; 括号必须加</p></li><li><p><code>-</code>操作符与<code>+</code>操作符</p><ul><li><p>在计算机中-x与x不是完全对称的，例如int型的最大值是2147483647，最小值是-2147483648，如果我们写x=-2147483648，-x实际上已经出现了<code>栈溢出</code>，需要用到<code>checked</code>操作符才会正常报错</p><ul><li>而如果不适用<code>checked</code>操作符，你输出-x发现仍会输出-2147483648</li><li>这是因为-2147483648的二进制是<code>10000000000000000000000000000000</code></li><li>按位取反后是<code>01111111111111111111111111111111</code></li><li>在加1后是<code>10000000000000000000000000000000</code>，即-2147483648</li></ul></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">OperatorsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span>MaxValue<span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span>MinValue<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>~</code>操作符</p><ul><li>取反操作符，在计算中取相反数就是<code>按位取反再加1</code></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">OperatorsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">12345678</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token operator">~</span>x<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> xStr <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PadLeft</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//PadLeft()方法用于表示总共的长度为32，左侧多余用0前置填充</span>            <span class="token class-name"><span class="token keyword">string</span></span> yStr <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PadLeft</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>xStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>yStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>运行结果如下：</p></li><li><p>```<br>12345678<br>-12345679<br>00000000101111000110000101001110<br>11111111010000111001111010110001</p><pre class="line-numbers language-none"><code class="language-none">    - 强制类型转化操作符&#96;(T)x&#96;  - 隐式（implicit）类型转换    - 不丢失精度的转换      - &#96;&#96;&#96;        int a &#x3D; 10;        long b &#x3D; a;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>子类向父类的转换</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ConversionExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Teacher</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Human</span> h <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token comment">//h只能可见Eat()和Think()这两个方法</span>            <span class="token class-name">Animal</span> a <span class="token operator">=</span> h<span class="token punctuation">;</span>   <span class="token comment">//a只能看见Eat()这一个方法            </span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Animal</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Eating..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Human</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Animal</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Think</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Who I am?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Human</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I teach"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>装箱</p></li></ul></li><li><p>显式（explicit）类型转换（强制类型转换）</p><ul><li>显式类型转换可以理解为目标类型实例的构造器，只不过是写在被转换类型的类里</li><li>有可能丢失精度（甚至发生错误）的转换，即cast<ul><li>强制类型转化操作符<code>(T)x</code></li></ul></li><li>拆箱</li><li>使用Convert类</li><li>ToString方法与各数据类型的Parse/TryParse方法</li></ul></li><li><p>自定义类型转换操作符</p><ul><li><p>C#中两个没有父子关系的类型怎么互相转换呢？</p></li><li><p>implicit和explicit是一对转换操作符</p></li><li><p>示例</p><ul><li>实现显示转换的方法，是在石头类中写一个explicit类型的Monkey方法，传入参数石头</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ConversionExample</span><span class="token punctuation">&#123;</span>  <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Stone</span> stone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stone<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>            <span class="token class-name">Monkey</span> wukongSun <span class="token operator">=</span> <span class="token punctuation">(</span>Monkey<span class="token punctuation">)</span>stone<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>wukongSun<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Stone</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">explicit</span> <span class="token keyword">operator</span> <span class="token function">Monkey</span><span class="token punctuation">(</span><span class="token class-name">Stone</span> stone<span class="token punctuation">)</span><span class="token comment">//explicit 显示类型转换 operator 操作符</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Monkey</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Monkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token punctuation">.</span>Age <span class="token operator">=</span> stone<span class="token punctuation">.</span>Age <span class="token operator">/</span> <span class="token number">500</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> m<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">class</span> <span class="token class-name">Monkey</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实现隐式转换的方法，是在石头类中写一个Implicit类型的Monkey方法，传入参数石头</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ConversionExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Stone</span> stone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stone<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>            <span class="token class-name">Monkey</span> wukongSun <span class="token operator">=</span> stone<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>wukongSun<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Stone</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">implicit</span> <span class="token keyword">operator</span> <span class="token function">Monkey</span><span class="token punctuation">(</span><span class="token class-name">Stone</span> stone<span class="token punctuation">)</span><span class="token comment">//implicit 隐式类型转换</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Monkey</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Monkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token punctuation">.</span>Age <span class="token operator">=</span> stone<span class="token punctuation">.</span>Age <span class="token operator">/</span> <span class="token number">500</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> m<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">class</span> <span class="token class-name">Monkey</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>可以在任意一个类里定义显式或者隐式的类型转换</p></li><li><p>运算符声明必须符合以下规则：同时包含 <code>public</code> 和 <code>static</code> 修饰符。</p></li></ul></li><li><p>C#所有存在的类都有四种方法</p><ul><li><img src="../images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220911095744482.png"></li><li>具体可以通过<code>object o; o.</code>进行查看</li><li>ToString/GetType/GetHashCode/Equals</li></ul></li></ul></li><li><p><code>%</code>和<code>/</code>操作符</p><ul><li><code>NaN</code> not number</li><li>浮点类型除法可以除0，整数除0结果为<code>Infinity</code>，即正无穷大，负数除0结果为<code>-Infinity</code><ul><li><code>double.PositiveInfinity</code> 正无穷大</li><li><code>double.NegativeInfinity </code> 负无穷大</li><li><code>double.PositiveInfinity</code> / <code>double.NegativeInfinity</code> = <code>NaN</code></li></ul></li></ul></li><li><p>类型提升在<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>都会发生</p></li><li><p><code>&gt;&gt;</code>和<code>&lt;&lt;</code>位移操作符</p><ul><li>位移操作符指的是数据在内存中的<code>二进制</code>结构向左或者向右进行一定位数的位移</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ConversionExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> x <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> strX <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PadLeft</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> strY <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PadLeft</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>strX<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>strY<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>运行结果如下：</p></li><li><p>```<br>00000000000000000000000000000111<br>00000000000000000000000000001110<br>7<br>14</p><pre class="line-numbers language-none"><code class="language-none">  - 当在没有溢出的情况下，左移就是乘2，右移就是除2  - 左移无论你是正数还是负数，补进来的数都是0  - 右移如果你操作的是正数，最高位补进来的数是0，如果你操作的是负数，最高位补进来的数是1- &#96;unicode&#96;向下兼容&#96;ascii&#96;、- &#96;is&#96;和&#96;as&#96;操作符  - 类型检验操作符  - &#96;is&#96;操作符检验的结果是布尔类型   &#96;&#96;&#96;csharp    using System;        namespace ConversionExample    &#123;        class Program        &#123;            static void Main(string[] args)            &#123;                Teacher t &#x3D; new Teacher();                var res1 &#x3D; t is Teacher;                Teacher t1 &#x3D; null;                var res2 &#x3D; t1 is Teacher;                var res3 &#x3D; t is Human;                var res4 &#x3D; t is Animal;                var res5 &#x3D; t is object;                Console.WriteLine(res1);                &#x2F;&#x2F;True                Console.WriteLine(res2);                &#x2F;&#x2F;False                Console.WriteLine(res3);                &#x2F;&#x2F;True，因为teacher是Human的派生类                Console.WriteLine(res4);                &#x2F;&#x2F;True，因为teacher是Human的派生类，而Human是Animal的派生类                Console.WriteLine(res5);                &#x2F;&#x2F;True，因为object是所有类的基类            &#125;        &#125;            class Animal        &#123;            public void Eat()            &#123;                Console.WriteLine(&quot;Eating...&quot;);            &#125;        &#125;            class Human : Animal        &#123;            public void Think()            &#123;                Console.WriteLine(&quot;Who I am?&quot;);            &#125;        &#125;            class Teacher : Human        &#123;            public void Teach()            &#123;                Console.WriteLine(&quot;I teach&quot;);            &#125;        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>as</code>操作符</p></li><li><p>```<br>object o = new Teacher();</p><pre><code>     Teacher t = o as Teacher;     if (t != null)     &#123;         t.Teach();     &#125;</code></pre><pre class="line-numbers language-none"><code class="language-none">  - 逻辑&#96;&amp;&#96;与操作符、&#96;|&#96;或操作符、&#96;^&#96;异或操作符  - 操作二进制数据、图片等- 条件&#96;&amp;&amp;&#96;与操作符、&#96;||&#96;或操作符  - 短路效应     &#96;&#96;&#96;csharp      using System;            namespace ConversionExample      &#123;          class Program          &#123;              static void Main(string[] args)              &#123;                  int x &#x3D; 3;                  int y &#x3D; 4;                  int a &#x3D; 3;                  if (x &gt; y &amp;&amp; a++ &gt; 3)                  &#123;                      Console.WriteLine(&quot;Hello&quot;);                  &#125;                  Console.WriteLine(a);              &#125;          &#125;            &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>结果为3</p></li><li><p><strong>条件与，由于x&gt;y为False，所以右边的a++&gt;3压根不执行</strong></p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ConversionExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">||</span> a<span class="token operator">++</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>结果为</p><pre class="line-numbers language-none"><code class="language-none">Hello3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>条件或，由于x&gt;y为True，所以右边的a++&gt;3压根不执行</strong></p></li><li><p>我们需要避免短路效应</p></li></ul></li></ul></li><li><p>可空类型</p><ul><li>```<br>Nullable<int> x = null;<pre><code>     x = 100;     Console.WriteLine(x);     Console.WriteLine(x.HasValue);</code></pre><pre class="line-numbers language-none"><code class="language-none">- &#96;&#96;&#96;  100  True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></int></li></ul></li></ul><h2 id="8-表达式，语句详解"><a href="#8-表达式，语句详解" class="headerlink" title="8. 表达式，语句详解"></a>8. 表达式，语句详解</h2><h3 id="8-1-表达式的定义"><a href="#8-1-表达式的定义" class="headerlink" title="8.1 表达式的定义"></a>8.1 表达式的定义</h3><h4 id="8-1-1-什么是表达式-Expressions"><a href="#8-1-1-什么是表达式-Expressions" class="headerlink" title="8.1.1 什么是表达式(Expressions)"></a>8.1.1 什么是表达式(Expressions)</h4><ul><li>《Programming Languages:Principles and Paradigms》这本书是这样定义的表达式<ul><li>表达式是任何一门编程语言的<strong>基本组件之一</strong>，基本组件还有命令(commands)和声明(declarations)，表达式是任何一门编程语言的<strong>核心组件</strong></li><li>表达式一种语法实体，表达式就是用来求值，<strong>成功得到一个产出值，失败将得到一个终值</strong></li><li>各种编程语言对表达式的实现不尽相同，但答题</li></ul></li></ul><h4 id="8-1-2-C-语言对表达式的定义"><a href="#8-1-2-C-语言对表达式的定义" class="headerlink" title="8.1.2 C#语言对表达式的定义"></a>8.1.2 C#语言对表达式的定义</h4><ul><li>一个表达式是由<strong>一个或多个操作数</strong>和<strong>零个或多个操作符</strong></li><li>算法逻辑的最基本（最小）单元，表达一定的算法意图</li><li>因为操作符有优先级，所以表达式也就有了优先级</li></ul><h3 id="8-2-各类表达式概览"><a href="#8-2-各类表达式概览" class="headerlink" title="8.2 各类表达式概览"></a>8.2 各类表达式概览</h3><h4 id="8-2-1-C-语言中表达式的分类"><a href="#8-2-1-C-语言中表达式的分类" class="headerlink" title="8.2.1 C#语言中表达式的分类"></a>8.2.1 C#语言中表达式的分类</h4><ul><li> A value.一个值，任何能得到值的运算</li><li> A variable. 一个变量</li><li> ……</li><li> A method group.例如：Console.WriteLine，这是一组方法，重载决策决定具体调用哪一个</li><li> <code>Console.WriteLine(&quot;Hello&quot;);</code>是两个表达式，Console.WriteLine 通过成员访问使用了一组方法，然后通过方法调用选择了一组最适合重载决策来执行</li><li> 符合表达式需要注意操作符的优先级和同优先级操作符的运算方向</li></ul><h3 id="8-3-语句（Statement）的定义"><a href="#8-3-语句（Statement）的定义" class="headerlink" title="8.3 语句（Statement）的定义"></a>8.3 语句（Statement）的定义</h3><h4 id="8-3-1-Wikipedia对语句的定义"><a href="#8-3-1-Wikipedia对语句的定义" class="headerlink" title="8.3.1 Wikipedia对语句的定义"></a>8.3.1 Wikipedia对语句的定义</h4><ul><li><p>在计算机编程学科范畴里，语句是命令式编程语言（大多是我们的高级语言）独立的（standalong）最小的独立元素，语句是表达一些将被执行的动作（action）,一个由命令式编程语言所写成的程序实际上就是由一系列语句构成的</p></li><li><p>语句是高级语言的语法——编译语言和机器语言只有指令（高级语言中的表达式对应低级语言中的指令），<strong>语句等价于一个或一组由明显逻辑关联的指令</strong>。例如：求圆柱体积</p></li><li><p>不严格的讲：</p><ul><li>高级语言由一系列语句构成</li><li>低级语言由一系列指令构成</li></ul></li><li><p>C#查看汇编语言，源代码如下</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">CsharpApp</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> result <span class="token operator">=</span> <span class="token function">GetCylinderVolume</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetCylinderVolume</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> r<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> h<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> area <span class="token operator">=</span> <span class="token number">3.1416</span> <span class="token operator">*</span> r <span class="token operator">*</span> h<span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> volume <span class="token operator">=</span> area <span class="token operator">*</span> h<span class="token punctuation">;</span>            <span class="token keyword">return</span> volume<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>右键解决方案在文件资源管理器中打开文件，然后将bin/debug目录下的exe文件复制到桌面</p></li><li><p>打开Developer Command Prompt for VS 2019输入ildasn</p><ul><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220913200549175.png"></li><li>il是中间语言，dasm是反编译</li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220913200602519.png"></li></ul></li><li><p>打开桌面的exe文件</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220913200858748.png"></p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220913200954524.png"></p></li></ul><h4 id="8-3-2-C-对语句的定义"><a href="#8-3-2-C-对语句的定义" class="headerlink" title="8.3.2 C#对语句的定义"></a>8.3.2 C#对语句的定义</h4><ul><li>C#语言的语句除了能够让程序员“顺序地”（sequentially）表达算法思想，还能通过条件判断、跳转和循环等方法控制程序逻辑的走向</li><li>简言之就是：陈述算法思想，控制逻辑走向，完成<strong>有意义的</strong>动作（action）</li><li>C#语言的语句由分号（；）结尾，但由分号结尾的不一定都是语句<ul><li>例如在一个类里定义一个变量</li><li><code>public string name;</code></li></ul></li><li>语句一定是出现在方法体里</li></ul><h3 id="8-4-语句详解"><a href="#8-4-语句详解" class="headerlink" title="8.4 语句详解"></a>8.4 语句详解</h3><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220913203325417.png"></p><ul><li><p>横线以上是基础，以下相对来说高级一点</p></li><li><p>C#语句一共有三大类</p><ul><li><p>标签语句（labeled-statement）</p></li><li><p>声明语句（declaration-statement）</p></li><li><p>嵌入式语句（embedded-statement）</p><ul><li><p>例如</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Console.WriteLine(“Hello”);语句嵌套在IF语句里</p></li></ul></li></ul></li><li><p>不是所有表达式都可以作为语句使用</p></li><li><p>例如<code>x+y</code>，<code>x==1</code>等这样只计算一个值（此值将被放弃）的表达式不能作为语句使用</p></li><li><p>单一原则：一个方法尽量只做一件事情</p><ul><li><p>例如</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetCylinderVolume</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> r<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> h<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> area <span class="token operator">=</span> <span class="token number">3.1416</span> <span class="token operator">*</span> r <span class="token operator">*</span> h<span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> volume <span class="token operator">=</span> area <span class="token operator">*</span> h<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>volume<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> volume<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这个方法计算了体积，又输出了体积</p></li></ul></li><li><p>块语句</p><ul><li><p>在方法体里写一对{}就是空的块语句</p></li><li><p>{}里无论多少代码都是<strong>一条语句</strong></p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//块语句,可以写C#中的任何语句</span>            <span class="token punctuation">&#123;</span>                hello<span class="token punctuation">:</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello,World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//标签语句</span>                            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>小技巧：Ctrl+}可以让光标快速移动到一段程序的头尾</p></li><li><p>在块语句之前声明的变量，在块语句中可见，但是在块语句之内声明的变量，出了块语句不可见</p></li></ul></li><li><p>if语句</p><ul><li><p>整个if语句是一条语句</p></li><li><p>如果不加{}(块语句)</p><ul><li><p>if（布尔类型表达式）后面只能跟一句嵌入式语句，不能跟声明语句或者是标签语句</p></li><li><p>例如，以下两个写法均是不合法的</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> hello<span class="token punctuation">:</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello,World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>逻辑优化就做代码的重构</p></li></ul></li><li><p>switch语句</p><ul><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220914115142772.png"></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//需求：80~100 -> A;60~79 -> B;40~59 ->C;0~39 ->D</span>            <span class="token class-name"><span class="token keyword">int</span></span> score <span class="token operator">=</span> <span class="token number">98</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>score<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token number">10</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        <span class="token keyword">goto</span> <span class="token keyword">case</span> <span class="token number">8</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">&#123;</span>                        <span class="token keyword">goto</span> <span class="token keyword">default</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token keyword">case</span> <span class="token number">9</span><span class="token punctuation">:</span>                <span class="token keyword">case</span> <span class="token number">8</span><span class="token punctuation">:</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span>                <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>                <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>                <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>和枚取配合很好用</li></ul></li><li><p>try语句</p><ul><li><p>让方法具有容错能力</p></li><li><p>举个例子</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> r <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">,</span> <span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> arg1<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> arg2<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>这段代码有很多地方容易出现bug</p></li><li><p>例如将<code>int r = c.Add(&quot;100&quot;, &quot;200&quot;);</code>更改为<code>int r = c.Add(&quot;abc&quot;, &quot;200&quot;);</code>就会抛出异常</p></li><li><p>最精细的异常处理就是在每个可能出现问题的地方+checked</p></li><li><p>比较简易的异常处理就是直接加上try语句</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> r <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">,</span> <span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> arg1<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> arg2<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">&#123;</span>                a <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>                b <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Your argument(s) have error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">Your argument(s) have error!0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>如何使用try语句精确的处理各类异常</p></li><li><p>我们知道int32类型有3种异常</p><ul><li>ArgumentNullException  null</li><li>FormatException     格式错误</li><li>OverflowException  溢出</li></ul></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> r <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">,</span> <span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> arg1<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> arg2<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">&#123;</span>                a <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>                b <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ArgumentNullException</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Your argument(s) have error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FormatException</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Your argument(s) are not number !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OverflowException</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Out of range!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">Your argument(s) have error!0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>代码也可以改为</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> r <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"9999999999999999"</span><span class="token punctuation">,</span> <span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> arg1<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> arg2<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">&#123;</span>                a <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>                b <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ArgumentNullException</span> ane<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ane<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FormatException</span> fe<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>fe<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OverflowException</span> ofe<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ofe<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">值对于 Int32 太大或太小。0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>我们在finally语句中一般写<strong>释放系统资源的语句</strong>，例如数据库连接，无论在执行代码过程中是否发生异常，数据库连接都能正常关闭，这样我们的软件系统就不会出现问题了</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> r <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"9999999999999999"</span><span class="token punctuation">,</span> <span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> arg1<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> arg2<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">bool</span></span> hasError <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">&#123;</span>                a <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>                b <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ArgumentNullException</span> ane<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ane<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>                hasError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FormatException</span> fe<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>fe<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>                hasError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OverflowException</span> ofe<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ofe<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>                hasError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">finally</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>hasError<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Execution has Error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Done!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">值对于 Int32 太大或太小。Execution has Error!0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>throw语句</p><ul><li>不再直接处理，谁调用谁处理</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">&#123;</span>                r <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"9999999999999999"</span><span class="token punctuation">,</span> <span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OverflowException</span> oe<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>oe<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> arg1<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> arg2<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">&#123;</span>                a <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>                b <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ArgumentNullException</span> ane<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ane<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FormatException</span> fe<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>fe<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OverflowException</span> ofe<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//Console.WriteLine(ofe.Message);</span>                <span class="token keyword">throw</span> ofe<span class="token punctuation">;</span>  <span class="token comment">//也可以直接写throw;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">值对于 Int32 太大或太小。0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>迭代语句和跳转语句</p><ul><li><p>迭代语句就是我们常说的循环语句</p></li><li><p>while语句执行0次或多次，do语句则执行1次或多次</p></li><li><p>使用while语句写一个简单的小游戏：</p><ul><li>要求是让两个小朋友输入2个数，如果这两个数的和是100，记1分，继续输入，如果两个数的和不是100，则停止，计算总分并输出</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">bool</span></span> canContinue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>canContinue<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Please input first number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">string</span></span> str1 <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Please input second number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">string</span></span> str2 <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">int</span></span> sum <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    score<span class="token operator">++</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Correct!</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">x</span><span class="token punctuation">&#125;</span></span><span class="token string">+</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">y</span><span class="token punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">sum</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Error!</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">x</span><span class="token punctuation">&#125;</span></span><span class="token string">+</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">y</span><span class="token punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">sum</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    canContinue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Your score is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">score</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"GAME OVER!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>改写成do语句更适合这个游戏的逻辑，同时还可优化少一个布尔值</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> sum<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">do</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Please input first number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">string</span></span> str1 <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Please input second number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">string</span></span> str2 <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>                sum <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    score<span class="token operator">++</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Correct!</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">x</span><span class="token punctuation">&#125;</span></span><span class="token string">+</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">y</span><span class="token punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">sum</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Error!</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">x</span><span class="token punctuation">&#125;</span></span><span class="token string">+</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">y</span><span class="token punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">sum</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Your score is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">score</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"GAME OVER!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用try语句对程序可能存在的隐患进行处理，同时使用跳转语句continue</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> sum<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">do</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Please input first number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">string</span></span> str1 <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">try</span>                <span class="token punctuation">&#123;</span>                    x <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//可能存在隐患的语句</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">catch</span>                 <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The first number has problem!Restart:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Please input second number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">string</span></span> str2 <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span>                <span class="token punctuation">&#123;</span>                    y <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//可能存在隐患的语句</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">catch</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The second number has problem!Restart:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                                sum <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    score<span class="token operator">++</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Correct!</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">x</span><span class="token punctuation">&#125;</span></span><span class="token string">+</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">y</span><span class="token punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">sum</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Error!</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">x</span><span class="token punctuation">&#125;</span></span><span class="token string">+</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">y</span><span class="token punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">sum</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Your score is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">score</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"GAME OVER!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>增加需求，如果其中有一个小朋友玩腻了输入end，则结束循环</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> sum<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">do</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Please input first number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">string</span></span> str1 <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"end"</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">try</span>                <span class="token punctuation">&#123;</span>                    x <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//可能存在隐患的语句</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">catch</span>                 <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The first number has problem!Restart:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Please input second number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token keyword">string</span></span> str2 <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"end"</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">try</span>                <span class="token punctuation">&#123;</span>                    y <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//可能存在隐患的语句</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">catch</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The second number has problem!Restart:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                                sum <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    score<span class="token operator">++</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Correct!</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">x</span><span class="token punctuation">&#125;</span></span><span class="token string">+</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">y</span><span class="token punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">sum</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Error!</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">x</span><span class="token punctuation">&#125;</span></span><span class="token string">+</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">y</span><span class="token punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">sum</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Your score is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">score</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"GAME OVER!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>什么样的集合能够被迭代</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> intArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>intArray<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>intArray <span class="token keyword">is</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-none"><code class="language-none">System.Int32[]True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>当你发现一个数据类型是[]结尾，那么这个数据类型就是数组类型</p></li><li><p>C#中所有数组的基类是Array</p></li><li><p>如果你发现一个单词的首字母是I开头的类，那么这就是一个接口，I是Interface的缩写</p></li><li><p>GetEnumerator，Enumerator 刘老师讲的是迭代器</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token comment">//需要引用的名称空间</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//int[]是Array的子类，所以int[]也天然继承了IEnumerator接口的GetEnumerator方法</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> intArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">IEnumerator</span> enumerator <span class="token operator">=</span> intArray<span class="token punctuation">.</span><span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//指月</span>            <span class="token comment">//IEnumerator是可以被遍历的集合</span>            <span class="token comment">//GetEnumerator获得这个集合的迭代器</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>enumerator<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//返回一个布尔类型，如果迭代器可以向后移动返回True</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>enumerator<span class="token punctuation">.</span>Current<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回当前正在访问的元素</span>            <span class="token punctuation">&#125;</span>            enumerator<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把迭代器拨回集合的最开始</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>enumerator<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>enumerator<span class="token punctuation">.</span>Current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//泛型</span>            <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> intList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">IEnumerator</span> enumerator2 <span class="token operator">=</span> intList<span class="token punctuation">.</span><span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//指月</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>enumerator2<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>enumerator2<span class="token punctuation">.</span>Current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">123123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>foreach语句</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StatementsExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>                        <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> intArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> iA <span class="token keyword">in</span> intArray<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>iA<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>相比上面的迭代语句，方便很多</li></ul></li></ul></li></ul><hr><h2 id="9-字段、属性、索引器、常量"><a href="#9-字段、属性、索引器、常量" class="headerlink" title="9. 字段、属性、索引器、常量"></a>9. 字段、属性、索引器、常量</h2><h3 id="9-1-字段"><a href="#9-1-字段" class="headerlink" title="9.1 字段"></a>9.1 字段</h3><h4 id="9-1-1-什么是字段"><a href="#9-1-1-什么是字段" class="headerlink" title="9.1.1 什么是字段"></a>9.1.1 什么是字段</h4><ul><li><p>字段（field）是一种表示与对象或类型（<strong>类与结构体</strong>）关联的变量</p><ul><li>field在英文中的田地的意思 字段是数据存放的空间</li></ul></li><li><p>字段是类型的成员，旧称”成员变量“</p></li><li><p>与对象关联的字段亦称”实例字段“</p></li><li><p>与类型关联的字段称为”静态字段“，由static修饰</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DataMemberExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">List<span class="token punctuation">&lt;</span>Student<span class="token punctuation">></span></span> stuList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Student<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stu<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>                stu<span class="token punctuation">.</span>Score <span class="token operator">=</span> i<span class="token punctuation">;</span>                stuList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name"><span class="token keyword">int</span></span> totalAge <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> totalScore <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> stu <span class="token keyword">in</span> stuList<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                totalAge <span class="token operator">+=</span> stu<span class="token punctuation">.</span>Age<span class="token punctuation">;</span>                totalScore <span class="token operator">+=</span> stu<span class="token punctuation">.</span>Score<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Student<span class="token punctuation">.</span>AverageAge <span class="token operator">=</span> totalAge <span class="token operator">/</span> Student<span class="token punctuation">.</span>Amount<span class="token punctuation">;</span>            Student<span class="token punctuation">.</span>AverageScore <span class="token operator">=</span> totalScore <span class="token operator">/</span> Student<span class="token punctuation">.</span>Amount<span class="token punctuation">;</span>            Student<span class="token punctuation">.</span><span class="token function">ReportAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Student<span class="token punctuation">.</span><span class="token function">ReportAverageAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Student<span class="token punctuation">.</span><span class="token function">ReportAverageScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//实例字段，与对象关联</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Score<span class="token punctuation">;</span>        <span class="token comment">//静态字段，与类型关联</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> AverageAge<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> AverageScore<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> Amount<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Student<span class="token punctuation">.</span>Amount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ReportAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>Amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ReportAverageAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>AverageAge<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ReportAverageScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>AverageScore<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">1002449<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="9-1-2-字段的声明"><a href="#9-1-2-字段的声明" class="headerlink" title="9.1.2 字段的声明"></a>9.1.2 字段的声明</h4><ul><li>参见C#语言定义文档</li><li>尽管字段声明带有分号，但它不是语句</li><li>字段的名字一定是名词</li></ul><h4 id="9-1-3-字段的初始化"><a href="#9-1-3-字段的初始化" class="headerlink" title="9.1.3 字段的初始化"></a>9.1.3 字段的初始化</h4><ul><li><p>无显示初始化时，字段获得其类型的默认值，所以字段”永远不会未被初始化“</p></li><li><p>实例字段初始化的时机——对象创建时</p></li><li><p>静态字段初始化的时机——类型被加载（load）时</p><ul><li>静态构造器被执行的时候</li></ul></li><li><p>在声明字段的时候赋初始值和在写构造器时赋值是一样的</p></li><li><p>静态构造器</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> Amount<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">static</span> student<span class="token comment">//注意不加public</span><span class="token punctuation">&#123;</span>Amount<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>以上的写法也是等价的</li></ul></li></ul><h4 id="9-1-4-只读字段"><a href="#9-1-4-只读字段" class="headerlink" title="9.1.4 只读字段"></a>9.1.4 只读字段</h4><ul><li><p>实例只读字段</p><ul><li><code>public readonly int ID</code> <strong>只读实例字段</strong>，只能初始化一次</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DataMemberExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu<span class="token punctuation">.</span>ID <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//无法编译通过</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> ID<span class="token punctuation">;</span><span class="token comment">//实例只读字段</span>        <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ID <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>静态只读字段</p><ul><li><p>类的静态只读字段</p></li><li><p>只能够被初始化，不能再被赋值</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DataMemberExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Brush<span class="token punctuation">.</span>DefaultColor<span class="token punctuation">.</span>Red<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Brush<span class="token punctuation">.</span>DefaultColor<span class="token punctuation">.</span>Green<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Brush<span class="token punctuation">.</span>DefaultColor<span class="token punctuation">.</span>Blue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">struct</span> <span class="token class-name">Color</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Red<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Green<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Blue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Brush</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Color</span> DefaultColor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Red <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> Green <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> Blue <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>静态构造函数只需要把public改成static即可</li></ul></li></ul><h3 id="9-2-属性"><a href="#9-2-属性" class="headerlink" title="9.2 属性"></a>9.2 属性</h3><h4 id="9-2-1-什么是属性"><a href="#9-2-1-什么是属性" class="headerlink" title="9.2.1 什么是属性"></a>9.2.1 什么是属性</h4><ul><li><p>属性（property）是一种用于<font color="blue">访问对象或类型的特征</font>的成员，<font color="blue">特征反应了状态</font></p></li><li><p>属性是字段的自然扩展</p><ul><li>从命名上看，field（字段）更偏向于实例对象在内存中的布局，property（属性）更偏于反映现实世界对象的特征</li><li>对外：暴露数据，数据可以是存储在字段里的，也可以是动态计算出来的</li><li>对内：保护字段不被非法值”污染“</li></ul></li><li><p>属性由Get/Set方法对进化而来</p></li><li><p>又一个”语法糖“——属性背后的秘密</p></li><li><p>示例如下：</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DataMemberExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu1<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu2<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu3<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token comment">//非法值</span>            <span class="token class-name"><span class="token keyword">int</span></span> avgAge <span class="token operator">=</span> <span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>Age <span class="token operator">+</span> stu2<span class="token punctuation">.</span>Age <span class="token operator">+</span> stu3<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>avgAge<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Age<span class="token punctuation">;</span><span class="token comment">//使用字段，首字母大写</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>我们知道200岁对于人类来说是1个非法值，如果直接用字段，这个字段就被污染了</p></li><li><p>可以改成如下写法进行保护字段，C++/JAVA目前仍然采用的方法</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DataMemberExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu2<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu3<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> avgAge <span class="token operator">=</span> <span class="token punctuation">(</span>stu1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> stu2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> stu3<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>avgAge<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> age<span class="token punctuation">;</span>         <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">value</span> <span class="token operator">&lt;=</span> <span class="token number">120</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"age value has error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> age<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>说明C++/JAVA是没有属性这个概念的</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DataMemberExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu1<span class="token punctuation">.</span>Age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu2<span class="token punctuation">.</span>Age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu3<span class="token punctuation">.</span>Age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> avgAge <span class="token operator">=</span> <span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>Age <span class="token operator">+</span> stu2<span class="token punctuation">.</span>Age <span class="token operator">+</span> stu3<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>avgAge<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> age<span class="token punctuation">;</span> <span class="token comment">//字段必须是私有的或者受保护的</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> Age  <span class="token comment">//属性,需要和字段名称不同</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">get</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">set</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">value</span> <span class="token operator">&lt;=</span> <span class="token number">120</span><span class="token punctuation">)</span>    <span class="token comment">//value是上下文关键字，微软默认规定的变量</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"age value has error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-2-2-属性的声明"><a href="#9-2-2-属性的声明" class="headerlink" title="9.2.2 属性的声明"></a>9.2.2 属性的声明</h4><ul><li><p>完整声明——后台（back）成员变量与访问器（<font color="89BC">注意使用code snippet和refactor工具</font>）</p><ul><li>Developer Command Prompt for VS 2019</li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220916150312014.png"></li><li>可以看到编译器自动给我们写了get和set的方法，所以属性也是一种语法糖</li><li>propfull + tab + tab 快速生成属性</li><li>属性是static的，字段也必须是static的</li><li>还有一种快速声明字段的方法<ul><li>例如<code>private int age;</code>将光标定位到<strong>age</strong>字段上</li><li>按住CTRL键，然后按R+E</li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220916151705312.png"></li></ul></li></ul></li><li><p>简略声明——只有访问器（查看IL代码）</p><ul><li><p>和只有一个公有字段是完全一样的，不安全</p></li><li><p>带有这种属性的类，一般只用来传递数据</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age<span class="token punctuation">&#123;</span><span class="token keyword">get</span><span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>动态计算值的属性</p></li><li><p>注意实例属性和静态属性</p></li><li><p>属性的名字一定是名词</p></li><li><p>只读属性——只有getter没有setter</p><ul><li>尽管语法上正确，几乎没有人使用”只读属性“，因为属性的主要目的是通过向外暴露数据而表示对象/类型的状态</li></ul></li></ul><h4 id="9-2-3-属性与字段的关系"><a href="#9-2-3-属性与字段的关系" class="headerlink" title="9.2.3 属性与字段的关系"></a>9.2.3 属性与字段的关系</h4><ul><li><p>一般情况下，它们都用于表示实体（对象或类型）的状态</p></li><li><p>属性大多数情况是字段的包装器（wrapper）</p></li><li><p>建议：永远使用属性（而不是字段）来暴露数据，即字段永远都是private或protected的</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">PropertyExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> studentOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            studentOne<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>            studentOne<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"8yyy"</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">studentOne<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">'s age is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">studentOne<span class="token punctuation">.</span>Age</span><span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> studentTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            studentTwo<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">66</span><span class="token punctuation">;</span>            studentTwo<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"tryyy"</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">studentTwo<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">'s age is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">studentTwo<span class="token punctuation">.</span>Age</span><span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _age<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> _name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age        <span class="token punctuation">&#123;</span>            <span class="token keyword">get</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> _age<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">set</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">value</span> <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    _age <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Student's Age is Error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name        <span class="token punctuation">&#123;</span>            <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _name<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>            <span class="token keyword">set</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">==</span> <span class="token string">"8yyy"</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    _name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello,8yyy!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    _name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Hi,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">value</span></span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">Hello,8yyy!8yyy&#39;s age is 8.未经处理的异常:  System.Exception: Student&#39;s Age is Error!......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-3-索引器"><a href="#9-3-索引器" class="headerlink" title="9.3 索引器"></a>9.3 索引器</h3><ul><li><p>什么是索引器</p><ul><li>索引器（indexer）是这样一种成员：它使对象能够用与数组相同的方法（即使用下标）进行索引</li><li>indexer + tab + tab</li></ul></li><li><p>索引器的声明</p><ul><li>参见C#语言定义文档</li><li>注意：没有静态索引器</li></ul></li><li><p>示例</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DataMemberExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu<span class="token punctuation">[</span><span class="token string">"Math"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> mathScore <span class="token operator">=</span> stu<span class="token punctuation">[</span><span class="token string">"Math"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>mathScore<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span> scoreDictionary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name"><span class="token keyword">string</span></span> subject<span class="token punctuation">]</span>    <span class="token comment">//索引器，indexer</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">get</span>             <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scoreDictionary<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scoreDictionary<span class="token punctuation">[</span>subject<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">set</span>             <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">.</span>HasValue <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Score cannot be null."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scoreDictionary<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>scoreDictionary<span class="token punctuation">[</span>subject<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>scoreDictionary<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-4-常量"><a href="#9-4-常量" class="headerlink" title="9.4 常量"></a>9.4 常量</h3><h4 id="9-4-1-什么是常量"><a href="#9-4-1-什么是常量" class="headerlink" title="9.4.1 什么是常量"></a>9.4.1 什么是常量</h4><ul><li>常量（constant）是表示常量值（即，可以在编译时计算的值）的类成员<ul><li>必须使用类型+.的形式访问常量</li><li><code>Math.PI</code> 就是一个常量</li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220916171749814.png"></li></ul></li><li>常量隶属于类型而不是对象，即没有”实例常量“<ul><li>“实例常量”的角色由只读实例字段来担当</li></ul></li><li>注意区分成员常量与局部常量<ul><li><code>Math.PI</code>就是一个成员常量</li></ul></li></ul><h4 id="9-4-2-常量的声明"><a href="#9-4-2-常量的声明" class="headerlink" title="9.4.2 常量的声明"></a>9.4.2 常量的声明</h4><h4 id="9-4-3-各种“只读”的引用场景"><a href="#9-4-3-各种“只读”的引用场景" class="headerlink" title="9.4.3 各种“只读”的引用场景"></a>9.4.3 各种“只读”的引用场景</h4><ul><li>为了提高程序可读性和执行效率——常量</li><li>为了防止对象的值被改变——只读字段</li><li>向外暴露不允许修改的数据——只读属性（静态或非静态），功能与常量有一些重叠</li><li>当希望成为常量的值其类型不能被常量声明接受时（类/自定义结构体）——静态只读字段</li></ul><hr><h2 id="10-传值-输出-引用-数组-具名-可选参数，扩展方法-this参数"><a href="#10-传值-输出-引用-数组-具名-可选参数，扩展方法-this参数" class="headerlink" title="10. 传值/输出/引用/数组/具名/可选参数，扩展方法(this参数)"></a>10. 传值/输出/引用/数组/具名/可选参数，扩展方法(this参数)</h2><h3 id="10-1-传值参数"><a href="#10-1-传值参数" class="headerlink" title="10.1 传值参数"></a>10.1 传值参数</h3><ul><li><p>声明时<font color="red">不带修饰符</font>的形参是值形参。一个<font color="red">值形参对应于一个局部变量</font>，只是它的<font color="red">初始值来自该方法调用所提供的相应实参</font></p><ul><li>public void add(int a)，a就是值形参，因为它不带修饰符</li></ul></li><li><p><font color="red">允许方法将新值赋给值参数。这样的赋值只影响由该值形参表示的局部存储位置（方法内有效），而不会影响在方法调用时由调用方给出的实参</font></p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220916172808169.png"></p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ConstantExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            stu<span class="token punctuation">.</span><span class="token function">AddOne</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//y的值不会发生变化</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddOne</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul><pre class="line-numbers language-none"><code class="language-none">101100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220916173949040.png"></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Name <span class="token operator">=</span> <span class="token string">"Tim"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token function">SomeMethod</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SomeMethod</span><span class="token punctuation">(</span><span class="token class-name">Student</span> stu<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Name <span class="token operator">=</span> <span class="token string">"Tim"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token comment">//像这种通过传值参数将一个引用类型变量传过来</span>            <span class="token comment">//将这个变量先前的引用对象丢弃掉，而在方法内部创建</span>            <span class="token comment">//一个新的对象，在实际操作中没有啥意义</span>              Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul><pre class="line-numbers language-none"><code class="language-none">46104728,Tim12289376,Tim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>像这种通过传值参数将一个引用类型变量传过来将这个变量先前的引用对象丢弃掉，而在方法内部创建一个新的对象，在实际操作中没有啥意义</strong></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Name <span class="token operator">=</span> <span class="token string">"Tim"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token function">SomeMethod</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SomeMethod</span><span class="token punctuation">(</span><span class="token class-name">Student</span> stu<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            stu<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span><span class="token comment">//副作用，side-effect</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下</li></ul> <pre class="line-numbers language-none"><code class="language-none">46104728,Tom46104728,Tom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>向以上这种副作用，我们平时编程的时候需要避免</li></ul><h3 id="10-2-引用参数"><a href="#10-2-引用参数" class="headerlink" title="10.2 引用参数"></a>10.2 引用参数</h3><ul><li><p>引用形参是<font color="red">用ref修饰符声明的形参</font>。与值形参不同，<font color="red">引用形参并不创建新的存储位置。</font>相反，<font color="red">引用形参表示的存储位置恰是在方法调用中作为实参给出的那个变量所表示的存储位置。</font></p></li><li><p>当形参为引用形参时，方法调用中的实参必须由关键字ref并后接一个与形参类型相同的 variable-reference 组成。<font color="red">变量在可以作为引用形参传递之前，必须先明确赋值。</font></p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220916192704039.png"></p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//必须先明确赋值</span>            <span class="token function">IWantSideEffect</span><span class="token punctuation">(</span><span class="token keyword">ref</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//101</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">IWantSideEffect</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            x <span class="token operator">+=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220916193024608.png"></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> outterStu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Name <span class="token operator">=</span> <span class="token string">"Tim"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">outterStu<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">outterStu<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">IWantSideEffect</span><span class="token punctuation">(</span><span class="token keyword">ref</span> outterStu<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">outterStu<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">outterStu<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">IWantSideEffect</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name">Student</span> stu<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Name <span class="token operator">=</span> <span class="token string">"Tom"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">46104728,Tim---------------------------------------12289376,Tom12289376,Tom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220916193657600.png"></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> outterStu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Name <span class="token operator">=</span> <span class="token string">"Tim"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">outterStu<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">outterStu<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">IWantSideEffect</span><span class="token punctuation">(</span><span class="token keyword">ref</span> outterStu<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">outterStu<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">outterStu<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">IWantSideEffect</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name">Student</span> stu<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            stu<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span><span class="token comment">//对象不变</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">46104728,Tim---------------------------------------46104728,Tom46104728,Tom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>引用参数和值参数的对比</strong></p><ul><li>上述例子在去掉ref之后所得的结果与引用参数结果相同</li><li>从效果上来看一模一样</li><li>但是在内存基理不一样<ul><li>值参数创建副本。两个参数所指向的内存地址不同，他们同时指向同一个对象所在堆的内存地址</li><li>引用参数不创建副本。两个参数所指向的内存地址就是同一个内存地址，而这个地址指向对象所在堆的内存地址</li></ul></li></ul></li></ul><h3 id="10-3-输出形参"><a href="#10-3-输出形参" class="headerlink" title="10.3 输出形参"></a>10.3 输出形参</h3><ul><li><p><font color="red">用out修饰符声明的形参</font>是输出形参。类似于引用实参，<font color="red">输出形参不创建新的存储位置。</font>相反，输出形参表示的存储位置恰是在该方法调用中作为实参给出的那个变量所表示的存储位置。</p></li><li><p><font color="red">变量在可以作为输出形参传递之前不一定需要明确赋值</font></p></li><li><p><font color="red">在方法返回之前，该方法的每个输出形参都必须明确赋值</font></p></li><li><p>引用参数为了改变变量的值，所以需要先进行赋值，而输出参数是为了通过这个参数向外输出，原来的值必然被丢弃，所以不要求先赋值</p></li><li><p><img src="../images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220916195204303.png"></p></li><li><p>tyrparse是一个带有输出的方法</p><ul><li>bool double.TryParse(string s,out double result)</li><li>作用就是将字符串s转化为double型的result</li></ul></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Please input first number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> arg1 <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">bool</span></span> b1 <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> <span class="token keyword">out</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b1 <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"input error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Please input second number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> arg2 <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">bool</span></span> b2 <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>arg2<span class="token punctuation">,</span> <span class="token keyword">out</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b2 <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"input error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name"><span class="token keyword">double</span></span> z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>自己写一个带有输出参数的方法</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">bool</span></span> b <span class="token operator">=</span> DoubleParse<span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span><span class="token string">"789"</span><span class="token punctuation">,</span> <span class="token keyword">out</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//790</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">DoubleParse</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">TryParse</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> input<span class="token punctuation">,</span><span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">double</span></span> result<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span>            <span class="token punctuation">&#123;</span>                result <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span>             <span class="token punctuation">&#123;</span>                result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220916200654390.png"></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">bool</span></span> b <span class="token operator">=</span> StudentFactory<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token string">"Tim"</span><span class="token punctuation">,</span>  <span class="token keyword">out</span> stu<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"student </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">'s age is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">stu<span class="token punctuation">.</span>Age</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">StudentFactory</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Create</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> stuAge<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> stuName<span class="token punctuation">,</span><span class="token keyword">out</span> <span class="token class-name">Student</span> stu<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            stu <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>stuName<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stuAge<span class="token operator">&lt;</span><span class="token number">20</span> <span class="token operator">||</span> stuAge <span class="token operator">></span> <span class="token number">80</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Name <span class="token operator">=</span> stuName<span class="token punctuation">,</span> Age <span class="token operator">=</span> stuAge <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-4-数组参数"><a href="#10-4-数组参数" class="headerlink" title="10.4 数组参数"></a>10.4 数组参数</h3><ul><li><p>必须是形参列表中的<strong>最后一个</strong>，由params修饰，只能有一个</p><ul><li>因为如果不是最后一个，编译器就无法判断哪个参数是数组参数后面的参数</li></ul></li><li><p>举例：String.Format方法和String.Split方法</p></li><li><p>先来看一个例子</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> myIntArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> <span class="token function">CalculateSum</span><span class="token punctuation">(</span>myIntArray<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">CalculateSum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> intArray<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> intArray<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                sum <span class="token operator">+=</span> item<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>你会发现在调用CalculateSum方法时，必须提前声明一个数组myIntArray，这样就会显得非常啰嗦，接下来采用params修饰符</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> <span class="token function">CalculateSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//不需要提前定义一个int数组</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">CalculateSum</span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> intArray<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> intArray<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                sum <span class="token operator">+=</span> item<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>实际上我们一直有用到params修饰符</p></li><li><p>例如</p><pre class="line-numbers language-none"><code class="language-none">int x &#x3D; 1;         int y &#x3D; 2;         int z &#x3D; x + y;         Console.WriteLine(&quot;&#123;0&#125;+&#123;1&#125;&#x3D;&#123;2&#125;&quot;,x,y,z);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220917162756896.png"></p></li><li><p>其中一个重载如图所示，这就是为什么我们可以自由输入任意个数的参数，实际上它会先声明一个object类型的数组，然后把x,y,z放入这个数组，然后再传进我们的WriteLine方法</p></li><li><p>再来看一个例子</p></li><li><p>string类型具有实例方法Split()，它会基于数组中的字符将字符串拆分为多个子字符串</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">string</span></span> str <span class="token operator">=</span> <span class="token string">"Tim;Tom,Amy.Lisa"</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token char">';'</span><span class="token punctuation">,</span> <span class="token char">','</span><span class="token punctuation">,</span> <span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> result<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">TimTomAmyLisa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-5-具名参数"><a href="#10-5-具名参数" class="headerlink" title="10.5 具名参数"></a>10.5 具名参数</h3><ul><li><p>参数的位置不受约束</p><ul><li>首先举个例子，不具名调用</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">PrintInfo</span><span class="token punctuation">(</span><span class="token string">"Tim"</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PrintInfo</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> age<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Hello </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">name</span><span class="token punctuation">&#125;</span></span><span class="token string">,you are </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">age</span><span class="token punctuation">&#125;</span></span><span class="token string"> years old!"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>当你在调用PrintInfo()方法时，传递过去的实参必须与形参相对应</p></li><li><p>接下来是具名调用</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">PrintInfo</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">age</span><span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span><span class="token string">"Tim"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PrintInfo</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> age<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Hello </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">name</span><span class="token punctuation">&#125;</span></span><span class="token string">,you are </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">age</span><span class="token punctuation">&#125;</span></span><span class="token string"> years old!"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>具名调用能使代码<strong>可读性更高</strong>，且不受位置约束</p></li><li><p>严格来讲具名调用不是参数的某个种类，而是一种使用方法</p></li></ul></li></ul><h3 id="10-6-可选参数"><a href="#10-6-可选参数" class="headerlink" title="10.6 可选参数"></a>10.6 可选参数</h3><ul><li><p>参数因为具有默认值而变得“可选”</p><ul><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220917164636475.png"></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">PrintInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PrintInfo</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token operator">=</span><span class="token string">"Tim"</span><span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> age<span class="token operator">=</span><span class="token number">34</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Hello </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">name</span><span class="token punctuation">&#125;</span></span><span class="token string">,you are </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">age</span><span class="token punctuation">&#125;</span></span><span class="token string"> years old!"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不推荐使用可选参数</p></li></ul><h3 id="10-7-扩展方法（this参数）"><a href="#10-7-扩展方法（this参数）" class="headerlink" title="10.7 扩展方法（this参数）"></a>10.7 扩展方法（this参数）</h3><ul><li><p>方法必须是公有的、静态的，即被public static所修饰</p></li><li><p>必须是形参列表中的第一个，由this修饰</p></li><li><p>必须由一个静态类（一般类名为SomeTypeExtension）来统一收纳SomeType类型的扩展方法</p></li><li><p>实例写一个double型的扩展方法，代码如下：</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> x <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">Round</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//扩展方法的应用</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>    <span class="token comment">//扩展方法必须定义在一个静态类</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DoubleExtention</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//方法必须是公有的、静态的</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Round</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name"><span class="token keyword">double</span></span> input<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> digits<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Round</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> digits<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>举例：LINQ方法</p></li><li><p>代码如下：</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> myList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">bool</span></span> result <span class="token operator">=</span> <span class="token function">AllGreaterThanTen</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">AllGreaterThanTen</span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> intList<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> intList<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接下来使用linq方法</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token comment">//调用类库linq</span><span class="token keyword">namespace</span> <span class="token namespace">ParametersExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> myList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">bool</span></span> result <span class="token operator">=</span> myList<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span>i <span class="token operator">=></span> i <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>All是一个扩展方法</p><ul><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220917170800750.png"></li></ul></li></ul><p>总结：</p><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220917170846626.png"></p><hr><h2 id="11-委托详解"><a href="#11-委托详解" class="headerlink" title="11. 委托详解"></a>11. 委托详解</h2><h3 id="11-1-什么是委托"><a href="#11-1-什么是委托" class="headerlink" title="11.1 什么是委托"></a>11.1 什么是委托</h3><ul><li><p>委托（delegate）是函数指针的“升级版”</p><ul><li><p>delegate    授(权)；把(工作、权力等)委托(给下级)；选派(某人做某事)；</p></li><li><p>实例：C/C++中的函数指针</p><ul><li>以C语言为例</li></ul> <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span>  x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>z <span class="token operator">=</span> <span class="token function">Add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d+%d=%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>z <span class="token operator">=</span> <span class="token function">Sub</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d-%d=%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>以上的代码通过函数的名字调用函数，称为直接调用</p></li><li><p>下面采用函数指针的方法</p></li></ul> <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Calc<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//函数指针</span><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span>  x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>Calc funcPoint1 <span class="token operator">=</span> <span class="token operator">&amp;</span>Add<span class="token punctuation">;</span><span class="token comment">//把函数Add的地址赋值给函数指针类型Calc的变量funcPoint1</span>Calc funcPoint2 <span class="token operator">=</span> <span class="token operator">&amp;</span>Sub<span class="token punctuation">;</span> <span class="token comment">//把函数Sub的地址赋值给函数指针类型Calc的变量funcPoint2</span>z <span class="token operator">=</span> <span class="token function">funcPoint1</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d+%d=%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>z <span class="token operator">=</span> <span class="token function">funcPoint2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d-%d=%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>运行结果是一样的</p><pre class="line-numbers language-none"><code class="language-none">100+200&#x3D;300100-200&#x3D;-100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>一切皆地址</p><ul><li>变量（数据）是以某个地址为起点的一段内存中所存储的值</li><li>函数（算法）是以某个地址为起点的一段内存中所存储的一组机器语言指令</li></ul></li><li><p>直接调用与间接调用</p><ul><li>直接调用：通过<strong>函数名</strong>来调用函数，CPU通过函数名直接获得函数所在地址并开始执行 ——&gt; 返回</li><li>间接调用：通过<strong>函数指针</strong>来调用函数，CPU通过读取函数指针存储的值获得函数所在地址并开始执行 ——&gt; 返回</li></ul></li><li><p>Java中没有与委托相对应的功能实体</p></li><li><p>委托的简单使用</p><ul><li><p>Action委托</p></li><li><p>Action委托<strong>无返回值</strong>的泛型委托</p></li></ul></li><li><p>Func委托</p><ul><li><p>Func委托是泛型委托，必须具备返回值</p></li><li><p>下面来举个例子</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DelegateExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> calculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//Action委托 是无参委托</span>            <span class="token class-name">Action</span> action <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>calculator<span class="token punctuation">.</span>Report<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意Report不能加()，因为加()就是要使用这个方法</span>            calculator<span class="token punctuation">.</span><span class="token function">Report</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//直接调用</span>            <span class="token comment">//间接调用,以下两种写法是一样的 </span>            action<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//Func委托 泛型委托</span>            <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span> func1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>calculator<span class="token punctuation">.</span>Add<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span> func2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>calculator<span class="token punctuation">.</span>Sub<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2个参数+返回值result，所以是三个int</span>            <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            z <span class="token operator">=</span> func1<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>            z <span class="token operator">=</span> func2<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>            z <span class="token operator">=</span> <span class="token function">func1</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>            z <span class="token operator">=</span> <span class="token function">func2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Report</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I have 3 methods."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">I have 3 methods.I have 3 methods.I have 3 methods.300-100300-100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="11-2-委托的声明（自定义委托）"><a href="#11-2-委托的声明（自定义委托）" class="headerlink" title="11.2 委托的声明（自定义委托）"></a>11.2 委托的声明（自定义委托）</h3><ul><li><p>委托是一种类（class），类是数据类型所以委托也是一种数据类型</p><ul><li><p>证明：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">Type</span> t <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Action</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>IsClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//运行结果为True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>举例如下：</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DelegateExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Calc</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//委托的声明</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> calculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Calc</span> calc1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calc</span><span class="token punctuation">(</span>calculator<span class="token punctuation">.</span>Add<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Calc</span> calc2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calc</span><span class="token punctuation">(</span>calculator<span class="token punctuation">.</span>Sub<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Calc</span> calc3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calc</span><span class="token punctuation">(</span>calculator<span class="token punctuation">.</span>Mul<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Calc</span> calc4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Calc</span><span class="token punctuation">(</span>calculator<span class="token punctuation">.</span>Div<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> <span class="token function">calc1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> <span class="token function">calc2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> <span class="token function">calc3</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> <span class="token function">calc4</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Calculator</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> result <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Mul</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> result <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Div</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> result <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>它的声明方式与一般类不同，主要是为了照顾可读性和C/C++传统</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Calc</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//委托的声明</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>注意声明委托的位置</p><ul><li><p>避免写错地方结果声明称嵌套类型</p></li><li><p>例如写成如下格式就是声明嵌套类型</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Program</span>   <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Calc</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//委托的声明</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>委托与所封装的方法必须“类型兼容”</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Calc</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//委托的声明</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>返回值的数据类型一致</p></li><li><p>参数列表在个数和数据类型上一致</p></li></ul></li></ul><h3 id="11-3-委托的一般使用"><a href="#11-3-委托的一般使用" class="headerlink" title="11.3 委托的一般使用"></a>11.3 委托的一般使用</h3><ul><li><p>实例：把方法作为参数传给另一个方法</p><ul><li><p>正确使用1：<font color="red">模板方法</font>，“借用”指定的外部方法来产生结果</p><ul><li><p>相当于“填空题”</p></li><li><p>常位于代码中部</p></li><li><p>委托有返回值</p></li><li><p>示例：</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DelegateExample</span><span class="token punctuation">&#123;</span>        <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">ProductFactory</span> productFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProductFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">WrapFactory</span> wrapFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WrapFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Func<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span> fun1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span><span class="token punctuation">(</span>productFactory<span class="token punctuation">.</span>MakePizza<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Func<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span> fun2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span><span class="token punctuation">(</span>productFactory<span class="token punctuation">.</span>MakeToyCar<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Box</span> box1 <span class="token operator">=</span> wrapFactory<span class="token punctuation">.</span><span class="token function">WrapProcut</span><span class="token punctuation">(</span>fun1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Box</span> box2 <span class="token operator">=</span> wrapFactory<span class="token punctuation">.</span><span class="token function">WrapProcut</span><span class="token punctuation">(</span>fun2<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>box1<span class="token punctuation">.</span>Product<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>box2<span class="token punctuation">.</span>Product<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Product</span>   <span class="token comment">//产品类</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span>  Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>   <span class="token comment">//属性的简略声明，一般只用来传递数据</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Box</span>       <span class="token comment">//盒子类</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Product</span> Product <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">WrapFactory</span>   <span class="token comment">//包装厂的类</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//模板方法</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Box</span> <span class="token function">WrapProcut</span><span class="token punctuation">(</span><span class="token class-name">Func<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span> getProduct<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Box</span> box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//准备box</span>            <span class="token class-name">Product</span> product <span class="token operator">=</span> getProduct<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取产品</span>            box<span class="token punctuation">.</span>Product <span class="token operator">=</span> product<span class="token punctuation">;</span><span class="token comment">//将产品装进box</span>            <span class="token keyword">return</span> box<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">ProductFactory</span>    <span class="token comment">//产品生产厂的类</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Product</span> <span class="token function">MakePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//制作披萨的方法</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Pizza"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> product<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Product</span> <span class="token function">MakeToyCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//制作玩具车的方法</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"ToyCar"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> product<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优势：只需要扩展ProductFactory类（产品工厂），最大限度的实现了代码的重复使用</li></ul></li><li><p>正确使用2：<font color="red">回调（callback）方法</font>，调用指定的外部方法</p><ul><li><p>回调方法也被称为好莱坞方法</p></li><li><p>相当于“流水线”</p></li><li><p>常位于代码末尾</p></li><li><p>委托无返回值</p></li><li><p>示例如下：</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DelegateExample</span><span class="token punctuation">&#123;</span>        <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">ProductFactory</span> productFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProductFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">WrapFactory</span> wrapFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WrapFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Func<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span> fun1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span><span class="token punctuation">(</span>productFactory<span class="token punctuation">.</span>MakePizza<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Func<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span> fun2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span><span class="token punctuation">(</span>productFactory<span class="token punctuation">.</span>MakeToyCar<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Action<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span> log <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span><span class="token punctuation">(</span>logger<span class="token punctuation">.</span>Log<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Box</span> box1 <span class="token operator">=</span> wrapFactory<span class="token punctuation">.</span><span class="token function">WrapProcut</span><span class="token punctuation">(</span>fun1<span class="token punctuation">,</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Box</span> box2 <span class="token operator">=</span> wrapFactory<span class="token punctuation">.</span><span class="token function">WrapProcut</span><span class="token punctuation">(</span>fun2<span class="token punctuation">,</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>box1<span class="token punctuation">.</span>Product<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>box2<span class="token punctuation">.</span>Product<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//记录程序的运行状态</span>    <span class="token keyword">class</span> <span class="token class-name">Logger</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Log</span><span class="token punctuation">(</span><span class="token class-name">Product</span> product<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Product '</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">product<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">' created at </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>UtcNow</span><span class="token punctuation">&#125;</span></span><span class="token string">. Price is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">product<span class="token punctuation">.</span>Price</span><span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//使用UtcNow是因为不带时区</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Product</span>   <span class="token comment">//产品类</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span>  Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>   <span class="token comment">//属性的简略声明，一般只用来传递数据</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> Price <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>   <span class="token comment">//新增产品的价格</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Box</span>       <span class="token comment">//盒子类</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Product</span> Product <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">WrapFactory</span>   <span class="token comment">//包装厂的类</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//logCallback回调方法，getProduct模板方法</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Box</span> <span class="token function">WrapProcut</span><span class="token punctuation">(</span><span class="token class-name">Func<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span> getProduct<span class="token punctuation">,</span><span class="token class-name">Action<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span> logCallback<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Box</span> box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Product</span> product <span class="token operator">=</span> getProduct<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>product<span class="token punctuation">.</span>Price<span class="token operator">>=</span><span class="token number">50</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">logCallback</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            box<span class="token punctuation">.</span>Product <span class="token operator">=</span> product<span class="token punctuation">;</span>            <span class="token keyword">return</span> box<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">ProductFactory</span>    <span class="token comment">//产品生产厂的类</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Product</span> <span class="token function">MakePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//制作披萨的方法</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Pizza"</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span>Price <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> product<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Product</span> <span class="token function">MakeToyCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//制作玩具车的方法</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"ToyCar"</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span>Price <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> product<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">Product &#39;ToyCar&#39; created at 2022&#x2F;9&#x2F;18 7:50:50. Price is 120.PizzaToyCar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>注意：难精通+易使用+功能强大东西，一旦被滥用则后果非常严重</p><ul><li>缺点1：这是一种方法级别的紧耦合，现实工作中要慎之又慎</li><li>缺点2：使可读性下降、debug的难度增加</li><li>缺点3：把委托回调、异步调用和多线程纠缠在一起，会使代码变得难以阅读和维护</li><li>缺点4：委托使用不当有可能造成内存泄漏和程序性能下降</li></ul></li></ul><h3 id="11-4-委托的高级使用"><a href="#11-4-委托的高级使用" class="headerlink" title="11.4 委托的高级使用"></a>11.4 委托的高级使用</h3><ul><li><p>多播（multicast）委托</p><ul><li><p>指一个委托内部封装着不止一个方法</p></li><li><p>单播委托（之前写的委托）的例子如下：</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">MulticastDelegateExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Red <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Green <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Blue <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> action1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> action2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> action3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu3<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">;</span>            action1<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            action2<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            action3<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">ConsoleColor</span> PenColor <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>PenColor<span class="token punctuation">;</span>                <span class="token comment">//ForegroundColor 获取或设置控制太的前景色</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Student </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>ID</span><span class="token punctuation">&#125;</span></span><span class="token string"> doing homework </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string"> hour(s)."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//使该线程睡眠1秒</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">Student 1 doing homework 0 hour(s).Student 1 doing homework 1 hour(s).Student 1 doing homework 2 hour(s).Student 1 doing homework 3 hour(s).Student 1 doing homework 4 hour(s).Student 2 doing homework 0 hour(s).Student 2 doing homework 1 hour(s).Student 2 doing homework 2 hour(s).Student 2 doing homework 3 hour(s).Student 2 doing homework 4 hour(s).Student 3 doing homework 0 hour(s).Student 3 doing homework 1 hour(s).Student 3 doing homework 2 hour(s).Student 3 doing homework 3 hour(s).Student 3 doing homework 4 hour(s).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接下来使用多播委托：</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">MulticastDelegateExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Red <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Green <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Blue <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> action1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> action2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> action3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu3<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//多播委托</span>            action1 <span class="token operator">+=</span> action2<span class="token punctuation">;</span><span class="token comment">//相当于action2合并到了action1中</span>            action1 <span class="token operator">+=</span> action3<span class="token punctuation">;</span>            <span class="token comment">//现在action1里封装了3个方法</span>            action1<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">ConsoleColor</span> PenColor <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>PenColor<span class="token punctuation">;</span>                <span class="token comment">//ForegroundColor 获取或设置控制太的前景色</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Student </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>ID</span><span class="token punctuation">&#125;</span></span><span class="token string"> doing homework </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string"> hour(s)."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//使该线程睡眠1秒</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>隐式异步调用</p><ul><li><p>同步与异步的简介</p><ul><li>中英文的语言差异</li><li>同步：你做完了我（在你的基础上）接着做</li><li>异步：咱们两个同时做（相当于汉语中的“同步进行”）</li></ul></li><li><p>同步调用与异步调用的对比</p><ul><li>每一个运行的程序都是一个进程（process）</li><li>每个进程可以有一个或者多个线程（thread）<ul><li>每个程序在内存中运行一定会有第一个运行的线程，这个线程就是<strong>主线程</strong>；主线程之外的线程称为<strong>分支线程</strong></li></ul></li><li>同步调用是在同一线程内</li><li>异步调用的底层机制是<font color="red">多线程</font></li><li>串行 == 同步 == 单线程，并行 == 异步 == 多线程</li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220918162324195.png"></li></ul></li><li><p>隐式多线程 v.s 显式多线程</p><ul><li><p>直接同步调用：使用方法名</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">MulticastDelegateExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Red <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Green <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Blue <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                        <span class="token comment">//直接同步调用</span>            stu1<span class="token punctuation">.</span><span class="token function">DoHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu2<span class="token punctuation">.</span><span class="token function">DoHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu3<span class="token punctuation">.</span><span class="token function">DoHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Cyan<span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Main thread </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">ConsoleColor</span> PenColor <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>PenColor<span class="token punctuation">;</span>                <span class="token comment">//ForegroundColor 获取或设置控制太的前景色</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Student </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>ID</span><span class="token punctuation">&#125;</span></span><span class="token string"> doing homework </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string"> hour(s)."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//使该线程睡眠1秒</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>间接同步调用：使用单播/多播委托的invoke方法</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">MulticastDelegateExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Red <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Green <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Blue <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> action1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> action2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> action3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu3<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//间接同步调用</span>            action1<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            action2<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            action3<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Cyan<span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Main thread </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">ConsoleColor</span> PenColor <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>PenColor<span class="token punctuation">;</span>                <span class="token comment">//ForegroundColor 获取或设置控制太的前景色</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Student </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>ID</span><span class="token punctuation">&#125;</span></span><span class="token string"> doing homework </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string"> hour(s)."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//使该线程睡眠1秒</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">Student 1 doing homework 0 hour(s).Student 1 doing homework 1 hour(s).Student 1 doing homework 2 hour(s).Student 1 doing homework 3 hour(s).Student 1 doing homework 4 hour(s).Student 2 doing homework 0 hour(s).Student 2 doing homework 1 hour(s).Student 2 doing homework 2 hour(s).Student 2 doing homework 3 hour(s).Student 2 doing homework 4 hour(s).Student 3 doing homework 0 hour(s).Student 3 doing homework 1 hour(s).Student 3 doing homework 2 hour(s).Student 3 doing homework 3 hour(s).Student 3 doing homework 4 hour(s).Main thread 0Main thread 1Main thread 2Main thread 3Main thread 4Main thread 5Main thread 6Main thread 7Main thread 8Main thread 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多播同步调用和上面多播委托的示例类似</li></ul></li><li><p>隐式异步调用：使用委托的Begininvoke</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">MulticastDelegateExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Red <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Green <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Blue <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> action1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> action2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Action</span> action3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu3<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//隐式异步调用</span>            action1<span class="token punctuation">.</span><span class="token function">BeginInvoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            action2<span class="token punctuation">.</span><span class="token function">BeginInvoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            action3<span class="token punctuation">.</span><span class="token function">BeginInvoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Cyan<span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Main thread </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">ConsoleColor</span> PenColor <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>PenColor<span class="token punctuation">;</span>                <span class="token comment">//ForegroundColor 获取或设置控制太的前景色</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Student </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>ID</span><span class="token punctuation">&#125;</span></span><span class="token string"> doing homework </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string"> hour(s)."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//使该线程睡眠1秒</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">Main thread 0Student 2 doing homework 0 hour(s).Student 3 doing homework 0 hour(s).Student 1 doing homework 0 hour(s).Main thread 1Student 2 doing homework 1 hour(s).Student 3 doing homework 1 hour(s).Student 1 doing homework 1 hour(s).Student 1 doing homework 2 hour(s).Student 2 doing homework 2 hour(s).Student 3 doing homework 2 hour(s).Main thread 2Student 2 doing homework 3 hour(s).Student 3 doing homework 3 hour(s).Student 1 doing homework 3 hour(s).Main thread 3Main thread 4Student 3 doing homework 4 hour(s).Student 1 doing homework 4 hour(s).Student 2 doing homework 4 hour(s).Main thread 5Main thread 6Main thread 7Main thread 8Main thread 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>分之线程和主线程同时执行，发生了资源上的争抢</p></li><li><p>发生冲突导致颜色不一样</p></li></ul></li><li><p>显式异步调用：使用Thread或Task</p><ul><li>Thread是一种比较古老的方式</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">MulticastDelegateExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Red <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Green <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Blue <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token comment">//创建线程</span>            <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span> thread3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>stu3<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread1<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread2<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread3<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Cyan<span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Main thread </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">ConsoleColor</span> PenColor <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>PenColor<span class="token punctuation">;</span>                <span class="token comment">//ForegroundColor 获取或设置控制太的前景色</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Student </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>ID</span><span class="token punctuation">&#125;</span></span><span class="token string"> doing homework </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string"> hour(s)."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//使该线程睡眠1秒</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">Student 2 doing homework 0 hour(s).Main thread 0Student 1 doing homework 0 hour(s).Student 3 doing homework 0 hour(s).Student 3 doing homework 1 hour(s).Student 2 doing homework 1 hour(s).Main thread 1Student 1 doing homework 1 hour(s).Student 1 doing homework 2 hour(s).Student 2 doing homework 2 hour(s).Main thread 2Student 3 doing homework 2 hour(s).Student 2 doing homework 3 hour(s).Student 3 doing homework 3 hour(s).Student 1 doing homework 3 hour(s).Main thread 3Student 3 doing homework 4 hour(s).Student 2 doing homework 4 hour(s).Main thread 4Student 1 doing homework 4 hour(s).Main thread 5Main thread 6Main thread 7Main thread 8Main thread 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>分之线程和主线程同时执行，发生了资源上的争抢</p></li><li><p>接下来使用Task，相对于Thread来说会高级一些</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">MulticastDelegateExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Red <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Green <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> PenColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Blue <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Task</span> task1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Task</span> task2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Task</span> task3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>stu3<span class="token punctuation">.</span>DoHomework<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            task1<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            task2<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            task3<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Cyan<span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Main thread </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">ConsoleColor</span> PenColor <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>PenColor<span class="token punctuation">;</span>                <span class="token comment">//ForegroundColor 获取或设置控制太的前景色</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Student </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>ID</span><span class="token punctuation">&#125;</span></span><span class="token string"> doing homework </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string"> hour(s)."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//使该线程睡眠1秒</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>应适时地使用接口（interface）取代一些对委托的使用</p><ul><li>Java完全地使用接口取代了委托的功能，即Java没有与C#中委托相对应的功能实体</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">DelegateExample</span><span class="token punctuation">&#123;</span>        <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">IProcutFactory</span> pizzaFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PizzaFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">IProcutFactory</span> toycarFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ToyCarFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">WrapFactory</span> wrapFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WrapFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Box</span> box1 <span class="token operator">=</span> wrapFactory<span class="token punctuation">.</span><span class="token function">WrapProcut</span><span class="token punctuation">(</span>pizzaFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Box</span> box2 <span class="token operator">=</span> wrapFactory<span class="token punctuation">.</span><span class="token function">WrapProcut</span><span class="token punctuation">(</span>toycarFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>box1<span class="token punctuation">.</span>Product<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>box2<span class="token punctuation">.</span>Product<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">interface</span> <span class="token class-name">IProcutFactory</span>    <span class="token punctuation">&#123;</span>        <span class="token return-type class-name">Product</span> <span class="token function">Make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">PizzaFactory</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IProcutFactory</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Product</span> <span class="token function">Make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Pizza"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> product<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">ToyCarFactory</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IProcutFactory</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Product</span> <span class="token function">Make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            product<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"ToyCar"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> product<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Product</span>   <span class="token comment">//产品类</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span>  Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>   <span class="token comment">//属性的简略声明，一般只用来传递数据</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> Price <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>   <span class="token comment">//新增产品的价格</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Box</span>       <span class="token comment">//盒子类</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Product</span> Product <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">WrapFactory</span>   <span class="token comment">//包装厂的类</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//模板方法</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Box</span> <span class="token function">WrapProcut</span><span class="token punctuation">(</span><span class="token class-name">IProcutFactory</span> procutFactory<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Box</span> box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Product</span> product <span class="token operator">=</span> procutFactory<span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            box<span class="token punctuation">.</span>Product <span class="token operator">=</span> product<span class="token punctuation">;</span>            <span class="token keyword">return</span> box<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    class ProductFactory    //产品生产厂的类    &#123;        public Product MakePizza()  //制作披萨的方法        &#123;            Product product = new Product();            product.Name = "Pizza";            product.Price = 12;            return product;        &#125;        public Product MakeToyCar() //制作玩具车的方法        &#123;            Product product = new Product();            product.Name = "ToyCar";            product.Price = 120;            return product;        &#125;    &#125;    */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="12-事件详解"><a href="#12-事件详解" class="headerlink" title="12 .事件详解"></a>12 .事件详解</h2><h3 id="12-1-初步了解事件"><a href="#12-1-初步了解事件" class="headerlink" title="12.1 初步了解事件"></a>12.1 初步了解事件</h3><ul><li><p><font color="FF5555">定义</font>：单词Event,译为“事件”</p><ul><li><p>《牛津词典》中的解释是“a thing that <strong>happens</strong>,especially something important”</p><ul><li>也就是说如果一个作为主语，它能够用<strong>发生</strong>作为谓语，那么它就能作为一个事件</li><li>例如拿苹果为主语，那么谓语就不能用<strong>发生</strong>，因为我们谁也不会说苹果发生了（其实也可以，例如说苹果熟透了）</li><li>公司上市，产品发布都是一个事件，事件就是能够发生的什么事情。</li></ul></li><li><p>通常的解释就是“<font color="red">能够发生的什么事情</font>”</p></li></ul></li><li><p><font color="FF5555">角色</font>：使对象或类具备<font color="red">通知能力</font>的成员</p><ul><li><p>（中译）事件（event）是一种使对象或类能够提供通知的成员</p></li><li><p>（原文）An event is a member that enables an object or class to provide notifications.</p></li><li><p>“对象O拥有一个事件E”想表达的思想是：当事件E发生的时候，O有能力通知别的对象</p></li></ul></li><li><p>事件的功能 = 通知 + 可选的事件参数（即详细信息）</p></li><li><p><font color="FF5555">使用</font>：用于对象或类间的动作协调与信息传递（消息同送）</p></li><li><p><font color="FF5555">原理</font>：事件模型（event model）中的两个”5“</p><ul><li>”<font color="red">发生 –&gt; 响应</font>“中的5个部分——闹钟响了你起床、孩子饿了你做饭……这里隐含着”订阅“关系<ul><li>闹钟、响了、你、起床、订阅（可以想想为为什么别人家的闹钟响了你就不起床呢？）</li><li>孩子、饿了、你、做饭、订阅（可以想想为为什么别人家的孩子饿了你就不用做饭呢？）</li></ul></li><li>”<font color="red">发生 –&gt; 响应</font>“中的5个动作<ul><li>（1）我有一件事</li><li>（2）一个人或一群人关心我的这个事件</li><li>（3）我的这个事件发生了</li><li>（4）关心这个事件的人会被依次通知到</li><li>（5）被通知的人根据拿到的事件信息（又称”事件数据“、”事件参数“、”通知“）对事件进行响应（又称”处理事件“）。</li></ul></li></ul></li></ul><ul><li><p>事件的订阅者</p><ul><li>事件消息的接收者</li><li>事件的响应者</li><li>事件的处理者</li><li>被事件所通知的对象</li><li>以上为一回事，统一用<strong>事件的订阅者</strong></li></ul></li><li><p>事件参数</p><ul><li>事件信息</li><li>事件消息</li><li>事件数据</li><li>以上为一回事，统一用微软的标准<strong>事件参数</strong></li></ul></li></ul><ul><li><font color="FF5555">提示</font><ul><li>事件多用于桌面、手机等开发的客户端编程，因为这些程序经常是用户通过事件来”驱动的“</li><li>各种编程语言对这个机制的实现方式不尽相同</li><li>Java语言里没有事件这种成员，也没有委托这种数据类型。Java的”事件“是使用接口来是实现的</li><li>MVC、MVP、MVVM等模式，是事件模式更高级、更有效的”玩法“</li><li>日常开发的时候，使用已有事件的机会比较多，自己声明事件的机会比较少，所以先学使用</li></ul></li></ul><h3 id="12-2-事件的应用"><a href="#12-2-事件的应用" class="headerlink" title="12.2 事件的应用"></a>12.2 事件的应用</h3><ul><li>实例演示<ul><li>派生（继承）与扩展（extends）</li></ul></li></ul><ul><li>事件模型的五个组成部分<ol><li>事件的拥有者（event source，对象）<ul><li>事件不会主动发生</li><li>当用户点击一个按钮，是用户的鼠标向计算机硬件发送了一个电讯号，硬件之所以能工作，全靠操作系统来协调管理。当Windows侦听到由鼠标发过来的电讯号，它就会查看一下鼠标指针在屏幕上的当前位置，实际上在Windows操作系统启动的时候，它就一直在追踪鼠标指针在屏幕上的位置，这个是所有图形用户操作系统最基本的功能之一。当Windows发现这个鼠标指针的位置由一个按钮，而且包含这个按钮的窗口处于激活状态的时候，它就会通知这个按钮，你被这个用户按下了，这时候按钮的内部逻辑就被执行了。</li><li>用户按按钮，是用户的操作通过windows操作系统调用了按钮的内部逻辑，最终还是按钮的内部逻辑触发了click事件</li></ul></li><li> 事件成员（event，成员）</li><li> 事件的响应者（event subscriber，对象）</li><li> 事件处理器（event handler ，成员）——本质上是一个回调方法</li><li> 事件订阅——把事件处理器与事件关联在一起，本质上是一种以委托类型为基础的”约定“</li><li> <img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220918200959915.png"></li><li> <img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220918201025294.png"></li></ol></li></ul><ul><li><p>注意</p><ul><li>事件处理器是成员方法</li><li>挂接事件处理器的时候，可以使用委托实例，也可以直接使用方法名，这是个”语法糖“</li><li>事件处理器对事件的订阅不是随意的，匹配与否由声明时间是所使用的委托类型来检测</li><li>事件可以同步调用也可以异步调用</li></ul></li><li><p>实例如下：</p><ul><li><p>事件成员一般是一个黄色的小闪电</p></li><li><p>一个事件有两个事件处理的场景</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Timers</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">EventExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//timer是事件的拥有者</span>            timer<span class="token punctuation">.</span>Interval <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>  <span class="token comment">//事件间隔为1秒</span>            <span class="token class-name">Boy</span> boy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Boy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Girl</span> girl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Girl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            timer<span class="token punctuation">.</span>Elapsed <span class="token operator">+=</span> boy<span class="token punctuation">.</span>Action<span class="token punctuation">;</span>    <span class="token comment">//Elapsed事件成员 +=事件的订阅 Action事件处理器</span>            timer<span class="token punctuation">.</span>Elapsed <span class="token operator">+=</span> girl<span class="token punctuation">.</span>Action<span class="token punctuation">;</span>            timer<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Boy</span>   <span class="token comment">//事件的响应者1</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//internal 访问仅限当前的程序集</span>        <span class="token keyword">internal</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">ElapsedEventArgs</span> e<span class="token punctuation">)</span> <span class="token comment">//事件处理器Action方法</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Jump!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Girl</span>  <span class="token comment">//事件的响应者2</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">internal</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">ElapsedEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Sing!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行结果是boy,girl依次打印</p></li></ul> <pre class="line-numbers language-none"><code class="language-none">Jump!Sing!Jump!Sing!Jump!Sing!......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>五大部分分别如下：</p><ul><li>1.事件的拥有者 timer(Timer类型的变量)</li><li>2.事件成员 Elapsed事件</li><li>3.事件的响应者 boy、girl(Boy/Girl类的变量)</li><li>4.事件的订阅 +=操作符</li><li>5.事件的处理器 Action方法(Boy/Girl类的方法)</li></ul></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220918200959915.png"></p></li><li><p>上图MVC/MVP等的模型，接下来举例上图所示的例子：</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">EventExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Form</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Form</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//form是事件的拥有者</span>            <span class="token class-name">Controller</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Controller</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//controller 事件的响应者</span>            form<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Controller</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Form</span> form<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Controller</span><span class="token punctuation">(</span><span class="token class-name">Form</span> form<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>form<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">//判断是否为空是因为如果一个对象是空的，那么我们是无法访问它的事件的</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>form <span class="token operator">=</span> form<span class="token punctuation">;</span>   <span class="token comment">//this可以区分哪个是字段，哪个是参数</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>Click <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>FormClicked<span class="token punctuation">;</span>    <span class="token comment">//this就是Controller实例</span>                <span class="token comment">//事件Click</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//事件处理器</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FormClicked</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>    <span class="token comment">//你会发现和之前Elapsed的事件约定不同</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>Text <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>五大部分分别如下：</p><ul><li>1.事件的拥有者 form(Form类型的变量)</li><li>2.事件成员 Click事件</li><li>3.事件的响应者 controller(Controller类的变量)</li><li>4.事件的订阅 +=操作符</li><li>5.事件的处理器 FormClicked方法(Controller类的方法)</li></ul></li><li><p>运行结果如下，在窗口的标题栏上显示当前的时间</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220919201951955.png"></p></li><li><p>接下来举例2星的例子，事件的拥有者同时也是事件的处理者</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">EventExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">MyForm</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//form是事件的拥有者，同时也是事件的响应者</span>            form<span class="token punctuation">.</span>Click <span class="token operator">+=</span> form<span class="token punctuation">.</span>FormClicked<span class="token punctuation">;</span>     <span class="token comment">//Click事件</span>            <span class="token comment">//FormClicked是事件处理器 +=是事件的订阅</span>            form<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">MyForm</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">internal</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FormClicked</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>Text <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>五大部分分别如下：</p><ul><li>1.事件的拥有者 myForm(MyForm类型的变量)</li><li>2.事件成员 Click事件</li><li>3.事件的响应者 myForm(MyForm类型的变量)</li><li>4.事件的订阅 +=操作符</li><li>5.事件的处理器 FormClicked方法(属于MyForm类型的方法)</li></ul></li><li><p>接下来举例3星的例子：事件的拥有者是事件的响应者的字段成员，事件的响应者用自己的方法订阅着自己的字段成员的某个事件。</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220922150825669.png"></p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">EventExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">MyForm</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//MyForm对象是事件的响应者</span>            form<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">MyForm</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//事件的拥有者 字段button</span>        <span class="token keyword">private</span> <span class="token class-name">TextBox</span> textBox<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Button</span> button<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MyForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>textBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">this</span><span class="token punctuation">.</span>button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>textBox<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>Controls<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>button<span class="token punctuation">.</span>Click <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ButtonClick<span class="token punctuation">;</span>            <span class="token comment">//非可视化编程</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>button<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"Say Hello"</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>button<span class="token punctuation">.</span>Top <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>            <span class="token comment">//事件成员(事件)Click +=事件订阅</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//事件处理器</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ButtonClick</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>textBox<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"Hello,World!"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>五大部分分别如下：</p><ul><li>1.事件的拥有者 button(MyForm类型的字段)</li><li>2.事件成员 Click事件(MyForm类型的字段button的事件)</li><li>3.事件的响应者 myForm(myForm类的变量)</li><li>4.事件的订阅 +=操作符</li><li>5.事件的处理器 ButtonClicked方法(事件的响应者myForm所拥有的方法)</li></ul></li><li><p>运行结果如下：</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220919204217195.png"></p></li><li><p>有趣的知识点</p></li><li><p>例如有如下窗口Form1，里面有一个textbox1和button1、button2，你可以同时将两个button的click事件设置为ButtonClick事件</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220920195659807.png"></p></li><li><p>同时代码如下：</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>ComponentModel</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Data</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">WinFormExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Form1</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token function">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ButtonClick</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//sender为事件的拥有者</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sender <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>button1<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sender <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>button2<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>textBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"World"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行结果是当你点击button1，textbox1的内容为Hello</p><ul><li>当你点击button2，textbox1的内容为World</li></ul></li></ul><h3 id="12-3-深入理解事件"><a href="#12-3-深入理解事件" class="headerlink" title="12.3 深入理解事件"></a>12.3 深入理解事件</h3><h3 id="12-4-事件的声明"><a href="#12-4-事件的声明" class="headerlink" title="12.4 事件的声明"></a>12.4 事件的声明</h3><ul><li><p>事件的声明</p><ul><li><p>完整声明</p><ul><li><p>事件是基于委托的有两层意思</p><ul><li>第一层意思：事件需要委托类型来做一个约束。约束既规定事件能发送什么样的消息给响应者，也规定事件响应者能收到什么样的事件消息。这就决定了事件响应者的事件处理器，必须能够和这个约束匹配上，才能够订阅这个事件。</li><li>第二层意思：当事件响应者向事件拥有者提供了能够匹配这个事件的事件处理器之后，需要把事件处理器保存或者记录下来。能够记录或者说引用方法的任务，只有委托类型的实例能够做到。</li></ul></li><li><p>例子如下：</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">EventExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//customer事件的拥有者</span>            <span class="token class-name">Waiter</span> waiter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Waiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//waiter事件的响应者</span>            customer<span class="token punctuation">.</span>Order <span class="token operator">+=</span> waiter<span class="token punctuation">.</span>Action<span class="token punctuation">;</span>        <span class="token comment">//Order事件 +=事件约束 Action事件处理器</span>            customer<span class="token punctuation">.</span><span class="token function">Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            customer<span class="token punctuation">.</span><span class="token function">PayTheBill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderEventArgs</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">EventArgs</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> DishName <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Size <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//委托isClass</span>    <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OrderEventHandler</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">,</span> <span class="token class-name">OrderEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//第一个参数表明事件的拥有者，这里是Customer</span>    <span class="token comment">//第二个参数用来保存状态信息，指明什么类型适用于该应用程序，比如点餐和大小</span>    <span class="token comment">//事件的拥有者类Customer顾客</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">OrderEventHandler</span> orderEventHandler<span class="token punctuation">;</span>    <span class="token comment">//引用事件处理器</span>        <span class="token keyword">public</span> <span class="token keyword">event</span> OrderEventHandler Order    <span class="token comment">//事件</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">add</span> <span class="token comment">//事件处理器添加器</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>orderEventHandler <span class="token operator">+=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">remove</span> <span class="token comment">//事件处理器移除器</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>orderEventHandler <span class="token operator">-=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> Bill <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">//点单付费</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PayTheBill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"I will pay $</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>Bill</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WalkIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Walk into the restaurant."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SitDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Sit down"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Think</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Let me think"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>orderEventHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment">//null意味着没有服务员订阅你的order事件</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">OrderEventArgs</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderEventArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span>DishName <span class="token operator">=</span> <span class="token string">"Kongpao Chicken"</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token string">"large"</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>orderEventHandler<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">WalkIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">SitDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Think</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Waiter</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">,</span> <span class="token class-name">OrderEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"I will serve you the dish - </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">e<span class="token punctuation">.</span>DishName</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> price <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>Size<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token string">"small"</span><span class="token punctuation">:</span>                    price <span class="token operator">*=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"large"</span><span class="token punctuation">:</span>                    price <span class="token operator">*=</span> <span class="token number">1.5</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            customer<span class="token punctuation">.</span>Bill <span class="token operator">+=</span> price<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">Walk into the restaurant.Sit downLet me thinkLet me thinkLet me thinkLet me thinkLet me thinkI will serve you the dish - Kongpao ChickenI will pay $15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>五大部分分别如下：</p><ul><li>1.事件的拥有者 customer(Customer类型的成员)</li></ul></li></ul></li><li><p>2.事件成员 Order事件(Customer类型的事件Order)</p><ul><li>3.事件的响应者 waiter(Waiter类的变量)</li><li>4.事件的订阅 +=操作符</li><li>5.事件的处理器 Action方法(Waiter类的方法)</li></ul></li><li><p>简略声明（字段式声明，field-like）</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>  <span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>  <span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span>  <span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span>  <span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>  <span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span>    <span class="token keyword">namespace</span> <span class="token namespace">EventExample</span>  <span class="token punctuation">&#123;</span>      <span class="token keyword">class</span> <span class="token class-name">Program</span>      <span class="token punctuation">&#123;</span>          <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//customer事件的拥有者</span>              <span class="token class-name">Waiter</span> waiter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Waiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//waiter事件的响应者</span>              customer<span class="token punctuation">.</span>Order <span class="token operator">+=</span> waiter<span class="token punctuation">.</span>Action<span class="token punctuation">;</span>        <span class="token comment">//Order事件 +=事件约束 Action事件处理器</span>              customer<span class="token punctuation">.</span><span class="token function">Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              customer<span class="token punctuation">.</span><span class="token function">PayTheBill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderEventArgs</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">EventArgs</span></span>      <span class="token punctuation">&#123;</span>          <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> DishName <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>          <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Size <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//委托isClass</span>      <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OrderEventHandler</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">,</span> <span class="token class-name">OrderEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//第一个参数表明事件的拥有者，这里是Customer</span>        <span class="token comment">//事件的拥有者类Customer顾客</span>      <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span>      <span class="token punctuation">&#123;</span>          <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">OrderEventHandler</span> Order<span class="token punctuation">;</span>   <span class="token comment">//事件的简略声明，field-like</span>          <span class="token comment">//事件的完整声明</span>          <span class="token comment">/*          private OrderEventHandler orderEventHandler;    //引用事件处理器            public event OrderEventHandler Order    //事件          &#123;              add //事件处理器添加器              &#123;                  this.orderEventHandler += value;              &#125;              remove //事件处理器移除器              &#123;                  this.orderEventHandler -= value;              &#125;          &#125;          */</span>          <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> Bill <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">//点单付费</span>          <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PayTheBill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"I will pay $</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>Bill</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WalkIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Walk into the restaurant."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SitDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Sit down"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Think</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>              <span class="token punctuation">&#123;</span>                  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Let me think"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>                <span class="token comment">//这里用事件的名字取代了字段的名字</span>              <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Order <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment">//微软在设计这个语法糖的时候造成了这个语法的前后不一致</span>              <span class="token punctuation">&#123;</span>                  <span class="token class-name">OrderEventArgs</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderEventArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  e<span class="token punctuation">.</span>DishName <span class="token operator">=</span> <span class="token string">"Kongpao Chicken"</span><span class="token punctuation">;</span>                  e<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token string">"large"</span><span class="token punctuation">;</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>Order<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">WalkIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">SitDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Think</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Waiter</span>      <span class="token punctuation">&#123;</span>          <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">,</span> <span class="token class-name">OrderEventArgs</span> e<span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"I will serve you the dish - </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">e<span class="token punctuation">.</span>DishName</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name"><span class="token keyword">double</span></span> price <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>              <span class="token keyword">switch</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>Size<span class="token punctuation">)</span>              <span class="token punctuation">&#123;</span>                  <span class="token keyword">case</span> <span class="token string">"small"</span><span class="token punctuation">:</span>                      price <span class="token operator">*=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>                      <span class="token keyword">break</span><span class="token punctuation">;</span>                  <span class="token keyword">case</span> <span class="token string">"large"</span><span class="token punctuation">:</span>                      price <span class="token operator">*=</span> <span class="token number">1.5</span><span class="token punctuation">;</span>                      <span class="token keyword">break</span><span class="token punctuation">;</span>                  <span class="token keyword">default</span><span class="token punctuation">:</span>                      <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              customer<span class="token punctuation">.</span>Bill <span class="token operator">+=</span> price<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>这里用事件的名字取代了字段的名字，微软在设计这个语法糖的时候造成了这个语法的前后不一致</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220921154819013.png"></p></li></ul></li></ul></li><li><p>有了委托字段/属性，为什么还需要事件？</p><ul><li>为了程序的逻辑更加“有道理”、更加安全，<font color="red">谨防“借刀杀人”</font></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">EventExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//customer事件的拥有者</span>            <span class="token class-name">Waiter</span> waiter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Waiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//waiter事件的响应者</span>            customer<span class="token punctuation">.</span>Order <span class="token operator">+=</span> waiter<span class="token punctuation">.</span>Action<span class="token punctuation">;</span>        <span class="token comment">//Order事件 +=事件约束 Action事件处理器</span>                                                    <span class="token comment">//customer.Action();</span>            <span class="token class-name">OrderEventArgs</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderEventArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span>DishName <span class="token operator">=</span> <span class="token string">"Manhanquanxi"</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token string">"large"</span><span class="token punctuation">;</span>            <span class="token class-name">OrderEventArgs</span> e2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderEventArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e2<span class="token punctuation">.</span>DishName <span class="token operator">=</span> <span class="token string">"Manhanquanxi"</span><span class="token punctuation">;</span>            e2<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token string">"large"</span><span class="token punctuation">;</span>            <span class="token class-name">Customer</span> badGuy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            badGuy<span class="token punctuation">.</span>Order <span class="token operator">+=</span> waiter<span class="token punctuation">.</span>Action<span class="token punctuation">;</span>            badGuy<span class="token punctuation">.</span>Order<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>customer<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            badGuy<span class="token punctuation">.</span>Order<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>customer<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">;</span>            customer<span class="token punctuation">.</span><span class="token function">PayTheBill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderEventArgs</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">EventArgs</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> DishName <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Size <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//委托isClass</span>    <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OrderEventHandler</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">,</span> <span class="token class-name">OrderEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//第一个参数表明事件的拥有者，这里是Customer</span>    <span class="token comment">//事件的拥有者类Customer顾客</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">OrderEventHandler</span> Order<span class="token punctuation">;</span>   <span class="token comment">//去掉event之后成了字段,event抑制外部滥用</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> Bill <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">//点单付费</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PayTheBill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"I will pay $</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>Bill</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WalkIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Walk into the restaurant."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SitDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Sit down"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Think</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Let me think"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//这里用事件的名字取代了字段的名字</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Order <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment">//微软在设计这个语法糖的时候造成了这个语法的前后不一致</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">OrderEventArgs</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderEventArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span>DishName <span class="token operator">=</span> <span class="token string">"Kongpao Chicken"</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token string">"large"</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>Order<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">WalkIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">SitDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Think</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Waiter</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">,</span> <span class="token class-name">OrderEventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"I will serve you the dish - </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">e<span class="token punctuation">.</span>DishName</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> price <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>Size<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token string">"small"</span><span class="token punctuation">:</span>                    price <span class="token operator">*=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"large"</span><span class="token punctuation">:</span>                    price <span class="token operator">*=</span> <span class="token number">1.5</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            customer<span class="token punctuation">.</span>Bill <span class="token operator">+=</span> price<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>所以<font color="red">事件的本质</font>是委托字段的一个包装器</p><ul><li>这个包装器对委托字段的访问起<font color="red">限制作用</font>，相当于一个“蒙版”</li><li>封装（encapsulation）的一个重要功能就是隐藏</li><li>事件<font color="red">对外界</font>隐藏了委托实例的大部分功能，<font color="red">仅暴露添加/移除事件处理器的功能</font></li><li>添加/移除事件处理器的时候可以直接使用方法名，这是委托实例所不具备的功能</li></ul></li><li><p>用于声明事件的委托类型的命名约定</p><ul><li><p>用于声明Foo事件的委托，一般命名为FooEventHandler（除非是一个非常通用的事件约束）</p><ul><li>使用通过委托EventHandler</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">EventExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//customer事件的拥有者</span>            <span class="token class-name">Waiter</span> waiter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Waiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//waiter事件的响应者</span>            customer<span class="token punctuation">.</span>Order <span class="token operator">+=</span> waiter<span class="token punctuation">.</span>Action<span class="token punctuation">;</span>        <span class="token comment">//Order事件 +=事件约束 Action事件处理器</span>            customer<span class="token punctuation">.</span><span class="token function">Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            customer<span class="token punctuation">.</span><span class="token function">PayTheBill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderEventArgs</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EventArgs</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> DishName <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Size <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//委托isClass</span>    <span class="token comment">//public delegate void OrderEventHandler(Customer customer, OrderEventArgs e);</span>    <span class="token comment">//第一个参数表明事件的拥有者，这里是Customer</span>    <span class="token comment">//事件的拥有者类Customer顾客</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">EventHandler</span> Order<span class="token punctuation">;</span>   <span class="token comment">//事件的简略声明，field-like</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> Bill <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">//点单付费</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PayTheBill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"I will pay $</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>Bill</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WalkIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Walk into the restaurant."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SitDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Sit down"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Think</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Let me think"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//这里用事件的名字取代了字段的名字</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Order <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment">//微软在设计这个语法糖的时候造成了这个语法的前后不一致</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">OrderEventArgs</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderEventArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span>DishName <span class="token operator">=</span> <span class="token string">"Kongpao Chicken"</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token string">"large"</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>Order<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">WalkIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">SitDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Think</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Waiter</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//类型转换</span>            <span class="token class-name">Customer</span> customer <span class="token operator">=</span> sender <span class="token keyword">as</span> <span class="token class-name">Customer</span><span class="token punctuation">;</span>            <span class="token class-name">OrderEventArgs</span> orderInfo <span class="token operator">=</span> e <span class="token keyword">as</span> <span class="token class-name">OrderEventArgs</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"I will serve you the dish - </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">orderInfo<span class="token punctuation">.</span>DishName</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> price <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>orderInfo<span class="token punctuation">.</span>Size<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token string">"small"</span><span class="token punctuation">:</span>                    price <span class="token operator">*=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"large"</span><span class="token punctuation">:</span>                    price <span class="token operator">*=</span> <span class="token number">1.5</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            customer<span class="token punctuation">.</span>Bill <span class="token operator">+=</span> price<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>FooEventHandler委托的参数一般有两个（由Win32 API演化而来，历史悠久）</p><ul><li>第一个是object类型，名字为sender，实际上就是事件的拥有者、事件的source<ul><li>用于保存触发事件的对象的引用</li></ul></li><li>第二个是EventArgs类的派生类，类名一般为FooEventArgs，参数名为e。也就是前面讲过的事件参数<ul><li>用来保存状态信息，指明什么类型适用于该应用程序</li></ul></li><li>虽然没有官方的说法，但我们可以把委托的参数列表看作是事件发生后发给给事件响应者的<font color="red">“事件消息”</font></li></ul></li><li><p>触发Foo事件的方法一般命名为OnFoo，即“因何引发”、<font color="red">“事出有因”</font></p><ul><li><p>访问级别为protected，不能用public，不然又成了可以“借刀杀人了”</p><ul><li>之前我们写的think方法违反了.net规定的原则，即一个方法只能做一件事</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Think</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Let me think"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">OnOrder</span><span class="token punctuation">(</span><span class="token string">"Gongpao chicken"</span><span class="token punctuation">,</span> <span class="token string">"large"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>            <span class="token keyword">protected</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnOrder</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> dishName<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> size<span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>       <span class="token comment">//这里用事件的名字取代了字段的名字</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Order <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment">//微软在设计这个语法糖的时候造成了这个语法的前后不一致</span>       <span class="token punctuation">&#123;</span>           <span class="token class-name">OrderEventArgs</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderEventArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           e<span class="token punctuation">.</span>DishName <span class="token operator">=</span> dishName<span class="token punctuation">;</span>           e<span class="token punctuation">.</span>Size <span class="token operator">=</span> size<span class="token punctuation">;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>Order<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>事件的命名约定</p><ul><li>带有时态的动词或者动词短语</li><li>事件拥有者“正在做”什么事情，用进行时；事件拥有者“做完了”什么事情，用完成时</li></ul></li></ul><h3 id="12-5-问题辨析"><a href="#12-5-问题辨析" class="headerlink" title="12.5 问题辨析"></a>12.5 问题辨析</h3><ul><li>很多有经验的程序员认为事件是特殊的委托</li><li>事件真的是“以特殊方式声明的委托字段/实例”吗？<ul><li><font color="red">不是！</font>只是声明的时候“看起来像”（对比委托字段与事件的简化声明，field-like）</li><li>事件声明的时候使用了委托类型，简化声明造成事件看上去像一个委托的字段（实例），而event关键字则更像是一个修饰符——这就是<font color="FF99##">错觉的来源之一</font></li><li>订阅事件的时候 += 操作符后面可以是一个委托实例，这与委托实例的赋值方法语法相同，这也让事件看起来像是一个委托字段——这是<font color="FF99##">错觉的又一来源</font></li><li>重申：事件的本质是假装在委托字段上的一个“蒙版”（mask），是个起掩蔽作用的包装器。这个用于阻挡非法操作的“蒙版”绝不是委托字段本身</li></ul></li><li>为什么要使用委托类型来声明事件？<ul><li>站在source（事件的拥有者）的角度来看，是为了表明source能对外传递哪些信息</li><li>站在subscriber（事件的响应者）的角度来看，它是一种约定，是为了约束能够使用什么样签名的方法来处理（响应）事件</li><li>委托类型的实例将用于存储（引用）事件处理器</li></ul></li><li>对比事件与属性<ul><li>属性不是字段——<font color="red">很多时候</font>属性是字段的包装器，这个包装器用来保护字段不被滥用</li><li>事件不是委托字段——它是委托字段的包装器，这个包装器用来保护委托字段不被滥用</li><li>包装器永远都不可能是被包装的东西</li></ul></li></ul><h2 id="13-什么是类（Class），构造器与析构器"><a href="#13-什么是类（Class），构造器与析构器" class="headerlink" title="13.  什么是类（Class），构造器与析构器"></a>13.  什么是类（Class），构造器与析构器</h2><ul><li>《C#语言规范》<ul><li>类是一种数据结构，它可以包含数据成员（常量和字段）、函数成员（方法、属性、索引器、运算符、实力构造器、静态构造器和析构器）以及嵌套类型。类类型支持继承，继承是一种机制，它使派生类可以对基类进行扩展和专用华。</li></ul></li></ul><h3 id="13-1-什么是类"><a href="#13-1-什么是类" class="headerlink" title="13.1 什么是类"></a>13.1 什么是类</h3><ul><li><p>是一种数据结构（data structure）</p></li><li><p>是一种数据类型</p><ul><li>类是引用类型，例如Student类是自定义的引用类型</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloClass</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>Name<span class="token operator">=</span><span class="token string">"8yyy"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>ID<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            stu<span class="token punctuation">.</span><span class="token function">Report</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Report</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"I'm #</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>ID</span><span class="token punctuation">&#125;</span></span><span class="token string"> student,my name is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>代表现实世界中的“种类”</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloClass</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"8yyy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"TimothyLiu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>Amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Amount <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Amount <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>        <span class="token operator">~</span><span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            Student<span class="token punctuation">.</span>Amount<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ID <span class="token operator">=</span> id<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>Name <span class="token operator">=</span> name<span class="token punctuation">;</span>            Student<span class="token punctuation">.</span>Amount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Report</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"I'm #</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>ID</span><span class="token punctuation">&#125;</span></span><span class="token string"> student,my name is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="13-2-构造器与析构器"><a href="#13-2-构造器与析构器" class="headerlink" title="13.2 构造器与析构器"></a>13.2 构造器与析构器</h3><ul><li><p>实例</p></li><li><p>静态</p><ul><li>静态构造器用于初始化静态成员</li></ul></li><li><p>如何不使用new操作符创建实例？</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloClass</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Type</span> t <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">object</span></span> o <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"8yyy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>o<span class="token punctuation">;</span>            <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> o <span class="token keyword">as</span> <span class="token class-name">Student</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">dynamic</span></span> stu2 <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"8yyy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ID <span class="token operator">=</span> id<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>Name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Report</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"I'm #</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>ID</span><span class="token punctuation">&#125;</span></span><span class="token string"> student,my name is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="14-类的声明与访问级别"><a href="#14-类的声明与访问级别" class="headerlink" title="14. 类的声明与访问级别"></a>14. 类的声明与访问级别</h2><ul><li><p>类声明的全貌</p><ul><li>C#类声明的位置<ul><li>名称空间里（99%的情况）</li><li>看似名称空间外（不推荐的做法，其实声明是在全局名称空间里）</li><li>类里，嵌套类</li></ul></li><li>声明即定义（C#与Java）<ul><li>在C/C++中声明和定义是分开的</li></ul></li></ul></li><li><p>最简单的类声明</p><ul><li>class 关键字 identifier 类名 class-body 类体</li><li>类的访问控制<ul><li>类默认的访问级别是internal（在本程序集内Assembly可访问，本项目object）</li><li>不能使用private，当这个类是某个类的成员的时候可以使用private</li></ul></li></ul></li><li><p>类成员的访问控制</p><ul><li>public 均可访问</li><li>private 类体内可访问，子类不能访问</li><li>protected 类的继承链上的类可以访问，可以跨程序集<ul><li>更多应用在方法上</li></ul></li><li>internal 本程序集内可访问</li></ul></li><li><p>类的继承</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloOOP</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Type</span> t <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Car</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Type</span> tb <span class="token operator">=</span> t<span class="token punctuation">.</span>BaseType<span class="token punctuation">;</span>   <span class="token comment">//结果为HelloOOP.Vehicle，说明Car是Vehicle的派生类</span>            <span class="token class-name">Type</span> ttop <span class="token operator">=</span> tb<span class="token punctuation">.</span>BaseType<span class="token punctuation">;</span>    <span class="token comment">//结果为System.Object,说明所有类的基类为Object</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>tb<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ttop<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Vehicle</span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Vehicle</span></span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>三层 System.Object &lt;–  Vehicle &lt;– Car</p></li><li><p>类在功能上的扩展（extend）</p></li><li><p>只能由一个基类（base-class），但可以实现多个其接口</p><ul><li>C++中可以有多个基类</li></ul></li><li><p>类访问级别对其继承的影响</p><ul><li>子类的访问级别不能超越父类</li></ul></li><li><p>sealed类不能被继承</p></li><li><p>《是一个 is a 概念》一个派生类的实例从语义上来讲也是基类的实例</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloOOP</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>car <span class="token keyword">is</span> <span class="token class-name">Vehicle</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//True</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>car <span class="token keyword">is</span> <span class="token class-name"><span class="token keyword">object</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//True</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Vehicle</span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Vehicle</span></span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以用父类类型的变量来实现子类的实例</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloOOP</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Vehicle</span> vehicle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">object</span></span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">object</span></span> o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Vehicle</span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Vehicle</span></span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>继承的本质</strong>：继承的本质是派生类在基类已有的成员的基础之上对基类进行<strong>横向</strong>或者<strong>纵向</strong>上的扩展</p><ul><li>横向扩展指类成员的扩充</li><li>纵向扩展指不扩充类成员的个数，对某些类成员的版本扩展（override）</li></ul></li></ul></li><li><p>成员的继承与访问</p><ul><li><p>类成员的访问级别的上限是类的访问级别</p></li><li><p>派生类对继承成员的访问</p></li><li><p>派生类对基类成员的访问 base</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloOOP</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            car<span class="token punctuation">.</span><span class="token function">ShowOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Vehicle</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token function">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>Owner <span class="token operator">=</span> <span class="token string">"N/A"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Owner <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Vehicle</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>Owner <span class="token operator">=</span> <span class="token string">"Car Owner"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ShowOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">base</span><span class="token punctuation">.</span>Owner<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//访问父类的Owner，在这和下面的结果是一样的，因为子类对父类的Owner进行了重写</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Owner<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>用base可以访问父类的Owner，在这和下面的this结果一样，因为子类对父类的Owner进行了重写</li></ul></li><li><p>构造器的不可继承性</p><ul><li><p>当父类只有一个有参的构造器之后</p></li><li><p>写法1：base</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Vehicle</span>   <span class="token punctuation">&#123;</span>       <span class="token keyword">public</span> <span class="token function">Vehicle</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> owner<span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>Owner <span class="token operator">=</span> owner<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Owner <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Vehicle</span></span>   <span class="token punctuation">&#123;</span>       <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">base</span><span class="token punctuation">(</span><span class="token string">"N/A"</span><span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>       <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ShowOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">base</span><span class="token punctuation">.</span>Owner<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Owner<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>写法2：</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Vehicle</span>   <span class="token punctuation">&#123;</span>       <span class="token keyword">public</span> <span class="token function">Vehicle</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> owner<span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>Owner <span class="token operator">=</span> owner<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Owner <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Vehicle</span></span>   <span class="token punctuation">&#123;</span>       <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> owner<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">base</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>                  <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><font color="red">注意：因为在基类构造器里已经把Owner的值设置为owner参数的值了，所以我们不必要在Car的构造器里再设置一遍，让Car里面的构造器空着就可以了</font></p></li><li><p>说明实例构造器不被继承</p></li><li><p>变量名+_下划线，表明实例字段且为私有字段</p></li></ul></li></ul></li><li><p>面向对象的实现风格</p><ul><li>Class-based 基于类<ul><li>编程界主流</li><li>C#、Java、C++</li></ul></li><li>Prototype-based 基于原型<ul><li>JavaScript</li></ul></li></ul></li></ul><h2 id="15-继承，重写，多态"><a href="#15-继承，重写，多态" class="headerlink" title="15. 继承，重写，多态"></a>15. 继承，重写，多态</h2><p>Rider</p><h3 id="15-1-类的继承"><a href="#15-1-类的继承" class="headerlink" title="15.1 类的继承"></a>15.1 类的继承</h3><ul><li><p>类成员的“ 横向扩展 ”（成员越来越多）</p></li><li><p>类成员的“ 纵向扩展 ”（行为改变，版本增高）</p></li><li><p>类成员的隐藏（不常用）</p><ul><li>在子类中写了一个和父类一样的方法，就会隐藏掉继承自父类的方法（完全不推荐）</li></ul></li><li><p>重写（Override）</p><ul><li>父类成员标记为 <strong>virtual</strong>，子类成员标记为 <strong>override</strong></li><li>注：被标记为 override 的成员，隐含也是 virtual 的，可以继续被重写。</li></ul></li><li><p>重写（Override）与隐藏（Hide）的发生条件：函数成员、可见、签名一致</p><ul><li><p>新手不必过于纠结 Override 和 Hide 的区分、关联。因为原则上是不推荐用 Hide 的。很多时候甚至会视 Hide 为一种错误</p></li><li><p>函数成员（Function members）</p><ul><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220923111905199.png"></p></li><li><p>Methods 方法 Properties 属性 在多态上体现的比较多</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">OverrideExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            car<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span>Speed<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Vehicle</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _speed<span class="token punctuation">;</span> <span class="token comment">//_用于表明访问类型为private</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Speed <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _speed<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">set</span> <span class="token punctuation">&#123;</span> _speed <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I'am running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _speed <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Vehicle</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _rpm<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Speed <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _rpm<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">set</span> <span class="token punctuation">&#123;</span> _rpm <span class="token operator">=</span> <span class="token keyword">value</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> CarName <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//横向扩展</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//纵向扩展，重写</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"car is running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _rpm <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>只有对子类可见的父类成员可以重写， public/protected</p></li></ul></li></ul><h3 id="15-2-多态（polymorphism）"><a href="#15-2-多态（polymorphism）" class="headerlink" title="15.2 多态（polymorphism）"></a>15.2 多态（polymorphism）</h3><ul><li><p><strong>什么是多态？</strong></p><ul><li><p>父类型变量指向子类型对象；</p><ul><li><code>class Car : Vehicle</code></li><li><code>Vehicle vehicle = new Car();</code></li></ul></li><li><p>父类型中的函数成员被子类重写了；</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I'am running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"car is running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当父类型引用调用函数成员时，调用的时子类中重写了的函数成员；</p> <pre class="line-numbers language-none"><code class="language-none">vehicle.run();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>运行结果为：<strong>car is running</strong></li></ul></li><li><p>以上就是对多态的描述，它隐含了：继承、重写。</p></li></ul></li><li><p>c#的多态性主要体现在类的继承上：子类继承父类的时候，可能出现同名但方法定义不同的情况， 所以在子类中会将原方法覆盖，实现自身的要求</p></li><li><p>当用父类类型的的变量引用子类类型的的实例，调用被重写的方法，一定是调用<strong>子类</strong>的方法</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">EventExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">People</span> peopleOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            peopleOne<span class="token punctuation">.</span><span class="token function">WhoIam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">People</span> peopleTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Eight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            peopleTwo<span class="token punctuation">.</span><span class="token function">WhoIam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">Student</span> studentOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Eight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            studentOne<span class="token punctuation">.</span><span class="token function">WhoIam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">People</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WhoIam</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I'am people!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">People</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WhoIam</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I'am a student!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Eight</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Student</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WhoIam</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I'am 8!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下:</li></ul> <pre class="line-numbers language-none"><code class="language-none">I&#39;am a student!I&#39;am 8!I&#39;am 8!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>基于重写机制（virtual –&gt; override）</p><ul><li>virtual 可理解为可被重写的，名存实亡的，可被推翻的</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">OverrideExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            car<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Vehicle</span> vehicle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            vehicle<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Vehicle</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I'am running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Vehicle</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> CarName <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//横向扩展</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//纵向扩展，重写</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"car is running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">car is runningcar is running<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>而在Java中不需要加virtual和override即可实现重写</li></ul></li><li><p>函数成员的具体行为（版本）由对象决定</p></li><li><p>回顾：C#语言的变量和对象都是有类型的，所以会有“代差”</p></li><li><p>Python 是对象有类型，变量没有类型的语言，Python 变量的类型永远跟着对象走。 所以在 Python 中即使重写了，也没有多态的效果。</p></li></ul><h2 id="16-接口，抽象类，SOLID，单元测试，反射，依赖注入"><a href="#16-接口，抽象类，SOLID，单元测试，反射，依赖注入" class="headerlink" title="16. 接口，抽象类，SOLID，单元测试，反射，依赖注入"></a>16. 接口，抽象类，SOLID，单元测试，反射，依赖注入</h2><p><font color="red" size="5">C#中SOLID原则:</font></p><ol><li><p><strong>S  表示 Single responsibility（单一责任）；</strong></p><ul><li>单一责任原则，简单来说就是一个类或一个模块，只负责一种或一类职责。</li></ul></li><li><p><strong>O 表示 Open for extension and closed for modification（扩展时打开和修改时关闭，关闭原则）；</strong></p><ul><li>开闭原则要求类、模块、函数等实体应该对扩展开放，对修改关闭。</li></ul></li><li><p><strong>L  表示 Liskov 替换（里氏替换原则）；</strong></p><ul><li>子类可以扩展父类的功能，但不能改变基类原有的功能。它有四层含义：<ol><li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法；</li><li>子类中可以增加自己的特有方法；</li><li>当子类重载父类的方法时，方法的前置条件（形参）要比父类的输入参数更宽松；</li><li>当子类实现父类的抽象方法时，方法的后置条件（返回值）要比父类更严格。</li></ol></li></ul></li><li><p><strong>I   表示 Interface segregation（接口隔离）；</strong></p><ul><li><p>接口隔离原则要求客户不依赖于它不使用的接口和方法；一个类对另一个类的依赖应该建立在最小的接口上。</p><p>通常的做法，是把一个臃肿的接口拆分成多个更小的接口，以保证客户只需要知道与它相关的方法。</p></li></ul></li><li><p><strong>D  表示 Dependency injection（依赖关系注入）。</strong></p><ul><li>依赖倒置原则要求高层模块不能依赖于低层模块，而是两者都依赖于抽象。另外，抽象不应该依赖于细节，而细节应该依赖于抽象。</li></ul></li></ol><p>解释摘自：<a href="https://www.cnblogs.com/tiger-wang/p/13525841.html">https://www.cnblogs.com/tiger-wang/p/13525841.html</a></p><hr><ul><li>为做基类而生的”抽象类“与”开放/关闭原则“</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Example027</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//Vehicle vehicle = new Vehicle();</span>            <span class="token comment">//无法创建抽象类的实例</span>            <span class="token class-name">Vehicle</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Vehicle</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Stopped!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Vehicle</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//实现抽象方法必须使用override</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Car is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">class</span> <span class="token class-name">Truck</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Vehicle</span></span> <span class="token comment">//卡车</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Truck is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//抽象方法必须放在抽象类里</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Student</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//像这种就是抽象方法，没有方法体&#123;&#125;，不能是private</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>一个抽象类里的所有类成员都是抽象的实际上就是接口</p></li><li><p>接口由抽象类进化而来</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">VehicleBase</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>将abstract class 改为 interface，去掉 abstract public</p></li><li><p>接口的默认成员都是public的</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">interface</span> <span class="token class-name">VehicleBase</span>    <span class="token punctuation">&#123;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>派生类的方法的override也需要去掉</li></ul></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Example027</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//Vehicle vehicle = new Vehicle();</span>            <span class="token comment">//无法创建抽象类的实例</span>            <span class="token class-name">Vehicle</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">interface</span> <span class="token class-name">VehicleBase</span><span class="token comment">//接口</span>    <span class="token punctuation">&#123;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Vehicle</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">VehicleBase</span></span><span class="token comment">//需要实现接口的所有成员</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//需要去掉override</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Stopped!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Pay and Fill..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Vehicle</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//实现抽象方法必须使用override</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Car is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">class</span> <span class="token class-name">Truck</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Vehicle</span></span> <span class="token comment">//卡车</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Truck is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果一个接口继承其他接口，那么实现类或结构就需要实现所有接口的成员。</li></ul><h3 id="16-1-什么是接口和抽象类"><a href="#16-1-什么是接口和抽象类" class="headerlink" title="16.1 什么是接口和抽象类"></a>16.1 什么是接口和抽象类</h3><ul><li><p>接口和抽象类都是“软件工程产物”</p></li><li><p>具体类 –&gt; 抽象类 –&gt; 接口：越来越抽象，内部实现的东西越来越少</p></li><li><p><strong>抽象类是未完全实现逻辑的类</strong>（可以有字段和非public成员，它们代表了“具体逻辑”）</p><ul><li>不能是private的成员</li></ul></li><li><p>抽象类为复用而生：专门作为基类来使用，也就有解耦功能</p></li><li><p>封装确定的，开放不确定的，推迟到合适的子类中去实现</p><ul><li>开闭原则</li></ul></li><li><p><strong>接口是完全未实现逻辑的“类”</strong>（“纯虚类”：只有函数成员；成员全部public）</p><ul><li>听说C# 8.0之后存在接口默认方法</li></ul></li><li><p>接口为解耦而生：”高内聚，低耦合“，方便单元测试</p><ul><li><p>内聚：每个模块尽可能独立完成自己的功能，不依赖于模块外部的代码。           </p><p>耦合：模块与模块之间接口的复杂程度，模块之间联系越复杂耦合度越高，牵一发而动全身。 </p><p>目的：使得模块的“可重用性”、“移植性”大大增强 </p></li><li><p>紧耦合的例子</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">InterfaceExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> engine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Engine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Car</span><span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token punctuation">;</span>            car<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span>Speed<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">class</span> <span class="token class-name">Engine</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> RPM <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Work</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> gas<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>RPM <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> gas<span class="token punctuation">;</span>                <span class="token comment">//例如将this.RPM = 1000 * gas;改为RPM=0;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>   <span class="token keyword">class</span> <span class="token class-name">Car</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">private</span> <span class="token class-name">Engine</span> _engine<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token class-name">Engine</span> engine<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                _engine <span class="token operator">=</span> engine<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Speed <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> gas<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                _engine<span class="token punctuation">.</span><span class="token function">Work</span><span class="token punctuation">(</span>gas<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>Speed <span class="token operator">=</span> _engine<span class="token punctuation">.</span>RPM <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Car类依赖于Engine类，Engine出问题，Car也会出问题</p></li><li><p>使用接口低耦合</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">InterfaceExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PhoneUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">NokiaPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//改动new NokiaPhone()即可</span>            user<span class="token punctuation">.</span><span class="token function">UsePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">PhoneUser</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">IPhone</span> _phone<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">PhoneUser</span><span class="token punctuation">(</span><span class="token class-name">IPhone</span> phone<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UsePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _phone<span class="token punctuation">.</span><span class="token function">Dail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _phone<span class="token punctuation">.</span><span class="token function">PickUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _phone<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _phone<span class="token punctuation">.</span><span class="token function">Receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">interface</span> <span class="token class-name">IPhone</span>    <span class="token punctuation">&#123;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PickUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">NokiaPhone</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPhone</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dail</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Nokia calling..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PickUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello!This is Tim!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Nokia message ring..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">EricssonPhone</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPhone</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dail</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Ericsson calling..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PickUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello!This is Tim!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Ericsson ring..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>只需要改动<code>var user = new PhoneUser(new NokiaPhone());</code>中的<code>new NokiaPhone()</code>，即可更换手机</li></ul></li><li><p><strong>接口是一个”协约“</strong>，早已为工业生产所熟知（有分工必有协作，有协作必有协约）</p><ul><li>在面向对象中协作就是类和类之间的协作，协作就意味着产生了依赖关系</li></ul></li><li><p><strong>它们都不能实例化</strong>，只能用来声明变量，引用具体类（concrete class）的实例</p></li></ul><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220924164637540.png"></p><p>接口与单元测试</p><ul><li>接口的产生：自底向上（重构），自顶向下（设计）<ul><li>“自顶向下，逐步求精”（紧耦合形成的金字塔）</li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220924200503886.png"></li></ul></li><li>C#中接口的实现（隐式，显示，多接口）</li><li>语言对面向对象设计的内建支持：依赖反转，接口隔离，开/闭原则<ul><li>依赖反转用于平衡“自顶向下，逐步求精”的思路</li><li>解耦在代码中的表现就是依赖反转。单元测试就是依赖反转在开发中的直接应用和直接受益者。</li><li>依赖关系：服务的使用者和服务的提供者之间有依赖关系，服务的使用者依赖在服务的提供者之上。依赖越直接，耦合越紧密。服务的提供者出问题时，服务的使用者也会出问题。</li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220925105343376.png"></li></ul></li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">InterfaceExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nums1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">ArrayList</span> nums2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArrayList</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token comment">//object类型，非泛型，需要引入System.Collections类库</span>            <span class="token comment">//ArrayList实现了IEnumerable接口 支持迭代</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Sum</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Avg</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Sum1</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Avg1</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//在没有使用接口的情况下,需要四个方法</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> n <span class="token keyword">in</span> nums<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                sum <span class="token operator">+=</span> n<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Avg</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nums<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> n <span class="token keyword">in</span> nums<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                sum <span class="token operator">+=</span> n<span class="token punctuation">;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> sum <span class="token operator">/</span> count<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Sum1</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span> nums<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> n <span class="token keyword">in</span> nums<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                sum <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>n<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Avg1</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span> nums<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> n <span class="token keyword">in</span> nums<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                sum <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>n<span class="token punctuation">;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> sum <span class="token operator">/</span> count<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用接口</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">InterfaceExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nums1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">ArrayList</span> nums2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArrayList</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Sum</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Sum</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable</span> nums<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> n <span class="token keyword">in</span> nums<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                sum <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>n<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Avg</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable</span> nums<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">double</span></span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> n <span class="token keyword">in</span> nums<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                sum <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>n<span class="token punctuation">;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> sum <span class="token operator">/</span> count<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在需求方（Sum和Avg函数）只需要传进来的对象能够被迭代，因为要用foreach循环去迭代每一个整数，不要求其他功能。<br>需求方只需要可以被迭代，而供方（整型数组和ArrayList实例）是可以被迭代的。整型数组的基类是Array，它实现了IEnumerable接口，就是说Array对外声称自己遵循这个契约，保证自己可以被迭代。ArrayList同理。<br>因此就不需要再使用具体的int[]类型和ArrayList类型了，统一替换成IEnumerable。<br>摘自：<a href="https://blog.csdn.net/Mr_Tfos/article/details/115556289">https://blog.csdn.net/Mr_Tfos/article/details/115556289</a></p><p>例子2：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">InterfaceExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> fan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DeskFan</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PowerSupply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>fan<span class="token punctuation">.</span><span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">PowerSupply</span> <span class="token comment">//电源</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">210</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">DeskFan</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">PowerSupply</span> _powerSupply<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">DeskFan</span><span class="token punctuation">(</span><span class="token class-name">PowerSupply</span> powerSupply<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _powerSupply <span class="token operator">=</span> powerSupply<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> power <span class="token operator">=</span> _powerSupply<span class="token punctuation">.</span><span class="token function">GetPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>power <span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token string">"Wont work."</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>power <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token string">"Slow."</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>power <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token string">"Work Fine."</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token string">"Warning."</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结构为<code>Warning.</code></p><p>以上这个例子当你想要测试的时候就必须动PowerSupply类，这在实际工作中是不允许的，因为可能还有其他电器需要用到PowerSupply类，你为了测试DeskFan直接改动PowerSupply类就可能导致其他电器不能正常运行，这个紧耦合就会造成很大的问题。</p><p>接下来使用接口解耦</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">InterfaceExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> fan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DeskFan</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PowerSupply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>fan<span class="token punctuation">.</span><span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPowerSupply</span>    <span class="token punctuation">&#123;</span>        <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PowerSupply</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">IPowerSupply</span></span> <span class="token comment">//电源</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">110</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeskFan</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">IPowerSupply</span> _powerSupply<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">DeskFan</span><span class="token punctuation">(</span><span class="token class-name">IPowerSupply</span> powerSupply<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _powerSupply <span class="token operator">=</span> powerSupply<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> power <span class="token operator">=</span> _powerSupply<span class="token punctuation">.</span><span class="token function">GetPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>power <span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token string">"Wont work."</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>power <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token string">"Slow."</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>power <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token string">"Work Fine."</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token string">"Warning."</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16-2-测试单元"><a href="#16-2-测试单元" class="headerlink" title="16.2 测试单元"></a>16.2 测试单元</h3><ul><li>打开测试资源管理器 Ctrl E,T</li><li><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220925143358131.png"></li></ul><ul><li><p>右键解决方案添加一个<code>xUnit Project</code>，命名为<code>InterfaceExample.Tests</code></p></li><li><p>将类名改名为<code>DeskFanTests</code></p></li><li><p>依赖项添加项目引用<code>InterfaceExample</code>，以便使用接口<code>IPowerSupply</code></p></li><li><p>Solution如下图所示</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220925144730231.png"></p></li><li><p>主要测试代码如下</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Xunit</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">InterfaceExample<span class="token punctuation">.</span>Tests</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeskFanTests</span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>  <span class="token comment">//特征特性</span>        <span class="token comment">//测试case</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PowerLowerThanZero_OK</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> fan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DeskFan</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PowerSupplyLowerThanZero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> expected <span class="token operator">=</span> <span class="token string">"Wont work."</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> actual <span class="token operator">=</span> fan<span class="token punctuation">.</span><span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span>actual<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PowerLowerThan200_Warning</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> fan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DeskFan</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PowerSupplyHigherThan200</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> expected <span class="token operator">=</span> <span class="token string">"Warning."</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> actual <span class="token operator">=</span> fan<span class="token punctuation">.</span><span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">PowerSupplyLowerThanZero</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPowerSupply</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">PowerSupplyHigherThan200</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPowerSupply</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">220</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>[Fact]</code>代表特征特性，它表明接下来的方法为测试case</p></li><li><p>上述代码运行结果如下：</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220925144857205.png"></p></li><li><p>在平时工作中测试case和写代码的重要程度是一样的</p></li><li><p>在上述单元测试里有一个很大的问题，就是为了测试不同的情况，我们需要创建不同的类</p></li><li><p>因此我们可以使用<code>Moq</code>，打开<code>管理NuGet程序包</code>，安装Moq</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220925145225757.png"></p></li><li><p>接下来我们就直接用Moq直接创建这种实现接口的实例，而略过创建类的这一步</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Xunit</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Moq</span><span class="token punctuation">;</span><span class="token comment">//引入Moq</span><span class="token keyword">namespace</span> <span class="token namespace">InterfaceExample<span class="token punctuation">.</span>Tests</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeskFanTests</span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>  <span class="token comment">//特征特性</span>        <span class="token comment">//测试case</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PowerLowerThanZero_OK</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> mock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mock<span class="token punctuation">&lt;</span>IPowerSupply<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mock<span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span>ps <span class="token operator">=></span> ps<span class="token punctuation">.</span><span class="token function">GetPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Returns</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> fan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DeskFan</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> expected <span class="token operator">=</span> <span class="token string">"Wont work."</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> actual <span class="token operator">=</span> fan<span class="token punctuation">.</span><span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span>actual<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PowerLowerThan200_Warning</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> mock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mock<span class="token punctuation">&lt;</span>IPowerSupply<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mock<span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span>ps <span class="token operator">=></span> ps<span class="token punctuation">.</span><span class="token function">GetPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Returns</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">220</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> fan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DeskFan</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> expected <span class="token operator">=</span> <span class="token string">"Warning."</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> actual <span class="token operator">=</span> fan<span class="token punctuation">.</span><span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>运行结果如下：</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220925145753984.png"></p></li><li><p>简单来说就是一个代码自动生成工具，简化了单元测试的流程</p></li></ul><h3 id="16-3-反射与依赖注入"><a href="#16-3-反射与依赖注入" class="headerlink" title="16.3 反射与依赖注入"></a>16.3 反射与依赖注入</h3><p>可直接参考：<a href="https://www.sogou.com/link?url=hedJjaC291OfPyaFZYFLI4KQWvqt63NBtcOkgzSJL054AydClNZNQQ">https://www.sogou.com/link?url=hedJjaC291OfPyaFZYFLI4KQWvqt63NBtcOkgzSJL054AydClNZNQQ</a>..</p><p>SOILD中的I，<strong>接口隔离原则</strong>（Interface segregation）：调用者不会多要</p><p>接口隔离原则要求客户不依赖于它不使用的接口和方法；一个类对另一个类的依赖应该建立在最小的接口上。</p><p>通常的做法，是把一个臃肿的接口拆分成多个更小的接口，以保证客户只需要知道与它相关的方法。</p><p>例子1：给女朋友买车，日常用车只需要能跑就行，不需要开火</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">IspExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> driverOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Driver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            driverOne<span class="token punctuation">.</span><span class="token function">Drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> driverTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Driver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">LightTank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            driverTwo<span class="token punctuation">.</span><span class="token function">Drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> driverThree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Driver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">HeavyTank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            driverThree<span class="token punctuation">.</span><span class="token function">Drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Driver</span><span class="token comment">//客户即女朋友，只需要Run方法，不多要</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">IVehicle</span> _vehicle<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Driver</span><span class="token punctuation">(</span><span class="token class-name">IVehicle</span> vehicle<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _vehicle <span class="token operator">=</span> vehicle<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _vehicle<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">interface</span> <span class="token class-name">IVehicle</span>    <span class="token punctuation">&#123;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IVehicle</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Car is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Truck</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IVehicle</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Truck is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">interface</span> <span class="token class-name">IWeapon</span>    <span class="token punctuation">&#123;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">interface</span> <span class="token class-name">ITank</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">IVehicle</span><span class="token punctuation">,</span><span class="token class-name">IWeapon</span></span>    <span class="token comment">//一个接口可以继承多个接口</span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">LightTank</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ITank</span></span> <span class="token comment">//轻型坦克</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fire</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Boom!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Ka ka ka ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">MediumTank</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ITank</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fire</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Boom!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Ka! ka! ka! ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">HeavyTank</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ITank</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fire</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Boom!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Ka!! ka!! ka!! ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">Car is running...Ka ka ka ...Ka!! ka!! ka!! ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220925105343376.png"></p><p>例子2：</p><h4 id="16-3-1-手写迭代器"><a href="#16-3-1-手写迭代器" class="headerlink" title="16.3.1 手写迭代器"></a>16.3.1 手写迭代器</h4><p><code>Array</code>和<code>ArrayList</code>均实现了<code>ICollection接口</code>与<code>IEnumerable接口</code></p><p><code>ICollection接口</code>继承了<code>IEnumerable接口</code>，也就是说除了实现了<code>IEnumerable接口</code>的功能，还实现了其他的功能</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">namespace</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICollection</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEnumerable</span></span>    <span class="token punctuation">&#123;</span>        <span class="token return-type class-name"><span class="token keyword">int</span></span> Count <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsSynchronized <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token return-type class-name"><span class="token keyword">object</span></span> SyncRoot <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CopyTo</span><span class="token punctuation">(</span><span class="token class-name">Array</span> array<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在.net框架中，没有一种集合是只实现了<code>IEnumerable接口</code>，没有实现<code>ICollection接口</code>，所以我们需要自己写一个</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">IspExample2</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>                         <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nums1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">ArrayList</span> nums2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArrayList</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Sum</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Sum</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> roc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ReadOnlyCollection</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> n <span class="token keyword">in</span> roc<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token class-name">ICollection</span> nums<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> n <span class="token keyword">in</span> nums<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                result <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>n<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">ReadOnlyCollection</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEnumerable</span></span>  <span class="token comment">//只能被迭代，不能删除添加元素</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> _array<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">ReadOnlyCollection</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> array<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _array <span class="token operator">=</span> array<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//实现接口的代码，需要返回一个IEnumerator类型的实例</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Enumerator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Enumerator</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEnumerator</span></span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">private</span> <span class="token class-name">ReadOnlyCollection</span> _collection<span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _head<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token function">Enumerator</span><span class="token punctuation">(</span><span class="token class-name">ReadOnlyCollection</span> collection<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                _collection <span class="token operator">=</span> collection<span class="token punctuation">;</span>                _head <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token keyword">object</span> Current   <span class="token comment">//数组的_head</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">get</span>                <span class="token punctuation">&#123;</span>                    <span class="token class-name"><span class="token keyword">object</span></span> o <span class="token operator">=</span> _collection<span class="token punctuation">.</span>_array<span class="token punctuation">[</span>_head<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> o<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>_head <span class="token operator">&lt;</span> _collection<span class="token punctuation">.</span>_array<span class="token punctuation">.</span>Length<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                _head <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们想用如下语法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> roc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ReadOnlyCollection</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Sum</span><span class="token punctuation">(</span>roc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那么我们就需要将<code>static int Sum(ICollection nums)</code>更改为<code>static int Sum(IEnumerable nums)</code>，原因是因为<code>ICollection接口</code>实现了其他的方法，而<code>ReadOnlyCollection</code>只实现了<code>IEnumerable接口</code></p><p>例子3：显示接口实现（C#独有）</p><p>这个杀手不太冷的男主角，杀手的身份需要隐藏</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">IspExample3</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">IKiller</span> killer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WarmKill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            killer<span class="token punctuation">.</span><span class="token function">Kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//这时候如果我们想调用love方法</span>            <span class="token comment">//方法1类型转换</span>            <span class="token class-name"><span class="token keyword">var</span></span> wk1 <span class="token operator">=</span> killer <span class="token keyword">as</span> <span class="token class-name">WarmKill</span><span class="token punctuation">;</span>            <span class="token comment">//方法2强制类型转换</span>            <span class="token class-name"><span class="token keyword">var</span></span> wk2 <span class="token operator">=</span> <span class="token punctuation">(</span>IGentelman<span class="token punctuation">)</span>killer<span class="token punctuation">;</span>                        wk1<span class="token punctuation">.</span><span class="token function">Love</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            wk2<span class="token punctuation">.</span><span class="token function">Love</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">interface</span> <span class="token class-name">IGentelman</span>    <span class="token punctuation">&#123;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Love</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">interface</span> <span class="token class-name">IKiller</span>    <span class="token punctuation">&#123;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">WarmKill</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IGentelman</span><span class="token punctuation">,</span> <span class="token class-name">IKiller</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Love</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I will love you forever..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> IKiller<span class="token punctuation">.</span><span class="token function">Kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//杀手的身份需要隐藏，所以我们需要显示实现接口成员</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Let me kill the enemy..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">Let me kill the enemy...I will love you forever...I will love you forever...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>反射：以不变应万变（更松的耦合）</li></ul><h4 id="16-3-2-什么是反射"><a href="#16-3-2-什么是反射" class="headerlink" title="16.3.2 什么是反射"></a>16.3.2 什么是反射</h4><ul><li><p>.net框架所具有的功能</p></li><li><p>简单理解：给我一个对象，我能在<strong>不用new操作符</strong>的情况下，也不知道是什么静态类型的情况下，创建一个同类型的对象，还能访问这个对象的各个成员</p></li><li><p>《C#图解教程》——大多数程序都要处理数据，包括读、写、操作和显示数据。（图形也是数据的一种形式。）然而，对于某些程序来说，它们操作的数据不是数字、文本或图形，而是关于程序和程序类型的信息。</p><ul><li>有关程序及其类型的数据被成员<strong>元数据</strong>（metadata），它们保存在程序的程序集中。</li><li>程序在运行时，可以查看其他程序集或其本身的元数据。运行中的程序查看本身的元数据或其他程序的元数据的行为叫做<strong>反射</strong>（reflection）。</li></ul></li><li><p>对象浏览器是显示元数据的程序的一个示例。它可以读取程序集，然后显示其所包含的类型以及类型的所有特征和成员。</p></li><li><p>反射是C#/JAVA这类托管类型语言与C/C++这类原生类型语言最大的区别之一</p></li><li><p>单元测试/泛型等均基于反射</p></li><li><p><font size="5">2、为什么需要反射</font></p></li><li><p><strong>原因</strong>：</p></li><li><ul><li>很多时候程序的逻辑并不是在写的时候就能确定，有时需要用户交互时才确定<ul><li>此时程序已经属于运行状态（Dynamic，动态）</li><li>如果要程序员在静态（static）编写时，去枚举用户可能做的操作，会让程序变得十分臃肿，可读性、可维护性都很烂，并且枚举用户可能做的操作这件事是很难实现的</li><li>这是我们需要的这种：<strong>以不变应万变</strong>的能力，就是反射机制</li></ul></li></ul></li><li><p><font size="5">3、反射优缺点</font></p><ul><li><p><strong>优点</strong></p></li><li><ul><li>1、反射提高了程序的灵活性和扩展性。</li><li>2、降低耦合性，提高自适应能力。</li><li>3、它允许程序创建和控制任何类的对象，无需提前硬编码目标类。</li></ul></li><li><p><strong>缺点</strong></p></li><li><ul><li>1、性能问题：反射是去内存中动态拿到对象/类型描述，再用这些描述去创建对象，这个过程是对性能有影响的（使用反射基本上是一种解释操作，用于字段和方法接入时要远慢于直接代码。因此反射机制主要应用在对灵活性和拓展性要求很高的系统框架上，普通程序不建议使用。）</li><li>2、使用反射会模糊程序内部逻辑；程序员希望在源代码中看到程序的逻辑，反射却绕过了源代码的技术，因而会带来维护的问题，反射代码比相应的直接代码更复杂。</li></ul></li></ul></li></ul><p>部分摘自：<a href="https://www.sogou.com/link?url=hedJjaC291OfPyaFZYFLI4KQWvqt63NBtcOkgzSJL054AydClNZNQQ">https://www.sogou.com/link?url=hedJjaC291OfPyaFZYFLI4KQWvqt63NBtcOkgzSJL054AydClNZNQQ</a>..</p><ul><li><p>实例1，用第一个给女朋友买车的例子，反射的基本原理</p></li><li><p>Main方法的主要代码如下</p></li><li><p>```csharp<br>using System;<br>using System.Reflection;</p><p>namespace IspExample<br>{</p><pre><code>class Program&#123;    static void Main(string[] args)    &#123;        ITank tank = new HeavyTank();        //=========华丽的分割线=========        var t = tank.GetType();        object o = Activator.CreateInstance(t);        //Activator.CreateInstance方法 使用最符合指定参数的构造函数创建指定类型的实例        MethodInfo fireMi = t.GetMethod(&quot;Fire&quot;);        MethodInfo runMi = t.GetMethod(&quot;Run&quot;);        //MethodInfo 发现方法的属性并提供对方法元数据的访问。        fireMi.Invoke(o, null);        runMi.Invoke(o, null);    &#125;&#125;</code></pre><p>}</p><pre class="line-numbers language-none"><code class="language-none">- 运行结果如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Boom!!!<br>Ka!! ka!! ka!! …</p><pre class="line-numbers language-none"><code class="language-none">- 主体程序和插件的关系就是以不变应万变- 主体程序一般都会发布包含程序开发接口API，程序开发包SDK  - 程序开发接口API不一定都是接口  - 依赖注入的高自由度意味着错误率提高，例如调方法时大小写写错，就无法找到对应的方法再成功调用了。  - 开发插件过程中，为了避免自由度过高导致的错误，我们需要有一定的约束，就是SDK中的API- 孩子玩具的例子- 创建一个.net core的程序控制台应用&#96;BabyStroller.App&#96;- 首先使用&#96;Console.WriteLine(Environment.CurrentDirectory);&#96;获取程序所在文件夹的位置- 然后在文件夹内新建一个Animals文件夹 &#96;&#96;&#96;csharp  using System;  using System.IO;  using System.Collections.Generic;  using System.Runtime.Loader;    namespace BabyStroller.App  &#123;      class Program      &#123;          static void Main(string[] args)          &#123;              &#x2F;&#x2F;Console.WriteLine(Environment.CurrentDirectory);              var folder &#x3D; Path.Combine(Environment.CurrentDirectory, &quot;Animals&quot;);              &#x2F;&#x2F;得到Animals文件夹              var files &#x3D; Directory.GetFiles(folder);              &#x2F;&#x2F;从Path中把所有.dll文件load进来，当然目前是没有文件的              var animalsTypes &#x3D; new List&lt;Type&gt;();              foreach (var file in files)              &#123;                  var assembly &#x3D; AssemblyLoadContext.Default.LoadFromAssemblyPath(file);                  &#x2F;&#x2F;将assembly里所有的动物类型加到animalsTypes里                  var types &#x3D; assembly.GetTypes();                  foreach (var t in types)                  &#123;                      if (t.GetMethod(&quot;Voice&quot;) !&#x3D; null)                      &#123;                          animalsTypes.Add(t);                      &#125;                  &#125;              &#125;                  while (true)              &#123;                  for (int i &#x3D; 0; i &lt; animalsTypes.Count; i++)                  &#123;                      Console.WriteLine($&quot;&#123;i+1&#125;.&#123;animalsTypes[i].Name&#125;&quot;);                  &#125;                  Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);                  Console.WriteLine(&quot;Please choose animal.&quot;);                  int index &#x3D; int.Parse(Console.ReadLine());                  if(index&gt;animalsTypes.Count || index &lt; 1)                  &#123;                      Console.WriteLine(&quot;No such an animal.Try again!&quot;);                      continue;                  &#125;                    int times &#x3D; int.Parse(Console.ReadLine());                  var t &#x3D; animalsTypes[index - 1];                  var m &#x3D; t.GetMethod(&quot;Voice&quot;);                  var o &#x3D; Activator.CreateInstance(t);                  m.Invoke(o, new object[] &#123; times &#125;);              &#125;          &#125;      &#125;  &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>之后创建插件，创建一个类库，解决方案如下，两个类库，每个类库下都有两个类</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220926151204152.png"></p></li><li><p>每个类里都只有一个<code>public void Voice(int times)</code>方法，主要内容类似</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Animals<span class="token punctuation">.</span>Lib</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Voice</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> times<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Meow!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>之后右击解决方案<code>生成解决方案</code></p></li><li><p>右键解决方案，在<code>文件资源管理器中打开文件夹</code>，找到两个dll文件复制到主程序Animals的文件夹下</p></li><li><p>之后回到主程序<code>BabyStroller.App</code></p></li><li><p>运行程序结果如下</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220926152015097.png"></p></li><li><p>纯反射，很容易发生错误，接下来开发<strong>程序开发包SDK</strong></p></li><li><p>右键<code>BabyStroller.App</code>解决方案，添加一个新的类库<code>BabyStroller.SDK</code></p></li><li><p>删除默认的类class1，添加一个interface<code>IAnimal</code>，代码如下</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">BabyStroller<span class="token punctuation">.</span>SDK</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAnimal</span>    <span class="token punctuation">&#123;</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Voice</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> times<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>接下来在添加一个类<code>UnfinishedAttribute</code></p></li><li><p>就是未完成的插件可以用这个特性进行标记，当sdk的提供商扫描到这个特性的时候就知道这个插件还没有完成，就会忽略它的调用</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">BabyStroller<span class="token punctuation">.</span>SDK</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnfinishedAttribute</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">Attribute</span></span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>右键<code>BabyStroller.App</code>解决方案进行生成解决方案</p></li><li><p>右键<code>BabyStroller.SDK</code>，找到dll文件，让第三方进行使用</p></li><li><p>主体程序需要引用SDK，主体程序解决方案如下：</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220926153138910.png"></p></li><li><p>之后回到第三方插件，为两个类库在依赖项中添加dll文件的引用</p></li><li><p>程序代码无需做过多修改，只需要加上接口即可</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">BabyStroller<span class="token punctuation">.</span>SDK</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Animals<span class="token punctuation">.</span>Lib</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">IAnimal</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Voice</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> times<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Meow!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>如果在开发过程发现某个还没有做完，只需要用<code>[Unfinished]</code>标注即可</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220926153608623.png"></p></li><li><p>之后重新生成解决方案，将主程序文件夹下Aniaml文件夹里的两个旧版本第三方插件的dll文件更替为新版本的</p></li><li><p>之后可以对主程序代码进行优化</p></li><li><p>优化1</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">/*                    if (t.GetMethod("Voice") != null)                    &#123;                        animalsTypes.Add(t);                    &#125;                    */</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">GetInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IAnimal</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">UnfinishedAttribute</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        animalsTypes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>这样能够减少插件开发者的工作量或者错误使用</p></li><li><p>优化2</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//m.Invoke(o, new object[] &#123; times &#125;);</span>            <span class="token class-name"><span class="token keyword">var</span></span> a <span class="token operator">=</span> o <span class="token keyword">as</span> <span class="token class-name">IAnimal</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">Voice</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>接下来debug程序发现没有成功过滤掉Cow和Cat</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220926155545576.png"></p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">/*                    if (t.GetMethod("Voice") != null)                    &#123;                        animalsTypes.Add(t);                    &#125;                    */</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">GetInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IAnimal</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        <span class="token class-name"><span class="token keyword">var</span></span> isUnfinished <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>a <span class="token operator">=></span> a<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">UnfinishedAttribute</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>isUnfinished<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                        animalsTypes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>debug后发现成功过滤</p><ul><li>第一种写法获取到的object[]里面是类本身，Contains里面是类的类型(typeof)，两个肯定是不同的</li><li>第二种写法是先获取了object[]里面的类型，也就是a.GetType()这一步，所以判断是对了的</li></ul></li></ul><ul><li><p>反射与接口的结合</p></li><li><p>反射与特性的结合</p></li><li><p>依赖注入：此DI非彼DI，但没有彼DI就没有此DI……</p><ul><li><p><strong>什么是注入？</strong></p><ul><li><p>最重要的一点：<strong>Container（容器）</strong></p></li><li><ul><li><p>把各种类型、接口放到容器中，就是“注册”</p></li><li><ul><li>注册类型的时候还可以设置，创建对象时是每次创建都是一个新对象，还是创建一个单例模式（每次要对象都给你同一个实例）</li></ul></li><li><p>后边需要创建实例的时候，向容器“要实例”即可</p></li></ul></li></ul></li><li><p>封装好的反射最重要的功能是依赖注入</p></li><li><p>依赖注入DI（Dependency Injection）</p></li><li><p>依赖反转原则（Dependency inversion principle）</p></li><li><p>没有依赖反转原则就没有依赖注入，依赖注入是在依赖反转原则这个概念的基础上，结合接口及反射机制等的应用</p></li><li><p>添加依赖注入框架，右键 <code>依赖项</code> –&gt; <code>管理NuGet程序包</code> –&gt; 输入<code>DependencyInjection</code></p></li><li><p>依赖注入的基本用法，Main方法的主要代码如下：</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>DependencyInjection</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">IspExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ServiceCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//ServiceCollection 容器</span>            sc<span class="token punctuation">.</span><span class="token function">AddScoped</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ITank</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">HeavyTank</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//往容器里装东西，ITank是静态类型，typeof(ITank)拿到动态类型描述</span>          <span class="token class-name"><span class="token keyword">var</span></span> sp <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">BuildServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//分割线以上为一次性注册</span>          <span class="token comment">//=====================华丽的分割线==============</span>            <span class="token class-name">ITank</span> tank <span class="token operator">=</span> sp<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ITank<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tank<span class="token punctuation">.</span><span class="token function">Fire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tank<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优势在于如果在程序过程中有千千万万个<code>ITank</code>实例，只需要更改<code>sc.AddScoped(typeof(ITank), typeof(HeavyTank));</code>中的<code>typeof(HeavyTank)</code>即可</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>DependencyInjection</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">IspExample</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">var</span></span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ServiceCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sc<span class="token punctuation">.</span><span class="token function">AddScoped</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ITank</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">HeavyTank</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sc<span class="token punctuation">.</span><span class="token function">AddScoped</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IVehicle</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Car</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          sc<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Driver<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//Driver是类所以不需要typeof</span>            <span class="token class-name"><span class="token keyword">var</span></span> sp <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">BuildServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//=====================华丽的分割线==============</span>            <span class="token class-name"><span class="token keyword">var</span></span> driver <span class="token operator">=</span> sp<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Driver<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            driver<span class="token punctuation">.</span><span class="token function">Drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="17-泛型，partial类，枚举，结构，Lambda-Linq"><a href="#17-泛型，partial类，枚举，结构，Lambda-Linq" class="headerlink" title="17.泛型，partial类，枚举，结构，Lambda,Linq"></a>17.泛型，partial类，枚举，结构，Lambda,Linq</h2><h3 id="17-1-泛型-generic-无处不在"><a href="#17-1-泛型-generic-无处不在" class="headerlink" title="17.1 泛型(generic)无处不在"></a>17.1 泛型(generic)无处不在</h3><ul><li><p>为什么需要泛型：避免成员膨胀或者类型膨胀</p><ul><li>本次实例讲的是在一给商店，一开始只卖苹果</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloGeneric</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Apple</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Color <span class="token operator">=</span> <span class="token string">"Red"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Box</span> box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Cargo <span class="token operator">=</span> apple <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>Cargo<span class="token punctuation">.</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Apple</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Color <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Box</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Apple</span> Cargo <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>随着商店经营变好，卖的东西增多，开始卖书了，这时候就需要增加一个<code>Book类</code>，也是需要装进<code>Box</code>里，让客服带回家</p></li><li><p>这时候就面临四个选择</p><ul><li><p>第一种是为<code>Book</code>新准备一个盒子<code>BookBox类</code></p><ul><li>产生<code>类型膨胀</code>问题，例如随着商品变多，一千种商品需要准备一千种类型</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloGeneric</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Apple</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Color <span class="token operator">=</span> <span class="token string">"Red"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">AppleBox</span> box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppleBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Apple <span class="token operator">=</span> apple <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>Apple<span class="token punctuation">.</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Name <span class="token operator">=</span> <span class="token string">"BOOK"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">BooxBox</span> booxBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BooxBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Book <span class="token operator">=</span> book <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>booxBox<span class="token punctuation">.</span>Book<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Book</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Apple</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Color <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">AppleBox</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Apple</span> Apple <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">BooxBox</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Book</span> Book <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第二种是在<code>Box类</code>添加一个<code>public Book book &#123; get; set; &#125;</code>属性</p><ul><li>产生成员膨胀的问题，Box类里的成员在大多数时候都用不到</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloGeneric</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Apple</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Color <span class="token operator">=</span> <span class="token string">"Red"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Name <span class="token operator">=</span> <span class="token string">"8yyy"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Box</span> box1 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> Apple<span class="token operator">=</span>apple<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Box</span> box2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Book<span class="token operator">=</span>book <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>box1<span class="token punctuation">.</span>Apple<span class="token punctuation">.</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>box2<span class="token punctuation">.</span>Book<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Book</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Apple</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Color <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Box</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Apple</span> Apple <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Book</span> Book <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第三种是在<code>Box类</code>里声明Object类型的成员</p><ul><li><code>public Object Cargo &#123; get; set; &#125;</code></li><li><code>Console.WriteLine((box1.Cargo as Apple)?.Color);</code><ul><li>输出结果时需要强制类型转换</li><li>？的意思是如果是Apple类型的就输出Color的值，否则输出null值</li><li>装盒省事了，把东西从盒子里拿出来复杂了</li></ul></li></ul></li><li><p>第四种是泛型</p><ul><li>Box修改如下</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Box<span class="token punctuation">&lt;</span>TCargo<span class="token punctuation">></span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">TCargo</span> Cargo <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在使用泛型实体前都需要特化，就是给定具体类型</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Apple</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Color <span class="token operator">=</span> <span class="token string">"Red"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Name <span class="token operator">=</span> <span class="token string">"8yyy"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Box<span class="token punctuation">&lt;</span>Apple<span class="token punctuation">></span></span> box1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box<span class="token punctuation">&lt;</span>Apple<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Box<span class="token punctuation">&lt;</span>Book<span class="token punctuation">></span></span> box2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box<span class="token punctuation">&lt;</span>Book<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>box1<span class="token punctuation">.</span>Cargo<span class="token punctuation">.</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>box2<span class="token punctuation">.</span>Cargo<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>泛型的其他例子</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloGeneric</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Student<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu<span class="token punctuation">.</span>ID <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span>            stu<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"8yyy"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">interface</span> <span class="token class-name">IUnique<span class="token punctuation">&lt;</span>TId<span class="token punctuation">></span></span>    <span class="token punctuation">&#123;</span>        <span class="token return-type class-name">TId</span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Student<span class="token punctuation">&lt;</span>TId<span class="token punctuation">></span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IUnique<span class="token punctuation">&lt;</span>TId<span class="token punctuation">></span></span></span>   <span class="token comment">//一个类实现了一个泛型接口，那么这个类本身也是泛型的</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">TId</span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token operator">=></span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">set</span> <span class="token operator">=></span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>当继承接口的时候直接特化，类就可以不再是泛型的</p><ul><li>类之间实现特化之后的泛型接口</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IUnique<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span></span>       <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token operator">=></span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">set</span> <span class="token operator">=></span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>泛型的基接口的名称空间<code>using System.Collections.Generic;</code></p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloGeneric</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">IList<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//IList泛型接口，List泛型类</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> list<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>一个方法就是一个算法</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloGeneric</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> a1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> a2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> a3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">3.3</span><span class="token punctuation">,</span> <span class="token number">4.4</span><span class="token punctuation">,</span> <span class="token number">5.5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> a4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">3.3</span><span class="token punctuation">,</span> <span class="token number">4.4</span><span class="token punctuation">,</span> <span class="token number">5.5</span> <span class="token punctuation">,</span><span class="token number">6.6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token function">Zip</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">Zip</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> zipped <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span>a<span class="token punctuation">.</span>Length <span class="token operator">+</span> b<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> ai <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> zi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">do</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ai <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>Length<span class="token punctuation">)</span> zipped<span class="token punctuation">[</span>zi<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>ai<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bi <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>Length<span class="token punctuation">)</span> zipped<span class="token punctuation">[</span>zi<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>bi<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>ai <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>Length <span class="token operator">||</span> bi <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> zipped<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>有 如上一个例子，<code>Zip方法</code>用于将两个<code>int型</code>的数组依次交替组成一个数组</p></li><li><p>现在我们有两个<code>double型</code>的数组，我们也想把这两个数组一次交替组成一个数组，那么我们就需要用到泛型</p></li><li><p>使用Ctrl+F 全部替换</p></li><li><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220927104134768.png"></p></li><li><p>我们将代码改为如下形式</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name">T<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token generic-method"><span class="token function">Zip</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">T<span class="token punctuation">[</span><span class="token punctuation">]</span></span> a<span class="token punctuation">,</span> <span class="token class-name">T<span class="token punctuation">[</span><span class="token punctuation">]</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">T<span class="token punctuation">[</span><span class="token punctuation">]</span></span> zipped <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">T</span><span class="token punctuation">[</span>a<span class="token punctuation">.</span>Length <span class="token operator">+</span> b<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> ai <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> zi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">do</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ai <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>Length<span class="token punctuation">)</span> zipped<span class="token punctuation">[</span>zi<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>ai<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bi <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>Length<span class="token punctuation">)</span> zipped<span class="token punctuation">[</span>zi<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>bi<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>ai <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>Length <span class="token operator">||</span> bi <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> zipped<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>正交性：泛型类型(类/接口/委托…）、泛型成员(属性/方法/字段…）</p><ul><li><p>泛型与其他的变成实体都存在一个交叉点——正交点</p></li><li><p>泛型委托</p><ul><li>Action委托</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloGeneric</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> ac1 <span class="token operator">=</span> Hello<span class="token punctuation">;</span>            <span class="token function">ac1</span><span class="token punctuation">(</span><span class="token string">"8yyy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> ac2 <span class="token operator">=</span> Mul<span class="token punctuation">;</span>            <span class="token function">ac2</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Hello,</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Mul</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果如下：</li></ul> <pre class="line-numbers language-none"><code class="language-none">Hello,8yyy10000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>Func委托</li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloGeneric</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span> func1 <span class="token operator">=</span> Add<span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> res <span class="token operator">=</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>类型方法的参数推断</p></li><li><p>泛型与委托、lambda表达式</p><ul><li><p>对于逻辑非常简单的方法，在调用的地方谁调用谁声明，并且是匿名声明。</p></li><li><p>使用lambda表达式，Func泛型委托</p></li></ul> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span> func1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> res <span class="token operator">=</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>(int a, int b) =&gt; &#123; return a + b; &#125;;</code>这段代码的逻辑就等价于以下Add方法</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>同时我们可以使用简化，因为在声明Func泛型时已经表明变量是int型的了</p><ul><li><code>(a,b) =&gt; &#123; return a + b; &#125;;</code></li></ul></li></ul></li></ul><h3 id="17-2-partial类"><a href="#17-2-partial类" class="headerlink" title="17.2 partial类"></a>17.2 partial类</h3><p><strong>什么是partial类？</strong></p><p>C#运行我们把一个类的代码分成两个部分甚至多个部分进行编写</p><p>同一个类分割成多个partial类，类名称是相同的，partial类的编写进度可以各自控制，最后合成为一个类。</p><p>partial类还有一个功能，就是允许不同的partial类可以使用不同编程语言来写，然后最后合成为一个类，仍然不影响。</p><ul><li><strong>为什么需要partial类？</strong>减少类的派生</li><li>partial类与Entity Framework</li><li>partia类与Windows Forns, WPF, ASP.NET Core</li></ul><p>首先由一个Bookstore数据库</p><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220927113437000.png"></p><p>.net core 没有ADO.NET Entity Data Model。</p><p>需要新建一个.net framework的解决方案</p><p>添加ADO.NET Entity Data Model，结果如下</p><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220927140903136.png"></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">var</span></span> dbContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BookstoreEntities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">var</span></span> books <span class="token operator">=</span> dbContext<span class="token punctuation">.</span>Book<span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> book <span class="token keyword">in</span> books<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220927142323374.png"></p><p><img src="/.io//Users\8y\AppData\Roaming\Typora\typora-user-images\image-20220927142454032.png" alt="image-20220927142454032"></p><p>再对泛型里面的Book类型F12查看定义</p><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220927142529205.png"></p><p>右键<code>Bookstore.Client</code>项目添加一个类<code>BookstorePart2</code>，将上述代码复制到里面，修改如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">namespace</span> <span class="token namespace">Bookstore<span class="token punctuation">.</span>Client</span><span class="token punctuation">&#123;</span>    <span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>    <span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Book</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Report</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token interpolation-string"><span class="token string">$"ID:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>ID</span><span class="token punctuation">&#125;</span></span><span class="token string"> Name:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string"> Price:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span>Price</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在SQL server新填一个字段Author，回到Model<code>从数据库更新模型</code>，效果如下</p><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220927143649995.png"></p><p>回到Book类的定义，你会发现存在两个声明，其中原来的那个也进行了修改</p><p><img src="/images/%E5%88%98%E9%93%81%E7%8C%9B%E3%80%8AC-%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/image-20220927143734398.png"></p><p>写在partial类的另外一部分<code>BookstorePart2</code>没受到任何影响</p><h3 id="17-3-枚举类型"><a href="#17-3-枚举类型" class="headerlink" title="17.3 枚举类型"></a>17.3 枚举类型</h3><ul><li>人为限定取值范围的整数</li><li>整数值的对应<ul><li>默认为0123…</li></ul></li><li>比特位式用法<ul><li>读取文件</li></ul></li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">HelloEnum</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Person</span> personOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Name <span class="token operator">=</span> <span class="token string">"8yyy"</span><span class="token punctuation">,</span>Level<span class="token operator">=</span>Level<span class="token punctuation">.</span>BigBoos <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Level<span class="token punctuation">.</span>Employee<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Level<span class="token punctuation">.</span>Manager<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Level<span class="token punctuation">.</span>Boos<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Level<span class="token punctuation">.</span>BigBoos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Person</span> personTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Name<span class="token operator">=</span><span class="token string">"Timothy"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            personTwo<span class="token punctuation">.</span>Skill <span class="token operator">=</span> Skill<span class="token punctuation">.</span>Cook <span class="token operator">|</span> Skill<span class="token punctuation">.</span>Drive <span class="token operator">|</span> Skill<span class="token punctuation">.</span>Program <span class="token operator">|</span> Skill<span class="token punctuation">.</span>Teach<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">(</span>personTwo<span class="token punctuation">.</span>Skill <span class="token operator">&amp;</span> Skill<span class="token punctuation">.</span>Cook<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//比特位式用法,返回Ture则说明会做饭</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">enum</span> <span class="token class-name">Level</span><span class="token punctuation">&#123;</span>        Employee<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>       <span class="token comment">//人为限定取值范围的整数</span>        Manager<span class="token punctuation">,</span>        Boos<span class="token operator">=</span><span class="token number">301</span><span class="token punctuation">,</span>        BigBoos<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//比特位式用法</span>    <span class="token keyword">enum</span> <span class="token class-name">Skill</span>    <span class="token punctuation">&#123;</span>        Cook<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>        Drive<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>        Program<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>        Teach<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Person</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Level</span> Level <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token return-type class-name">Skill</span> Skill <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">100101301302True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-4-结构体（struct）"><a href="#17-4-结构体（struct）" class="headerlink" title="17.4 结构体（struct）"></a>17.4 结构体（struct）</h3><ul><li>值类型，可装/拆箱</li><li>可实现接口，不能派生自类/结构体</li><li>不能又显示无参构造器</li></ul><h3 id="17-5-Lambda表达式"><a href="#17-5-Lambda表达式" class="headerlink" title="17.5 Lambda表达式"></a>17.5 Lambda表达式</h3><p>1.匿名方法</p><p>2.Inline方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Combine</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//可省略(int a,int b)中的int</span>            <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span> func <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> res <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">;</span>            func <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//可省略委托实例</span>            func <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//可省略return</span>            func <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">835-123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>泛型方法+泛型委托参数+泛型参数</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Combine</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//&lt;int>也可以省略，泛型委托的类型参数推断</span>            <span class="token generic-method"><span class="token function">DoSomeCalc</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">DoSomeCalc</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span>T<span class="token punctuation">,</span>T<span class="token punctuation">></span></span> func<span class="token punctuation">,</span><span class="token class-name">T</span> x<span class="token punctuation">,</span> <span class="token class-name">T</span> y<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">T</span> res <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果为11</p><h3 id="17-6-LINQ"><a href="#17-6-LINQ" class="headerlink" title="17.6 LINQ"></a>17.6 LINQ</h3><p>Language Integrated Query，语言集成查询，是C# 3的核心。顾名思义，LINQ是关于查询的，其母的是使用一致的语法和特性，以一种易阅读、可组合的方式，使对多数据的查询变得简单。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharpNotes</title>
      <link href="/2022/08/21/CSharpNotes/"/>
      <url>/2022/08/21/CSharpNotes/</url>
      
        <content type="html"><![CDATA[<h2 id="1-C-程序结构"><a href="#1-C-程序结构" class="headerlink" title="1. C#程序结构"></a>1. C#程序结构</h2><p><strong>一个 C# 程序主要包括以下几个部分：</strong></p><ul><li>命名空间声明；</li><li>一个类（class）；</li><li>类方法；</li><li>类属性；</li><li>一个 Main 方法；</li><li>语句和表达式；</li><li>注释。</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;    class Program    &#123;        static void Main(string[] args)        &#123;            &#x2F;* my first c# program *&#x2F;            Console.WriteLine(&quot;Hello World!&quot;);            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我们来看一下上面程序的各个部分</p><h4 id="1-using-System"><a href="#1-using-System" class="headerlink" title="1) using System;"></a>1) using System;</h4><p>using 关键字用来在程序中引入 System 命名空间，一个程序中可以有多个 using 语句。</p><h4 id="2-namespace-test1"><a href="#2-namespace-test1" class="headerlink" title="2) namespace test1"></a>2) namespace test1</h4><p>namespace 关键字用来声明一个命名空间，“test1”则是命名空间的名字。命名空间是类的集合，上面代码中名为“test1”的命名空间中包含了一个名为“Program”的类。</p><h4 id="3-class-Program"><a href="#3-class-Program" class="headerlink" title="3) class Program"></a>3) class Program</h4><p>class 关键字用来定义一个类，“Program”则是类的名称，类中通常用来存放程序中要使用的数据和函数（也叫方法）。</p><h4 id="4-static-void-Main-string-args"><a href="#4-static-void-Main-string-args" class="headerlink" title="4) static void Main(string[] args)"></a>4) static void Main(string[] args)</h4><p>此行代码中，Main 为定义的函数名称，Main 函数是整个 C# 程序的入口，其中包含了程序运行时需要执行的操作。static 和 void 都是用来修饰 Main 函数的关键字。</p><h4 id="5-my-first-c-program"><a href="#5-my-first-c-program" class="headerlink" title="5)/* my first c# program */"></a>5)/* my first c# program */</h4><p>这是程序的注释，当程序运行时被<code>/* */</code>包裹的内容将被编译器忽略，不会执行。注释主要用来对我们所写的代码进行说明。</p><h4 id="6-Console-WriteLine-“Hello-World-”"><a href="#6-Console-WriteLine-“Hello-World-”" class="headerlink" title="6) Console.WriteLine(“Hello World!”);"></a>6) Console.WriteLine(“Hello World!”);</h4><p>此行代码用来在命令行窗口中输出“Hello World!”。WriteLine 是 System 命名空间中定义的 Console 类里面的方法，用来输出一些消息。</p><h4 id="7-Console-ReadKey"><a href="#7-Console-ReadKey" class="headerlink" title="7) Console.ReadKey();"></a>7) Console.ReadKey();</h4><p>此行代码是针对 VS.NET 用户的，它会 <strong>使程序进入等待状态</strong>，敲击键盘上的任意一个按键即可让程序继续运行。之所以需要这行代码，是因为命令行窗口会在程序运行结束后自动关闭，这会导致我们想要输出的内容一闪而过，加入此行代码则可以避免这种情况。</p><p>按F5即可执行</p><h2 id="2-C-基本的语法"><a href="#2-C-基本的语法" class="headerlink" title="2. C#基本的语法"></a>2. C#基本的语法</h2><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;    class Rectangle    &#123;        &#x2F;&#x2F;成员变量        double length;        double width;        &#x2F;&#x2F;成员函数        public void Acceptdetails() &#123;            length &#x3D; 4.5;            width &#x3D; 3.5;        &#125;                public double GetArea() &#123;            return length * width;        &#125;        public void Diskplay()        &#123;            Console.WriteLine(&quot;length:&#123;0&#125;&quot;,length);            Console.WriteLine(&quot;width:&#123;0&#125;&quot;, width);            Console.WriteLine(&quot;Area:&#123;0&#125;&quot;, GetArea());        &#125;    &#125;    class ExecuteRectangle    &#123;        static void Main(string[] args)        &#123;            &#x2F;&#x2F;类的实例化            Rectangle r &#x3D; new Rectangle();            r.Acceptdetails();            r.Diskplay();            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><p>成员变量是用来存储类中要使用的数据或属性的。在上面的示例程序中，Rectangle 类中包含两个成员变量，分别是 length 和 width。</p><h4 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h4><p>成员函数（也可以称为成员方法）是执行特定任务的语句集，一个类的成员函数需要在类中声明。上面的示例代码中，Rectangle 类包含三个成员函数，分别是 AcceptDetails、GetArea 和 Display。</p><h4 id="类的实例化"><a href="#类的实例化" class="headerlink" title="类的实例化"></a>类的实例化</h4><p>通过一个已有的类（class）创建出这个类的对象（object）的过程叫做类的实例化。类的实例化需要使用 new 关键字，例如上面示例中第 26 行就创建了一个 Rectangle 类的对象。</p><h2 id="3-C-关键字"><a href="#3-C-关键字" class="headerlink" title="3. C#关键字"></a>3. C#关键字</h2><p>C# 中的关键字是编译器预先定义好的一些单词，也可以称为保留字或者保留标识符，这些关键字对编译器有特殊的意义，不能用作标识符。但是，如果您非要使用的话也不是没有办法，只需要在关键字前面加上<code>@</code>前缀即可，例如<code>@if</code>就是一个有效的标识符，而<code>if</code>则是一个关键字。</p><p>在 C# 中，有些关键字在代码的上下文中具有特殊的意义，例如 get 和 set，这样的关键字被称为上下文关键字（contextual keywords）。一般来说，C# 语言中新增的关键字都会作为上下文关键字，这样可以避免影响到使用旧版语言编写的 C# 程序。</p><p>下表列出了 C# 中的保留关键字（Reserved Keywords）和上下文关键字（Contextual Keywords）：</p><table><thead><tr><th>保留关键字</th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>abstract</td><td>as</td><td>base</td><td>bool</td><td>break</td><td>byte</td><td>case</td></tr><tr><td>catch</td><td>char</td><td>checked</td><td>class</td><td>const</td><td>continue</td><td>decimal</td></tr><tr><td>default</td><td>delegate</td><td>do</td><td>double</td><td>else</td><td>enum</td><td>event</td></tr><tr><td>explicit</td><td>extern</td><td>false</td><td>finally</td><td>fixed</td><td>float</td><td>for</td></tr><tr><td>foreach</td><td>goto</td><td>if</td><td>implicit</td><td>in</td><td>in (generic modifier)</td><td>int</td></tr><tr><td>interface</td><td>internal</td><td>is</td><td>lock</td><td>long</td><td>namespace</td><td>new</td></tr><tr><td>null</td><td>object</td><td>operator</td><td>out</td><td>out (generic modifier)</td><td>override</td><td>params</td></tr><tr><td>private</td><td>protected</td><td>public</td><td>readonly</td><td>ref</td><td>return</td><td>sbyte</td></tr><tr><td>sealed</td><td>short</td><td>sizeof</td><td>stackalloc</td><td>static</td><td>string</td><td>struct</td></tr><tr><td>switch</td><td>this</td><td>throw</td><td>true</td><td>try</td><td>typeof</td><td>uint</td></tr><tr><td>ulong</td><td>unchecked</td><td>unsafe</td><td>ushort</td><td>using</td><td>virtual</td><td>void</td></tr><tr><td>volatile</td><td>while</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>上下文关键字</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>add</td><td>alias</td><td>ascending</td><td>descending</td><td>dynamic</td><td>from</td><td>get</td></tr><tr><td>global</td><td>group</td><td>into</td><td>join</td><td>let</td><td>orderby</td><td>partial (type)</td></tr><tr><td>partial (method)</td><td>remove</td><td>select</td><td>set</td><td></td><td></td><td></td></tr></tbody></table><h2 id="4-C-数据类型"><a href="#4-C-数据类型" class="headerlink" title="4. C#数据类型"></a>4. C#数据类型</h2><p>C# 语言中内置了一些基本的数据类型，数据类型用来指定程序中变量可以存储的数据的类型，C# 中的数据类型可以大致分为三类：</p><ul><li>值类型（Value types）；</li><li>引用类型（References types）；</li><li>指针类型（Pointer types）。</li></ul><p>如果想要获取类型或变量的确切大小，可以使用 sizeof 方法</p><p>例如sizeof(int)，结果为4</p><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p><strong>引用类型的变量中并不存储实际的数据值</strong>，而是存储的对数据（对象）的引用，换句话说就是，<strong>引用类型的变量中存储的是数据在内存中的位置</strong>。当多个变量都引用同一个内存地址时，如果其中一个变量改变了内存中数据的值，那么所有引用这个内存地址的变量的值都会改变。C# 中内置的引用类型包括 Object（对象）、Dynamic（动态）和 string（字符串）。</p><h4 id="1-对象类型（Object）"><a href="#1-对象类型（Object）" class="headerlink" title="1) 对象类型（Object）"></a>1) 对象类型（Object）</h4><p>对象类型是 C# 通用类型系统（Common Type System：CTS）中所有数据类型的最终基类，Object 是 System.Object 类的别名。任何类型的值都可以分配给对象类型，但是在分配值之前，需要对类型进行转换。</p><p>将值类型转换为对象类型的过程被称为“装箱”，反之将对象类型转换为值类型的过程则被称为“拆箱”。注意，只有经过装箱的数据才能进行拆箱。</p><h4 id="2-动态类型（Dynamic）"><a href="#2-动态类型（Dynamic）" class="headerlink" title="2) 动态类型（Dynamic）"></a>2) 动态类型（Dynamic）</h4><p>您可以在动态类型的变量中存储任何类型的值，这些变量的类型检查是在程序运行时进行的。动态类型的声明语法如下所示：</p><p>dynamic <variable_name> = value;</variable_name></p><p>例如：</p><p>dynamic d = 20;</p><p>动态类型与对象类型类似，但对象类型变量的类型检查是在编译时进行的，而动态类型变量的类型检查则是在程序运行时进行的。</p><h4 id="3-字符串类型（String）"><a href="#3-字符串类型（String）" class="headerlink" title="3) 字符串类型（String）"></a>3) 字符串类型（String）</h4><p>字符串类型的变量允许您将一个字符串赋值给这个变量，字符串类型需要通过 String 类来创建，String 类是 System.String 类的别名，它是从对象（Object）类型中派生的。**在 C# 中有两种定义字符串类型的方式，分别是使用<code>&quot; &quot;</code>和<code>@&quot; &quot;</code>**。</p><p>示例代码如下：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;使用引号的声明方式String str &#x3D; &quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;&quot;;&#x2F;&#x2F;使用 @ 加引号的声明形式String str &#x3D; @&quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用<code>@&quot; &quot;</code>形式声明的字符串称为“逐字字符串”，逐字字符串会将转义字符<code>\</code>当作普通字符对待</strong>，例如<code>string str = @&quot;C:\Windows&quot;;</code>等价于<code>string str = &quot;C:\\Windows&quot;;</code>。</p><p>另外，在<code>@&quot; &quot;</code>形式声明的字符串中可以任意使用换行，换行符及缩进空格等都会计算在字符串的长度之中。</p><h2 id="5-C-变量"><a href="#5-C-变量" class="headerlink" title="5. C#变量"></a>5. C#变量</h2><table><thead><tr><th>类型</th><th>示例</th></tr></thead><tbody><tr><td>整型（整数类型）</td><td>sbyte、byte、short、ushort、int、uint、long、ulong、char</td></tr><tr><td>浮点型</td><td>float、double</td></tr><tr><td>十进制类型</td><td>decimal</td></tr><tr><td>布尔型</td><td>true、false</td></tr><tr><td>空类型</td><td>可为空值的数据类型</td></tr></tbody></table><p>C# 中变量的名称并不是可以随意定义的，需要遵循如下所示的规则：</p><ul><li>变量名中可以包含英文字母<code>a-z, A-Z</code>、数字<code>0-9</code>和下划线<code>_</code>；</li><li>变量名只能以英文字母<code>a-z, A-Z</code>或下划线<code>_</code>开头，不能以数字开头；</li><li>变量名中不允许使用空格；</li><li>变量名不能是任何 C# 中的保留字或关键字，例如 char、float 等。</li><li>变量名命名我们一般遵循<strong>驼峰命名法</strong>，即以<strong>小写字母开头</strong>，多个单词拼接时，除第一个单词外，其余<strong>首字母大写</strong></li></ul><h3 id="接受用户输入的值"><a href="#接受用户输入的值" class="headerlink" title="接受用户输入的值"></a>接受用户输入的值</h3><p>上面的示例代码中我们使用到了一个名为 ReadLine() 的函数，它是由 System 命名空间中的 Console 类提供的，使用 ReadLine() 函数可以接受来自用户输入的内容并将其存储到变量中。</p><p>示例代码如下：</p><pre class="line-numbers language-none"><code class="language-none">using System;namespace c.biancheng.net&#123;    class Program &#123;        static void Main(string[] args) &#123;            int a, b;            Console.WriteLine(&quot;请输入第一个数字：&quot;);            a &#x3D; Convert.ToInt32(Console.ReadLine());            Console.WriteLine(&quot;请输入第二个数字：&quot;);            b &#x3D; Convert.ToInt32(Console.ReadLine());            Console.WriteLine(&quot;&#123;0&#125;+&#123;1&#125;&#x3D;&#123;2&#125;&quot;, a, b, a+b);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为使用 <strong>Console.ReadLine() 接收的数据是字符串格式</strong>的，所以示例中我们需要使用 <strong>Convert.ToInt32() 函数来将用户输入的数据转换为 int 类型</strong>。</p><h2 id="6-C-数据类型转换"><a href="#6-C-数据类型转换" class="headerlink" title="6. C#数据类型转换"></a>6. C#数据类型转换</h2><p>数据类型转换就是将一种类型的数据转换为另一种类型，在 C# 中有  <strong>两种</strong>  形式的类型转换方式，分别是  <strong>隐式类型转换</strong>  和  <strong>显示类型转换</strong></p><h3 id="1、隐式类型转换"><a href="#1、隐式类型转换" class="headerlink" title="1、隐式类型转换"></a>1、隐式类型转换</h3><p>隐式类型转换是由 C# 以类型安全的方式执行的，转换的过程中不会导致数据丢失，例如从较 **小 **的整数类型（例如 int） <strong>转</strong>  换到较 **大 **的整数类型（例如 long），从派生类转换为基类。</p><p>隐式转换不需要我们编写额外的代码，下例中演示了如何使用隐式类型转换的方式将 int 类型的数据转换成 double 类型：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int a &#x3D; 10;double b &#x3D; a;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>提示：一种数据类型（类型 A），只要其取值范围 <strong>完全包含</strong> 在另一种数据类型（类型 B）的取值范围内，那么类型 A 就可以隐式转换为类型 B。基于这一特性，C# 的隐式类型转换不会导致数据丢失。</p><h3 id="2、显式类型转换"><a href="#2、显式类型转换" class="headerlink" title="2、显式类型转换"></a>2、显式类型转换</h3><p>显式类型转换也叫 <strong>强制类型转换</strong> ，这种转换需要使用<code>(type)value</code>的形式或者预定义函数显式的完成，显式转换需要用户明确的指定要转换的类型，而且在转换的过程中可能会造成数据丢失，例如将 double 类型转换为 int 类型。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">double d&#x3D;56.23;int i &#x3D; (int)d;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果为56</p><p><code>int.Parse(string)</code> : 只支持将string类型转成int，Parse就是将int,char,double…等将</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">string st&#x3D;&quot;56.21&quot;;Int.Parse(st);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><font color="red">这是一种错误的写法，会报错Input string was not in a correct format，输入的格式错误，注意这里只能输入<code>int</code>的字符串</font></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">string st&#x3D;&quot;56&quot;;&#x2F;&#x2F;这是正确的写法Int.Parse(st);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>Convert.ToInt32(double value)</code>：<strong>不完全遵循四舍五入</strong>，如果value为两个整数中间的数，返回两者中的偶数</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Console.WriteLine(Convert.ToInt32(4.3));&#x2F;&#x2F;四舍五入，结果为4 Console.WriteLine(Convert.ToInt32(4.5));&#x2F;&#x2F;4.5为4和5中间的数，输出偶数4         Console.WriteLine(Convert.ToInt32(4.53));&#x2F;&#x2F;四舍五入，结果为5        Console.WriteLine(Convert.ToInt32(5.5));&#x2F;&#x2F;5.5为5和6中间的数，输出偶数6      Console.WriteLine(Convert.ToInt32(5.53));&#x2F;&#x2F;四舍五入，结果为6Console.WriteLine(Convert.ToInt32(null));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">445660<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Convert.ToInt32()和int.Parse()对于空值(null)的处理不同Convert.ToInt32(null)会返回0而不会产生异常，int.Parse(null)则会产生异常:System.ArgumentNullException:“Value cannot be null. ”</code></p><p>C# 中还提供了一系列内置的类型转换方法，如下表所示：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>ToBoolean</td><td>将类型转换为布尔型</td></tr><tr><td>ToByte</td><td>将类型转换为字节类型</td></tr><tr><td>ToChar</td><td>将类型转换为单个 Unicode 字符类型</td></tr><tr><td>ToDateTime</td><td>将类型（整数或字符串类型）转换为日期时间的结构</td></tr><tr><td>ToDecimal</td><td>将浮点型或整数类型转换为十进制类型</td></tr><tr><td>ToDouble</td><td>将类型转换为双精度浮点型</td></tr><tr><td>ToInt16</td><td>将类型转换为 16 位整数类型</td></tr><tr><td>ToInt32</td><td>将类型转换为 32 位整数类型</td></tr><tr><td>ToInt64</td><td>将类型转换为 64 位整数类型</td></tr><tr><td>ToSbyte</td><td>将类型转换为有符号字节类型</td></tr><tr><td>ToSingle</td><td>将类型转换为小浮点数类型</td></tr><tr><td>ToString</td><td>将类型转换为字符串类型</td></tr><tr><td>ToType</td><td>将类型转换为指定类型</td></tr><tr><td>ToUInt16</td><td>将类型转换为 16 位无符号整数类型</td></tr><tr><td>ToUInt32</td><td>将类型转换为 32 位无符号整数类型</td></tr><tr><td>ToUInt64</td><td>将类型转换为 64 位无符号整数类型</td></tr></tbody></table><h2 id="7-C-运算符"><a href="#7-C-运算符" class="headerlink" title="7. C#运算符"></a>7. C#运算符</h2><p>运算符其实就是一个符号，用来告诉编译器执行特定的数学或逻辑运算。C# 中内置了丰富的运算符，大致可以分为如下几类：</p><ul><li>算术运算符；</li><li>关系运算符；</li><li>逻辑运算符；</li><li>位运算符；</li><li>赋值运算符；</li><li>其它运算符。</li></ul><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>算术运算符即完成特定算术运算的符号，C# 中支持的算术运算符如下表所示：（假设变量 A = 10，变量 B = 20）</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>加法运算符，对运算符左右两边的操作数执行加法操作</td><td>A + B 值为 30</td></tr><tr><td>-</td><td>减法运算符，对运算符左右两边的操作数执行减法操作</td><td>A - B 值为 -10</td></tr><tr><td>*</td><td>乘法运算符，将运算符左右两边的操作数相乘</td><td>A * B 值为 200</td></tr><tr><td>/</td><td>除法运算符，使用运算符左边的操作数除以右边的操作数</td><td>B / A 值为 2</td></tr><tr><td>%</td><td>取模运算符，整除后的余数</td><td>B % A 值为 0</td></tr><tr><td>++</td><td>自增运算符，整数值增加 1</td><td>A++ 值为 11</td></tr><tr><td>–</td><td>自减运算符，整数值减少 1</td><td>A– 值为 9</td></tr></tbody></table><p><code>与C/C++不同的是，/和%支持float、double等类型的变量</code></p><p>例如：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Console.WriteLine(5.42 &#x2F; 3);         Console.WriteLine(6 &#x2F; 3);         Console.WriteLine(5 &#x2F; 2.5);         Console.WriteLine(9 &#x2F; 1.1);         Console.WriteLine(5.42 % 3);         Console.WriteLine(6 % 3);         Console.WriteLine(5 % 2.5);         Console.WriteLine(9 % 1.1);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">1.8066666666666666228.1818181818181822.42000.1999999999999993<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>位运算符用来对 <strong>二进制</strong> 位进行操作，＆、| 和 ^ 的真值表如下：</p><table><thead><tr><th>p</th><th>q</th><th>p &amp; q</th><th>p | q</th><th>p ^ q</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td></tr></tbody></table><p>下表列举了 C# 中支持的位运算符：（假设变量 A = 60，变量 B = 13）</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与，对两个操作数的二进制位进行按位与运算，即当两个数对应的二进制位均为 1 时，结果位为 1，否则为 0</td><td>(A &amp; B) 将得到 12，即为 0000 1100</td></tr><tr><td>|</td><td>按位或，对两个操作数的二进制位进行按位或运算，即当两个数对应的二进制位有一个为 1 时，结果就为 1，否则为 0</td><td>(A | B) 将得到 61，即为 0011 1101</td></tr><tr><td>^</td><td>按位异或，对两个操作数的二进制位进行按位异或运算，即当两个数对应的二进制位不同时，结果为 1，否则为 0</td><td>(A ^ B) 将得到 49，即为 0011 0001</td></tr><tr><td>~</td><td>按位取反，该运算符具有”翻转”位效果，即 0 变成 1，1 变成 0，包括符号位</td><td>(~A ) 将得到 -61，即为 1100 0011</td></tr><tr><td>&lt;&lt;</td><td>二进制左移运算符，左操作数的值向左移动右操作数指定的位数</td><td>A &lt;&lt; 2 将得到 240，即为 1111 0000</td></tr><tr><td>&gt;&gt;</td><td>二进制右移运算符，左操作数的值向右移动右操作数指定的位数</td><td>A &gt;&gt; 2 将得到 15，即为 0000 1111</td></tr></tbody></table><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)        &#123;            int a &#x3D; 60;            &#x2F;* 60 &#x3D; 0011 1100 *&#x2F;             int b &#x3D; 13;            &#x2F;* 13 &#x3D; 0000 1101 *&#x2F;            int c &#x3D; 0;                     c &#x3D; a &amp; b;           &#x2F;* 12 &#x3D; 0000 1100 *&#x2F;            Console.WriteLine(&quot;a &amp; b 的值是 &#123;0&#125;&quot;, c );            c &#x3D; a | b;           &#x2F;* 61 &#x3D; 0011 1101 *&#x2F;            Console.WriteLine(&quot;a | b 的值是 &#123;0&#125;&quot;, c);            c &#x3D; a ^ b;           &#x2F;* 49 &#x3D; 0011 0001 *&#x2F;            Console.WriteLine(&quot;a ^ b 的值是 &#123;0&#125;&quot;, c);            c &#x3D; ~a;               &#x2F;*-61 &#x3D; 1100 0011 *&#x2F;            Console.WriteLine(&quot;~a 的值是 &#123;0&#125;&quot;, c);            c &#x3D; a &lt;&lt; 2;     &#x2F;* 240 &#x3D; 1111 0000 *&#x2F;            Console.WriteLine(&quot;a &lt;&lt; 2 的值是 &#123;0&#125;&quot;, c);            c &#x3D; a &gt;&gt; 2;     &#x2F;* 15 &#x3D; 0000 1111 *&#x2F;            Console.WriteLine(&quot;a &gt;&gt; 2 的值是 &#123;0&#125;&quot;, c);            Console.ReadLine();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">a &amp; b 的值是 12a | b 的值是 61a ^ b 的值是 49~a 的值是 -61a &lt;&lt; 2 的值是 240a &gt;&gt; 2 的值是 15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>赋值运算符顾名思义就是用来为变量赋值的，下表列举了 C# 中支持的赋值运算符：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>最简单的赋值运算符，把右边操作数的值赋给左边的操作数</td><td>C = A + B 将把 A + B 的值赋给 C</td></tr><tr><td>+=</td><td>加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数</td><td>C += A 相当于 C = C + A</td></tr><tr><td>-=</td><td>减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数</td><td>C -= A 相当于 C = C - A</td></tr><tr><td>*=</td><td>乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数</td><td>C *= A 相当于 C = C * A</td></tr><tr><td>/=</td><td>除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数</td><td>C /= A 相当于 C = C / A</td></tr><tr><td>%=</td><td>求模且赋值运算符，求两个操作数的模并赋值给左边操作数</td><td>C %= A 相当于 C = C % A</td></tr><tr><td>&lt;&lt;=</td><td>左移且赋值运算符</td><td>C &lt;&lt;= 2 等同于 C = C &lt;&lt; 2</td></tr><tr><td>&gt;&gt;=</td><td>右移且赋值运算符</td><td>C &gt;&gt;= 2 等同于 C = C &gt;&gt; 2</td></tr><tr><td>&amp;=</td><td>按位与且赋值运算符</td><td>C &amp;= 2 等同于 C = C &amp; 2</td></tr><tr><td>^=</td><td>按位异或且赋值运算符</td><td>C ^= 2 等同于 C = C ^ 2</td></tr><tr><td>|=</td><td>按位或且赋值运算符</td><td>C |= 2 等同于 C = C | 2</td></tr></tbody></table><h3 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h3><p>除了上面介绍的运算符之外，C# 中还支持一些其他的重要运算符，如下表所示：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>sizeof()</td><td>返回数据类型的大小</td><td>sizeof(int)，将返回 4</td></tr><tr><td>typeof()</td><td>返回 class 的类型</td><td>typeof(StreamReader);</td></tr><tr><td>&amp;</td><td>返回变量的地址</td><td>&amp;a 将得到变量的实际地址</td></tr><tr><td>*</td><td>变量的指针</td><td>*a; 将指向一个变量。</td></tr><tr><td>? :</td><td>三元（三目）运算符</td><td>a&gt;b ? X : Y; 如果条件为真，则值为 X : 否则值为 Y</td></tr><tr><td>is</td><td>判断对象是否为某一类型</td><td>if( Ford is Car) // 检查 Ford 是否是 Car 类的一个对象</td></tr><tr><td>as</td><td>强制转换，即使转换失败也不会抛出异常。</td><td>Object obj = new StringReader(“Hello”); StringReader r = obj as StringReader;</td></tr></tbody></table><p><strong>关于三目运算</strong></p><p>在C/C++中可以这么写</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;int main()&#123;int a&#x3D;2,b&#x3D;1,t;a&gt;b?t&#x3D;a:t&#x3D;b;cout&lt;&lt;t;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但在C#中就不能这么写</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;    class test    &#123;        static void Main(string[] args)                &#123;                    int a &#x3D; 2, b &#x3D; 1, t;                    a &gt; b ? t &#x3D; a : t &#x3D; b;                    &#x2F;&#x2F;会报错                    Console.WriteLine(&quot;t&#x3D;&#123;0&#125;&quot;, t);                &#125;     &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <font color="red">编译器错误消息: CS0201: 只有 assignment、call、increment、decrement 和 new 对象表达式可用作语句</font></p><p>只能写成</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace test1&#123;    class test    &#123;        static void Main(string[] args)                &#123;                    int a &#x3D; 2, b &#x3D; 1, t;                    t &#x3D; a &gt; b ? a : b;                    Console.WriteLine(&quot;t&#x3D;&#123;0&#125;&quot;, t);                &#125;     &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-C-常量"><a href="#8-C-常量" class="headerlink" title="8. C#常量"></a>8. C#常量</h2><p>常量和我们前面介绍的《<a href="http://m.biancheng.net/csharp/variable.html">变量</a>》类似，唯一不同的是常量的值在程序的编译阶段就已经确定了，而且在程序的运行期间不允许修改。常量可以是任何基本数据类型，例如整数常量、浮点常量、字符串常量等等。</p><h3 id="1）定义常量"><a href="#1）定义常量" class="headerlink" title="1）定义常量"></a>1）定义常量</h3><p>常量需要使用  <strong>const</strong>  关键字定义，语法格式如下所示：</p><p>const data_type constant_name = value;</p><p>其中，data_type 为常量的数据类型；constant_name 为常量名（类似于变量名）；value 为常量的值。</p><h3 id="2）整数常量"><a href="#2）整数常量" class="headerlink" title="2）整数常量"></a>2）整数常量</h3><p>整数常量可以是 <strong>八进制、十进制或者十六进制</strong>，可以使用前缀指定具体的进制，例如<code>0x</code>或<code>0X</code>表示 <strong>十六进制</strong>，<code>0</code>表示 <strong>八进制</strong>，没有前缀则表示 <strong>十进制</strong> 。</p><p><strong>除了前缀外，整数常量还可以包含后缀</strong> ，后缀可以是 U 和 L 的组合，U 和 L 分别表示 unsigned 和 long。后缀既可以大写也可以小写，而且可以以任意顺序进行组合，但是不能重复。</p><p>下面列举了一些整数常量的示例：</p><pre class="line-numbers language-none"><code class="language-none">85    &#x2F;&#x2F; 合法：十进制常量0213  &#x2F;&#x2F; 合法：八进制常量0x4b  &#x2F;&#x2F; 合法：十六进制常量30    &#x2F;&#x2F; 合法：int 类型常量30u   &#x2F;&#x2F; 合法：无符号 int 类型常量30l   &#x2F;&#x2F; 合法：long 类型常量30ul  &#x2F;&#x2F; 合法：无符号 long 类型常量068   &#x2F;&#x2F; 非法：8 不是一个八进制数字032UU  &#x2F;&#x2F; 非法：后缀不能重复<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            int a &#x3D; 66;            int b &#x3D; 0100;            int t &#x3D; a &gt; b ? 10 : 8;            Console.WriteLine(&quot;t&#x3D;&#123;0&#125;&quot;, t);            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这个例子，a为十进制66，b为八进制100，既十进制为64，结果应为10，但是编译器给的结果是8，可见不能直接用&gt;直接比较10进制数和8进制数。</p><h3 id="3）浮点常量"><a href="#3）浮点常量" class="headerlink" title="3）浮点常量"></a>3）浮点常量</h3><p>浮点常量由整数部分、小数点、小数部分和指数部分组成。您可以用小数或指数形式来表示浮点常量。</p><p>下面列举了一些浮点常量的示例：</p><pre class="line-numbers language-none"><code class="language-none">3.14159       &#x2F;&#x2F; 合法314159E-5    &#x2F;&#x2F; 合法，等价于3.14159510E         &#x2F;&#x2F; 非法：不完全指数210f         &#x2F;&#x2F; 非法：没有小数或指数.e55         &#x2F;&#x2F; 非法：缺少整数或小数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当使用小数形式表示浮点常量时，必须包含小数点、指数或同时包含两者。当使用指数形式表示浮点常量时，必须包括整数部分、小数部分或同时包含两者。有符号的指数使用 e 或 E 表示。</p><h4 id="浮点数精度问题"><a href="#浮点数精度问题" class="headerlink" title="浮点数精度问题"></a>浮点数精度问题</h4><p><strong>解决方案是使用【decimal】</strong></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            double x &#x3D; 88.8;            double y &#x3D; 88;            Console.WriteLine(&quot;失去精度结果为:&#123;0&#125;&quot;, x - y);            decimal d1 &#x3D; decimal.Parse(&quot;88.8&quot;);            decimal d2 &#x3D; decimal.Parse(&quot;88&quot;);            Console.WriteLine(&quot;decimal计算结果为:&#123;0&#125;&quot;, d1 - d2);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为：</p><p><img src="/source/images/c-sharp/image-20220822113001755.png" alt="image-20220822113001755"></p><h3 id="4）字符常量"><a href="#4）字符常量" class="headerlink" title="4）字符常量"></a>4）字符常量</h3><p>字符常量需要使用单引号括起来，类似于定义字符串类型的变量，例如<code>&#39;x&#39;</code>。一个字符常量可以是一个普通字符（例如<code>&#39;x&#39;</code>）、转义序列（例如<code>&#39;\t&#39;</code>）或 Unicode 字符（例如<code>&#39;\u02C0&#39;</code>）。</p><p>在 C# 中，有些字符前面带有一个反斜杠，这样的字符具有特殊含义，例如<code>\n</code>用于表示换行符、<code>\t</code>表示制表符。下表中列举了一些常用的转义字符：</p><table><thead><tr><th>转义序列</th><th>含义</th></tr></thead><tbody><tr><td>\</td><td>\ 字符</td></tr><tr><td>&#39;</td><td>‘ 字符</td></tr><tr><td>&quot;</td><td>“ 字符</td></tr><tr><td>?</td><td>? 字符</td></tr><tr><td>\a</td><td>Alert 或 bell</td></tr><tr><td>\b</td><td>退格键（Backspace）</td></tr><tr><td>\f</td><td>换页符（Form feed）</td></tr><tr><td>\n</td><td>换行符（Newline）</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\t</td><td>水平制表符 tab</td></tr><tr><td>\v</td><td>垂直制表符 tab</td></tr><tr><td>\ooo</td><td>一到三位的八进制字符</td></tr><tr><td>\xhh . . .</td><td>一个或多个数字的十六进制字符</td></tr></tbody></table><p>下面通过示例演示一下转义字符的使用：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;                     Console.WriteLine(&quot;a\nb\nc\n2333\t666&quot;);            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><pre class="line-numbers language-none"><code class="language-none">abc2333    666<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5）字符串常量"><a href="#5）字符串常量" class="headerlink" title="5）字符串常量"></a>5）字符串常量</h3><p>字符串常量需要使用双引号<code>&quot; &quot;</code>或<code>@&quot; &quot;</code>引起来。字符串常量与字符常量相似，可以是纯字符、转义序列或 Unicode 字符。</p><h2 id="9-C-循环示例"><a href="#9-C-循环示例" class="headerlink" title="9. C#循环示例"></a>9. C#循环示例</h2><h3 id="1）for循环"><a href="#1）for循环" class="headerlink" title="1）for循环"></a>1）for循环</h3><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;                      for(int i &#x3D; 1; i &lt; 10; i++)            &#123;                for(int j &#x3D; i; j &lt; 10; j++)                &#123;                    Console.Write(&quot;&#123;0&#125; x &#123;1&#125; &#x3D; &#123;2&#125;  &quot;, i, j, i * j);                &#125;                Console.WriteLine();&#x2F;&#x2F;换行            &#125;            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2）While-循环"><a href="#2）While-循环" class="headerlink" title="2）While 循环"></a>2）While 循环</h3><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            int i &#x3D; 1;            while (i &lt;&#x3D; 9)            &#123;                int j &#x3D; 1;                while (j &lt;&#x3D; i)                &#123;                    Console.Write(&quot;&#123;0&#125; x &#123;1&#125; &#x3D; &#123;2&#125;  &quot;, j, i, i * j);                    j++;                &#125;                i++;                Console.WriteLine();            &#125;            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><pre class="line-numbers language-none"><code class="language-none">1 x 1 &#x3D; 1  1 x 2 &#x3D; 2  1 x 3 &#x3D; 3  1 x 4 &#x3D; 4  1 x 5 &#x3D; 5  1 x 6 &#x3D; 6  1 x 7 &#x3D; 7  1 x 8 &#x3D; 8  1 x 9 &#x3D; 92 x 2 &#x3D; 4  2 x 3 &#x3D; 6  2 x 4 &#x3D; 8  2 x 5 &#x3D; 10  2 x 6 &#x3D; 12  2 x 7 &#x3D; 14  2 x 8 &#x3D; 16  2 x 9 &#x3D; 183 x 3 &#x3D; 9  3 x 4 &#x3D; 12  3 x 5 &#x3D; 15  3 x 6 &#x3D; 18  3 x 7 &#x3D; 21  3 x 8 &#x3D; 24  3 x 9 &#x3D; 274 x 4 &#x3D; 16  4 x 5 &#x3D; 20  4 x 6 &#x3D; 24  4 x 7 &#x3D; 28  4 x 8 &#x3D; 32  4 x 9 &#x3D; 365 x 5 &#x3D; 25  5 x 6 &#x3D; 30  5 x 7 &#x3D; 35  5 x 8 &#x3D; 40  5 x 9 &#x3D; 456 x 6 &#x3D; 36  6 x 7 &#x3D; 42  6 x 8 &#x3D; 48  6 x 9 &#x3D; 547 x 7 &#x3D; 49  7 x 8 &#x3D; 56  7 x 9 &#x3D; 638 x 8 &#x3D; 64  8 x 9 &#x3D; 729 x 9 &#x3D; 81<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3）foreach循环"><a href="#3）foreach循环" class="headerlink" title="3）foreach循环"></a>3）foreach循环</h3><p>除了前面介绍的几种循环语句外，C# 同样也支持 foreach 循环，使用 foreach 可以遍历数组或者集合对象中的每一个元素，其语法格式如下：</p><p>foreach(数据类型 变量名 in 数组或集合对象){<br>  语句块;<br>}</p><p>foreach 会在每次循环的过程中，依次从数组或集合对象中取出一个新的元素放到<code>foreach( )</code>里定义的变量中，直到所有元素都成功取出后退出循环。</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            int[] a &#x3D; new int[] &#123; 1, 2, 3, 4, 5 &#125;;            foreach(int i in a)            &#123;                Console.Write(&quot;&#123;0&#125;  &quot;, i);            &#125;            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><p>1  2  3  4  5</p><h2 id="10-C-函数-方法"><a href="#10-C-函数-方法" class="headerlink" title="10. C#函数/方法"></a>10. C#函数/方法</h2><p>C# 中的函数（也可以称为方法）是一段具有签名（由函数名、参数类型和参数修饰符组成的函数信息）的代码块，可以用来实现特定的功能。一般情况下一个函数由以下几个部分组成：</p><ul><li>访问权限修饰符：用于指定函数对一个类的可见性；</li><li>返回值类型：用于指定函数返回值的数据类型；</li><li>函数名称：用于进行函数调用的唯一名称；</li><li>参数列表：在调用函数时需要传递给函数的参数，参数列表是可选的，可以为空；</li><li>函数主体：其中包含了实现函数功能的若干代码。</li></ul><p><code>函数的命名规则:</code></p><ul><li>函数命名使用<strong>大驼峰命名</strong>，即开头<strong>首字母大写</strong></li><li>多个单词拼接时，所有单词<strong>首字母大写</strong></li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Add();AddResult();GetUserInfo();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1）函数声明"><a href="#1）函数声明" class="headerlink" title="1）函数声明"></a>1）函数声明</h3><p>C# 中声明函数的语法格式如下所示：</p><pre class="line-numbers language-none"><code class="language-none">Access_Specifier Return_Type FunctionName(Parameter List)&#123;  Function_Body  Return_Statement&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，Access_Specifier 为访问权限修饰符；Return_Type 为返回值类型；FunctionName 为函数名称；Parameter List 为参数列表；Function_Body 为函数主体；Return_Statement 为返回语句，用来返回数据。另外需要注意的是，访问权限修饰符、参数列表和返回语句是可选的，可以省略。</p><pre class="line-numbers language-none"><code class="language-none">访问权限修饰符 返回值类型 函数名称（参数列表）&#123;函数主体返回语句&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2）函数调用"><a href="#2）函数调用" class="headerlink" title="2）函数调用"></a>2）函数调用</h3><p>想要调用我们定义好的函数，首先需要将函数所在的类实例化为对象，然后通过<code>对象.函数名() </code>的形式即可调用指定的函数，这里有几点需要注意：</p><ul><li>若函数在定义时参数列表中定义了若干参数，那么在调用时也应该在函数名后面的括号中填入相应数量的参数，并且与参数列表中的参数类型一一对应；</li><li>若函数在定义时没有定义参数列表，那么在调用函数时也不需要在函数名后面填入参数；</li><li>对于有返回值的函数，在调用函数时可以使用一个变量（可选）来接收函数的返回值，变量的类型要与函数返回值的类型相同。</li></ul><p> <strong>提示：若调用同一个类中静态函数（使用 static 修饰的函数），则可以省略实例化对象的过 程，直接使用<code>函数名()</code>的形式调用。</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            test t &#x3D; new test(); &#x2F;&#x2F;实例化当前类的对象                        t.a();          &#x2F;&#x2F;调用a函数            string s1 &#x3D; &quot;bbbb&quot;;            t.b(s1);         &#x2F;&#x2F;调用b函数            string s2 &#x3D; &quot;cccc&quot;;            Console.WriteLine(t.c(s2));    &#x2F;&#x2F;调用c函数            string s3 &#x3D; &quot;dddd&quot;;            Console.WriteLine(d(s3));       &#x2F;&#x2F;调用类中的静态函数d        &#125;        public void a()         &#x2F;&#x2F;没有参数和返回值的函数        &#123;            Console.WriteLine(&quot;aaaa&quot;);        &#125;        public void b(string s) &#x2F;&#x2F;有参数没有返回值的函数        &#123;            Console.WriteLine(s);        &#125;        public string c(string s)   &#x2F;&#x2F;有参数且有返回值的函数        &#123;            string str &#x3D; s;            return str;        &#125;        static string d(string s)   &#x2F;&#x2F;类中的静态函数，无需实例化即可调用        &#123;            string str &#x3D; s;            return s;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><pre class="line-numbers language-none"><code class="language-none">aaaabbbbccccdddd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3）拓展——参数修饰符"><a href="#3）拓展——参数修饰符" class="headerlink" title="3）拓展——参数修饰符"></a>3）拓展——参数修饰符</h3><p>无参数修饰符，<strong>按值进行传递</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public int Add(int count)&#123;..&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>ref 引用传递</p><p>out 输出传递</p><h2 id="11-C-封装"><a href="#11-C-封装" class="headerlink" title="11. C#封装"></a>11. C#封装</h2><p>C# 是一门面向对象编程语言，面向对象编程语言有三大特性，分别是 **封装、<a href="http://m.biancheng.net/csharp/inheritance.html">继承</a>和<a href="http://m.biancheng.net/csharp/polymorphism.html">多态</a>**。 <strong>所谓封装就是将一个或多个项目（函数）集合在一个单元中，这个单元称之为类</strong>，我们可以根据需要通过访问权限修饰符来设定类中成员的范围和可见性。C# 中的访问权限修饰符有以下几种：</p><ul><li>public：公共的，所有对象都可以访问，但是需要引用命名空间；</li><li>private：私有的，类的内部才可以访问；</li><li>internal：内部的，同一个程序集的对象可以访问，程序集就是命名空间；</li><li>protected：受保护的，类的内部或类的父类和子类中可以访问；</li><li>Protected internal：protected 和 internal 的并集，符合任意一条都可以访问。</li></ul><h3 id="1）public"><a href="#1）public" class="headerlink" title="1）public"></a>1）public</h3><p>类中使用 public 访问权限修饰符修饰的成员变量或成员函数可以在其他函数和对象，我们可以从类的外部访问类中的公共成员（使用 public 修饰的类成员）。</p><h3 id="2）private"><a href="#2）private" class="headerlink" title="2）private"></a>2）private</h3><p>类中使用 private 访问权限修饰符修饰的成员变量或成员函数不能在其它函数或对象访问，即使是类的实例也不能访问这个类中的私有成员，只有 <strong>同属一个类的函数才可以访问</strong> 这个类的私有成员。</p><h3 id="3）protected"><a href="#3）protected" class="headerlink" title="3）protected"></a>3）protected</h3><p>类中使用 protected 访问权限修饰符修饰的成员变量和成员函数可以在其子类中访问，也就是说基类（父类）中使用 protected 访问权限修饰符修饰的成员变量和成员函数可以在其子类中访问，这样有助于 <strong>实现继承</strong>。</p><h3 id="4）internal"><a href="#4）internal" class="headerlink" title="4）internal"></a>4）internal</h3><p>类中使用 internal 访问权限修饰符修饰的成员变量和成员函数可以在当前程序集中的其他函数或对象中使用。换句话说就是， <strong>任何使用 internal 修饰的成员都可以被同一命名空间下的任何类或方法访问</strong>。</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            &#x2F;&#x2F;实例化对象            Rectangle rec &#x3D; new Rectangle();            rec.length &#x3D; 23.3;            rec.width &#x3D; 23.3;            rec.Display();            Console.ReadKey();        &#125;    &#125;    class Rectangle &#x2F;&#x2F;定义一个名为Rectangle的类    &#123;        &#x2F;&#x2F;internal修饰的成员变量        internal double width, length;        double GetArea()    &#x2F;&#x2F;没有使用任何访问权限修饰符修饰的成员函数 GetArea() 默认是私有的        &#123;            return width * length;        &#125;        public void Display()        &#123;            Console.WriteLine(&quot;长方形的长：&#123;0&#125;&quot;, length);            Console.WriteLine(&quot;长方形的宽：&#123;0&#125;&quot;, width);            Console.WriteLine(&quot;长方形的面积：&#123;0&#125;&quot;, GetArea());        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><pre class="line-numbers language-none"><code class="language-none">长方形的长：23.3长方形的宽：23.3长方形的面积：542.89<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5）protected-internal"><a href="#5）protected-internal" class="headerlink" title="5）protected internal"></a>5）protected internal</h3><p>类中使用 protected internal 访问权限修饰符修饰的成员可以在本类、派生类或者包含该类（使用 using 引入）的程序集中访问，在实现继承时也使用此方法。</p><h2 id="12-C-值传递、引用传递、输出传递"><a href="#12-C-值传递、引用传递、输出传递" class="headerlink" title="12. C#值传递、引用传递、输出传递"></a>12. C#值传递、引用传递、输出传递</h2><p>通过前面的学习我们知道，在调用带有参数的函数时，需要将参数传递给函数。在介绍这几种传递方式之前，我们先来介绍一下形式参数（形参）和实际参数（实参）这两个概念：</p><ul><li>形式参数： <strong>在定义函数阶段参数列表中定义的参数称之为形式参数</strong>，简称形参，可以将它看作变量的名称，它没有具体的值，只是用来接收函数调用时传递过来的数据；</li><li>实际参数： <strong>在函数被调用时传递给函数的参数称之为实际参数</strong>，简称实参，可以将它看作变量的值，用来为形参赋值。</li></ul><p>参数可以通过三种方式传递给函数，如下表所示：</p><table><thead><tr><th>方式</th><th>描述</th></tr></thead><tbody><tr><td>值传递</td><td>值传递会复制参数的实际值并赋值给函数的形式参数，实参和形参使用的是两个不同内存位置中的值，<strong>当形参的值发生改变时，不会影响实参的值</strong>，从而保证了实参数据的安全</td></tr><tr><td>引用传递</td><td>引用传递会复制参数的内存位置并传递给形式参数，<strong>当形参的值发生改变时，同时也会改变实参的值</strong></td></tr><tr><td>输出传递</td><td>输出传递可以一次返回多个值</td></tr></tbody></table><h3 id="1）值传递"><a href="#1）值传递" class="headerlink" title="1）值传递"></a>1）值传递</h3><p>在 C# 中，值传递是将参数传递给函数的默认方式，值传递的本质就是将实参的副本（将实参的值复制一份）传递给函数的形参。当调用函数时，将使用实参为每个形参赋值，并为每个形参创建一个新的存储位置，由于形参和实参指向不同的内存位置，所以无论是修改实参的值还是修改形参的值都不会对彼此造成影响。</p><p>下面通过示例来演示一下如何使用值传递的方式将参数传递给函数：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)&#123;            int val &#x3D; 10;            Demo Obj &#x3D; new Demo();            Console.WriteLine(&quot;调用函数之前：&#123;0&#125;&quot;, val);            Obj.Func(val);            Console.WriteLine(&quot;调用函数之后：&#123;0&#125;&quot;, val);        &#125;        public void Func(int val)&#123;            val *&#x3D; val;            Console.WriteLine(&quot;函数内部的值：&#123;0&#125;&quot;, val);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">调用函数之前：10函数内部的值：100调用函数之后：10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过运行结果可以看出，<strong>尽管我们在函数内部对形参 val 的值进行的修改，但是并不会影响函数外面实参 val 的值。</strong></p><h3 id="2）引用传递"><a href="#2）引用传递" class="headerlink" title="2）引用传递"></a>2）引用传递</h3><p>引用传递是对变量内存位置的引用。与值传递不同，使用引用传递的形式传递参数时，并不会为形参创建新的内存地址，而是与实参共同指向相同的内存地址。正因为如此，当修改形参的值时，实参的值也会被修改。</p><p>在 C# 中，需要使用 **ref **关键字来使用引用传递，下面通过示例来演示一下：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)&#123;            int val &#x3D; 10;            Demo Obj &#x3D; new Demo();            Console.WriteLine(&quot;调用函数之前：&#123;0&#125;&quot;, val);            Obj.Func(ref val);            Console.WriteLine(&quot;调用函数之后：&#123;0&#125;&quot;, val);        &#125;        public void Func(ref int val)&#123;            val *&#x3D; val;            Console.WriteLine(&quot;函数内部的值：&#123;0&#125;&quot;, val);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">调用函数之前：10函数内部的值：100调用函数之后：100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3）输出传递"><a href="#3）输出传递" class="headerlink" title="3）输出传递"></a>3）输出传递</h3><p>使用 return 语句可以从函数中返回一个值，但是使用输出传递则<strong>可以从函数中一次性返回多个值</strong>。输出传递与引用传递相似，不同之处在于输出传递是将数据从函数中传输出来而不是传输到函数中。</p><p>在 C# 中，需要使用 <strong>out</strong> 关键字来使用输出传递，下面通过示例来演示一下：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)&#123;            int val &#x3D; 33;            Demo Obj &#x3D; new Demo();            Console.WriteLine(&quot;调用函数之前 val 的值：&#123;0&#125;&quot;, val);            Obj.getValue(out val);            Console.WriteLine(&quot;调用函数之后 val 的值：&#123;0&#125;&quot;, val);        &#125;        public void getValue(out int x)&#123;            int temp &#x3D; 11;            x &#x3D; temp;            x *&#x3D; x;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">调用函数之前 val 的值：33调用函数之后 val 的值：121<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在使用输出传递时，也可以不为实参赋值，如下例所示：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)&#123;            int a, b;            Demo Obj &#x3D; new Demo();            Obj.getValues(out a, out b);            Console.WriteLine(&quot;调用函数之后 a 的值：&#123;0&#125;&quot;, a);            Console.WriteLine(&quot;调用函数之后 b 的值：&#123;0&#125;&quot;, b);        &#125;        public void getValues(out int x, out int y)&#123;            Console.WriteLine(&quot;请输入第一个值： &quot;);            x &#x3D; Convert.ToInt32(Console.ReadLine());            Console.WriteLine(&quot;请输入第二个值： &quot;);            y &#x3D; Convert.ToInt32(Console.ReadLine());        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">请输入第一个值：123请输入第二个值：321调用函数之后 a 的值：123调用函数之后 b 的值：321<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ref需要对变量赋初值，而out可以不赋初值</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test&#123;    class Program    &#123;        static void Main(string[] args)        &#123;            int val;            Program p &#x3D; new Program();            p.Func(ref val);            &#x2F;&#x2F;这里会报错，使用了未赋值的局部变量“val”        &#125;        public void Func(ref int val)        &#123;            val &#x3D; 99;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果改成</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test&#123;    class Program    &#123;        static void Main(string[] args)        &#123;            int val;            Program p &#x3D; new Program();            p.Func(out val);        &#125;        public void Func(out int val)        &#123;            val &#x3D; 99;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>则不会报错</p><h3 id="4）out-输出-和ref-引用-的区别"><a href="#4）out-输出-和ref-引用-的区别" class="headerlink" title="4）out(输出)和ref(引用)的区别"></a>4）out(输出)和ref(引用)的区别</h3><ul><li><code>out</code>修饰的参数<strong>必须在方法内修改</strong>，而<code>ref</code><strong>可以修改也可以不修改</strong></li><li><code>out</code>在传入参数的时候，参数是局部变量的话，可以不赋值，因为<code>out</code>一定会对其进行赋值</li><li>而<code>ref</code>修饰的参数，在实参<strong>必须有初始值才能进行调用</strong>。因为<code>ref</code>修饰的不一定会对其赋值</li></ul><h2 id="13-C-nullable：可空类型"><a href="#13-C-nullable：可空类型" class="headerlink" title="13. C# nullable：可空类型"></a>13. C# nullable：可空类型</h2><p>在 C# 1.x 的版本中，一个值类型的变量是不可以被赋值为 null（空值）的，否则会产生异常。而在 C# 2.0 中，新增了一个 nullable 类型，可以使用 nullable 类型定义包含 null 值的数据，例如，您可以在 nullable <Int32>（可为空的 int32 类型）类型的变量中存储 -2147483648 到 2147483647 之间的任何值或者 null。同样，您可以在 nullable <bool>（可为空的 bool 类型）类型的变量中存储 true、false 或 null。声明可空类型的语法如下：</bool></Int32></p><pre class="line-numbers language-none"><code class="language-none">data_type? variable_name &#x3D; null;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，data_type 为要声明的数据类型，后面紧跟一个问号；variable_name 则为变量的名称。</p><p>【示例】下面通过示例来演示可空类型的用法：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)&#123;            int? num1;            int? num2 &#x3D; 123;            num1 &#x3D; null;                    double? num3 &#x3D; new double?();            double? num4 &#x3D; 3.1415926;            bool? boolval &#x3D; null;            &#x2F;&#x2F; 输出这些值            Console.WriteLine(&quot; num1 &#x3D; &#123;0&#125; \r\n num2 &#x3D; &#123;1&#125; \r\n num3 &#x3D; &#123;2&#125; \r\n num4 &#x3D; &#123;3&#125; \r\n boolval &#x3D; &#123;4&#125;&quot;, num1, num2, num3, num4, boolval);            Console.ReadLine();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">num1 &#x3D;num2 &#x3D; 123num3 &#x3D;num4 &#x3D; 3.1415926boolval &#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Null-合并运算符（-）"><a href="#Null-合并运算符（-）" class="headerlink" title="Null 合并运算符（??）"></a>Null 合并运算符（??）</h3><p>在 C# 中 Null 合并运算符用于定义可空类型和引用类型的默认值。如果此运算符的左操作数不为 null，那么运算符将返回左操作数，否则返回右操作数。<strong>例如表达式<code>a??b</code>中，如果 a 不为空，那么表达式的值则为 a，反之则为 b。</strong></p><p>需要注意的是，Null 合并运算符左右两边操作数的类型必须相同，或者右操作数的类型可以隐式的转换为左操作数的类型，否则将编译错误。</p><p>【示例】下面通过示例来演示 Null 合并运算符的使用：</p><pre class="line-numbers language-none"><code class="language-none">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)&#123;            int? num1 &#x3D; null;            int? num2 &#x3D; 123;            int num3;                    num3 &#x3D; num1 ?? 321;            Console.WriteLine(&quot;num3 &#x3D; &#123;0&#125;&quot;, num3);            num3 &#x3D; num2 ?? 321;            Console.WriteLine(&quot;num3 &#x3D; &#123;0&#125;&quot;, num3);            Console.ReadLine();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">num3 &#x3D; 321num3 &#x3D; 123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="14-C-数组"><a href="#14-C-数组" class="headerlink" title="14. C#数组"></a>14. C#数组</h2><h3 id="1）声明数组"><a href="#1）声明数组" class="headerlink" title="1）声明数组"></a>1）声明数组</h3><p>在 C# 中声明一个数组的语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">data_type[] array_name;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，data_type 用来指定数组中元素的类型；<code>[ ]</code>用来指定数组的维度；array_name 为数组的名称。</p><p>示例代码如下：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">int[] array1      &#x2F;&#x2F; 声明一个整型数组double[] array2   &#x2F;&#x2F; 声明一个浮点型数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2）初始化数组"><a href="#2）初始化数组" class="headerlink" title="2）初始化数组"></a>2）初始化数组</h3><p>仅仅是声明数组还不够，数组只有经过初始化后才可以为其中的每个元素赋值。因为数组是引用类型的，所以您需要使用 new 关键字来对数组进行初始化，例如：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">int[] array1            &#x2F;&#x2F; 声明一个整型数组array1 &#x3D; new int[10]    &#x2F;&#x2F; 初始化数组 array1double[] array2         &#x2F;&#x2F; 声明一个浮点型数组array2 &#x3D; new double[5]  &#x2F;&#x2F; 初始化数组 array2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>另外，数组的声明和初始化还可以放在一起进行，如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int[] array1 &#x3D; new int[10]        &#x2F;&#x2F; 初始化一个长度为 10 的整型数组double[] array2 &#x3D; new double[5]   &#x2F;&#x2F; 初始化一个长度为 5 的浮点型数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>提示：初始化数组的过程中，new int[10] 中<code>[ ]</code>里面的数字代表数组的长度，也就是数组中最多可以存放多少个元素，我们可以根据需要来设定数组的长度。</p><h3 id="3）为数组元素赋值"><a href="#3）为数组元素赋值" class="headerlink" title="3）为数组元素赋值"></a>3）为数组元素赋值</h3><p>我们可以使用数组的索引来为数组中的各个元素赋值，如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int[] arr &#x3D; new int[10];arr[0] &#x3D; 10;arr[1] &#x3D; 11;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>单独为数组中的各个元素赋值太过麻烦了，我们也可以在声明数组时直接为数组赋值，只需要将数组中的每个元素依次放入到一个<code>&#123; &#125;</code>中，并将每个元素使用<code>,</code>分隔开即可，如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">double[] arr1 &#x3D; &#123;96.5, 98.0, 99.5, 90.0&#125;;int[] arr2 &#x3D; &#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用上面的方法并不用提前设定数组的长度，那如果想要指定数组的长度该怎么办呢？只需要像下面这样即可：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">double[] arr1 &#x3D; new double[4]&#123;96.5, 98.0, 99.5, 90.0&#125;;int[] arr2 &#x3D; new int[10]&#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当然像下面这样省略数组的长度也是可以的，例如：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">double[] arr1 &#x3D; new double[]&#123;96.5, 98.0, 99.5, 90.0&#125;;int[] arr2 &#x3D; new int[]&#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>数组也可以像变量一样，使用一个定义好的数组为另一个相同类型的数组赋值，这种情况下，两个数组将指向相同的内存地址，如下所示：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">int[] arr1 &#x3D; new int[]&#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;int[] arr2 &#x3D; arr1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>提示：当我们创建一个数组时，C# 的编译器会根据数组类型隐式的为数组中的每个元素初始化一个默认值。例如 int 类型的数组中所有元素都会被初始化为 0。</p><h3 id="4）访问数组中的元素"><a href="#4）访问数组中的元素" class="headerlink" title="4）访问数组中的元素"></a>4）访问数组中的元素</h3><p>我们可以通过数组的索引（也可称为下标）来访问数组中的指定元素，只需要在数组名的后面加上一个方括号<code>[ ]</code>，并在其中填写对应的数组索引即可，如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int[] arr &#x3D; new int[]&#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;int a &#x3D; arr[0];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5）使用-foreach-遍历数组"><a href="#5）使用-foreach-遍历数组" class="headerlink" title="5）使用 foreach 遍历数组"></a>5）使用 foreach 遍历数组</h3><p>前面的示例中我们使用了 <a href="http://m.biancheng.net/csharp/for.html">for 循环</a>来访问数组中的每个元素，另外还可以使用 <a href="http://m.biancheng.net/csharp/foreach.html">foreach 循环</a>来遍历数组中的元素，示例代码如下：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)&#123;            int[] arr &#x3D; new int[]&#123;100, 101, 102, 103, 104, 105, 106, 107, 108, 109&#125;;            int index &#x3D; 0;            foreach(int i in arr)&#123;                Console.WriteLine(&quot;arr[&#123;0&#125;] &#x3D; &#123;1&#125;&quot;, index, i);                index++;            &#125;            Console.ReadLine();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">arr[0] &#x3D; 100arr[1] &#x3D; 101arr[2] &#x3D; 102arr[3] &#x3D; 103arr[4] &#x3D; 104arr[5] &#x3D; 105arr[6] &#x3D; 106arr[7] &#x3D; 107arr[8] &#x3D; 108arr[9] &#x3D; 109<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-C-二维数组与多维数组"><a href="#15-C-二维数组与多维数组" class="headerlink" title="15. C#二维数组与多维数组"></a>15. C#二维数组与多维数组</h2><p>C# 中同样支持多维数组（也可称为矩形数组），它可以是二维的，也可以是三维的，多维数组中的数据以类似表格（行、列）的形式存储，因此也被称为矩阵。</p><p>要创建多维数组，我们需要在声明数组的方括号内添加逗号，例如：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int[,] arr&#x3D;new int[3,3];      &#x2F;&#x2F; 声明一个二维数组int[,,] arr&#x3D;new int[3,3,3];   &#x2F;&#x2F; 声明一个三维数组 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1）初始化二维数组"><a href="#1）初始化二维数组" class="headerlink" title="1）初始化二维数组"></a>1）初始化二维数组</h3><p>二维数组的初始化与一维数组类似，例如我们要定义一个 3 行 4 列的整型数组，可以使用以下几种方式：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F; 第一种方式int[,] arr &#x3D; new int[3,4]&#123;  &#123;0, 1, 2, 3&#125;,  &#123;4, 5, 6, 7&#125;,  &#123;8, 9, 10, 11&#125;&#125;;&#x2F;&#x2F; 第二种方式int[,] arr &#x3D; new int[,]&#123;  &#123;0, 1, 2, 3&#125;,  &#123;4, 5, 6, 7&#125;,  &#123;8, 9, 10, 11&#125;&#125;;&#x2F;&#x2F; 第三种方式int[,] arr &#x3D; &#123;  &#123;0, 1, 2, 3&#125;,  &#123;4, 5, 6, 7&#125;,  &#123;8, 9, 10, 11&#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2）访问二维数组种的元素"><a href="#2）访问二维数组种的元素" class="headerlink" title="2）访问二维数组种的元素"></a>2）访问二维数组种的元素</h3><p>二维数组中的元素同样可以通过索引（行索引和列索引）来访问的，例如：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">int[,] arr &#x3D; new int[3,4]&#123;  &#123;0, 1, 2, 3&#125;,  &#123;4, 5, 6, 7&#125;,  &#123;8, 9, 10, 11&#125;&#125;;int a &#x3D; arr[1, 0];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>上例中<code>arr[1, 0]</code>代表了数组 arr 中第二行中的第一个元素</strong>。</p><h2 id="16-C-交错数组-Jagged-Arrays"><a href="#16-C-交错数组-Jagged-Arrays" class="headerlink" title="16. C#交错数组(Jagged Arrays)"></a>16. C#交错数组(Jagged Arrays)</h2><p>C# 中的交错数组其实就是<strong>元素为数组的数组</strong>，换句话说就是交错数组中的每个元素都可以是维度和大小不同的数组，所以有时交错数组也被称为“数组的数组”。</p><h3 id="1）声明交错数组"><a href="#1）声明交错数组" class="headerlink" title="1）声明交错数组"></a>1）声明交错数组</h3><p>交错数组的声明语法如下所示：</p><pre class="line-numbers language-none"><code class="language-none">data_type[][] array_name;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假如要声明一个<strong>具有三个元素的一维交错数组</strong>，并且数组中的每个元素都是一个一维的整型数组，示例代码如下：</p><pre class="line-numbers language-none"><code class="language-none">int[][] jaggedArray &#x3D; new int[3][];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2）初始化交错数组"><a href="#2）初始化交错数组" class="headerlink" title="2）初始化交错数组"></a>2）初始化交错数组</h3><p>和普通数组相同，交错数组也需要初始化后才可以使用，可以使用下面的方式初始化一个交错数组。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int[][] jaggedArray &#x3D; new int[3][]; &#x2F;&#x2F; 定义一个交错数组jaggedArray[0] &#x3D; new int[5];    &#x2F;&#x2F; 对数组的第一个元素初始化jaggedArray[1] &#x3D; new int[4];   &#x2F;&#x2F; 对数组的第二个元素初始化jaggedArray[2] &#x3D; new int[2];    &#x2F;&#x2F; 对数组的第三个元素初始化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的交错数组中包含三个元素，第一个元素是长度为 5 的整型数组，第二个元素是长度为 4 的整型数组，第三个元素是长度为 2 的整型数组。</p><p>除了上面的方法外，还可以直接使用具体的值来填充数组，这种情况下就不需要再设定数组的大小了，如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int[][] jaggedArray &#x3D; new int[3][]; &#x2F;&#x2F; 定义一个交错数组jaggedArray[0] &#x3D; new int[] &#123;1, 2, 3, 4, 5&#125;;jaggedArray[1] &#x3D; new int[] &#123;6, 7, 8, 9&#125;;jaggedArray[2] &#x3D; new int[] &#123;10, 11&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还可以在声明数组时，直接将数组初始化，如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int[][] jaggedArray &#x3D; new int[][]&#123;  new int[] &#123;1, 2, 3, 4, 5&#125;,  new int[] &#123;6, 7, 8, 9&#125;,  new int[] &#123;10, 11&#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的声明方式还有一种简写形式，如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int[][] jaggedArray &#x3D; &#123;  new int[] &#123;1, 2, 3, 4, 5&#125;,  new int[] &#123;6, 7, 8, 9&#125;,  new int[] &#123;10, 11&#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：不能从元素初始化中省略 new 运算符，因为不存在元素的默认初始化。</strong></p><h3 id="3）访问数组中的元素"><a href="#3）访问数组中的元素" class="headerlink" title="3）访问数组中的元素"></a>3）访问数组中的元素</h3><p>以上面定义的交错数组 jaggedArray 为例，可以使用如下所示的方法来获取数组的中每个元素或者为指定的元素赋值：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int a &#x3D; jaggedArray[0][1]  &#x2F;&#x2F; 变量 a 的值为：2jaggedArray[2][1] &#x3D; 0      &#x2F;&#x2F; 将交错数组中第三个数组元素中的第二个元素赋值为 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4）交错数组和多维数组"><a href="#4）交错数组和多维数组" class="headerlink" title="4）交错数组和多维数组"></a>4）交错数组和多维数组</h3><p>交错数组中的元素不仅可以是一维数组，还可以是多维数组，例如下面的代码中定义了一个包含<strong>三个二维数组元素的一维交错数组</strong>：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int[][,] jaggedArray &#x3D; new int[3][,]&#123;  new int[,] &#123;    &#123;1, 1&#125;,    &#123;2, 3&#125;  &#125;,  new int[,] &#123;    &#123;5, 8&#125;,    &#123;13, 21&#125;,    &#123;34, 55&#125;  &#125;,  new int[,] &#123;    &#123;89, 144&#125;,    &#123;233, 377&#125;,    &#123;610, 987&#125;  &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于这样的交错数组，在访问数组中的每个元素时也需要做出相应的改变，如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int a &#x3D; jaggedArray[1][1,1]   &#x2F;&#x2F; 变量 a 的值为 21int b &#x3D; jaggedArray[2][0,0]   &#x2F;&#x2F; 变量 b 的值为 89<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>【示例1】定义一个交错数组，并遍历数组中的内容（三个一维数组元素的一维交错数组）：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)&#123;            int[][] arr &#x3D; new int[3][]&#123;                  new int[]&#123;31, 22, 16, 88&#125;,                new int[]&#123;21, 54, 6, 77, 98, 52&#125;,                new int[]&#123;112, 25&#125;            &#125;;            &#x2F;&#x2F; 遍历数组            for(int i &#x3D; 0; i &lt; arr.Length; i++)&#123;                for(int j &#x3D; 0; j &lt; arr[i].Length; j++)&#123;                    Console.Write(arr[i][j]+&quot; &quot;);                &#125;                Console.WriteLine();            &#125;            Console.ReadLine();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">31 22 16 8821 54 6 77 98 52112 25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>提示：示例中用到了 Length 属性，它是数组的一个属性，代表数组的长度（元素个数）。</strong></p><p>【示例2】定义一个交错数组，并遍历数组中的内容（三个二维数组元素的一维交错数组）：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            int[][,] a &#x3D; new int[3][,]            &#123;                new int[,]                &#123;                    &#123;1,2 &#125;,                    &#123;3,4 &#125;                &#125;,                new int[,]                &#123;                    &#123;3,4 &#125;,                    &#123;5,6 &#125;                &#125;,                new int[,]                &#123;                    &#123;5,6 &#125;,                    &#123;7,8 &#125;                &#125;            &#125;;            for(int i &#x3D; 0; i &lt; a.Length; i++)            &#123;                                for(int j &#x3D; 0; j &lt; a[i].GetLength(0); j++)                &#123;                   for(int k &#x3D; 0; k &lt; a[i].GetLength(1); k++)                    &#123;                        Console.Write(a[i][j, k]+&quot; &quot;);                    &#125;                &#125;                Console.WriteLine();            &#125;            Console.ReadLine();        &#125;    &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">1 2 3 43 4 5 65 6 7 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>提示：GetLength()是数组类的一个预定义方法。它有一个指定维度的参数。如果我们将0传递给GetLenth()方法，那么它将返回第一个维度的大小。如果我们将1传递给getlengthth()方法，那么它将返回第二个维度的大小。</strong></p><h2 id="17-C-params：参数数组"><a href="#17-C-params：参数数组" class="headerlink" title="17. C# params：参数数组"></a>17. C# params：参数数组</h2><p>某些情况下，我们在定义函数时可能并不能提前确定参数的数量，这时可以使用 C# 提供的参数数组，参数数组通常用于为函数传递未知数量的参数。</p><p>若要使用参数数组，则需要利用 **params **关键字，语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">访问权限修饰符 返回值类型 函数名(params 类型名称[] 数组名称)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>提示：使用参数数组时，既可以直接为函数传递一个数组作为参数，也可以使用<code>函数名(参数1, 参数2, ..., 参数n)</code>的形式传递若干个具体的值作为参数。</strong></p><p>下面通过示例来演示以下参数数组的使用：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)&#123;            Demo Obj &#x3D; new Demo();&#x2F;&#x2F;类的实例化            &#x2F;&#x2F;使用函数名(参数1, 参数2, ..., 参数n)的形式传递若干个具体的值作为参数            string str &#x3D; Obj.getSum(1, 2, 3, 4, 5, 6);            Console.WriteLine(str);            &#x2F;&#x2F;直接为函数传递一个数组作为参数            int[] arr &#x3D; &#123;2, 4, 6, 8, 10&#125;;            string str2 &#x3D; Obj.getSum(arr);            Console.WriteLine(str2);        &#125;        public string getSum(params int[] arr)&#123;            int sum &#x3D; 0;            string str &#x3D; &quot;&quot;;            foreach(int i in arr)&#123;                sum +&#x3D; i;                str +&#x3D; &quot;+ &quot; + i + &quot; &quot;;            &#125;            str &#x3D; str.Trim(&#39;+&#39;);&#x2F;&#x2F;清除第一个+号            str +&#x3D; &quot;&#x3D; &quot;+sum;            return str;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">1 + 2 + 3 + 4 + 5 + 6 &#x3D; 212 + 4 + 6 + 8 + 10 &#x3D; 30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示：示例中用到的 Trim 方法可以用来去除字符串左右两边指定的字符，这里大家了解 即可。</strong></p><h2 id="18-C-Array类"><a href="#18-C-Array类" class="headerlink" title="18. C# Array类"></a>18. C# Array类</h2><p>Array 类是 C# 中<strong>所有数组的基类</strong>，其中提供了一系列用来处理数组的操作，例如对数组元素进行排序、搜索数组中指定的元素等。</p><p>Array 类的签名如下所示：</p><pre class="line-numbers language-none"><code class="language-none">[SerializableAttribute] [ComVisibleAttribute(true)] public abstract class Array : ICloneable, IList, ICollection, IEnumerable, IStructuralComparable, IStructuralEquatable <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Array-类中的属性"><a href="#Array-类中的属性" class="headerlink" title="Array 类中的属性"></a>Array 类中的属性</h3><p>Array 类中提供了一系列属性，通过这些属性可以获取数组的各种信息。Array 类中的常用属性如下表所示：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>IsFixedSize</td><td>检查数组是否具有固定大小</td></tr><tr><td>IsReadOnly</td><td>检查数组是否为只读</td></tr><tr><td>IsSynchronized</td><td>检查是否同步对数组的访问（线程安全）</td></tr><tr><td>Length</td><td>获取数组中所有维度中元素的总数</td></tr><tr><td>LongLength</td><td>获取数组中所有维数中元素的总数，并返回一个 64 位整数</td></tr><tr><td>Rank</td><td>获取数组的秩（维数），例如一维数组返回 1，二维数组返回 2，依次类推</td></tr><tr><td>SyncRoot</td><td>用来获取一个对象，该对象可以用于同步对数组的访问</td></tr></tbody></table><h3 id="Array-类中的方法"><a href="#Array-类中的方法" class="headerlink" title="Array 类中的方法"></a>Array 类中的方法</h3><p>除了属性之外，Array 类中还提供了一系列的方法，如下表所示：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Clear(Array, Int32, Int32)</td><td>将数组中指定范围内的元素设置为该元素所属类型的默认值</td></tr><tr><td>Copy(Array, Array, Int32)</td><td>从第一个元素开始拷贝数组中指定长度的元素，并将其粘贴到另一个数组中（从第一个元素开始粘贴），使用 32 位整数来指定要拷贝的长度</td></tr><tr><td>CopyTo(Array, Int32)</td><td>从指定的目标数组索引处开始，将当前一维数组的所有元素复制到指定的一维数组中，索引使用 32 位整数指定</td></tr><tr><td>GetLength</td><td>获取数组指定维度中的元素数，并返回一个 32 位整数</td></tr><tr><td>GetLongLength</td><td>获取数组指定维度中的元素数，并返回一个 64 位整数</td></tr><tr><td>GetLowerBound</td><td>获取数组中指定维度第一个元素的索引</td></tr><tr><td>GetType</td><td>获取当前实例的类型（继承自 Object ）</td></tr><tr><td>GetUpperBound</td><td>获取数组中指定维度最后一个元素的索引</td></tr><tr><td>GetValue(Int32)</td><td>获取一维数组中指定位置的值</td></tr><tr><td>IndexOf(Array, Object)</td><td>在一个一维数组中搜索指定对象，并返回其首个匹配项的索引</td></tr><tr><td>Reverse(Array)</td><td>反转整个一维数组中元素的顺序</td></tr><tr><td>SetValue(Object, Int32)</td><td>设置一维数组中指定元素的值</td></tr><tr><td>Sort(Array)</td><td>对一维数组中的元素排序</td></tr><tr><td>ToString()</td><td>返回一个表示当前对象的字符串（继承自 Object）</td></tr></tbody></table><h2 id="19-C-String：字符串"><a href="#19-C-String：字符串" class="headerlink" title="19. C# String：字符串"></a>19. C# String：字符串</h2><p>在 C# 中，string（或 String）关键字是 System.String 类的别名，其中提供了定义字符串以及操作字符串的一系列方法，下面就来详细介绍一下。</p><h3 id="1）声明和初始化字符串"><a href="#1）声明和初始化字符串" class="headerlink" title="1）声明和初始化字符串"></a>1）声明和初始化字符串</h3><p>您可以使用以下方式来创建字符串</p><ul><li><p>为 String 类型的变量赋值一个字符串；</p></li><li><p>使用 String 类的构造函数；</p></li><li><p>使用字符串串联运算符<code>+</code>；</p></li><li><p>通过检索属性或调用返回字符串的方法；</p></li><li><p>通过调用格式化方法将值或对象转换为其字符串表示形式。</p><p>定义一个空字符串</p></li></ul><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">string str1 &#x3D; System.String.Empty;&#x2F;&#x2F;String.Empty是在语法级别对“”的优化，而且从美观角度看，也占优势。string str2 &#x3D; &quot;&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Empty是string类中的一个静态的只读字段，他的定义是这样的：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public static readonly String Empty &#x3D; “”;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也就是说string.Empty的内部实现是等于””的。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">string str &#x3D; null;&#x2F;&#x2F;在栈上有地址，但在堆上没有空间；null是string的默认值；string str1 &#x3D;“”;  &#x2F;&#x2F;空字符串，堆栈都有，并且堆上地址为空；string str2 &#x3D; string.empty; &#x2F;&#x2F;它和str1差不多，在堆栈都有空间，不同就是在语法级上对str1的优化。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)         &#123;             &#x2F;&#x2F; 使用常规字符串为字符串变量赋值            string name &#x3D; &quot;C语言中文网&quot;;                        &#x2F;&#x2F; 声明一个字符串并初始化为空            string str1 &#x3D; &quot;欢迎访问：&quot; + name;            Console.WriteLine(&quot;str1 的值为：&quot; + str1);                        &#x2F;&#x2F; 使用 System.String.Empty 定义一个空字符串            string str2 &#x3D; System.String.Empty;            Console.WriteLine(&quot;str2 的值为：&quot; + str2);                        &#x2F;&#x2F; 使用 System.String 类            System.String url &#x3D; &quot;http:&#x2F;&#x2F;c.biancheng.net&quot;;;            Console.WriteLine(&quot;url 的值为：&quot; + url);                        &#x2F;&#x2F; 在局部变量中（即在方法体中）可以使用 var 来代替具体数据类型来定义变量            var temp &#x3D; &quot;C#教程&quot;;            Console.WriteLine(&quot;temp 的值为：&quot; + temp);                        &#x2F;&#x2F; 定义一个常量字符串            const string str3 &#x3D; &quot;这是一个常量字符串&quot;;            Console.WriteLine(&quot;str3 的值为：&quot; + str3);                        &#x2F;&#x2F; 使用字符串构造函数定义字符串            char[] letters &#x3D; &#123; &#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39; &#125;;            &#x2F;&#x2F; string[] letters &#x3D; &#123; &quot;C&quot;,&quot;语&quot;,&quot;言&quot;&#125;;            string message &#x3D; new string(letters);            Console.WriteLine(&quot;message 的值为：&quot; + message);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">str1 的值为：欢迎访问：C语言中文网str2 的值为：url 的值为：http:&#x2F;&#x2F;c.biancheng.nettemp 的值为：C#教程str3 的值为：这是一个常量字符串message 的值为：Hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、String-类中的属性"><a href="#2、String-类中的属性" class="headerlink" title="2、String 类中的属性"></a>2、String 类中的属性</h2><p>String 类中提供了两个属性，如下表所示：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Chars[Int32]</td><td>获取指定字符在字符串中的位置</td></tr><tr><td>Length</td><td>获取当前 String 对象中的字符数（字符串的长度）</td></tr></tbody></table><h2 id="3、String-类中的方法"><a href="#3、String-类中的方法" class="headerlink" title="3、String 类中的方法"></a>3、String 类中的方法</h2><p>String 类中提供了许多用来操作字符串的方法，下表中为大家列举了 String 类中一些比较常用的方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Clone()</td><td>返回对此 String 实例的引用</td></tr><tr><td>Compare(String, String)</td><td>比较两个指定的 String 对象，并返回一个指示二者在排序顺序中的相对位置的整数</td></tr><tr><td>CompareOrdinal(String, String)</td><td>通过比较每个字符串中的字符，来比较两个字符串是否相等</td></tr><tr><td>CompareTo(String)</td><td>将一个字符串与另一个字符串进行比较</td></tr><tr><td>Concat(String, String)</td><td>连接两个指定的字符串</td></tr><tr><td>Contains(String)</td><td>判断一个字符串中是否包含零一个字符串</td></tr><tr><td>Copy(String)</td><td>将字符串的值复制一份，并赋值给另一个字符串</td></tr><tr><td>CopyTo(Int32, Char[], Int32, Int32)</td><td>从字符串中复制指定数量的字符到一个字符数组中</td></tr><tr><td>EndsWith(String)</td><td>用来判断字符串是否以指定的字符串结尾</td></tr><tr><td>Equals(String, String)</td><td>判断两个字符串是否相等</td></tr><tr><td>Format(String, Object)</td><td>将字符串格式化为指定的字符串表示形式</td></tr><tr><td>GetEnumerator()</td><td>返回一个可以循环访问此字符串中的每个字符的对象</td></tr><tr><td>GetHashCode()</td><td>返回该字符串的哈希代码</td></tr><tr><td>GetType()</td><td>获取当前实例的类型</td></tr><tr><td>GetTypeCode()</td><td>返回字符串的类型代码</td></tr><tr><td>IndexOf(String)</td><td>返回字符在字符串中的首次出现的索引位置，索引从零开始</td></tr><tr><td>Insert(Int32, String)</td><td>在字符串的指定位置插入另一个字符串，并返回新形成的字符串</td></tr><tr><td>Intern(String)</td><td>返回指定字符串的内存地址</td></tr><tr><td>IsInterned(String)</td><td>返回指定字符串的内存地址</td></tr><tr><td>IsNormalized()</td><td>判断此字符串是否符合 Unicode 标准</td></tr><tr><td>IsNullOrEmpty(String)</td><td>判断指定的字符串是否为空（null）或空字符串（””）</td></tr><tr><td>IsNullOrWhiteSpace(String)</td><td>判断指定的字符串是否为 null、空或仅由空白字符组成</td></tr><tr><td>Join(String, String[])</td><td>串联字符串数组中的所有元素，并将每个元素使用指定的分隔符分隔开</td></tr><tr><td>LastIndexOf(Char)</td><td>获取某个字符在字符串中最后一次出现的位置</td></tr><tr><td>LastIndexOfAny(Char[])</td><td>获取一个或多个字符在字符串中最后一次出现的位置</td></tr><tr><td>Normalize()</td><td>返回一个新字符串，新字符串与原字符串的值相等，但其二进制表示形式符合 Unicode 标准</td></tr><tr><td>PadLeft(Int32)</td><td>返回一个指定长度的新字符串，新字符串通过在原字符串左侧填充空格来达到指定的长度，从而实现右对齐</td></tr><tr><td>PadRight(Int32)</td><td>返回一个指定长度的新字符串，新字符串通过在原字符串右侧填充空格来达到指定的长度，从而实现左对齐</td></tr><tr><td>Remove(Int32)</td><td>返回一个指定长度的新字符串，将字符串中超出长度以外的部分全部删除</td></tr><tr><td>Replace(String, String)</td><td>使用指定字符替换字符串中的某个字符，并返回新形成的字符串</td></tr><tr><td>Split(Char[])</td><td>按照某个分隔符将一个字符串拆分成一个字符串数组</td></tr><tr><td>StartsWith(String)</td><td>判断字符串是否使用指定的字符串开头</td></tr><tr><td>Substring(Int32)</td><td>从指定的位置截取字符串</td></tr><tr><td>ToCharArray()</td><td>将字符串中的字符复制到 Unicode 字符数组</td></tr><tr><td>ToLower()</td><td>将字符串中的字母转换为小写的形式</td></tr><tr><td>ToLowerInvariant()</td><td>使用固定区域性的大小写规则将字符串转换为小写的形式</td></tr><tr><td>ToString()</td><td>将其它数据类型转换为字符串类型</td></tr><tr><td>ToUpper()</td><td>将字符串中的字母转换为大写形式</td></tr><tr><td>Trim()</td><td>删除字符串首尾的空白字符</td></tr><tr><td>TrimEnd(Char[])</td><td>删除字符串尾部的空白字符</td></tr><tr><td>TrimStart(Char[])</td><td>删除字符串首部的空白字符</td></tr></tbody></table><p>上表中只列举了一些 String 类中常用方法，大家可以通过查阅 C# 的<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.string?view=netcore-3.1#methods">官方文档</a>来了解 String 类中的全部的方法介绍。</p><h3 id="4）示例"><a href="#4）示例" class="headerlink" title="4）示例"></a>4）示例</h3><h4 id="【示例】比较两个字符串是否相同："><a href="#【示例】比较两个字符串是否相同：" class="headerlink" title="【示例】比较两个字符串是否相同："></a>【示例】比较两个字符串是否相同：</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            string s1 &#x3D; &quot;66333&quot;;            string s2 &#x3D; &quot;66666&quot;;            if (String.Compare(s1, s2) &#x3D;&#x3D; 0)&#123;                Console.WriteLine(s1 + &quot; 与 &quot; + s2 + &quot; 相同&quot;);            &#125;            else            &#123;                Console.WriteLine(s1 + &quot; 与 &quot; + s2 + &quot; 不同&quot;);            &#125;            Console.WriteLine(String.Compare(s1, s2));            Console.ReadKey();        &#125;           &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">66333 与 66666 不同-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【示例】判断一个字符串是否包含在另一个字符串中："><a href="#【示例】判断一个字符串是否包含在另一个字符串中：" class="headerlink" title="【示例】判断一个字符串是否包含在另一个字符串中："></a>【示例】判断一个字符串是否包含在另一个字符串中：</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            string s1 &#x3D; &quot;23333&quot;;            string s2 &#x3D; &quot;2333&quot;;            if (s1.Contains(s2))            &#123;                Console.WriteLine(s1 + &quot; 中包含了 &quot; + s2);            &#125;            else            &#123;                Console.WriteLine(s1 + &quot; 中不包含 &quot; + s2);            &#125;            Console.ReadKey();                &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">23333 中包含了 2333<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【示例】从一个字符串中截取指定的字符串："><a href="#【示例】从一个字符串中截取指定的字符串：" class="headerlink" title="【示例】从一个字符串中截取指定的字符串："></a>【示例】从一个字符串中截取指定的字符串：</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            string s1 &#x3D; &quot;23333&quot;;            Console.WriteLine(&quot;源字符串：&quot; + s1);            string s2 &#x3D; s1.Substring(2);            Console.WriteLine(&quot;截取之后的字符串：&quot; + s2);            Console.ReadKey();                &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">源字符串：23333截取之后的字符串：333<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="【示例】将数组中的元素合并为字符串："><a href="#【示例】将数组中的元素合并为字符串：" class="headerlink" title="【示例】将数组中的元素合并为字符串："></a>【示例】将数组中的元素合并为字符串：</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            string[] strarray &#x3D; new string[]            &#123;                &quot;2333&quot;,                &quot;666&quot;,                &quot;888&quot;            &#125;;            string str &#x3D; string.Join(&quot;-&quot;, strarray);            Console.WriteLine(str);            Console.ReadKey();                &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">2333-666-888<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="20-C-struct：结构体"><a href="#20-C-struct：结构体" class="headerlink" title="20. C# struct：结构体"></a>20. C# struct：结构体</h2><p>在 C# 中，结构体也被称为结构类型（“structure type”或“struct type”），它是一种可封装数据和相关功能的值类型，在语法上结构体与类（class）非常相似，它们都可以用来封装数据，并且都可以包含成员属性和成员方法。</p><h3 id="1）定义结构体"><a href="#1）定义结构体" class="headerlink" title="1）定义结构体"></a>1）定义结构体</h3><p>要定义一个结构体需要使用 **struct ** 关键字，每个结构体都可以被看作是一种新的数据类型，其中可以包含多个成员（成员属性和成员方法），例如下面声明的 Books 结构体：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">struct Books &#123;  public string title;  public string author;  public string subject;  public int book_id;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在设计结构体时有以下几点需要注意：</p><ul><li>不能为结构体声明无参数的构造函数，因为每个结构体中都已经默认创建了一个隐式的、无参数的构造函数；</li><li>不能在声明成员属性时对它们进行初始化，静态属性和常量除外；</li><li>结构体的构造函数必须初始化该结构体中的所有成员属性；</li><li>结构体不能从其他类或结构体中继承，也不能作为类的基础类型，但是结构类型可以实现接口；</li><li>不能在结构体中声明析构函数。</li></ul><p>下面通过一个示例来演示结构体的使用：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;    struct books    &#123;        public string title;        public string author;        public string subject;        public int book_id;    &#125;    class test    &#123;        static void Main(string[] args)        &#123;            &#x2F;&#x2F;声明books类型的book1和book2            books book1;            books book2;            &#x2F;&#x2F;定义book1的属性            book1.title &#x3D; &quot;c#教程&quot;;            book1.author &#x3D; &quot;c语言中文网&quot;;            book1.subject &#x3D; &quot;c#编程教程&quot;;            book1.book_id &#x3D; 123456;            &#x2F;&#x2F;定义book2的属性            book2.title &#x3D; &quot;c教程&quot;;            book2.author &#x3D; &quot;c语言中文网&quot;;            book2.subject &#x3D; &quot;c编程教程&quot;;            book2.book_id &#x3D; 133333;            &#x2F;&#x2F;输出boo1和book2的属性信息            Console.WriteLine(&quot;book1&#39;s title：&quot; + book1.title);            Console.WriteLine(&quot;book1&#39;s author：&quot; + book1.author);            Console.WriteLine(&quot;book1&#39;s subject：&quot; + book1.subject);            Console.WriteLine(&quot;book1&#39;s book_id：&quot; + book1.book_id);            Console.WriteLine(&quot;book2&#39;s title：&quot; + book2.title);            Console.WriteLine(&quot;book2&#39;s author：&quot; + book2.author);            Console.WriteLine(&quot;book2&#39;s subject：&quot; + book2.subject);            Console.WriteLine(&quot;book2&#39;s book_id：&quot; + book2.book_id);            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">book1&#39;s title：c#教程book1&#39;s author：c语言中文网book1&#39;s subject：c#编程教程book1&#39;s book_id：123456book2&#39;s title：c教程book2&#39;s author：c语言中文网book2&#39;s subject：c编程教程book2&#39;s book_id：133333<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2）结构体的特征"><a href="#2）结构体的特征" class="headerlink" title="2）结构体的特征"></a>2）结构体的特征</h3><p>C# 中的结构体与 C/C++ 中的结构体有很大的不同，在 C# 中结构体具有以下功能：</p><ul><li>结构体中可以具有方法、字段、索引、属性、运算符方法和事件；</li><li>结构体中可以定义构造函数，但不能定义析构函数，需要注意的是，定义的构造函数不能没有参数，因为没有参数的构造函数是 C# 默认自动定义的，而且不能更改；</li><li>与类不同，结构体不能继承其他结构体或类；</li><li>结构体不能用作其他结构体或类的基础结构；</li><li>一种结构体可以实现一个或多个接口；</li><li>结构体成员不能被设定为 abstract、virtual 或 protected；</li><li>与类不同，结构体可以不用 New 操作符来实例化，当使用 New 操作符来实例化结构体时会自动调用结构体中的构造函数；</li><li>如果不使用 New 操作符来实例化结构体，结构体对象中的字段将保持未分配状态，并且在所有字段初始化之前无法使用该结构体实例。</li></ul><h3 id="3）类与结构体"><a href="#3）类与结构体" class="headerlink" title="3）类与结构体"></a>3）类与结构体</h3><p>类和结构体的主要区别如下所示：</p><ul><li>类是引用类型，结构体是值类型；</li><li>结构体不支持继承，但可以实现接口；</li><li>结构体中不能声明默认的构造函数。</li></ul><p>根据以上特征，让我们来完善一下前面的示例：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;    struct books    &#123;        &#x2F;&#x2F;成员属性        public string title;        public string author;        public string subject;        public int book_id;        &#x2F;&#x2F;成员方法        public void getValue(string t,string a,string s,int id)        &#123;            title &#x3D; t;            author &#x3D; a;            subject &#x3D; s;            book_id &#x3D; id;        &#125;        public void disPlay()        &#123;            Console.WriteLine(&quot;title：&quot; + title);            Console.WriteLine(&quot;author：&quot; + author);            Console.WriteLine(&quot;subject：&quot; + subject);            Console.WriteLine(&quot;book_id：&quot; + book_id);        &#125;    &#125;    class test    &#123;        static void Main(string[] args)        &#123;            &#x2F;&#x2F;实例化books结构体            books book1&#x3D;new books();            books book2&#x3D;new books();            &#x2F;&#x2F;定义book1的属性            book1.getValue(&quot;C#教程&quot;, &quot;C语言中文网&quot;, &quot;C#编程教程&quot;, 123456);            &#x2F;&#x2F;定义book2的属性            book2.getValue(&quot;HTTP教程&quot;, &quot;C语言中文网&quot;, &quot;HTTP协议教程&quot;, 123455);            &#x2F;&#x2F;输出boo1和book2的属性信息            book1.disPlay();            book2.disPlay();            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">title：C#教程author：C语言中文网subject：C#编程教程book_id：123456title：HTTP教程author：C语言中文网subject：HTTP协议教程book_id：123455<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-C-enum：枚举类型"><a href="#21-C-enum：枚举类型" class="headerlink" title="21. C# enum：枚举类型"></a>21. C# enum：枚举类型</h2><p>枚举类型（也可以称为“枚举器”）由一组具有独立标识符（名称）的<strong>整数类型常量</strong>构成，在 C# 中枚举类型不仅可以在类或结构体的内部声明，也可以在类或结构体的外部声明，默认情况下<strong>枚举类型中成员的默认值是从 0 开始的</strong>，然后逐一递增。</p><p>在 C# 中可以使用 <strong>enum</strong> 关键字来声明枚举类型，语法格式如下所示：</p><pre class="line-numbers language-none"><code class="language-none">enum enum_name&#123;  enumeration list;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中，enum_name 为枚举类型变量的名称；enumeration list 为枚举类型中的成员列表，其中包含若干使用逗号分隔的标识符，每个标识符都代表了一个整数值。</p><p>在使用枚举类型时有以下几点需要注意：</p><ul><li>枚举类型中不能定义方法；</li><li>枚举类型具有固定的常量集；</li><li>枚举类型可提高类型的安全性；</li><li>枚举类型可以遍历。</li></ul><p>示例如下：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;        class test    &#123;        enum Day &#123; Sun, Mon, Tue, Wed, Thu, Fri, Sat &#125;;        enum Season        &#123;            spring &#x3D;10,            summer,            autumn&#x3D;15,            winter        &#125;        static void Main(string[] args)        &#123;            &#x2F;&#x2F;默认情况下枚举类型中成员的默认值是从 0 开始的            Console.WriteLine(&quot;Sun &#x3D; &#123;0&#125;&quot;, (int)Day.Sun);            Console.WriteLine(&quot;Mon &#x3D; &#123;0&#125;&quot;, (int)Day.Mon);            Console.WriteLine(&quot;Tue &#x3D; &#123;0&#125;&quot;, (int)Day.Tue);            Console.WriteLine(&quot;Wed &#x3D; &#123;0&#125;&quot;, (int)Day.Wed);            Console.WriteLine(&quot;Thu &#x3D; &#123;0&#125;&quot;, (int)Day.Thu);            Console.WriteLine(&quot;Fri &#x3D; &#123;0&#125;&quot;, (int)Day.Fri);            Console.WriteLine(&quot;Sat &#x3D; &#123;0&#125;&quot;, (int)Day.Sat);            Console.WriteLine();            &#x2F;&#x2F;默认情况下，枚举类型中的每个成员都为 int 类型，            &#x2F;&#x2F;它们的值从零开始，并按定义顺序依次递增。但是我们            &#x2F;&#x2F;也可以显式的为每个枚举类型的成员赋值            foreach (Season i in Enum.GetValues(typeof(Season)))&#123;                Console.WriteLine(i + &quot; &#x3D; &quot; + (int)i);            &#125;            Console.WriteLine();            &#x2F;&#x2F;使用 GetNames() 遍历枚举类型中的所有成员            foreach(string i  in Enum.GetNames(typeof(Season)))            &#123;                Console.WriteLine(i);            &#125;            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">Sun &#x3D; 0Mon &#x3D; 1Tue &#x3D; 2Wed &#x3D; 3Thu &#x3D; 4Fri &#x3D; 5Sat &#x3D; 6spring &#x3D; 10summer &#x3D; 11autumn &#x3D; 15winter &#x3D; 16springsummerautumnwinter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="22-C-class：类"><a href="#22-C-class：类" class="headerlink" title="22. C# class：类"></a>22. C# class：类</h2><p>在 C# 中，类是引用类型的，其中包括状态（成员属性）和操作（成员方法和其它函数成员），我们可以动态创建类的实例（instance），这个实例也被称为对象（object），我们可以通过类和对象来设计程序。</p><h3 id="1）类的定义"><a href="#1）类的定义" class="headerlink" title="1）类的定义"></a>1）类的定义</h3><p>类的定义需要使用 <strong>class</strong> 关键字，语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;access specifier&gt; class class_name&#123;  &#x2F;&#x2F; 成员属性  &lt;access specifier&gt; &lt;data type&gt; variable1;  &lt;access specifier&gt; &lt;data type&gt; variable2;  ...  &lt;access specifier&gt; &lt;data type&gt; variableN;  &#x2F;&#x2F; 成员函数&#x2F;成员方法  &lt;access specifier&gt; &lt;return type&gt; method1(parameter_list)  &#123;    &#x2F;&#x2F; 函数体  &#125;  &lt;access specifier&gt; &lt;return type&gt; method2(parameter_list)  &#123;    &#x2F;&#x2F; 函数体  &#125;  ...  &lt;access specifier&gt; &lt;return type&gt; methodN(parameter_list)  &#123;    &#x2F;&#x2F; 函数体  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>语法说明如下：</p><ul><li><access specifier> 为访问权限修饰符，用来指定类或类中成员的访问规则，可以忽略不写，如果没有指定，则使用默认的访问权限修饰符，类的默认访问权限修饰符是 internal，类中成员的默认访问权限修饰符是 private；</access></li><li>class_name 为类的名称；</li><li><data type> 为数据类型，用来指定成员属性的数据类型；</data></li><li>variable1、variable2 等为成员属性的名称，类似于变量名；</li><li><return type> 为返回值类型，用来指定成员函数的返回值类型；</return></li><li>method1、method2 等为成员函数的名称。</li></ul><h3 id="2）对象"><a href="#2）对象" class="headerlink" title="2）对象"></a>2）对象</h3><p>类和对象是不同的概念，类决定了对象的类型，但不是对象本身。另外，类是在开发阶段创建的，而对象则是在程序运行期间创建的。我们可以将对象看作是基于类创建的实体，所以<strong>对象也可以称为类的实例</strong>。</p><p>想要创建一个类的实例需要使用 new 关键字，假如我们创建了一个名为 Student 的类，若要创建这个类的对象，语法格式如下：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Student Object &#x3D; new Student();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="23-C-构造函数"><a href="#23-C-构造函数" class="headerlink" title="23. C#构造函数"></a>23. C#构造函数</h2><p>在 C# 中，<strong>构造函数就是与类（或结构体）具有相同名称的成员函数</strong>，它在类中的地位比较特殊，不需要我们主动调用，当创建一个类的对象时会自动调用类中的构造函数。在程序开发的过程中，我们通常使用类中的构造函数来初始化类中的成员属性。</p><p>C# 中的构造函数有三种：</p><ul><li>实例构造函数；</li><li>静态构造函数；</li><li>私有构造函数。</li></ul><h3 id="1）实例构造函数"><a href="#1）实例构造函数" class="headerlink" title="1）实例构造函数"></a>1）实例构造函数</h3><p>构造函数是类中特殊的成员函数，它的名称与它所在类的名称相同，并且没有返回值。当我们使用 new 关键字创建类的对象时，可以使用实例构造函数来创建和初始化类中的任意成员属性。下面示例中演示了一个名为 Person 的类，以及类中的实例构造函数。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class Person&#123;    private string name;    private int age;    &#x2F;&#x2F;构造函数    public Person(string n, int a)    &#123;        name &#x3D; n;        age &#x3D; a;    &#125;    &#x2F;&#x2F; 类中剩余的成员&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只要创建 Person 类的对象，就会调用类中的实例构造函数，我们只需要在实例化对象时将具体的值传递给类中的构造函数即可，如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Person P &#x3D; new Person(&quot;张三&quot;, 18);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>如果没有为类显式的创建构造函数，那么 C# 将会为这个类隐式的创建一个没有参数的构造函数（无参数构造函数）</strong>，这个无参的构造函数会在实例化对象时为类中的成员属性设置默认值（关于 C# 中类型的默认值大家可以查阅《<a href="http://m.biancheng.net/csharp/data-type.html">数据类型</a>》一节）。在结构体中也是如此，如果没有为结构体创建构造函数，那么 C# 将隐式的创建一个无参数的构造函数，用来将每个字段初始化为其默认值。</p><p>若要初始化静态类或非静态类中的静态属性，则需要使用下面将要介绍的静态构造函数。</p><h3 id="2）静态构造函数"><a href="#2）静态构造函数" class="headerlink" title="2）静态构造函数"></a>2）静态构造函数</h3><p>静态构造函数<strong>用于初始化类中的静态数据或执行仅需执行一次的特定操作</strong>。静态构造函数将在创建第一个实例或引用类中的静态成员之前自动调用。</p><p>静态构造函数具有以下特性：</p><ul><li>静态构造函数不使用访问权限修饰符修饰或不具有参数；</li><li>类或结构体中<strong>只能具有一个静态构造函数</strong>；</li><li>静态构造函数不能继承或重载；</li><li>静态构造函数不能直接调用，仅可以由公共语言运行时 (CLR) 调用；</li><li>用户无法控制程序中静态构造函数的执行时间；</li><li>在创建第一个实例或引用任何静态成员之前，将自动调用静态构造函数以初始化类；</li><li>静态构造函数会在实例构造函数之前运行。</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;        class test    &#123;        public static int num &#x3D; 0;        &#x2F;&#x2F;构造函数        test()        &#123;            num &#x3D; 1;        &#125;        &#x2F;&#x2F;静态构造函数        static test()        &#123;            num &#x3D; 2;        &#125;                static void Main(string[] args)        &#123;            &#x2F;&#x2F;在创建第一个实例或引用任何静态成员之前，将自动调用静态构造函数以初始化类；            Console.WriteLine(&quot;num &#x3D; &quot; + num);  &#x2F;&#x2F;所以结果为2            test obj &#x3D; new test();            Console.WriteLine(&quot;num &#x3D; &quot; + num);              &#x2F;&#x2F;创建示例后，调用构造函数，结果为1            Console.Read();        &#125;    &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当执行上面程序时，会首先执行<code>public static int num = 0</code>，接着执行类中的静态构造函数，此时 num = 2，然后执行 Main 函数里面的内容，此时打印 num 的值为 2，接着初始化 Demo 类，这时会执行类中的构造函数，此时 num 会重新赋值为 1，所以上例的运行结果如下所示：</p><pre class="line-numbers language-none"><code class="language-none">num &#x3D; 2num &#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3）私有构造函数"><a href="#3）私有构造函数" class="headerlink" title="3）私有构造函数"></a>3）私有构造函数</h3><p>私有构造函数是一种特殊的实例构造函数，<strong>通常用在只包含静态成员的类中</strong>。如果一个类中具有一个或多个私有构造函数而没有公共构造函数的话，那么其他类（除嵌套类外）则无法创建该类的实例。 例如：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">class NLog&#123;    &#x2F;&#x2F; 私有构造函数    private NLog() &#123; &#125;    public static double e &#x3D; Math.E;  &#x2F;&#x2F;2.71828...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上例中定义了一个空的私有构造函数，这么做的好处就是空构造函数可阻止自动生成无参数构造函数。需要注意的是，如果不对构造函数使用访问权限修饰符，则默认它为私有构造函数。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;        class test    &#123;       public class student        &#123;            &#x2F;&#x2F;定义一个空的私有构造函数            private student() &#123; &#125;            public static int id;            public static string name;            public static void Display()            &#123;                Console.WriteLine(&quot;姓名：&quot; + name + &quot;\n编号：&quot; + id);            &#125;        &#125;                static void Main(string[] args)        &#123;            student.id &#x3D; 101;            student.name &#x3D; &quot;张三&quot;;            student.Display();            Console.Read();        &#125;    &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">姓名：张三编号：101<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上述代码如果写成<code>student stu = new student();</code>，程序就会出错，因为 student 类的构造函数是私有静态函数，受其保护级别的限制不能访问。</p><h2 id="24-C-析构函数"><a href="#24-C-析构函数" class="headerlink" title="24. C#析构函数"></a>24. C#析构函数</h2><p>与《<a href="http://m.biancheng.net/csharp/constructor.html">构造函数</a>》类似，C# 中的析构函数（也被称作“终结器”）同样是类中的一个特殊成员函数，<strong>主要用于在垃圾回收器回收类实例时执行一些必要的清理操作</strong>。</p><p>C# 中的析构函数具有以下特点：</p><ul><li>析构函数只能在类中定义，不能用于结构体；</li><li>一个类中只能定义一个析构函数；</li><li>析构函数不能继承或重载；</li><li>析构函数没有返回值；</li><li>析构函数是自动调用的，不能手动调用；</li><li>析构函数不能使用访问权限修饰符修饰，也不能包含参数。</li></ul><p>析构函数的名称同样与类名相同，不过需要在名称的前面加上一个波浪号<code>~</code>作为前缀，如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">class Car&#123;  ~Car() &#x2F;&#x2F; 析构函数  &#123;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;        class test    &#123;       public class student        &#123;            &#x2F;&#x2F;定义一个构造函数            public student() &#123; Console.WriteLine(&quot;类中的构造函数&quot;); &#125;            &#x2F;&#x2F;定义一个析构函数            ~student()&#123; Console.WriteLine(&quot;类中的析构函数&quot;); &#125;        &#125;                static void Main(string[] args)        &#123;            student stu1 &#x3D; new student();            student stu2 &#x3D; new student();        &#125;    &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">类中的析构函数类中的析构函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：析构函数不能对外公开，所以我们不能在析构函数上应用任何访问权限修饰符。</p><h2 id="25-C-this关键字"><a href="#25-C-this关键字" class="headerlink" title="25. C# this关键字"></a>25. C# this关键字</h2><p>在 C# 中，可以使用 this 关键字来表示当前对象，日常开发中我们可以使用 this 关键字来访问类中的成员属性以及函数。不仅如此 this 关键字还有一些其它的用法，下面就通过一些示例来分别演示一下。</p><h3 id="1-使用-this-表示当前类的对象"><a href="#1-使用-this-表示当前类的对象" class="headerlink" title="1) 使用 this 表示当前类的对象"></a>1) 使用 this 表示当前类的对象</h3><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class Website    &#123;        private string name;        private string url;        public Website(string n, string u)&#123;            this.name &#x3D; n;            this.url &#x3D; u;        &#125;        public void Display()&#123;            Console.WriteLine(name +&quot; &quot;+ url);        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用-this-关键字串联构造函数"><a href="#2-使用-this-关键字串联构造函数" class="headerlink" title="2) 使用 this 关键字串联构造函数"></a>2) 使用 this 关键字串联构造函数</h3><p>目的是为了实例化该类时 还会先自动调用一次this()中对应参数的方法，再继续执行原本的方法</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;    public class student        &#123;           public student()            &#123;                Console.WriteLine(&quot;无参的构造函数&quot;);            &#125;            &#x2F;&#x2F; 这里的 this()代表无参构造函数 student()            &#x2F;&#x2F; 先执行 student()，后执行 student(string text)            public student(string text) : this()            &#123;                Console.WriteLine(text);                Console.WriteLine(&quot;有参的构造函数&quot;);            &#125;        &#125;        class test    &#123;        static void Main(string[] args)        &#123;            student stu &#x3D; new student(&quot;2333&quot;);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">无参的构造函数2333有参的构造函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在一个类中如果需要实现多个自定义构造函数,通常做法是在构造函数中实现各自的业务逻辑,如果这些业务逻辑的实现并非截然不同的话,显然不符合**oop(面向对象编程思想)**编程思想,极不利于维护,当然,我们也可以通过将相同的逻辑部分封装成一个方法,但还有一种更为合理简单的方法，下面就通过this关键字来实现串联构造函数做一简单示例。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;    public class student    &#123;        public string name;        &#x2F;&#x2F;定义年龄为可空类型，这样就可以赋予其null值        public int? age;        &#x2F;&#x2F;下面前三个构造函数都是去调用参数最多的第四个构造函数，只取它们所需要的部分参数即可        &#x2F;&#x2F;这样的作法就是用this串联构造函数        public student() : this(&quot;&quot;, 0) &#123; &#125;        public student(string name) : this(&quot;evan&quot;, null) &#123; &#125;        public student(int? age) : this(&quot;&quot;, 20) &#123; &#125;        public student(string name,int? age)        &#123;            this.name &#x3D; name;            &#x2F;&#x2F;通过??判断传入的age是否null            &#x2F;&#x2F;如果属于null,则赋值100            this.age &#x3D; age ?? 100;        &#125;        public void Display()        &#123;            Console.WriteLine(&quot;Name:&#123;0&#125;,Age:&#123;1&#125;&quot;, name, age);        &#125;    &#125;    class test    &#123;                       static void Main(string[] args)        &#123;            student s1 &#x3D; new student();            s1.Display();            student s2 &#x3D; new student(20);            s2.Display();            student s3 &#x3D; new student(&quot;evan&quot;);            s3.Display();            student s4 &#x3D; new student(&quot;evan&quot;,20);            s4.Display();            Console.ReadLine();        &#125;    &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">Name:,Age:0Name:,Age:20Name:evan,Age:100Name:evan,Age:20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样的做法就是让一个接受参数最多的构造函数做”主构造函数”, 且在主构造函数中实现必须的业务逻辑,其余的构造函数只要使用this关键字把传入的参数转发给主构造函数,并且提供必须的其它参数，这样子,我们整个类中需要我们操心的就是那个主构造函数了,其余构造函数基本上可以为空。</p><p>注意:如果构造函数链中还有实现各自的逻辑,那么实际上是先执行主构造函数的代码,再执行各自逻辑，使用这种做法,真正的工作都交给了一个构造函数,类定义就会更简洁、更易维护、简化了编程任务。</p><p>参考<a href="https://blog.csdn.net/m0_56494923/article/details/125794784">https://blog.csdn.net/m0_56494923/article/details/125794784</a></p><h3 id="3-使用-this-关键字作为类的索引器"><a href="#3-使用-this-关键字作为类的索引器" class="headerlink" title="3) 使用 this 关键字作为类的索引器"></a>3) 使用 this 关键字作为类的索引器</h3><p>索引器可以同时给多个字段赋值，比属性功能多些</p><p>比较简单但并不完全正确的理解，索引器就是与对象同名的数组</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;    public class student        &#123;            int t1; &#x2F;&#x2F;index &#x3D; 0            int t2;&#x2F;&#x2F;index &#x3D; 1           &#x2F;&#x2F;索引器必须以this关键字定义，其实这个this就是类实例化之后的对象            public int this[int index]            &#123;                get                &#123;                    return (0 &#x3D;&#x3D; index) ? t1 : t2;                &#125;                set                &#123;                    if (0 &#x3D;&#x3D; index) t1 &#x3D; value;                    else t2 &#x3D; value;                &#125;            &#125;        &#125;        class test    &#123;        static void Main(string[] args)        &#123;            student a &#x3D; new student();            Console.WriteLine(&quot;t1:&#123;0&#125;,t2:&#123;1&#125;&quot;, a[0], a[1]);            &#x2F;&#x2F;调用set方法            a[0] &#x3D; 15;&#x2F;&#x2F;t1            a[1] &#x3D; 20;&#x2F;&#x2F;t2            &#x2F;&#x2F;调用get方法            Console.WriteLine(&quot;t1:&#123;0&#125;,t2:&#123;1&#125;&quot;, a[0], a[1]);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">t1:0,t2:0t1:15,t2:20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-使用-this-关键字作为原始类型的扩展方法"><a href="#4-使用-this-关键字作为原始类型的扩展方法" class="headerlink" title="4) 使用 this 关键字作为原始类型的扩展方法"></a>4) 使用 this 关键字作为原始类型的扩展方法</h3><p>注意要写在静态类中的静态方法，不然有些情况下访问不到</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;    public static class student    &#123;        public static string ExpandString(this string name)        &#123;            return name + &quot;2333&quot;;        &#125;    &#125;    class test    &#123;                      static void Main(string[] args)        &#123;            string str &#x3D; &quot;666&quot;;            string newstr &#x3D; str.ExpandString();            Console.WriteLine(newstr);            Console.ReadLine();        &#125;    &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">6662333<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="26-C-static：静态成员"><a href="#26-C-static：静态成员" class="headerlink" title="26. C# static：静态成员"></a>26. C# static：静态成员</h2><p>在 C# 中，我们可以使用 static 关键字声明属于类型本身而不是属于特定对象的静态成员，因此不需要使用对象来访问静态成员。在类、接口和结构体中可以使用 static 关键字修饰变量、函数、构造函数、类、属性、运算符和事件。</p><p><strong>注意：索引器和析构函数不能是静态的。</strong></p><p>若在定义某个成员时使用 static 关键字，则表示该类仅存在此成员的一个实例，也就是说当我们将一个类的成员声明为静态成员时，无论创建多少个该类的对象，静态成员只会被创建一次，这个静态成员会被所有对象共享。</p><h3 id="1）静态属性"><a href="#1）静态属性" class="headerlink" title="1）静态属性"></a>1）静态属性</h3><p>使用 static 定义的成员属性称为“静态属性”，静态属性可以直接通过<code>类名.属性名</code>的形式直接访问，不需要事先创建类的实例。静态属性不仅可以使用成员函数来初始化，还可以直接在类外进行初始化。</p><p>下面通过一个示例来演示一下静态变量的使用：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;    class student    &#123;        public static string Name;        public void setName(string name)        &#123;            Name &#x3D; name;        &#125;        public void getName()        &#123;            Console.WriteLine(Name);        &#125;    &#125;       class test    &#123;                      static void Main(string[] args)        &#123;            student.Name &#x3D; &quot;8&quot;;            Console.WriteLine(student.Name);            student stu &#x3D; new student();            stu.getName();            student stu1 &#x3D; new student();            stu1.getName();            stu1.setName(&quot;666&quot;);            stu1.getName();            stu1.getName();        &#125;    &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">888666666<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2）静态函数"><a href="#2）静态函数" class="headerlink" title="2）静态函数"></a>2）静态函数</h3><p>除了可以定义静态属性外，static 关键字还可以用来定义成员函数，使用 static 定义的成员函数称为“静态函数”，<strong>静态函数只能访问静态属性</strong>。</p><p>下面通过示例来演示静态函数的使用：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;    class student    &#123;        public static string Name;        public void setName(string name)        &#123;            Name &#x3D; name;        &#125;        public static void getName()        &#123;            Console.WriteLine(Name);        &#125;    &#125;       class test    &#123;                      static void Main(string[] args)        &#123;            student.Name &#x3D; &quot;8&quot;;            Console.WriteLine(student.Name);            student stu &#x3D; new student();            student.getName();&#x2F;&#x2F;注意这里不能写出stu.getName();            student stu1 &#x3D; new student();            student.getName();            stu1.setName(&quot;666&quot;);            student.getName();            student.getName();        &#125;    &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">888666666<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="27-C-继承"><a href="#27-C-继承" class="headerlink" title="27. C#继承"></a>27. C#继承</h2><p>在创建一个新类时，我们可以使用这个新定义的类继承一个已有的类，<strong>通过继承可以在创建新类时重用、扩展和修改被继承类中定义的成员</strong>。<strong>被继承的类称为“基类（父类）”，继承基类的类称为“派生类（子类）”</strong>。</p><p>需要注意的是，<strong>C# 中只支持单继承，</strong>也就是说一个派生类只能继承一个基类，但是继承是可以传递的，例如 ClassC 继承了 ClassB，而 ClassB 继承了 ClassA，那么 ClassC 将继承 ClassB 和 ClassA 中的所有成员。</p><p>要使用一个类继承另一个类需要使用到**冒号<code>:</code>**，如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">class 派生类 : 基类&#123;  ... ...c&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>与单继承相反，多重继承则是指一个类可以同时继承多个基类，<strong>C# 并不支持多重继承，但是可以借助接口来实现多重继承</strong>。下面就通过一个示例来演示一下：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            &#x2F;&#x2F;定义一个对象            Rectangle rec &#x3D; new Rectangle();            rec.setHeight(4);            rec.setWidth(3);            Console.WriteLine(&quot;长方形的面积为：&quot; + rec.getArea());            Console.WriteLine(&quot;长方形的周长为：&quot; + rec.getGirth());        &#125;    &#125;    &#x2F;&#x2F;定义一个基类Shape    class Shape &#123;        protected int width, height;        public void setWidth(int w)        &#123;            width &#x3D; w;        &#125;        public void setHeight(int h)        &#123;            height &#x3D; h;        &#125;    &#125;    &#x2F;&#x2F;定义接口    public interface Perimeter    &#123;        int getGirth();    &#125;    &#x2F;&#x2F;派生类    class Rectangle : Shape, Perimeter    &#123;        public int getArea()        &#123;            return width * height;        &#125;        &#x2F;&#x2F;派生类必须实现接口的所有成员        public int getGirth()        &#123;            return (width * height) * 2;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">长方形的面积为：12长方形的周长为：24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="28-C-多态"><a href="#28-C-多态" class="headerlink" title="28. C#多态"></a>28. C#多态</h2><p>多态（Polymorphism）是一个希腊词，指“多种形态”，在 C# 中具有两种类型的多态：</p><ul><li>编译时多态：通过 C# 中的方法重载和运算符重载来实现编译时多态，也称为静态绑定或早期绑定；</li><li>运行时多态：通过方法重载实现的运行时多态，也称为动态绑定或后期绑定。</li></ul><h3 id="1）编译时多态"><a href="#1）编译时多态" class="headerlink" title="1）编译时多态"></a>1）编译时多态</h3><p>在编译期间将函数与对象链接的机制称为早期绑定，也称为静态绑定。C# 提供了两种技术来实现编译时多态，分别是函数重载和运算符重载，本节主要来介绍一下函数重载，运算符重载会在后面进行讲解。</p><h4 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h4><p>在同一个作用域中，可以定义多个同名的函数，但是这些函数彼此之间必须有所差异，比如参数个数不同或参数类型不同等等，返回值类型不同除外。</p><p>【示例】定义名为 print 的函数来打印不同类型的数据：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        void print(int i)&#123;            Console.WriteLine(&quot;打印 int 类型的数据：&#123;0&#125;&quot;, i);        &#125;        void print(double d)&#123;            Console.WriteLine(&quot;打印 double 类型的数据：&#123;0&#125;&quot;, d);        &#125;        void print(string s)&#123;            Console.WriteLine(&quot;打印 string 类型的数据：&#123;0&#125;&quot;, s);        &#125;        static void Main(string[] args)         &#123;            Demo p &#x3D; new Demo();            p.print(123);            p.print(&quot;C语言中文网&quot;);            p.print(3.1415926);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2）运行时多态"><a href="#2）运行时多态" class="headerlink" title="2）运行时多态"></a>2）运行时多态</h3><p>C# 允许您使用 <strong>abstract</strong> 关键字来创建抽象类，抽象类用于实现部分接口。另外，抽象类包含抽象方法，可以在派生类中实现。</p><p>下面列举了一些有关抽象类的规则：</p><ul><li>不能创建一个抽象类的实例；</li><li>不能在一个抽象类外部声明抽象方法；</li><li>通过在类定义时使用 sealed 关键字，可以将类声明为密封类，密封类不能被继承，因此抽象类中不能声明密封类。</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace c.biancheng.net&#123;    &#x2F;&#x2F;创建一个抽象类Shape    abstract class Shape&#123;        &#x2F;&#x2F;抽象类包含抽象方法，可以在派生类中实现        public abstract int area();    &#125;    class Rectangle : Shape&#123;        private int width, height;        public Rectangle(int w, int h)&#123;            width &#x3D; w;            height &#x3D; h;        &#125;        &#x2F;&#x2F;在派生类中实现抽象类中的抽象方法        public override int area()&#123;            return (width * height);        &#125;    &#125;    class Demo    &#123;        static void Main(string[] args)         &#123;            Rectangle r &#x3D; new Rectangle(12,15);            double a &#x3D; r.area();            Console.WriteLine(&quot;长方形的面积为： &#123;0&#125;&quot;,a);            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="我们什么时候应该用抽象类呢？"><a href="#我们什么时候应该用抽象类呢？" class="headerlink" title="我们什么时候应该用抽象类呢？"></a>我们什么时候应该用抽象类呢？</h4><p><strong>如果一个类设计的目点是用来被其它类继承的</strong>，它代表一类对象的所具有的公共属性或方法，那个这个类就应该设置为抽象类。</p><h4 id="抽象类与其它的类有什么区别呢"><a href="#抽象类与其它的类有什么区别呢" class="headerlink" title="抽象类与其它的类有什么区别呢?"></a>抽象类与其它的类有什么区别呢?</h4><p>抽象类是不能够被实例化的。如果一个类中包含有抽象方法，那么这个类一定要声明为抽象类。同时，<strong>抽象方法一定需要在子类中重写</strong>，让抽象方法成为一个具体的实实在在的方法。</p><p>比如，我们要声明一个动物类animal，然后有其它的类Cat(猫)，Dog(狗)等具体的类来继承它，那么这个动物类就应该声明为抽象类。因为animal只是一个名词，不代表任何具体的对象，它只是代表所有动物所拥有的共同特征，所以animal类是根本不可能被实例化的。同时，如果所有动物都必须声明”叫”这样一个方法的话，那么，我们可以在animal类中声明一个抽象方法shout()，因为抽象方法是必须在子类中重写的，所以这就限制了所有继承自animal类都必须重写shout()方法。</p><h2 id="29-C-运算符重载"><a href="#29-C-运算符重载" class="headerlink" title="29. C#运算符重载"></a>29. C#运算符重载</h2><p>C# 中支持运算符重载，<strong>所谓运算符重载就是我们可以使用自定义类型来重新定义 C# 中大多数运算符的功能</strong>。运算符重载需要通过 <strong>operator</strong> 关键字后跟运算符的形式来定义的，我们可以将被重新定义的运算符看作是具有特殊名称的函数，与其他函数一样，该函数也有返回值类型和参数列表，如下例所示：</p><pre class="line-numbers language-none"><code class="language-none">public static Box operator+ (Box b, Box c) &#123;  Box box &#x3D; new Box();  box.length &#x3D; b.length + c.length;  box.breadth &#x3D; b.breadth + c.breadth;  box.height &#x3D; b.height + c.height;  return box;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述函数中实现了对加法运算符<code>+</code>的重载，该函数需要两个 Box 对象的属性，并返回一个 Box 对象。</p><h3 id="运算符重载的实现"><a href="#运算符重载的实现" class="headerlink" title="运算符重载的实现"></a>运算符重载的实现</h3><p>下面通过完整的示例来演示一下运算符重载：</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System;namespace c.biancheng.net&#123;    class Box    &#123;        private double length;      &#x2F;&#x2F; 长度        private double breadth;     &#x2F;&#x2F; 宽度        private double height;      &#x2F;&#x2F; 高度        public double getVolume()        &#123;            return length * breadth * height;        &#125;        public void setLength( double len )        &#123;            length &#x3D; len;        &#125;        public void setBreadth( double bre )        &#123;            breadth &#x3D; bre;        &#125;        public void setHeight( double hei )        &#123;            height &#x3D; hei;        &#125;        &#x2F;&#x2F; 重载 + 运算符，把两个 Box 对象相加        public static Box operator+ (Box b, Box c)        &#123;            Box box &#x3D; new Box();            box.length &#x3D; b.length + c.length;            box.breadth &#x3D; b.breadth + c.breadth;            box.height &#x3D; b.height + c.height;            return box;        &#125;    &#125;    class Demo    &#123;        static void Main(string[] args)         &#123;            Box Box1 &#x3D; new Box();         &#x2F;&#x2F; 声明 Box1，类型为 Box            Box Box2 &#x3D; new Box();         &#x2F;&#x2F; 声明 Box2，类型为 Box            Box Box3 &#x3D; new Box();         &#x2F;&#x2F; 声明 Box3，类型为 Box            double volume &#x3D; 0.0;          &#x2F;&#x2F; 体积            &#x2F;&#x2F; Box1 详述            Box1.setLength(6.0);            Box1.setBreadth(7.0);            Box1.setHeight(5.0);            &#x2F;&#x2F; Box2 详述            Box2.setLength(12.0);            Box2.setBreadth(13.0);            Box2.setHeight(10.0);            &#x2F;&#x2F; Box1 的体积            volume &#x3D; Box1.getVolume();            Console.WriteLine(&quot;Box1 的体积： &#123;0&#125;&quot;, volume);            &#x2F;&#x2F; Box2 的体积            volume &#x3D; Box2.getVolume();            Console.WriteLine(&quot;Box2 的体积： &#123;0&#125;&quot;, volume);            &#x2F;&#x2F; 把两个对象相加            Box3 &#x3D; Box1 + Box2;            &#x2F;&#x2F; Box3 的体积            volume &#x3D; Box3.getVolume();            Console.WriteLine(&quot;Box3 的体积： &#123;0&#125;&quot;, volume);            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">Box1 的体积： 210Box2 的体积： 1560Box3 的体积： 5400<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="可重载与不可重载的运算符"><a href="#可重载与不可重载的运算符" class="headerlink" title="可重载与不可重载的运算符"></a>可重载与不可重载的运算符</h3><p>下表提供了 C# 运算符可重载性的相关信息：</p><table><thead><tr><th>运算符</th><th>可重载性</th></tr></thead><tbody><tr><td>+、-、!、~、++、–</td><td>这些一元运算符可以进行重载</td></tr><tr><td>+、-、*、/、%、&amp;、|、^、&lt;&lt;、&gt;&gt;、=、!=、&lt;、&gt;、&lt;=、&gt;=</td><td>这些二元运算符可以进行重载，需要注意的是某些运算符必须成对重载</td></tr><tr><td>&amp;&amp;、||</td><td>无法重载逻辑运算符</td></tr><tr><td>(type)var_name</td><td>强制类型转换运算符不能重载</td></tr><tr><td>+=、-=、*=、/=、%=、&amp;=、|=、^=、&lt;&lt;=、&gt;&gt;=</td><td>复合赋值运算符不能显式重载。 但在重载二元运算符时，也会隐式重载相应的复合赋值运算符，例如重载了<code>+</code>运算符也会隐式的重载<code>+=</code></td></tr><tr><td>^、=、.、?.、?  : 、??、??=、..、-&gt;、=&gt;、as、await、checked、unchecked、default、delegate、is、nameof、new、sizeof、stackalloc、switch、typeof</td><td>这些运算符无法进行重载</td></tr></tbody></table><p><strong>注意：比较运算符必须成对重载，也就是说，如果重载一对运算符中的任意一个，则另一个运算符也必须重载。比如<code>==</code>和<code>!=</code>运算符、<code>&lt;</code>和<code>&gt;</code>运算符、<code>&lt;=</code>和<code>&gt;=</code>运算符。</strong></p><h2 id="30-C-接口（interface）"><a href="#30-C-接口（interface）" class="headerlink" title="30. C#接口（interface）"></a>30. C#接口（interface）</h2><p>接口可以看作是一个约定，其中定义了类或结构体继承接口后需要实现功能，接口的特点如下所示：</p><ul><li>接口是一个引用类型，通过接口可以实现多重继承；</li><li>接口中只能声明”抽象”成员，所以不能直接对接口进行实例化；</li><li>接口中可以包含方法、属性、事件、索引器等成员；</li><li>接口名称一般习惯使用字母“I”作为开头（不是必须的，不这样声明也可以）；</li><li>接口中成员的访问权限默认为 public，所以我们在定义接口时不用再为接口成员指定任何访问权限修饰符，否则编译器会报错；</li><li>在声明接口成员的时候，<strong>不能为接口成员编写具体的可执行代码</strong>，也就是说，只要在定义成员时指明成员的名称和参数就可以了；</li><li>接口一旦被实现（被一个类继承），<strong>派生类就必须实现接口中的所有成员</strong>，除非派生类本身也是抽象类。</li></ul><h3 id="声明接口"><a href="#声明接口" class="headerlink" title="声明接口"></a>声明接口</h3><p>在 C# 中声明接口需要使用 **interface **关键字，语法结构如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public interface InterfaceName&#123;  returnType funcName1(type parameterList);  returnType funcName2(type parameterList);  ... ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，InterfaceName 为接口名称，returnType 为返回值类型，funcName 为成员函数的名称，parameterList 为参数列表。</p><p>【示例】下面通过具体的示例演示一下接口的使用：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace c.biancheng.net&#123;    &#x2F;&#x2F;定义一个接口Iwebsite    public interface Iwebsite&#123;        void setValue(string str1, string str2);        void disPlay();    &#125;    &#x2F;&#x2F;定义一个派生类Website，继承接口Iwebsite    public class Website : Iwebsite&#123;        public string name, url;        &#x2F;&#x2F;派生类必须实现接口的所有成员        public void setValue(string n, string u)&#123;            name &#x3D; n;            url &#x3D; u;        &#125;        public void disPlay()&#123;            Console.WriteLine(&quot;&#123;0&#125; &#123;1&#125;&quot;, name, url);        &#125;    &#125;    class Demo    &#123;        static void Main(string[] args)         &#123;            Website web &#x3D; new Website();            web.setValue(&quot;C语言中文网&quot;, &quot;http:&#x2F;&#x2F;c.biancheng.net&quot;);            web.disPlay();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">C语言中文网 http:&#x2F;&#x2F;c.biancheng.net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h3><p>在 C# 中，一个接口可以继承另一个接口，例如可以使用接口 1 继承接口 2，<strong>当用某个类来实现接口 1 时，必须同时实现接口 1 和接口 2 中的所有成员</strong>，下面通过一个示例来演示一下：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace c.biancheng.net&#123;    &#x2F;&#x2F;定义一个接口IParentInterface    public interface IParentInterface    &#123;        void ParentInterfaceMethod();    &#125;    &#x2F;&#x2F;定义一个接口IMyInterface，继承接口IParentInterface    public interface IMyInterface : IParentInterface    &#123;        void MethodToImplement();    &#125;    &#x2F;&#x2F;定义一个类Demo，继承接口IMyInterface    class Demo : IMyInterface    &#123;        static void Main(string[] args)         &#123;            Demo demo &#x3D; new Demo();            demo.MethodToImplement();            demo.ParentInterfaceMethod();        &#125;        &#x2F;&#x2F;必须同时实现接口 IParentInterface 和接口 IMyInterface 中的所有成员        public void MethodToImplement()&#123;            Console.WriteLine(&quot;实现 IMyInterface 接口中的 MethodToImplement 函数&quot;);        &#125;        public void ParentInterfaceMethod()&#123;            Console.WriteLine(&quot;实现 IParentInterface 接口中的 ParentInterfaceMethod 函数&quot;);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">实现 IMyInterface 接口中的 MethodToImplement 函数实现 IParentInterface 接口中的 ParentInterfaceMethod 函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="31-C-namespace：命名空间"><a href="#31-C-namespace：命名空间" class="headerlink" title="31. C# namespace：命名空间"></a>31. C# namespace：命名空间</h2><p>在 C# 中，可以将命名空间看作是一个范围，用来标注命名空间中成员的归属，一个命名空间中类与另一个命名空间中同名的类互不冲突，但在同一个命名空间中类的名称必须是唯一的。</p><p><strong>举个简单的例子，在一个简单的 C# 程序中，假如我们要输出某些数据，就需要使用<code>System.Console.WriteLine()</code>，</strong></p><p><strong>其中 System 就是命名空间，而 Console 是类的名字，WriteLine 则是具体要使用方法。</strong></p><p><strong>也就是说，如果要访问某个命名空间中的类，我们需要使用<code>namespacename.classname.funcname()</code>的形式。</strong></p><p><strong>当然也可以使用 using 关键字来引用需要的命名空间，例如<code>using System</code>，这样我们就可以直接使用<code>Console.WriteLine()</code>来输出指定的数据了。</strong></p><p>命名空间的结构类似于我们计算机系统中的目录，我们可以将某个目录看作是一个命名空间，在这个目录下可以存在若干不同的文件夹，这些文件夹就可以看作是命名空间下的类。而在每个文件夹下又存放着一些文件或文件夹，这些文件和文件夹则可以看作是类中的成员。</p><p>使用命名空间的好处是可以避免命名冲突，同时也便于查找类的位置。</p><h3 id="定义命名空间"><a href="#定义命名空间" class="headerlink" title="定义命名空间"></a>定义命名空间</h3><p>在 C# 中定义命名空间需要使用 namespace 关键字，语法格式如下：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">namespace namespaceName&#123;  &#x2F;&#x2F; 命名空间中的代码&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>若要调用指定命名空间下的成员，则需要使用<code>namespaceName.className.funcName()</code>的形式，下面通过一个示例来演示命名空间的使用：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)         &#123;            First.demoClass demo1 &#x3D; new First.demoClass();            Second.demoClass demo2 &#x3D; new Second.demoClass();            demo1.sayHello();            demo2.sayHello();        &#125;    &#125;&#125;&#x2F;&#x2F;定义一个命名空间Firstnamespace First&#123;    &#x2F;&#x2F;在命名空间First里定义一个类demoClass    public class demoClass&#123;        &#x2F;&#x2F;定义一个方法sayHello()        public void sayHello()&#123;            System.Console.WriteLine(&quot;First 命名空间下 demoClass 类中的 sayHello 函数&quot;);        &#125;    &#125;&#125;namespace Second&#123;    public class demoClass&#123;        public void sayHello()&#123;            System.Console.WriteLine(&quot;Second 命名空间下 demoClass 类中的 sayHello 函数&quot;);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">First 命名空间下 demoClass 类中的 sayHello 函数Second 命名空间下 demoClass 类中的 sayHello 函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="using关键字"><a href="#using关键字" class="headerlink" title="using关键字"></a>using关键字</h3><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using first;&#x2F;&#x2F;使用 using 关键字来引用需要的命名空间firstnamespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            a aa &#x3D; new a();            aa.hello();        &#125;    &#125;&#125;namespace first&#123;    public class a    &#123;        public void hello()        &#123;            Console.WriteLine(&quot;First&quot;);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">First<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命名空间嵌套"><a href="#命名空间嵌套" class="headerlink" title="命名空间嵌套"></a>命名空间嵌套</h3><p>命名空间可以嵌套使用，也就是说我们可以在一个命名空间中再定义一个或几个命名空间，如下所示：</p><pre class="line-numbers language-none"><code class="language-none">namespace namespaceName1&#123;  &#x2F;&#x2F; namespaceName1 下的代码  namespace namespaceName2&#123;    &#x2F;&#x2F; namespaceName2 下的代码  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>您可以使用点<code>.</code>运算符来访问嵌套的命名空间成员，例如<code>namespaceName1.namespaceName2</code>。下面通过示例来演示一下命名空间的嵌套使用：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using first;using first.second;namespace test1&#123;        class test    &#123;        static void Main(string[] args)        &#123;            a aa &#x3D; new a();            aa.hello();            b bb &#x3D; new b();            bb.hello();        &#125;    &#125;&#125;namespace first&#123;    public class a    &#123;        public void hello()        &#123;            Console.WriteLine(&quot;First&quot;);        &#125;    &#125;    namespace second    &#123;        public class b        &#123;            public void hello()            &#123;                Console.WriteLine(&quot;First.second&quot;);            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">FirstFirst.second<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="32-C-预处理器指令"><a href="#32-C-预处理器指令" class="headerlink" title="32. C#预处理器指令"></a>32. C#预处理器指令</h2><p>预处理指令的作用主要是向编译器发出指令，以便在程序编译开始之前对信息进行一些预处理操作。在 C# 中，预处理器指令均以<code>#</code>开头，并且预处理器指令之前只能出现空格不能出现任何代码。另外，预处理器指令不是语句，因此它们不需要以分号<code>;</code>结尾。</p><p>在 C# 中，预处理指令用于帮助条件编译。不同于 C 和 C++ 中的指令，在 C# 中不能使用这些指令来创建宏，而且预处理器指令必须是一行中唯一的代码，不能掺杂其它。</p><h3 id="C-中的预处理器指令"><a href="#C-中的预处理器指令" class="headerlink" title="C# 中的预处理器指令"></a>C# 中的预处理器指令</h3><p>下表中列出了 C# 中提供的预处理器指令：</p><table><thead><tr><th>预处理器指令</th><th>描述</th></tr></thead><tbody><tr><td>#define</td><td>用于定义一系列字符，可以将这些字符称为符号</td></tr><tr><td>#undef</td><td>用于取消一个已定义符号</td></tr><tr><td>#if</td><td>用于测试符号是否为真</td></tr><tr><td>#else</td><td>用于创建复合条件指令，与 #if 一起使用</td></tr><tr><td>#elif</td><td>用于创建复合条件指令</td></tr><tr><td>#endif</td><td>指定一个条件指令的结束</td></tr><tr><td>#line</td><td>用于修改编译器的行数以及（可选地）输出错误和警告的文件名</td></tr><tr><td>#error</td><td>用于在代码的指定位置生成一个错误</td></tr><tr><td>#warning</td><td>用于在代码的指定位置生成一级警告</td></tr><tr><td>#region</td><td>用于在使用 Visual Studio Code Editor 的大纲特性时，指定一个可展开或折叠的代码块</td></tr><tr><td>#endregion</td><td>用于标识 #region 块的结束</td></tr></tbody></table><h4 id="define-预处理器"><a href="#define-预处理器" class="headerlink" title="#define 预处理器"></a>#define 预处理器</h4><p>#define 预处理器指令用来创建符号常量，这个符号可以作为传递给 #if 指令的表达式，表达式将返回 true。#define 的语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">#define symbol<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>【示例】下面通过示例来演示 #define 预处理器指令的使用：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#define PIusing System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)         &#123;            #if (PI)                Console.WriteLine(&quot;PI 已定义&quot;);            #else                Console.WriteLine(&quot;PI 未定义&quot;);            #endif            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在C#中不能定义类似于这种</p><pre class="line-numbers language-none"><code class="language-none">#define inf 0x3f3f3f3f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会报错，<font color="red">应输入单行注释或行尾</font></p><ol><li><p>不能像在 C 和 C++ 中的通常做法一样，使用 <strong>#define</strong> 指令来声明常数值。最好是将 C# 中的常数定义为类或结构的静态成员。如果具有多个像这样的常数，可以考虑创建一个单独的“Constants”类来保存这些常数。</p></li><li><p>#define可以定义符号，但是无法对符号赋值。</p></li><li><p>对于<a href="https://www.baidu.com/link?url=_2JL35X9_3fvhAKufZ7U5feJnH1LnYBRCUHS6dwMwaFbsePIeSZDva6jQBkW4QSrHg_iM8XQECwDWfjHrgjcpCHz-GUOLIUPfHIDPKcBlO3&wd=&eqid=97e0d3c90004b7f700000004630dce11">#IF</a>，C# 中的 #if 语句是 Boolean，仅测试符号是否已定义。</p></li><li><p>#define单独用没什么意义，一般是和#if或者Conditional特性结合使用</p></li><li><p>#define必须定义在所有using命名空间前面；</p></li></ol><p>可以参考：<a href="https://article.itxueyuan.com/bKRL8x">C#—#define条件编译</a></p><h4 id="条件指令"><a href="#条件指令" class="headerlink" title="条件指令"></a>条件指令</h4><p>您可以使用 #if 来创建条件指令，条件指令可以用于测试一个或多个符号的值是否为 true 。如果符号的值为 true，那么编译器将评估 #if 指令和下一个指令之间的所有代码。在语法上 #if 预处理器语句与 C# 中的 if 条件判断语句比较相似，如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#if symbol_1  &#x2F;&#x2F; 要执行的代码#elif symbol_2  &#x2F;&#x2F; 要执行的代码#else  &#x2F;&#x2F; 要执行的代码#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，symbol 是要测试的符号的名称。</p><p>条件指令中仅可以使用运算符<code>==</code>（相等）和<code>!=</code>（不相等）来测试布尔值 true 或 false，例如 true 表示已定义该符号。另外，还可以使用<code>&amp;&amp; (and)</code>、<code>|| (or)</code>和<code>! (not)</code>运算符来同时测试多个符号，以及使用括号对符号和运算符分组。</p><pre class="line-numbers language-none"><code class="language-none">注意：以 #if 指令开头的条件指令必须以 #endif 指令显式结束。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面通过示例来演示条件指令的使用：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#define DEBUG#define VC_V10using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)         &#123;            #if (DEBUG &amp;&amp; !VC_V10)                Console.WriteLine(&quot;DEBUG 已定义&quot;);            #elif (!DEBUG &amp;&amp; VC_V10)                Console.WriteLine(&quot;VC_V10 已定义&quot;);            #elif (DEBUG &amp;&amp; VC_V10)                Console.WriteLine(&quot;DEBUG and VC_V10 已定义&quot;);            #else                Console.WriteLine(&quot;DEBUG and VC_V10 未定义&quot;);            #endif            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">DEBUG and VC_V10 已定义<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="33-C-正则表达式"><a href="#33-C-正则表达式" class="headerlink" title="33. C#正则表达式"></a>33. C#正则表达式</h2><p>正则表达式是一种匹配输入文本的模式，可以用于解析和验证给定文本以及模式之间是否匹配，模式可以包含运算符、字符字面值或结构。</p><p><strong>正则表达式的组成</strong></p><p>我们可以使用正则表达式检查给定字符串是否与指定模式相匹配。正则表达式的匹配模式由一系列字符组成，其中可以包括数子、文字、运算符、字符等等。我们可以使用这些模式来搜索字符串或文件，并查看是否找到了匹配的项。</p><p>开发中我们一般使用正则表达式来验证用户输入的信息是否正确，比如邮箱地址、手机号码等等。下面列举了用于定义正则表达式的各种类别的字符、运算符和结构：</p><ul><li>转义字符；</li><li>字符类；</li><li>定位符；</li><li>分组构造；</li><li>限定符；</li><li>反向引用构造；</li><li>备用构造；</li><li>替换；</li><li>杂项构造。</li></ul><h3 id="1-转义字符"><a href="#1-转义字符" class="headerlink" title="1) 转义字符"></a>1) 转义字符</h3><p>正则表达式中的反斜杠<code>\</code>用来表示它后面跟随的字符是特殊字符，具有特殊的含义</p><h3 id="2-字符类"><a href="#2-字符类" class="headerlink" title="2) 字符类"></a>2) 字符类</h3><p>字符类可以与一个字符串中的任何一个字符相匹配</p><h3 id="3-定位符"><a href="#3-定位符" class="headerlink" title="3) 定位符"></a>3) 定位符</h3><p>定位符可以根据字符串出现的具体位置来判断匹配是成功还是失败</p><h3 id="4-分组构造"><a href="#4-分组构造" class="headerlink" title="4) 分组构造"></a>4) 分组构造</h3><p>分组构造描述了正则表达式的子表达式，并捕获输入字符串的子字符串</p><h3 id="5-限定符"><a href="#5-限定符" class="headerlink" title="5) 限定符"></a>5) 限定符</h3><p>限定符用来指定在字符串中必须存在某个元素（可以是字符、组或字符类）才能匹配成功</p><h3 id="6-反向引用构造"><a href="#6-反向引用构造" class="headerlink" title="6) 反向引用构造"></a>6) 反向引用构造</h3><p>反向引用构造允许先前匹配的子表达式随后在相同的正则表达式中进行标识</p><h3 id="7-备用构造"><a href="#7-备用构造" class="headerlink" title="7) 备用构造"></a>7) 备用构造</h3><p>备用构造用于修改正则表达式以启用 either/or 匹配</p><h3 id="8-替换"><a href="#8-替换" class="headerlink" title="8) 替换"></a>8) 替换</h3><p>替换是替换模式中使用的正则表达式</p><p>具体可参考<a href="http://m.biancheng.net/csharp/regular-expressions.html">C编程网</a></p><h2 id="34-C-异常处理"><a href="#34-C-异常处理" class="headerlink" title="34. C#异常处理"></a>34. C#异常处理</h2><p>在 C# 中，异常是在程序运行出错时引发的，例如以一个数字除以零，<strong>所有异常都派生自 System.Exception 类</strong>。异常处理则是处理运行时错误的过程，使用异常处理可以使程序在发生错误时保持正常运行。</p><p><strong>C# 中的异常处理基于四个关键字构建，分别是 try、catch、finally 和 throw。</strong></p><ul><li>try：try 语句块中通常用来存放容易出现异常的代码，其后面紧跟一个或多个 catch 语句块；</li><li>catch：catch 语句块用来捕获 try 语句块中的出现的异常；</li><li>finally：finally 语句块用于执行特定的语句，不管异常是否被抛出都会执行；</li><li>throw：throw 用来抛出一个异常。</li></ul><h3 id="1）try-catch语句"><a href="#1）try-catch语句" class="headerlink" title="1）try/catch语句"></a>1）try/catch语句</h3><p>假设一段代码引发了异常，则可以使用 try 和 catch 组合来捕获这个异常，其语法格式如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">try&#123;  &#x2F;&#x2F; 引起异常的语句&#125;catch( ExceptionName e1 )&#123;  &#x2F;&#x2F; 错误处理代码&#125;catch( ExceptionName e2 )&#123;  &#x2F;&#x2F; 错误处理代码&#125;...catch( ExceptionName eN )&#123;  &#x2F;&#x2F; 错误处理代码&#125;finally&#123;  &#x2F;&#x2F; 要执行的语句&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上所示，可以列出多个 catch 语句块来捕获不同类型的异常，以防止 try 语句块在不同的情况下产生多个异常。</p><p>【示例】使用 try/catch 语句捕获程序中的异常：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace test1&#123;    class test    &#123;        static void Main(string[] args)        &#123;            &#x2F;&#x2F;try用来存放容易出现异常的代码            try            &#123;                int a &#x3D; 123;                int b &#x3D; 0;                int x &#x3D; a &#x2F; b;      &#x2F;&#x2F;分母为0，会抛出异常，line 14            &#125;            &#x2F;&#x2F;catch用来捕获 try 语句块中的出现的异常            catch(Exception e)            &#123;                Console.WriteLine(&quot;捕获到的异常：&quot; + e);            &#125;            &#x2F;&#x2F;finally用于执行特定的语句，不管异常是否被抛出都会执行            finally            &#123;                Console.WriteLine(&quot;这是一定会执行的语句&quot;);            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">捕获到的异常：System.DivideByZeroException: Attempted to divide by zero.   at test1.test.Main(String[] args) in 目录:line 14这是一定会执行的语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2）C-中的异常类"><a href="#2）C-中的异常类" class="headerlink" title="2）C#中的异常类"></a>2）C#中的异常类</h3><p><strong>C# 中的异常类主要是从 System.Exception 类派生的</strong>，比如 System.ApplicationException 和 System.SystemException 两个异常类就是从 System.Exception 类派生的。</p><ul><li>System.ApplicationException 类支持由程序产生的异常，因此我们<strong>自定义</strong>的异常都应继承此类；</li><li>System.SystemException 类是所有<strong>系统预定义</strong>异常的基类。</li></ul><p>下表中列举了一些从 Sytem.SystemException 类派生的预定义异常类：</p><table><thead><tr><th>异常类</th><th>描述</th></tr></thead><tbody><tr><td>System.IO.IOException</td><td>处理 I/O 错误</td></tr><tr><td>System.IndexOutOfRangeException</td><td>处理当方法引用超出范围的数组索引时产生的错误</td></tr><tr><td>System.ArrayTypeMismatchException</td><td>处理当数组类型不匹配时产生的错误</td></tr><tr><td>System.NullReferenceException</td><td>处理引用一个空对象时产生的错误</td></tr><tr><td>System.DivideByZeroException</td><td>处理当除以零时产生的错误</td></tr><tr><td>System.InvalidCastException</td><td>处理在类型转换期间产生的错误</td></tr><tr><td>System.OutOfMemoryException</td><td>处理空闲内存不足产生的错误</td></tr><tr><td>System.StackOverflowException</td><td>处理栈溢出产生的错误</td></tr></tbody></table><h3 id="3）自定义异常类"><a href="#3）自定义异常类" class="headerlink" title="3）自定义异常类"></a>3）自定义异常类</h3><p>除了可以使用系统预定义的异常类外，我们还可以自行定义异常类，自定义的异常类都应继承 System.ApplicationException 类。下面通过示例来演示一下自定义异常类的使用：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace c.biancheng.net&#123;    class Demo    &#123;        static void Main(string[] args)        &#123;            TestUserDefinedException test &#x3D; new TestUserDefinedException();            try            &#123;                test.validate(12);            &#125;            catch (InvalidAgeException e)            &#123;                Console.WriteLine(&quot;InvalidAgeException: &#123;0&#125;&quot;, e);            &#125;            Console.WriteLine(&quot;其它代码&quot;);        &#125;    &#125;&#125;&#x2F;&#x2F;自定义异常类，自定义的异常都应继承System.ApplicationExceptionpublic class InvalidAgeException : ApplicationException&#123;    &#x2F;&#x2F;构造函数, Base 是子类构造函数中引用父类构造函数    public InvalidAgeException(string message) : base(message)    &#123;    &#125;&#125;public class TestUserDefinedException&#123;    public void validate(int age)    &#123;        if (age &lt; 18)        &#123;            throw (new InvalidAgeException(&quot;Sorry, Age must be greater than 18&quot;));        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在构造方法后面加上了:base(message)，该类如下：</p><p>public InvalidAgeException(string message)是InvalidAgeException的构造函数，base(message)是其父类的构造函数</p><p>public InvalidAgeException(string message) : base(message)指的是在InvalidAgeException中调用其父类的带string类型的构造函数。因为在子类不能直接继承父类的构造函数，</p><p>只能通过这种方式调用。</p><p>我的理解是，当父类有多个构造函数时，通过:base()来指定父类该调哪个构造函数</p><p>可参考<a href="https://www.cnblogs.com/topsyuan/p/11243890.html">C# 构造函数base()实例演示 </a></p><h3 id="4）抛出异常"><a href="#4）抛出异常" class="headerlink" title="4）抛出异常"></a>4）抛出异常</h3><p>如果异常是直接或间接派生自 System.Exception 类，则可以在 catch 语句块中使用 throw 语句抛出该异常，所谓抛出异常这里可以理解为重新引发该异常。throw 语句的语法格式如下所示：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">catch(Exception e) &#123;  ...  Throw e&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="35-C-文件读写"><a href="#35-C-文件读写" class="headerlink" title="35. C#文件读写"></a>35. C#文件读写</h2><p>文件是存储在磁盘中的具有特定名称和目录路径的数据集合，当我们使用程序对文件进行读取或写入时，程序会将文件以<strong>数据流（简称流）</strong>的形式读入内存中。我们<strong>可以将流看作是通过通信路径传递的字节序列</strong>，流主要分为<strong>输入流和输出流</strong>，输入流主要用于从文件读取数据（读操作），输出流主要用于向文件中写入数据（写操作）。</p><p>具体可参考C编程网<a href="http://m.biancheng.net/csharp/file-io.html">C#文件读写</a></p><h3 id="C-中的-I-O-类"><a href="#C-中的-I-O-类" class="headerlink" title="C# 中的 I/O 类"></a>C# 中的 I/O 类</h3><p>System.IO 命名空间中包含了各种用于文件操作的类，例如文件的创建、删除、读取、写入等等。如下表中所示：</p><table><thead><tr><th>I/O 类</th><th>描述</th></tr></thead><tbody><tr><td>BinaryReader</td><td>从二进制流中读取原始数据</td></tr><tr><td>BinaryWriter</td><td>以二进制格式写入原始数据</td></tr><tr><td>BufferedStream</td><td>临时存储字节流</td></tr><tr><td>Directory</td><td>对目录进行复制、移动、重命名、创建和删除等操作</td></tr><tr><td>DirectoryInfo</td><td>用于对目录执行操作</td></tr><tr><td>DriveInfo</td><td>获取驱动器的信息</td></tr><tr><td>File</td><td>对文件进行操作</td></tr><tr><td>FileInfo</td><td>用于对文件执行操作</td></tr><tr><td>FileStream</td><td>用于文件中任何位置的读写</td></tr><tr><td>MemoryStream</td><td>用于随机访问存储在内存中的数据流</td></tr><tr><td>Path</td><td>对路径信息执行操作</td></tr><tr><td>StreamReader</td><td>用于从字节流中读取字符</td></tr><tr><td>StreamWriter</td><td>用于向一个流中写入字符</td></tr><tr><td>StringReader</td><td>用于从字符串缓冲区读取数据</td></tr><tr><td>StringWriter</td><td>用于向字符串缓冲区写入数据</td></tr></tbody></table><h4 id="1）FileStream-类"><a href="#1）FileStream-类" class="headerlink" title="1）FileStream 类"></a>1）FileStream 类</h4><p>FileStream 类在 System.IO 命名空间下，使用它可以读取、写入和关闭文件。创建 FileStream 类对象的语法格式如下所示：</p><pre class="line-numbers language-none"><code class="language-none">FileStream &lt;object_name&gt; &#x3D; new FileStream(&lt;file_name&gt;, &lt;FileMode Enumerator&gt;, &lt;FileAccess Enumerator&gt;, &lt;FileShare Enumerator&gt;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明如下：</p><ul><li>object_name：创建的对象名称；</li><li>file_name：文件的路径（包含文件名在内）；</li><li>FileMode：枚举类型，用来设定文件的打开方式，可选值如下：<ul><li>Append：打开一个已有的文件，并将光标放置在文件的末尾。如果文件不存在，则创建文件；</li><li>Create：创建一个新的文件，如果文件已存在，则将旧文件删除，然后创建新文件；</li><li>CreateNew：创建一个新的文件，如果文件已存在，则抛出异常；</li><li>Open：打开一个已有的文件，如果文件不存在，则抛出异常；</li><li>OpenOrCreate：打开一个已有的文件，如果文件不存在，则创建一个新的文件并打开；</li><li>Truncate：打开一个已有的文件，然后将文件清空（删除原有内容），如果文件不存在，则抛出异常。</li></ul></li><li>FileAccess：枚举类型，用来设置文件的存取，可选值有 Read、ReadWrite 和 Write；</li><li>FileShare：枚举类型，用来设置文件的权限，可选值如下：<ul><li>Inheritable：允许子进程继承文件句柄，Win32 不直接支持此功能；</li><li>None：在文件关闭前拒绝共享当前文件，打开该文件的任何请求（由此进程或另一进程发出的请求）都将失败；</li><li>Read：允许随后打开文件读取，如果未指定此标志，则文件关闭前，任何打开该文件以进行读取的请求都将失败，需要注意的是，即使指定了此标志，仍需要附加权限才能够访问该文件；</li><li>ReadWrite：允许随后打开文件读取或写入，如果未指定此标志，则文件关闭前，任何打开该文件以进行读取或写入的请求都将失败，需要注意的是，即使指定了此标志，仍需要附加权限才能够访问该文件；</li><li>Write：允许随后打开文件写入，如果未指定此标志，则文件关闭前，任何打开该文件以进行写入的请求都将失败，需要注意的是，即使指定了此标志，仍可能需要附加权限才能够访问该文件；</li><li>Delete：允许随后删除文件。</li></ul></li></ul><p>例如，我们创建一个 FileStream 对象 F 来读取一个名为 sample.txt 的文件，示例代码如下所示：</p><pre class="line-numbers language-none"><code class="language-none">FileStream F &#x3D; new FileStream(&quot;sample.txt&quot;, FileMode.Open, FileAccess.Read, FileShare.Read);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>FileStream 类中的常用方法如下所示：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Close()</td><td>关闭当前流并释放与之关联的所有资源（如套接字和文件句柄）</td></tr><tr><td>CopyTo(Stream)</td><td>从当前流中读取字节并将其写入到另一流中</td></tr><tr><td>Dispose()</td><td>释放由 Stream 使用的所有资源</td></tr><tr><td>Equals(Object)</td><td>判断指定对象是否等于当前对象</td></tr><tr><td>Finalize()</td><td>确保垃圾回收器回收 FileStream 时释放资源并执行其他清理操作</td></tr><tr><td>Flush()</td><td>清除此流的缓冲区，使得所有缓冲数据都写入到文件中</td></tr><tr><td>GetHashCode()</td><td>默认哈希函数</td></tr><tr><td>GetType()</td><td>获取当前实例的 Type</td></tr><tr><td>Lock(Int64, Int64)</td><td>防止其他进程读取或写入 FileStream</td></tr><tr><td>Read(Byte[], Int32, Int32)</td><td>从流中读取字节块并将该数据写入给定缓冲区中</td></tr><tr><td>ReadByte()</td><td>从文件中读取一个字节，并将读取位置提升一个字节</td></tr><tr><td>ToString()</td><td>返回表示当前对象的字符串</td></tr><tr><td>Unlock(Int64, Int64)</td><td>允许其他进程访问以前锁定的某个文件的全部或部分</td></tr><tr><td>Write(Byte[], Int32, Int32)</td><td>将字节块写入文件流</td></tr><tr><td>WriteByte(Byte)</td><td>将一个字节写入文件流中的当前位置</td></tr></tbody></table><p>【示例】使用 FileStream 类读取指定的文件：</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using System.IO;&#x2F;&#x2F;System.IO 命名空间中包含了各种用于文件操作的类namespace test1&#123;    class test    &#123;        static void Main(string[] args)        &#123;            FileStream file &#x3D; new FileStream(&quot;test.txt&quot;, FileMode.OpenOrCreate, FileAccess.ReadWrite);                        &#x2F;*            创建一个文件，名为test.txt；            FileMode.OpenOrCreate 打开一个已有的文件，            如果文件不存在，则创建一个新的文件并打开；                        FileAccess.ReadWrite 允许随后打开文件读取或写入，            如果未指定此标志，则文件关闭前，任何打开该文件以进行            读取或写入的请求都将失败，需要注意的是，即使指定了此            标志，仍需要附加权限才能够访问该文件；            *&#x2F;                        for(int i &#x3D; 0; i &lt; 20; i++)            &#123;                file.WriteByte((byte)i);                &#x2F;&#x2F;将一个字节写入文件流中的当前位置                &#x2F;&#x2F;byte为8位无符号整数，即一个字节            &#125;            file.Position &#x3D; 0;            &#x2F;&#x2F;当前FileStream所在的流位置设置为0            for(int i &#x3D; 0; i &lt; 20; i++)            &#123;                Console.Write(file.ReadByte() + &quot; &quot;);                &#x2F;&#x2F;从流中读取字节块并将该数据写入给定缓冲区中            &#125;            file.Close();            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从文件夹中可以看到文件已被创建</p><p><strong>System.IO 命名空间下的 StreamReader 和 StreamWriter 类可以用于文本文件的数据读写。这些类继承自抽象基类 Stream，Stream 类提供了对文件流读写的功能。</strong></p><h3 id="文件流读写"><a href="#文件流读写" class="headerlink" title="文件流读写"></a>文件流读写</h3><h4 id="1）StreamReader"><a href="#1）StreamReader" class="headerlink" title="1）StreamReader"></a>1）StreamReader</h4><p>StreamReader 类继承自抽象基类 TextReader，用来从文件中读取一系列<strong>字符</strong>，下表列出了 StreamReader 类中一些常用的方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public override void Close()</td><td>关闭 StreamReader 对象和基础流，并释放任何与之相关的系统资源</td></tr><tr><td>public override int Peek()</td><td>返回下一个可用的字符，但不使用它</td></tr><tr><td>public override int Read()</td><td>从输入流中读取下一个字符，并把字符位置往前移一个字符</td></tr></tbody></table><p>如果想查阅完整的方法列表，可以访问 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.io.streamreader">C# 的官网文档</a>。</p><p>test.txt的内容为123</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;using System.IO;&#x2F;&#x2F;System.IO 命名空间中包含了各种用于文件操作的类namespace test1&#123;    class test    &#123;        static void Main(string[] args)        &#123;            try            &#123;                &#x2F;&#x2F;创建StreamReader类的对象                StreamReader sr &#x3D; new StreamReader(&quot;test.txt&quot;);                string line;                &#x2F;&#x2F;从文件中读取内容                while ((line &#x3D; sr.ReadLine()) !&#x3D; null)                    &#x2F;&#x2F;从当前流中读取一行字符并将数据作为字符串返回                &#123;                    Console.WriteLine(line);                &#125;            &#125;            catch(Exception e)            &#123;                &#x2F;&#x2F;展示出错信息                Console.WriteLine(&quot;无法读取文件&quot;);                Console.WriteLine(e.Message);            &#125;            Console.ReadKey();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2）StreamWriter"><a href="#2）StreamWriter" class="headerlink" title="2）StreamWriter"></a>2）StreamWriter</h4><p>StreamWriter 类同样继承自抽象类 TextWriter，用来向文件中写入一系列<strong>字符</strong>，下表列出了 StreamWriter 类中一些常用的方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public override void Close()</td><td>关闭当前的 StreamWriter 对象和基础流</td></tr><tr><td>public override void Flush()</td><td>清理当前所有的缓冲区，使所有缓冲数据写入基础流</td></tr><tr><td>public virtual void Write(bool value)</td><td>将布尔值的文本表示形式写入文本流</td></tr><tr><td>public override void Write(char value)</td><td>将一个字符写入流</td></tr><tr><td>public virtual void Write(decimal value)</td><td>将一个小数值的文本表示形式写入文本流</td></tr><tr><td>public virtual void Write(double value)</td><td>将一个 8 字节浮点值的文本表示形式写入文本流</td></tr><tr><td>public virtual void Write(int value)</td><td>将一个 4 字节有符号整数的文本表示形式写入文本流</td></tr><tr><td>public override void Write(string value)</td><td>将一个字符串写入文本流</td></tr><tr><td>public virtual void WriteLine()</td><td>将行结束符写入文本流</td></tr></tbody></table><p>完整的方法列表请查阅 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.io.streamwriter">C# 的官方文档</a>。</p><h3 id="二进制文件读写"><a href="#二进制文件读写" class="headerlink" title="二进制文件读写"></a>二进制文件读写</h3><h4 id="1-BinaryReader-类"><a href="#1-BinaryReader-类" class="headerlink" title="1) BinaryReader 类"></a>1) BinaryReader 类</h4><p>BinaryReader 类用于从文件读取二进制数据，类中的常用方法如下所示：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public override void Close()</td><td>关闭 BinaryReader 对象和基础流</td></tr><tr><td>public virtual int Read()</td><td>从基础流中读取字符，并根据所使用的编码和从流中读取的特定字符，将流的当前位置前移</td></tr><tr><td>public virtual bool ReadBoolean()</td><td>从当前流中读取一个布尔值，并将流的当前位置前移一个字节</td></tr><tr><td>public virtual byte ReadByte()</td><td>从当前流中读取下一个字节，并将流的当前位置前移一个字节</td></tr><tr><td>public virtual byte[] ReadBytes(int count)</td><td>从当前流中读取指定数目的字节到一个字节数组中，并将流的当前位置前移指定数目的字节</td></tr><tr><td>public virtual char ReadChar()</td><td>从当前流中读取下一个字节，并把流的当前位置按照所使用的编码和从流中读取的指定的字符往前移</td></tr><tr><td>public virtual char[] ReadChars(int count)</td><td>从当前流中读取指定数目的字符，并以字符数组的形式返回数据，并把流的当前位置按照所使用的编码和从流中读取的指定的字符往前移</td></tr><tr><td>public virtual double ReadDouble()</td><td>从当前流中读取一个 8 字节浮点值，并把流的当前位置前移八个字节</td></tr><tr><td>public virtual int ReadInt32()</td><td>从当前流中读取一个 4 字节有符号整数，并把流的当前位置前移四个字节</td></tr><tr><td>public virtual string ReadString()</td><td>从当前流中读取一个字符串，字符串以长度作为前缀，同时编码为一个七位的整数</td></tr></tbody></table><p>完整的方法列表请查阅 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.io.binaryreader">C# 的官方文档</a>。</p><h4 id="2-BinaryWriter-类"><a href="#2-BinaryWriter-类" class="headerlink" title="2) BinaryWriter 类"></a>2) BinaryWriter 类</h4><p>BinaryWriter 类用于向文件写入二进制数据，类中的常用方法如下表所示：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public override void Close()</td><td>关闭 BinaryWriter 对象和基础流</td></tr><tr><td>public virtual void Flush()</td><td>清理当前编写器的所有缓冲区，使得所有缓冲数据写入基础设备</td></tr><tr><td>public virtual long Seek(int offset,SeekOrigin origin)</td><td>设置当前流中的位置</td></tr><tr><td>public virtual void Write(bool value)</td><td>将一个字节的布尔值写入到当前流中，0 表示 false，1 表示 true</td></tr><tr><td>public virtual void Write(byte value)</td><td>将一个无符号字节写入到当前流中，并把流的位置前移一个字节</td></tr><tr><td>public virtual void Write(byte[] buffer)</td><td>将一个字节数组写入到基础流中</td></tr><tr><td>public virtual void Write(char ch)</td><td>将一个 Unicode 字符写入到当前流中，并把流的当前位置按照所使用的编码和要写入到流中的指定字符往前移</td></tr><tr><td>public virtual void Write(char[] chars)</td><td>将一个字符数组写入到当前流中，并把流的当前位置按照所使用的编码和要写入到流中的指定字符往前移</td></tr><tr><td>public virtual void Write(double value)</td><td>将一个 8 字节浮点值写入到当前流中，并把流位置前移八个字节</td></tr><tr><td>public virtual void Write(int value)</td><td>将一个 4 字节有符号整数写入到当前流中，并把流位置前移四个字节</td></tr><tr><td>public virtual void Write(string value)</td><td>将一个有长度前缀的字符串按 BinaryWriter 的当前编码写如到流中，并把流的当前位置按照所使用的编码和要写入到流中的指定字符往前移</td></tr></tbody></table><p>完整的方法列表请查阅 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.io.binarywriter">C# 的官方文档</a>。</p><p>【示例】下面通过示例演示二进制文件的读取和写入：</p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">B b &#x3D; new B();A a &#x3D; new A(b); &#x2F;&#x2F;这和 A a&#x3D;new A(new B())一样class A&#123;&#x2F;&#x2F;在A中有这样一个有构造函数    public A(B b)&#123;    ...    &#125;&#125;class B&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录下自己搭建博客的过程和注意事项</title>
      <link href="/2022/01/23/%E8%AE%B0%E5%BD%95%E4%B8%8B%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2022/01/23/%E8%AE%B0%E5%BD%95%E4%B8%8B%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>自己搭建此博客花了很长，前前后后也踩了不少坑。采用的是hexo框架+matery主题，编写文章采用的是typora，记录下主要的过程和注意事项。</p><h2 id="2、博客环境搭建"><a href="#2、博客环境搭建" class="headerlink" title="2、博客环境搭建"></a>2、博客环境搭建</h2><p> Hexo 是一个静态博客框架，基于 Node.js，将 Markdown 文章通过渲染引擎，生成一个静态网页，再结合 Git 命令（ssh），Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="1-下载-Git-与Node-js"><a href="#1-下载-Git-与Node-js" class="headerlink" title="1.下载 Git 与Node.js"></a>1.下载 Git 与Node.js</h3><p>Node官网链接：<a href="https://nodejs.org/en/download/">Node.js 官网</a> </p><p>Git官网链接：<a href="https://gitit-scm.com/">Git 官网</a> </p><ul><li>验证安装，并测试 Node.js 和Git是否加入环境变量，当出现如下图的情况，Node.js 安装大功告成。</li></ul><pre class="line-numbers language-none"><code class="language-none">node -vgit --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>**注意： 如果报错的话，那么手动将 Node.js和Git 的安装路径添加到环境变量中，右击点击我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量，在系统变量下找到名为 path 的变量名，如下图：</p><pre class="line-numbers language-none"><code class="language-none">E:\node-v12.19.0-win-x64C:\Program Files\Git\bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-GitHub-账号的创建以及-Git-的配置"><a href="#2-GitHub-账号的创建以及-Git-的配置" class="headerlink" title="2. GitHub 账号的创建以及 Git 的配置"></a>2. GitHub 账号的创建以及 Git 的配置</h3><p> <strong>2.1 GitHub 账号的创建</strong></p><p> GitHub 账号的创建比较简单，网上也有许多教程，此处便不再赘述</p><p> <strong>2.2 Git 的配置</strong></p><ul><li><p><strong>配置Git 用户名和邮箱</strong></p><p>在桌面点击鼠标右键，点击 Git Bash Here，然后分别输入下面的两个命令，并回车：</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;此处填写你注册时的用户名&quot;git config --global user.email &quot;此处填写你注册时的邮箱&quot;# 一般只要不报错，可以跳过下面寻找.gitconfig文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p> 然后找到<code>.gitconfig</code> 文件，文件存放位置在 <code>C:/Users/[username]/.gitconfig</code>（未找到的话，请开启显示隐藏文件的功能），用编辑器打开，看到如下图所示的内容，即配置成功！</p><pre class="line-numbers language-none"><code class="language-none">[user]name &#x3D; xxxemail &#x3D; xxx@xxx.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>配置GitHub</strong></p><p><strong>创建：</strong></p><ul><li>新建一个名为你的用户名.github.io的仓库</li><li>比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://test.github.io/">http://test.github.io</a> 了，是不是很方便？由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。</li></ul><p><strong>注意：</strong></p><ul><li>注册的邮箱一定要验证，否则不会成功；</li><li>仓库名字必须是：username.github.io，其中username是你的用户名；</li><li>仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久；</li><li>创建页面如下：</li></ul><p><img src="/images/%E8%AE%B0%E5%BD%95%E4%B8%8B%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/1.jpg"></p><p><strong>在github上创建仓库</strong></p></li><li><p><strong>配置SSH 免密登录</strong></p><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。</p><p><strong>简单的来说就是给予你当前电脑访问你GitHub 仓库的权限 ~</strong></p><p><strong>操作步骤</strong></p></li></ul><ol><li><p>在 git bash here 中创建一个ssh密钥</p><p> 指令：<code>cd ~/.ssh</code></p><p>如果本地有的话，它会自动进入到了ssh目录下；</p><p> 若没有则创建： <code>ssh-keygen -t rsa -C &quot;邮箱&quot;</code> 此处邮箱填写自己的邮箱</p><p>然后enter三连</p><p>生成两个文件： id_rsa id_rsa.pub 存放在 C:\Users\admin.ssh 文件夹下</p><p><strong>注意：pub文件放置的，就是我们的公开的ssh码，也是给管理员这个ssh，让他来添加</strong></p></li><li><p>在GitHub 或者 Gitee 上添加 SSH key</p><p>Title：随意填写</p><p>Key：将本地的id_rsa.pub文件用记事本打开，复制全部内容粘贴到GitHub 仓库的SSH Keys 位置</p><p>如下图所示：</p><p><img src="/images/%E8%AE%B0%E5%BD%95%E4%B8%8B%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/2.jpg"></p><p><strong>添加密钥到github</strong></p></li></ol><p><strong>至此，你的全部环境均以搭建好，接下来让我们快速开始搭建博客吧 ~</strong></p><h2 id="3、本地安装-Hexo-博客框架并推送到-GitHub"><a href="#3、本地安装-Hexo-博客框架并推送到-GitHub" class="headerlink" title="3、本地安装 Hexo 博客框架并推送到 GitHub"></a>3、本地安装 Hexo 博客框架并推送到 GitHub</h2><h3 id="3-1-博客初始化"><a href="#3-1-博客初始化" class="headerlink" title="3.1 博客初始化"></a>3.1 博客初始化</h3><ol><li><p>命令行安装cnpm （加速以后的插件下载，建议git bash here 处安装）</p><p>命令：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p>安装后验证：<code>cnpm -v</code> 出现版本号说明安装成功</p></li><li><p>命令行安装hexo （安装博客框架）</p><p>命令：<code>cnpm install -g hexo-cli</code></p><p>安装后验证：<code>hexo -v</code> 出现版本号说明安装成功</p></li><li><p>在电脑的某个地方新建一个名为HexoData的文件夹（名字可以随便取），比如我的是<code>D:\JAVA项目\HexoData</code></p><p>这个文件夹将来就作为你存放代码的地方，所以最好不要随便放</p></li><li><p>在D:\JAVA项目\HexoData 文件夹下右键打开 Git Bash</p><p>并依次执行以下命令</p><p><code>hexo init</code> 初始化命令，hexo会自动下载一些文件到这个目录，包括node_modules等</p><p><code>hexo g</code> 生成命令</p><p><code>hexo s</code> 启动服务</p><p><strong>说明：</strong><code>hexo s</code> 是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到内容，说明博客初始化以及成功！</p><p>很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，</p><p>因为4000这个端口太常见了， 只需要关闭4000端口并重新启动即可</p><p><strong>到此博客的初始化便完成了，此时你可以本地开启服务并访问，下一步便是推送到GitHub 上！</strong></p></li></ol><p><strong>3.2 将博客部署到 github 个人主页上</strong></p><ul><li><p>第一步：在D:\JAVA项目\HexoData目录下安装 hexo-deployer-git 插件 （git bash here 处安装）</p><p>命令：<code>npm install hexo-deployer-git --save</code></p><p>说明：必须安装，否则执行hexo d 的话会报错</p></li><li><p>第二步：编辑D:\JAVA项目\HexoData目录下的 _config.yml 文件, 在文件末尾修改配置文件：</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repo: github上对应仓库的ssh 链接      &#x2F;&#x2F;也可使用https地址，如：https:&#x2F;&#x2F;github.com&#x2F;Github用户名&#x2F;Github用户名.github.io.git              branch: main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明：</strong>仓库的ssh链接如下</p><p><img src="/images/%E8%AE%B0%E5%BD%95%E4%B8%8B%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/2.jpg"></p><p><strong>SSH链接</strong></p><p><strong>切记：分支branch切记修改为 main，之前github的默认主分支为master，现已经改为main</strong> ！！！</p></li><li><p>第三步：在D:\JAVA项目\HexoData目录下, 将本地 blog 推送到 github仓库</p><p>输入命令：<code>hexo d</code></p><p>也可能需要输入 username &amp; pwd</p><p>推送成功后, 在浏览器中输入对应域名, 即可访问 <a href="https://motherkillermaker.github.io/">https://motherkillermaker.github.io/</a></p><p><strong>至此，你便初步搭建好了一个属于自己的博客！（本地服务不用启动依然可以访问）</strong></p><p><strong>下一步便是进行博客的美化 ~</strong></p><p><strong>此处附加上 hexo 框架常用的指令：</strong></p><table><thead><tr><th align="left">指令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>hexo clean &amp;&amp; hexo g</code></td><td align="left">清除本地项目并重新生成 （重新部署时使用）</td></tr><tr><td align="left"><code>hexo g</code></td><td align="left">重新生成</td></tr><tr><td align="left"><code>Hexo s</code></td><td align="left">开启本地预览</td></tr><tr><td align="left"><code>Hexo d</code></td><td align="left">推送到github</td></tr></tbody></table></li></ul><h2 id="4、hexo-博客的主题安装以及个性化修改"><a href="#4、hexo-博客的主题安装以及个性化修改" class="headerlink" title="4、hexo 博客的主题安装以及个性化修改"></a>4、hexo 博客的主题安装以及个性化修改</h2><h3 id="4-1-主题下载与安装"><a href="#4-1-主题下载与安装" class="headerlink" title="4.1 主题下载与安装"></a>4.1 主题下载与安装</h3><p> 点击 <a href="https://github.com/blinkfox/hexo-theme-matery">传送门</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的站点目录文件夹下使用 <code>git clone</code> 命令来下载（推荐）：</p><p> 直接在..\博客主目录\themes目录下执行下面的命令（git bash here 处）：</p><p> <code>git clone git@github.com:blinkfox/hexo-theme-matery.git</code> 下载完成后便可看到对应的主题文件</p><h3 id="4-2-主题的配置与使用"><a href="#4-2-主题的配置与使用" class="headerlink" title="4.2 主题的配置与使用"></a>4.2 主题的配置与使用</h3><h4 id="4-2-1-切换主题"><a href="#4-2-1-切换主题" class="headerlink" title="4.2.1 切换主题"></a>4.2.1 切换主题</h4><p><strong>注意：</strong>首先需要明白什么是站点配置文件，什么是主题配置文件。</p><p>站点配置文件就是根目录下的配置文件，比如我的博客文件在 <code>..\博客主目录</code> 下，那么站点配置文件就是 <code>D:\JAVA项目\HexoData\_config.yml</code>，</p><p>主题配置文件就是 <code>D:\JAVA项目\HexoData\themes\hexo-theme-matery\_config.yml</code>。</p><p>另外注意，配置文件中的标点符号不要出现中文格式的标点符号，不然运行会出错。</p><p>主题下载完成后，将站点配置文件中的 <code>theme</code> 值修改为你下载主题的文件名，此处为 <code>hexo-theme-matery</code>，那么值就修改为 <code>theme: hexo-theme-matery</code></p><p>一些站点配置文件的其他地方的修改：</p><ul><li>语言选择：如果为中文用户，则在 <code>language:</code> 后添加值 <code>zh-CN</code>，如果不修改，默认为英语；</li><li>网址修改：<code>url:</code> 的值为你的网址名，如 <code>http://xxxx.github.io</code>，如果有域名，则修改为你的域名即可;</li><li>站点配置文件有个 <code>per_page属性</code>，建议修改为 6 的倍数，这样网站在适应设备时，有较好的显示效果。</li></ul><h4 id="4-2-2-创建标签页面-（首页的标签选项"><a href="#4-2-2-创建标签页面-（首页的标签选项" class="headerlink" title="4.2.2 创建标签页面 （首页的标签选项"></a>4.2.2 创建标签页面 （首页的标签选项</h4><ul><li><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下（source目录下 右键 git bash here）：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;tags&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p></li></ul><pre class="line-numbers language-none"><code class="language-none">---title: tagsdate: 2018-09-30 18:23:38type: &quot;tags&quot;layout: &quot;tags&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code>文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;categories&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: categoriesdate: 2018-09-30 17:25:30type: &quot;categories&quot;layout: &quot;categories&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</li></ul><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;about&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: aboutdate: 2018-09-30 17:25:30type: &quot;about&quot;layout: &quot;about&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</li></ul><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;contact&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: contactdate: 2018-09-30 17:25:30type: &quot;contact&quot;layout: &quot;contact&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的 “<strong>菜单</strong>” 配置，取消关于留言板的注释即可。</p><h4 id="4-2-3-添加emoji表情支持"><a href="#4-2-3-添加emoji表情支持" class="headerlink" title="4.2.3 添加emoji表情支持"></a>4.2.3 添加emoji表情支持</h4><p>安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-none"><code class="language-none">ithubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用 <code>emoji</code> 语法写的表情了。</p><h4 id="4-2-4-代码高亮"><a href="#4-2-4-代码高亮" class="headerlink" title="4.2.4 代码高亮"></a>4.2.4 代码高亮</h4><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，matery主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&#123;</code> 和 <code>&#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="line-numbers language-none"><code class="language-none">highlight:  enable: false  line_number: true  auto_detect: false  tab_replace: &#39;&#39;  wrap: true  hljs: falseprismjs:  enable: true  preprocess: true  line_number: true  tab_replace: &#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而我之前就是因为安装了<code>hexo-prism-plugin</code>导致了一系列的问题，所以如果安装了<code>hexo-prism-plugin</code>，务必先删干净了</p><h4 id="4-2-5-开启主页搜索功能"><a href="#4-2-5-开启主页搜索功能" class="headerlink" title="4.2.5 开启主页搜索功能"></a>4.2.5 开启主页搜索功能</h4><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-none"><code class="language-none">search:  path: search.xml  field: post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-2-6-开启中文链接转拼音功能"><a href="#4-2-6-开启中文链接转拼音功能" class="headerlink" title="4.2.6 开启中文链接转拼音功能"></a>4.2.6 开启中文链接转拼音功能</h4><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-none"><code class="language-none">permalink_pinyin:  enable: true  separator: &#39;-&#39; # default: &#39;-&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p><h4 id="4-2-7-开启文章字数统计插件"><a href="#4-2-7-开启文章字数统计插件" class="headerlink" title="4.2.7 开启文章字数统计插件"></a>4.2.7 开启文章字数统计插件</h4><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a> 插件。</p><p>安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p><pre class="line-numbers language-none"><code class="language-none">wordCount:  enable: false # 将这个值设置为 true 即可.  postWordCount: true  min2read: true  totalCount: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-8-修改页脚"><a href="#4-2-8-修改页脚" class="headerlink" title="4.2.8 修改页脚"></a>4.2.8 修改页脚</h4><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h4 id="4-2-9-新增和修改社交链接"><a href="#4-2-9-新增和修改社交链接" class="headerlink" title="4.2.9 新增和修改社交链接"></a>4.2.9 新增和修改社交链接</h4><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><p>新增我的CSDN链接</p><pre class="line-numbers language-none"><code class="language-none">&lt;% if (theme.socialLink.csdn) &#123; %&gt;    &lt;a href&#x3D;&quot;&lt;%&#x3D; theme.socialLink.csdn %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;关注我的CSDN: &lt;%&#x3D; theme.socialLink.csdn %&gt;&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fab fa-csdn&quot;&gt;CSDN&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着你需要在主题配置文件下新增CSDN链接</p><pre class="line-numbers language-none"><code class="language-none">socialLink:  qq: 624597867  weixin: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;Yafine-imgs&#x2F;images&#x2F;wechat.png  github:   email:   facebook: # https:&#x2F;&#x2F;www.facebook.com&#x2F;xxx  twitter: # https:&#x2F;&#x2F;twitter.com&#x2F;xxx  weibo: # https:&#x2F;&#x2F;weibo.com&#x2F;xxx  csdn: https:&#x2F;&#x2F;blog.csdn.net&#x2F;victoryxa  # 新增CSDN链接 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-10-添加评论系统"><a href="#4-2-10-添加评论系统" class="headerlink" title="4.2.10 添加评论系统"></a>4.2.10 添加评论系统</h4><p>首先去<a href="https://livere.com/">来必力官网</a>，点击导航栏上的安装，会出现如下图的页面：</p><ul><li><p>City 版：是一款适合所有人使用的免费版本；</p></li><li><p>Premium 版：是一款能够帮助企业实现自动化管理的多功能收费版本。</p><p><img src="/images/%E8%AE%B0%E5%BD%95%E4%B8%8B%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/20200115142313.png"></p><p>注册完之后，会提示你填写网站的相关信息，如网站链接，网站名称等等，填写完毕之后，会给你一段代码，如下图所示:</p><p><img src="/images/%E8%AE%B0%E5%BD%95%E4%B8%8B%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/image-20200115142709585.png"></p><pre class="line-numbers language-none"><code class="language-none"># Livere comment configuration, the default is not activated# Livere 来必力评论模块的配置，默认为不激活livere:  enable: true   # true即为开启评论系统  uid: #这里填写你的uid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>然后在<strong>主题配置文件</strong>相关的部署命令，然后查看效果即可。</p><h3 id="4-3-自定义修改"><a href="#4-3-自定义修改" class="headerlink" title="4.3 自定义修改"></a>4.3 自定义修改</h3><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h4 id="4-3-1-修改主题颜色"><a href="#4-3-1-修改主题颜色" class="headerlink" title="4.3.1 修改主题颜色"></a>4.3.1 修改主题颜色</h4><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. *&#x2F;.bg-color &#123;    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);&#125;&#x2F;*如果想去掉banner图的颜色渐变效果，请将以下的css属性注释掉或者删除掉即可*&#x2F;@-webkit-keyframes rainbow &#123;   &#x2F;* 动态切换背景颜色. *&#x2F;&#125;@keyframes rainbow &#123;    &#x2F;* 动态切换背景颜色. *&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Tips：建议使用第三方工具（如IDE）打开css文件，使用查找功能（ctrl + f）来快速定位</strong></p><h4 id="4-3-2-修改banner图和文章特色图"><a href="#4-3-2-修改banner图和文章特色图" class="headerlink" title="4.3.2 修改banner图和文章特色图"></a>4.3.2 修改banner图和文章特色图</h4><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 `` 代码中：</p><pre class="line-numbers language-none"><code class="language-none">$(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(&#x2F;medias&#x2F;banner&#x2F;&#39; + new Date().getDay() + &#39;.jpg)&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明： banner图即为你博客主页所显示的图片 （默认为 <code>0.jpg</code> ）</p><h4 id="4-3-3-修改网站上的相关信息"><a href="#4-3-3-修改网站上的相关信息" class="headerlink" title="4.3.3 修改网站上的相关信息"></a>4.3.3 修改网站上的相关信息</h4><p>首先看图：</p><p><img src="/images/%E8%AE%B0%E5%BD%95%E4%B8%8B%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/20200115115221.png"></p><p>相关配置信息如下：</p><pre class="line-numbers language-none"><code class="language-none">#这是根目录下的配置文件信息title: 过客~励む   #这是网站标题subtitle: 励む     #这是网站副标题subtitler# 下面两个description,keywords，需要填上，如果想让搜索引擎收录，这个做SEO优化必不可忽视的两个属性description: 专注于Web,分享生活,分享知识  #网站描述keywords: [HTML, CSS, JavaScript, JQuery, React, Vue.js等]   #网站的关键词author: YangAir    #作者，文章版权所显示的language: zh-CN     #网站语言，不填写，默认为英文timezone:      #时区，可以不填写# 这是主题配置文件的相关信息# 配置网站favicon和网站LOGO# 此处我用的CDN，也可以使用本地文件favicon: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;cdn@3.3.4&#x2F;source&#x2F;favicon.pnglogo: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;cdn@3.3.4&#x2F;source&#x2F;logo.png# 网站副标题，打字效果# 如果有符号 ‘ ，请在 ’ 前面加上 \subtitle:   enable: true  loop: true # 是否循环  showCursor: true # 是否显示光标  startDelay: 300 # 开始延迟  typeSpeed: 100 # 打字速度  backSpeed: 50 # 删除速度  sub1: 志之所向，金石为开，谁能御之？  sub2: 花开不是为了花落，而是为了开的更加灿烂。  sub3: 没有伞的孩子必须努力奔跑！  sub4: 欲望以提升热忱，毅力以磨平高山。  sub5: 如果放弃太早，你永远都不知道自己会错过什么。  sub6: 没有礁石，就没有美丽的浪花；没有挫折，就没有壮丽的人生。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><p>网站打字效果副标题默认有两个，即 <code>sub1</code> 和 <code>sub2</code>，如果想写多个，则需要修改两处地方，首先修改配置文件，如上面所示，在 <code>sub1</code> 和 <code>sub2</code> 后面继续添加即可，然后在去主题目录下的 <code>layout</code> 文件夹下的<code>_partial</code> 文件夹，修改 <code>bg-cover-content.ejs</code> 文件，大约在 12 行左右，如下面所示：</p><pre class="line-numbers language-none"><code class="language-none"> &lt;div class&#x3D;&quot;description center-align&quot;&gt;     &lt;% if (theme.subtitle.enable) &#123; %&gt;         &lt;span id&#x3D;&quot;subtitle&quot;&gt;&lt;&#x2F;span&gt;         &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;typed.js@2.0.11&quot;&gt;&lt;&#x2F;script&gt;        &lt;script&gt;            var typed &#x3D; new Typed(&quot;#subtitle&quot;, &#123;                strings: [&#39;&lt;%&#x3D; theme.subtitle.sub1 %&gt;&#39;,                          &#39;&lt;%&#x3D; theme.subtitle.sub2 %&gt;&#39;,                          &#39;&lt;%&#x3D; theme.subtitle.sub3 %&gt;&#39;,                          &#39;&lt;%&#x3D; theme.subtitle.sub4 %&gt;&#39;,                          &#39;&lt;%&#x3D; theme.subtitle.sub5 %&gt;&#39;,                          &#39;&lt;%&#x3D; theme.subtitle.sub6 %&gt;&#39;],                 startDelay: &lt;%&#x3D; theme.subtitle.startDelay %&gt;,                 typeSpeed: &lt;%&#x3D; theme.subtitle.typeSpeed %&gt;,                 loop: &lt;%&#x3D; theme.subtitle.loop %&gt;,                    backSpeed: &lt;%&#x3D; theme.subtitle.backSpeed %&gt;,                 showCursor: &lt;%&#x3D; theme.subtitle.showCursor %&gt;              &#125;);          &lt;&#x2F;script&gt;      &lt;% &#125; else &#123; %&gt;            &lt;%&#x3D; config.description %&gt;      &lt;% &#125; %&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-4-在关于我页面添加个人简历"><a href="#4-3-4-在关于我页面添加个人简历" class="headerlink" title="4.3.4 在关于我页面添加个人简历"></a>4.3.4 在关于我页面添加个人简历</h4><p>打开 <code>theme/matery/layout/about.ejs</code> 文件，大约在 13 行。有一个 `` 标签，找出其对应结尾的标签，大约在 61 行左右，然后在新增如下代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;card&quot;&gt;     &lt;div class&#x3D;&quot;card-content&quot;&gt;         &lt;div class&#x3D;&quot;card-content article-card-content&quot;&gt;             &lt;div class&#x3D;&quot;title center-align&quot; data-aos&#x3D;&quot;zoom-in-up&quot;&gt;                 &lt;i class&#x3D;&quot;fa fa-address-book&quot;&gt;&lt;&#x2F;i&gt;&amp;nbsp;&amp;nbsp;&lt;%- __(&#39;个人简历&#39;) %&gt;              &lt;&#x2F;div&gt;                 &lt;div id&#x3D;&quot;articleContent&quot; data-aos&#x3D;&quot;fade-up&quot;&gt;                     &lt;%- page.content %&gt;                 &lt;&#x2F;div&gt;           &lt;&#x2F;div&gt;      &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意粘贴的位置和空格要正确，这里的位置随你自己设置，你也可以把简历作为第一个 card，然后 <code>/source/about/index.md</code> 下面写上你的简历了（就像写博客一样）。</p><h2 id="5、博客的编写以及推送"><a href="#5、博客的编写以及推送" class="headerlink" title="5、博客的编写以及推送"></a>5、博客的编写以及推送</h2><ul><li>第一步：创建<code>.md</code>文件</li></ul><p>方法1：定位到我们的hexo根目录，Git Bash Here 中执行命令：</p><p><code>hexo new &#39;my-first-blog&#39;</code> 其中引号内为文章名称</p><p>hexo会帮我们在<code>D:\JAVA项目\HexoData\source\_posts</code> 下生成相关.md文件，用这个命令的好处是帮我们自动生成了时间，方法1默认生成如下内容：</p><pre class="line-numbers language-none"><code class="language-none">title: my-first-blotdate: 2021-11-29 18:21:30tags:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>方法2：当然你也可以直接自己打开<code>D:\JAVA项目\HexoData\source\_posts</code> 目录新建<code>.md</code>文件</p><ul><li><p>第二步：编写并保存</p><p>我们只需要用typora打开这个文件就可以开始写博客了，写完后Ctrl+S 保存关闭即可</p></li><li><p>第三步：清理然后再生成一下，生成后推送到远程仓库即可，hexo根目录下右键Git Bash Here 中依次输入如下命令：</p><pre class="line-numbers language-none"><code class="language-none">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>补充：<code>hexo new page &#39;postName&#39;</code>命令和<code>hexo new &#39;postName&#39;</code>的区别？</strong></p></li></ul><p> <code>hexo new page &#39;My-second-blog&#39;</code>最终部署时生成：<code>hexo\public\my-second-blog\index.html</code>，但是它不会作为文章出现在博文目录。</p><p><strong>Matery的文章语法介绍</strong></p><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><h2 id="6、其他注意事项"><a href="#6、其他注意事项" class="headerlink" title="6、其他注意事项"></a>6、其他注意事项</h2><h3 id="6-1-关于使用typora-hexo在博客中插入图片"><a href="#6-1-关于使用typora-hexo在博客中插入图片" class="headerlink" title="6.1 关于使用typora+hexo在博客中插入图片"></a>6.1 关于使用typora+hexo在博客中插入图片</h3><p><font color="red">需要注意的是，每次在插入图片前都需要将图片根目录需要改为hexo/source，打开typora默认的图片根目录为自己打开文件的目录，这是我多次尝试发现的，可能不对</font></p><p>关于图片和图片路径的设置，有以下教程。</p><p>事先声明，所有博客文件均保存在 <code>hexo/_posts/</code>文件夹下</p><p>首先在 <code>hexo &gt; source</code>目录下建一个文件夹叫images，用来保存博客中的图片。</p><p>然后打开Typora的 <code>文件 &gt; 偏好设置</code>，进行如下设置。</p><p><img src="/images/%E8%AE%B0%E5%BD%95%E4%B8%8B%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyNjIzMzYz,size_16,color_FFFFFF,t_70.png"></p><p>这样的话所有的博客中的图片都将会保存到 <code>/source/images/该博客md文件名/图片名称</code></p><p>但是仅仅这样设置还不够，这样设置在typora中倒是能看图片了，但是使用的却是相对于当前md文件的相对路径，可是如果启动hexo，是要用服务器访问的，而服务器显然无法根据这个相对路径正确访问到图片，因此还需要在typora中进行进一步设置。</p><p>在typora菜单栏点击 <code>格式-&gt;图像-&gt;设置图片根目录</code>，将<code>hexo/source</code>作为其根目录即可。</p><p>转自：<a href="https://www.cnblogs.com/yinyoupoet/p/13287385.html">https://www.cnblogs.com/yinyoupoet/p/13287385.html</a></p><h3 id="6-2-关于代码高亮的补充"><a href="#6-2-关于代码高亮的补充" class="headerlink" title="6.2 关于代码高亮的补充"></a>6.2 关于代码高亮的补充</h3><p>如果觉得不够的话，可以自行去官网下载，然后替换主题目录下的prism.css文件即可</p><p>例如我的prism.css在这个文件夹下</p><pre class="line-numbers language-none"><code class="language-none">H:\8yyy&#39;s blog\themes\hexo-theme-matery\source\libs\prism<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://prismjs.com/download.html#themes=prism&amp;languages=markup+css+clike+javascript">https://prismjs.com/download.html#themes=prism&amp;languages=markup+css+clike+javascript</a></p><h4 id="6-2-1-关于C-代码的代码高亮"><a href="#6-2-1-关于C-代码的代码高亮" class="headerlink" title="6.2.1 关于C#代码的代码高亮"></a>6.2.1 关于C#代码的代码高亮</h4><p>经过多次尝试，在该主题下只能使用csharp进行代码高亮，不能选择c#</p><h3 id="6-3-关于hexo的降级操作"><a href="#6-3-关于hexo的降级操作" class="headerlink" title="6.3 关于hexo的降级操作"></a>6.3 关于hexo的降级操作</h3><p>如果有需要的话，首先卸载当前版本的hexo</p><pre class="line-numbers language-none"><code class="language-none">npm uninstall hexo --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载旧版本的hexo，例如hexo4.2.0</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo@4.2.0 --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-4-matery主题似乎不支持-一级标题"><a href="#6-4-matery主题似乎不支持-一级标题" class="headerlink" title="6.4 matery主题似乎不支持# 一级标题"></a>6.4 matery主题似乎不支持# 一级标题</h3><p>我试了很久似乎都不行，左侧的目录不显示，当然目录很可能就是一级标题，可用</p><pre class="line-numbers language-none"><code class="language-none">## 二级标题### 三级标题#### 四级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2022-10-4更新 在主题下根目录_config.yml中的文章toc功能，可修改支持的标题（hoc –&gt; heading），默认就是我试出来的h2,h3,h4</p><h3 id="6-5-代码块不能使用有序-无序列表"><a href="#6-5-代码块不能使用有序-无序列表" class="headerlink" title="6.5 代码块不能使用有序/无序列表"></a>6.5 代码块不能使用有序/无序列表</h3><p>不然格式会变得非常乱</p><h3 id="6-6-关于matery主题的一些优化"><a href="#6-6-关于matery主题的一些优化" class="headerlink" title="6.6 关于matery主题的一些优化"></a>6.6 关于matery主题的一些优化</h3><h4 id="6-6-1-配置网站favicon和网站LOGO"><a href="#6-6-1-配置网站favicon和网站LOGO" class="headerlink" title="6.6.1 配置网站favicon和网站LOGO"></a>6.6.1 配置网站favicon和网站LOGO</h4><p>需要记住一些配置以便以后的修改</p><p><img src="/images/%E8%AE%B0%E5%BD%95%E4%B8%8B%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/image-20221017205152680.png"></p><p>favicon.png和logo.png的图片规格均为200*200像素</p><h4 id="6-6-2-关于tags的多写"><a href="#6-6-2-关于tags的多写" class="headerlink" title="6.6.2 关于tags的多写"></a>6.6.2 关于tags的多写</h4><p>格式如下</p><pre class="line-numbers language-none"><code class="language-none">tags: - test- light<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>参考文献：</strong></p><ol><li><p><a href="https://yafine-blog.cn/posts/4ab2.html#toc-heading-79">https://yafine-blog.cn/posts/4ab2.html#toc-heading-79</a></p></li><li><p>theme-matery 主题官方使用说明 <a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></p></li><li><p><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p></li><li><p><a href="https://yafine-blog.cn/posts/4ab2.html#toc-heading-79">https://yafine-blog.cn/posts/4ab2.html#toc-heading-79</a></p></li><li><p><a href="https://laughingtiger.gitee.io/2021/11/29/ru-he-kuai-su-da-jian-shu-yu-zi-ji-de-bo-ke/">https://laughingtiger.gitee.io/2021/11/29/ru-he-kuai-su-da-jian-shu-yu-zi-ji-de-bo-ke/</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于Matery主题下代码高亮的总结</title>
      <link href="/2022/01/19/%E5%85%B3%E4%BA%8EMatery%E4%B8%BB%E9%A2%98%E4%B8%8B%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E7%9A%84%E6%80%BB%E7%BB%93/"/>
      <url>/2022/01/19/%E5%85%B3%E4%BA%8EMatery%E4%B8%BB%E9%A2%98%E4%B8%8B%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="测试一"><a href="#测试一" class="headerlink" title="测试一"></a>测试一</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span> </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>     cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试二"><a href="#测试二" class="headerlink" title="测试二"></a>测试二</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">%</span> codeblock Javascript Array Syntax lang<span class="token operator">:</span>js http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>j<span class="token punctuation">.</span>mp<span class="token operator">/</span>pPUUmW <span class="token constant">MDN</span> Documentation <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>arrayLength<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>element0<span class="token punctuation">,</span> element1<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> elementN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endcodeblock <span class="token operator">%</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试三"><a href="#测试三" class="headerlink" title="测试三"></a>测试三</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">%</span> codeblock <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endcodeblock <span class="token operator">%</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="测试四"><a href="#测试四" class="headerlink" title="测试四"></a>测试四</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#123;% codeblock lang:C++ %&#125;#include &lt;bits&#x2F;stdc++.h&gt; int main()&#123;     int a &#x3D; 10;     cout &lt;&lt; a &lt;&lt; endl;&#125;&#123;% endcodeblock %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试五"><a href="#测试五" class="headerlink" title="测试五"></a>测试五</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#123;% codeblock lang:Cpp %&#125;#include &lt;bits&#x2F;stdc++.h&gt; int main()&#123;     int a &#x3D; 10;     cout &lt;&lt; a &lt;&lt; endl;&#125;&#123;% endcodeblock %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试六"><a href="#测试六" class="headerlink" title="测试六"></a>测试六</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#123;% codeblock lang:CPP %&#125;#include &lt;bits&#x2F;stdc++.h&gt; int main()&#123;     int a &#x3D; 10;     cout &lt;&lt; a &lt;&lt; endl;&#125;&#123;% endcodeblock %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试七"><a href="#测试七" class="headerlink" title="测试七"></a>测试七</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">PreparedStatement</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> demo <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from login"</span><span class="token punctuation">;</span>            conn <span class="token operator">=</span> <span class="token class-name">MyJDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",user:"</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",pwd:"</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">MyJDBCUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span>ps<span class="token punctuation">,</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试八"><a href="#测试八" class="headerlink" title="测试八"></a>测试八</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>我的第一个 HTML 页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>body 元素的内容会显示在浏览器中。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>title 元素的内容会显示在浏览器的标题栏中。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试九"><a href="#测试九" class="headerlink" title="测试九"></a>测试九</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span> </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>     cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试十"><a href="#测试十" class="headerlink" title="测试十"></a>测试十</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span> </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>     cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结-重点"><a href="#总结-重点" class="headerlink" title="总结(重点)"></a>总结(重点)</h3><p>源自官方：<a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></p><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&#123;</code> 和 <code>&#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="line-numbers language-none"><code class="language-none">highlight:  enable: false  line_number: true  auto_detect: false  tab_replace: &#39;&#39;  wrap: true  hljs: falseprismjs:  enable: true  preprocess: true  line_number: true  tab_replace: &#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而我之前就是hexo-prism-plugin没卸载干净 除了html js之外的其他语言没法高亮</p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码高亮 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++ vector整理</title>
      <link href="/2022/01/18/c-vector%E6%95%B4%E7%90%86/"/>
      <url>/2022/01/18/c-vector%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="一、vector初始化"><a href="#一、vector初始化" class="headerlink" title="一、vector初始化"></a>一、vector初始化</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*定义了10个整型元素的向量（尖括号中为元素类型名，它可以是任何合法的数据类型），  但没有给出初值，其值是不确定的。*/</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义了10个整型元素的向量,且给出每个元素的初值为1</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">c</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">////用b向量来创建c向量，整体复制性赋值</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">d</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义了d值为b中第0个到第2个（共3个）元素</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>d<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>d<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">e</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>f<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从数组中获得初值</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>e<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>e<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结果如下"><a href="#结果如下" class="headerlink" title="结果如下"></a>结果如下</h4><p><img src="/images/c-vector%E6%95%B4%E7%90%86/image-20220118195338553.png"></p><h3 id="二、一般的操作"><a href="#二、一般的操作" class="headerlink" title="二、一般的操作"></a>二、一般的操作</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">（<span class="token number">1</span>）a<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//b为向量，将b的0~2个元素构成的向量赋给a</span>   （<span class="token number">2</span>）a<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//是a只含4个元素，且每个元素为2</span>   （<span class="token number">3</span>）a<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回a的最后一个元素</span>   （<span class="token number">4</span>）a<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回a的第一个元素</span>   （<span class="token number">5</span>）a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//返回a的第i个元素，当且仅当a[i]存在2013-12-07</span>   （<span class="token number">6</span>）a<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//清空a中的元素</span>   （<span class="token number">7</span>）a<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//判断a是否为空，空则返回ture,不空则返回false</span>   （<span class="token number">8</span>）a<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//删除a向量的最后一个元素</span>   （<span class="token number">9</span>）a<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*删除a中第1个（从第0个算起）到第2个元素，也就是说删除的元素从a.begin()+1算起（包括它）一   直到a.begin()+3（不包括它）*/</span>   （<span class="token number">10</span>）a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在a的最后一个向量后插入一个元素，其值为5</span>   （<span class="token number">11</span>）a<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在a的第1个元素（从第0个算起）的位置插入数值5，如a为1,2,3,4，插入元素后为1,5,2,3,4</span>   （<span class="token number">12</span>）a<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在a的第1个元素（从第0个算起）的位置插入3个数，其值都为5</span>   （<span class="token number">13</span>）a<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*b为数组，在a的第1个元素（从第0个算起）的位置插入b的第3个元素到第5个元素（不包括b+6），如       b为1,2,3,4,5,9,8，插入元素后为1,4,5,9,2,3,4,5,9,8*/</span>   （<span class="token number">14</span>）a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回a中元素的个数；</span>   （<span class="token number">15</span>）a<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回a在内存中总共可以容纳的元素个数</span>   （<span class="token number">16</span>）a<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将a的现有元素个数调至10个，多则删，少则补，其值随机</span>   （<span class="token number">17</span>）a<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将a的现有元素个数调至10个，多则删，少则补，其值为2</span>   （<span class="token number">18</span>）a<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*将a的容量（capacity）扩充至100，也就是说现在测a.capacity();的时候返回值是100.这种操    作只有在需要给a添加大量数据的时候才显得有意义，因为这将避免内存多次容量扩充操作（当a的容量    不足时电脑会自动扩容，当然这必然降低性能） */</span>   （<span class="token number">19</span>）a<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//b为向量，将a中的元素和b中的元素进行整体性交换</span>   （<span class="token number">20</span>）a<span class="token operator">==</span>b<span class="token punctuation">;</span> <span class="token comment">//b为向量，向量的比较操作还有!=,>=,&lt;=,>,&lt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、赋值操作"><a href="#三、赋值操作" class="headerlink" title="三、赋值操作"></a>三、赋值操作</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//利用迭代器</span><span class="token keyword">void</span> <span class="token function">cz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> b<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">c</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1,2,3,4</span><span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">&lt;</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">/*vector&lt;int> d;for(int i=0;i&lt;c.size();i++)d.push_back(c.)*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结果如下-1"><a href="#结果如下-1" class="headerlink" title="结果如下"></a>结果如下</h4><p><img src="/images/c-vector%E6%95%B4%E7%90%86/image-20220118200843007.png"></p><h3 id="四、几种重要的算法"><a href="#四、几种重要的算法" class="headerlink" title="四、几种重要的算法"></a>四、几种重要的算法</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">几种重要的算法，使用时需要包含头文件：#include<span class="token operator">&lt;</span>algorithm<span class="token operator">></span>（<span class="token number">1</span>）<span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//对a中的从a.begin()（包括它）到a.end()（不包括它）的元素进行从小到大排列</span>（<span class="token number">2</span>）<span class="token function">reverse</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/*对a中的从a.begin()（包括它）到a.end()（不包括它）的元素倒置，但不排列    如a中元素为1,3,2,4,倒置后为4,2,3,1*/</span>（<span class="token number">3</span>）<span class="token function">copy</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/*把a中的从a.begin()（包括它）到a.end()（不包括它）的元素复制到b中，    从b.begin()+1的位置（包括它）开始复制，覆盖掉原有元素*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">cz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//init </span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">b</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"b容器初始内容:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>     <span class="token comment">//排序 </span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"排序后的b容器:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//默认升序，也可以加个cmp函数进行降序 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//逆序 </span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"逆序后的b容器:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token function">reverse</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将b容器的所有值进行倒置 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//初始化c容器 </span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">c</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"c容器初始内容:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//复制</span><span class="token function">copy</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将b容器的前3个值，复制到c容器的第一个数之后</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"复制后的c容器:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//因为c的长度为2，所以结果为1，9 </span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//查找 vector本身是没有find这一方法，其find是依靠algorithm来实现的</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator loc<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>loc<span class="token operator">!=</span>b<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>loc<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"can not find"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结果如下-2"><a href="#结果如下-2" class="headerlink" title="结果如下"></a>结果如下</h4><p><img src="/images/c-vector%E6%95%B4%E7%90%86/image-20220118203107350.png"></p><p>参考内容：</p><p><a href="https://blog.csdn.net/wkq0825/article/details/82255984">https://blog.csdn.net/wkq0825/article/details/82255984</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA乙级1055 毕业照</title>
      <link href="/2022/01/18/PTA%E4%B9%99%E7%BA%A71055-%E6%AF%95%E4%B8%9A%E7%85%A7/"/>
      <url>/2022/01/18/PTA%E4%B9%99%E7%BA%A71055-%E6%AF%95%E4%B8%9A%E7%85%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><center>1055 集体照 (25 分)</center><p>拍集体照时队形很重要，这里对给定的 <em>N</em> 个人 <em>K</em> 排的队形设计排队规则如下：</p><ul><li>每排人数为 <em>N</em>/<em>K</em>（向下取整），多出来的人全部站在最后一排；</li><li>后排所有人的个子都不比前排任何人矮；</li><li>每排中最高者站中间（中间位置为 <em>m</em>/2+1，其中 <em>m</em> 为该排人数，除法向下取整）；</li><li>每排其他人以中间人为轴，按身高非增序，先右后左交替入队站在中间人的两侧（例如5人身高为190、188、186、175、170，则队形为175、188、190、186、170。这里假设你面对拍照者，所以你的左边是中间人的右边）；</li><li>若多人身高相同，则按名字的字典序升序排列。这里保证无重名。</li></ul><p>现给定一组拍照人，请编写程序输出他们的队形。</p><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>每个输入包含 1 个测试用例。每个测试用例第 1 行给出两个正整数 <em>N</em>（≤104，总人数）和 <em>K</em>（≤10，总排数）。随后 <em>N</em> 行，每行给出一个人的名字（不包含空格、长度不超过 8 个英文字母）和身高（[30, 300] 区间内的整数）。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>输出拍照的队形。即K排人名，其间以空格分隔，行末不得有多余空格。注意：假设你面对拍照者，后排的人输出在上方，前排输出在下方。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><pre class="line-numbers language-in" data-language="in"><code class="language-in">10 3Tom 188Mike 170Eva 168Tim 160Joe 190Ann 168Bob 175Nick 186Amy 160John 159<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><pre class="line-numbers language-out" data-language="out"><code class="language-out">Bob Tom Joe NickAnn Mike EvaTim Amy John<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3>二、思路：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">先把身高利用<span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数进行降序，如果身高相同再利用<span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数进行比较<span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">student</span> s1<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">student</span> s2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>h<span class="token operator">></span>s2<span class="token punctuation">.</span>h<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//如果身高相同，就按名字的字典序升序排列 </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>h<span class="token operator">==</span>s2<span class="token punctuation">.</span>h<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>当然也可以直接精简为：<span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">student</span> s1<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">student</span> s2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> s1<span class="token punctuation">.</span>h<span class="token operator">!=</span>s2<span class="token punctuation">.</span>h<span class="token operator">?</span>s1<span class="token punctuation">.</span>h<span class="token operator">></span>s2<span class="token punctuation">.</span>h<span class="token operator">:</span>s1<span class="token punctuation">.</span>name<span class="token operator">&lt;</span>s2<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>先考虑两种特殊的情况，就是k<span class="token operator">==</span><span class="token number">1</span>或者n<span class="token operator">&lt;</span>k的情况，这时候他们都在一排上然后先输出最后一排，最高那一排的情况再依次向前输出每次都要先确定最高的那个人的位置最后一排的位置是 <span class="token punctuation">(</span>n<span class="token operator">%</span>k<span class="token operator">+</span>n<span class="token operator">/</span>k<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span>前面的位置是：i<span class="token operator">+</span>n<span class="token operator">/</span>k<span class="token operator">/</span><span class="token number">2</span>以下是未通过的代码：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">inf</span> <span class="token expression"><span class="token number">0x3f3f3f3f</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxn</span> <span class="token expression"><span class="token number">10010</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span>string s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">&#123;</span>string name<span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>stu<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">student</span> s1<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">student</span> s2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>h<span class="token operator">></span>s2<span class="token punctuation">.</span>h<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//如果身高相同，就按名字的字典序升序排列 </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>h<span class="token operator">==</span>s2<span class="token punctuation">.</span>h<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//return s1.h!=s2.h?s1.h>s2.h:s1.name&lt;s2.name;可以这么精简 </span><span class="token punctuation">&#125;</span><span class="token comment">//输出最后一排 </span><span class="token keyword">void</span> <span class="token function">printlast</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> la<span class="token operator">=</span>n<span class="token operator">%</span>k<span class="token operator">+</span>n<span class="token operator">/</span>k<span class="token punctuation">;</span>   <span class="token comment">//确定最后一排的人数 </span><span class="token keyword">int</span> t<span class="token operator">=</span>la<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//确定最后一排最大数的位置 </span>s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token keyword">int</span> tail<span class="token operator">=</span>t<span class="token punctuation">,</span>head<span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>la<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>head<span class="token operator">--</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>tail<span class="token operator">++</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>la<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>la<span class="token punctuation">]</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//依次往前输出 </span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">+=</span>n<span class="token operator">/</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> t<span class="token operator">=</span>i<span class="token operator">+</span>n<span class="token operator">/</span>k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//确定一排中最大数的位置 </span>s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token keyword">int</span> tail<span class="token operator">=</span>t<span class="token punctuation">,</span>head<span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//判断i+1的奇偶,用于保证先左后右 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token operator">+</span>n<span class="token operator">/</span>k<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>head<span class="token operator">--</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>tail<span class="token operator">++</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>head<span class="token operator">--</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>tail<span class="token operator">++</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token operator">=</span>i<span class="token punctuation">;</span>d<span class="token operator">&lt;</span>i<span class="token operator">+</span>n<span class="token operator">/</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>d<span class="token operator">++</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token operator">/</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>n<span class="token operator">>></span>k<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token operator">>></span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>h<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token function">sort</span><span class="token punctuation">(</span>stu<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>stu<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据身高降序 </span><span class="token comment">/*cout&lt;&lt;endl;for(int i=1;i&lt;=n;i++) cout&lt;&lt;stu[i].name&lt;&lt;" "&lt;&lt;stu[i].h&lt;&lt;endl;cout&lt;&lt;endl;*/</span><span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>n<span class="token operator">&lt;</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断特殊情况 </span><span class="token keyword">int</span> t<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token keyword">int</span> tail<span class="token operator">=</span>t<span class="token punctuation">,</span>head<span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>head<span class="token operator">--</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>tail<span class="token operator">++</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token operator">=</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printlast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">%</span>k<span class="token operator">+</span>n<span class="token operator">/</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、网上搜了下别人的代码，简单易懂"><a href="#三、网上搜了下别人的代码，简单易懂" class="headerlink" title="三、网上搜了下别人的代码，简单易懂"></a>三、网上搜了下别人的代码，简单易懂</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">&#123;</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> height<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">node</span> a<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">node</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>height <span class="token operator">!=</span> b<span class="token punctuation">.</span>height <span class="token operator">?</span> a<span class="token punctuation">.</span>height <span class="token operator">></span> b<span class="token punctuation">.</span>height <span class="token operator">:</span> a<span class="token punctuation">.</span>name <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> k<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>node<span class="token operator">></span> <span class="token function">stu</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">>></span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>height<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stu<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> row <span class="token operator">=</span> k<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>row <span class="token operator">==</span> k<span class="token punctuation">)</span>            m <span class="token operator">=</span> n <span class="token operator">-</span> n <span class="token operator">/</span> k <span class="token operator">*</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            m <span class="token operator">=</span> n <span class="token operator">/</span> k<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">ans</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span>m <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> stu<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token comment">// 左边一列</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> m <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t <span class="token operator">+</span> m<span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>            ans<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token comment">// 右边一列</span>        j <span class="token operator">=</span> m <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t <span class="token operator">+</span> m<span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>            ans<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token comment">// 输出当前排</span>        cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        t <span class="token operator">=</span> t <span class="token operator">+</span> m<span class="token punctuation">;</span>        row<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>源：https<span class="token operator">:</span><span class="token comment">//blog.csdn.net/liuchuo/article/details/51994263</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
